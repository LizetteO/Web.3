[{"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/src/constants.ts":"1","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/src/default_validator.ts":"2","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/src/errors.ts":"3","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/src/formats.ts":"4","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/src/index.ts":"5","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/src/types.ts":"6","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/src/utils.ts":"7","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/src/validation/abi.ts":"8","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/src/validation/address.ts":"9","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/src/validation/block.ts":"10","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/src/validation/bloom.ts":"11","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/src/validation/boolean.ts":"12","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/src/validation/bytes.ts":"13","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/src/validation/eth.ts":"14","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/src/validation/filter.ts":"15","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/src/validation/index.ts":"16","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/src/validation/numbers.ts":"17","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/src/validation/object.ts":"18","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/src/validation/string.ts":"19","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/src/validation/topic.ts":"20","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/src/validator.ts":"21","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/src/web3_validator.ts":"22","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/test/fixtures/abi_to_json_schema.ts":"23","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/test/fixtures/errors.ts":"24","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/test/fixtures/validation.ts":"25","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/test/integration/void.test.ts":"26","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/test/unit/convert_to_zod.test.ts":"27","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/test/unit/default_validator.test.ts":"28","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/test/unit/error.test.ts":"29","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/test/unit/index.test.ts":"30","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/test/unit/utils.test.ts":"31","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/test/unit/validation/address.test.ts":"32","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/test/unit/validation/block.test.ts":"33","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/test/unit/validation/bloom.test.ts":"34","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/test/unit/validation/boolean.test.ts":"35","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/test/unit/validation/bytes.test.ts":"36","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/test/unit/validation/eth.test.ts":"37","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/test/unit/validation/filter.test.ts":"38","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/test/unit/validation/numbers.test.ts":"39","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/test/unit/validation/object.test.ts":"40","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/test/unit/validation/string.test.ts":"41","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/test/unit/validation/topic.test.ts":"42","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/test/unit/validator.test.ts":"43","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/test/unit/web3_validator.test.ts":"44","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/test/unit/web3_validator_tuples.test.ts":"45"},{"size":759,"mtime":1678154646188,"results":"46","hashOfConfig":"47"},{"size":759,"mtime":1685575123102,"results":"48","hashOfConfig":"47"},{"size":1371,"mtime":1689124114282,"results":"49","hashOfConfig":"47"},{"size":2646,"mtime":1697727353188,"results":"50","hashOfConfig":"47"},{"size":901,"mtime":1685575123103,"results":"51","hashOfConfig":"47"},{"size":4153,"mtime":1689548815762,"results":"52","hashOfConfig":"47"},{"size":14564,"mtime":1713818627482,"results":"53","hashOfConfig":"47"},{"size":1010,"mtime":1692381974538,"results":"54","hashOfConfig":"47"},{"size":2707,"mtime":1704729547061,"results":"55","hashOfConfig":"47"},{"size":1262,"mtime":1685575123103,"results":"56","hashOfConfig":"47"},{"size":3520,"mtime":1685575123103,"results":"57","hashOfConfig":"47"},{"size":1209,"mtime":1689610549094,"results":"58","hashOfConfig":"47"},{"size":2236,"mtime":1713221660650,"results":"59","hashOfConfig":"47"},{"size":1199,"mtime":1685575123104,"results":"60","hashOfConfig":"47"},{"size":2247,"mtime":1688764157602,"results":"61","hashOfConfig":"47"},{"size":974,"mtime":1685575123104,"results":"62","hashOfConfig":"47"},{"size":3680,"mtime":1697485443904,"results":"63","hashOfConfig":"47"},{"size":1172,"mtime":1683162042543,"results":"64","hashOfConfig":"47"},{"size":3138,"mtime":1685575123104,"results":"65","hashOfConfig":"47"},{"size":1339,"mtime":1685575123104,"results":"66","hashOfConfig":"47"},{"size":5915,"mtime":1711449453868,"results":"67","hashOfConfig":"47"},{"size":2056,"mtime":1689124114283,"results":"68","hashOfConfig":"47"},{"size":42248,"mtime":1713818627483,"results":"69","hashOfConfig":"70"},{"size":1329,"mtime":1689124114283,"results":"71","hashOfConfig":"70"},{"size":29955,"mtime":1713221660651,"results":"72","hashOfConfig":"70"},{"size":746,"mtime":1709764617086,"results":"73","hashOfConfig":"70"},{"size":1727,"mtime":1689220009177,"results":"74","hashOfConfig":"70"},{"size":947,"mtime":1678154646192,"results":"75","hashOfConfig":"70"},{"size":1899,"mtime":1689124114284,"results":"76","hashOfConfig":"70"},{"size":1148,"mtime":1678154646192,"results":"77","hashOfConfig":"70"},{"size":4400,"mtime":1683162042543,"results":"78","hashOfConfig":"70"},{"size":1468,"mtime":1678154646192,"results":"79","hashOfConfig":"70"},{"size":2046,"mtime":1678154646193,"results":"80","hashOfConfig":"70"},{"size":2455,"mtime":1678154646193,"results":"81","hashOfConfig":"70"},{"size":1196,"mtime":1689610548350,"results":"82","hashOfConfig":"70"},{"size":2134,"mtime":1683162042543,"results":"83","hashOfConfig":"70"},{"size":1221,"mtime":1678154646193,"results":"84","hashOfConfig":"70"},{"size":1627,"mtime":1683162042543,"results":"85","hashOfConfig":"70"},{"size":3793,"mtime":1678154646193,"results":"86","hashOfConfig":"70"},{"size":976,"mtime":1681350953493,"results":"87","hashOfConfig":"70"},{"size":4705,"mtime":1683162042544,"results":"88","hashOfConfig":"70"},{"size":1713,"mtime":1681350953493,"results":"89","hashOfConfig":"70"},{"size":3802,"mtime":1689124114285,"results":"90","hashOfConfig":"70"},{"size":5059,"mtime":1711449453870,"results":"91","hashOfConfig":"70"},{"size":2283,"mtime":1685133140880,"results":"92","hashOfConfig":"70"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1e28l1x",{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114"},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","suppressedMessages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151"},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","suppressedMessages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","suppressedMessages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"w0c4eo",{"filePath":"164","messages":"165","suppressedMessages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","suppressedMessages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","suppressedMessages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","suppressedMessages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","suppressedMessages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","suppressedMessages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182"},{"filePath":"183","messages":"184","suppressedMessages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","suppressedMessages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"189","messages":"190","suppressedMessages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"192","messages":"193","suppressedMessages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","suppressedMessages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"198","messages":"199","suppressedMessages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"201","messages":"202","suppressedMessages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"204","messages":"205","suppressedMessages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"207","messages":"208","suppressedMessages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"210","messages":"211","suppressedMessages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"213","messages":"214","suppressedMessages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"216","messages":"217","suppressedMessages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"219","messages":"220","suppressedMessages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"222","messages":"223","suppressedMessages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"225","messages":"226","suppressedMessages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"228","messages":"229","suppressedMessages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231"},"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/src/constants.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/src/default_validator.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/src/errors.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/src/formats.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/src/index.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/src/types.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/src/utils.ts",["232"],["233","234","235","236"],"﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { InvalidBytesError, InvalidNumberError } from 'web3-errors';\nimport { VALID_ETH_BASE_TYPES } from './constants.js';\nimport {\n\tFullValidationSchema,\n\tJsonSchema,\n\tShortValidationSchema,\n\tValidationSchemaInput,\n\tValidInputTypes,\n} from './types.js';\nimport { isAbiParameterSchema } from './validation/abi.js';\nimport { isHexStrict } from './validation/string.js';\nimport { Web3ValidatorError } from './errors.js';\n\nconst extraTypes = ['hex', 'number', 'blockNumber', 'blockNumberOrTag', 'filter', 'bloom'];\n\nexport const parseBaseType = <T = typeof VALID_ETH_BASE_TYPES[number]>(\n\ttype: string,\n): {\n\tbaseType?: T;\n\tbaseTypeSize: number | undefined;\n\tarraySizes: number[];\n\tisArray: boolean;\n} => {\n\t// Remove all empty spaces to avoid any parsing issue.\n\tlet strippedType = type.replace(/ /, '');\n\tlet baseTypeSize: number | undefined;\n\tlet isArray = false;\n\tlet arraySizes: number[] = [];\n\n\tif (type.includes('[')) {\n\t\t// Extract the array type\n\t\tstrippedType = strippedType.slice(0, strippedType.indexOf('['));\n\t\t// Extract array indexes\n\t\tarraySizes = [...type.matchAll(/(?:\\[(\\d*)\\])/g)]\n\t\t\t.map(match => parseInt(match[1], 10))\n\t\t\t.map(size => (Number.isNaN(size) ? -1 : size));\n\n\t\tisArray = arraySizes.length > 0;\n\t}\n\n\tif (VALID_ETH_BASE_TYPES.includes(strippedType)) {\n\t\treturn { baseType: strippedType as unknown as T, isArray, baseTypeSize, arraySizes };\n\t}\n\n\tif (strippedType.startsWith('int')) {\n\t\tbaseTypeSize = parseInt(strippedType.substring(3), 10);\n\t\tstrippedType = 'int';\n\t} else if (strippedType.startsWith('uint')) {\n\t\tbaseTypeSize = parseInt(type.substring(4), 10);\n\t\tstrippedType = 'uint';\n\t} else if (strippedType.startsWith('bytes')) {\n\t\tbaseTypeSize = parseInt(strippedType.substring(5), 10);\n\t\tstrippedType = 'bytes';\n\t} else {\n\t\treturn { baseType: undefined, isArray: false, baseTypeSize: undefined, arraySizes };\n\t}\n\n\treturn { baseType: strippedType as unknown as T, isArray, baseTypeSize, arraySizes };\n};\n\nconst convertEthType = (\n\ttype: string,\n\tparentSchema: JsonSchema = {},\n): { format?: string; required?: boolean } => {\n\tconst typePropertyPresent = Object.keys(parentSchema).includes('type');\n\n\tif (typePropertyPresent) {\n\t\tthrow new Web3ValidatorError([\n\t\t\t{\n\t\t\t\tkeyword: 'eth',\n\t\t\t\tmessage: 'Either \"eth\" or \"type\" can be presented in schema',\n\t\t\t\tparams: { eth: type },\n\t\t\t\tinstancePath: '',\n\t\t\t\tschemaPath: '',\n\t\t\t},\n\t\t]);\n\t}\n\n\tconst { baseType, baseTypeSize } = parseBaseType(type);\n\n\tif (!baseType && !extraTypes.includes(type)) {\n\t\tthrow new Web3ValidatorError([\n\t\t\t{\n\t\t\t\tkeyword: 'eth',\n\t\t\t\tmessage: `Eth data type \"${type}\" is not valid`,\n\t\t\t\tparams: { eth: type },\n\t\t\t\tinstancePath: '',\n\t\t\t\tschemaPath: '',\n\t\t\t},\n\t\t]);\n\t}\n\n\tif (baseType) {\n\t\tif (baseType === 'tuple') {\n\t\t\tthrow new Error('\"tuple\" type is not implemented directly.');\n\t\t}\n\t\treturn { format: `${baseType}${baseTypeSize ?? ''}`, required: true };\n\t}\n\tif (type) {\n\t\treturn { format: type, required: true };\n\t}\n\n\treturn {};\n};\n\nexport const abiSchemaToJsonSchema = (\n\tabis: ShortValidationSchema | FullValidationSchema,\n\tlevel = '/0',\n) => {\n\tconst schema: JsonSchema = {\n\t\ttype: 'array',\n\t\titems: [],\n\t\tmaxItems: abis.length,\n\t\tminItems: abis.length,\n\t};\n\n\tfor (const [index, abi] of abis.entries()) {\n\t\t// eslint-disable-next-line no-nested-ternary\n\t\tlet abiType!: string;\n\t\tlet abiName!: string;\n\t\tlet abiComponents: ShortValidationSchema | FullValidationSchema | undefined = [];\n\n\t\t// If it's a complete Abi Parameter\n\t\t// e.g. {name: 'a', type: 'uint'}\n\t\tif (isAbiParameterSchema(abi)) {\n\t\t\tabiType = abi.type;\n\t\t\tabiName = abi.name || `${level}/${index}`;\n\t\t\tabiComponents = abi.components as FullValidationSchema;\n\t\t\t// If its short form string value e.g. ['uint']\n\t\t} else if (typeof abi === 'string') {\n\t\t\tabiType = abi;\n\t\t\tabiName = `${level}/${index}`;\n\n\t\t\t// If it's provided in short form of tuple e.g. [['uint', 'string']]\n\t\t} else if (Array.isArray(abi)) {\n\t\t\t// If its custom tuple e.g. ['tuple[2]', ['uint', 'string']]\n\t\t\tif (\n\t\t\t\tabi[0] &&\n\t\t\t\ttypeof abi[0] === 'string' &&\n\t\t\t\tabi[0].startsWith('tuple') &&\n\t\t\t\t!Array.isArray(abi[0]) &&\n\t\t\t\tabi[1] &&\n\t\t\t\tArray.isArray(abi[1])\n\t\t\t) {\n\t\t\t\t// eslint-disable-next-line prefer-destructuring\n\t\t\t\tabiType = abi[0];\n\t\t\t\tabiName = `${level}/${index}`;\n\t\t\t\tabiComponents = abi[1] as ReadonlyArray<ShortValidationSchema>;\n\t\t\t} else {\n\t\t\t\tabiType = 'tuple';\n\t\t\t\tabiName = `${level}/${index}`;\n\t\t\t\tabiComponents = abi;\n\t\t\t}\n\t\t}\n\n\t\tconst { baseType, isArray, arraySizes } = parseBaseType(abiType);\n\n\t\tlet childSchema: JsonSchema;\n\t\tlet lastSchema = schema;\n\t\tfor (let i = arraySizes.length - 1; i > 0; i -= 1) {\n\t\t\tchildSchema = {\n\t\t\t\ttype: 'array',\n\t\t\t\t$id: abiName,\n\t\t\t\titems: [],\n\t\t\t\tmaxItems: arraySizes[i],\n\t\t\t\tminItems: arraySizes[i],\n\t\t\t};\n\n\t\t\tif (arraySizes[i] < 0) {\n\t\t\t\tdelete childSchema.maxItems;\n\t\t\t\tdelete childSchema.minItems;\n\t\t\t}\n\n\t\t\t// lastSchema.items is a Schema, concat with 'childSchema'\n\t\t\tif (!Array.isArray(lastSchema.items)) {\n\t\t\t\tlastSchema.items = [lastSchema.items as JsonSchema, childSchema];\n\t\t\t} // lastSchema.items is an empty Scheme array, set it to 'childSchema'\n\t\t\telse if (lastSchema.items.length === 0) {\n\t\t\t\tlastSchema.items = [childSchema];\n\t\t\t} // lastSchema.items is a non-empty Scheme array, append 'childSchema'\n\t\t\telse {\n\t\t\t\tlastSchema.items.push(childSchema);\n\t\t\t}\n\t\t\tlastSchema = childSchema;\n\t\t}\n\n\t\tif (baseType === 'tuple' && !isArray) {\n\t\t\tconst nestedTuple = abiSchemaToJsonSchema(abiComponents, abiName);\n\t\t\tnestedTuple.$id = abiName;\n\t\t\t(lastSchema.items as JsonSchema[]).push(nestedTuple);\n\t\t} else if (baseType === 'tuple' && isArray) {\n            const arraySize = arraySizes[0];\n            const item: JsonSchema = {\n                type: 'array',\n                $id: abiName,\n                items: abiSchemaToJsonSchema(abiComponents, abiName),\n                ...(arraySize >= 0 && { minItems: arraySize, maxItems: arraySize }),\n            };\n\n            (lastSchema.items as JsonSchema[]).push(item);\n\t\t} else if (isArray) {\n\t\t    const arraySize = arraySizes[0];\n            const item: JsonSchema = {\n                type: 'array',\n                $id: abiName,\n                items: convertEthType(abiType),\n                ...(arraySize >= 0 && { minItems: arraySize, maxItems: arraySize }),\n            };\n\n            (lastSchema.items as JsonSchema[]).push(item);\n\t\t} else if (Array.isArray(lastSchema.items)) {\n\t\t\t// Array of non-tuple items\n\t\t\tlastSchema.items.push({ $id: abiName, ...convertEthType(abiType) });\n\t\t} else {\n\t\t\t// Nested object\n\t\t\t(lastSchema.items as JsonSchema[]).push({\n\t\t\t\t$id: abiName,\n\t\t\t\t...convertEthType(abiType),\n\t\t\t});\n\t\t}\n\t\tlastSchema = schema;\n\t}\n\n\treturn schema;\n};\n\nexport const ethAbiToJsonSchema = (abis: ValidationSchemaInput) => abiSchemaToJsonSchema(abis);\n\nexport const fetchArrayElement = (data: Array<unknown>, level: number): unknown => {\n\tif (level === 1) {\n\t\treturn data;\n\t}\n\n\treturn fetchArrayElement(data[0] as Array<unknown>, level - 1);\n};\n\nexport const transformJsonDataToAbiFormat = (\n\tabis: FullValidationSchema,\n\tdata: ReadonlyArray<unknown> | Record<string, unknown>,\n\ttransformedData?: Array<unknown>,\n): Array<unknown> => {\n\tconst newData: Array<unknown> = [];\n\n\tfor (const [index, abi] of abis.entries()) {\n\t\t// eslint-disable-next-line no-nested-ternary\n\t\tlet abiType!: string;\n\t\tlet abiName!: string;\n\t\tlet abiComponents: ShortValidationSchema | FullValidationSchema | undefined = [];\n\n\t\t// If it's a complete Abi Parameter\n\t\t// e.g. {name: 'a', type: 'uint'}\n\t\tif (isAbiParameterSchema(abi)) {\n\t\t\tabiType = abi.type;\n\t\t\tabiName = abi.name;\n\t\t\tabiComponents = abi.components as FullValidationSchema;\n\t\t\t// If its short form string value e.g. ['uint']\n\t\t} else if (typeof abi === 'string') {\n\t\t\tabiType = abi;\n\n\t\t\t// If it's provided in short form of tuple e.g. [['uint', 'string']]\n\t\t} else if (Array.isArray(abi)) {\n\t\t\t// If its custom tuple e.g. ['tuple[2]', ['uint', 'string']]\n\t\t\tif (abi[1] && Array.isArray(abi[1])) {\n\t\t\t\tabiType = abi[0] as string;\n\t\t\t\tabiComponents = abi[1] as ReadonlyArray<ShortValidationSchema>;\n\t\t\t} else {\n\t\t\t\tabiType = 'tuple';\n\t\t\t\tabiComponents = abi;\n\t\t\t}\n\t\t}\n\n\t\tconst { baseType, isArray, arraySizes } = parseBaseType(abiType);\n\t\tconst dataItem = Array.isArray(data)\n\t\t\t? (data as Array<unknown>)[index]\n\t\t\t: (data as Record<string, unknown>)[abiName];\n\n\t\tif (baseType === 'tuple' && !isArray) {\n\t\t\tnewData.push(\n\t\t\t\ttransformJsonDataToAbiFormat(\n\t\t\t\t\tabiComponents as FullValidationSchema,\n\t\t\t\t\tdataItem as Array<unknown>,\n\t\t\t\t\ttransformedData,\n\t\t\t\t),\n\t\t\t);\n\t\t} else if (baseType === 'tuple' && isArray) {\n\t\t\tconst tupleData = [];\n\t\t\tfor (const tupleItem of dataItem as Array<unknown>) {\n\t\t\t\t// Nested array\n\t\t\t\tif (arraySizes.length > 1) {\n\t\t\t\t\tconst nestedItems = fetchArrayElement(\n\t\t\t\t\t\ttupleItem as Array<unknown>,\n\t\t\t\t\t\tarraySizes.length - 1,\n\t\t\t\t\t);\n\t\t\t\t\tconst nestedData = [];\n\n\t\t\t\t\tfor (const nestedItem of nestedItems as Array<unknown>) {\n\t\t\t\t\t\tnestedData.push(\n\t\t\t\t\t\t\ttransformJsonDataToAbiFormat(\n\t\t\t\t\t\t\t\tabiComponents as FullValidationSchema,\n\t\t\t\t\t\t\t\tnestedItem as Array<unknown>,\n\t\t\t\t\t\t\t\ttransformedData,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\ttupleData.push(nestedData);\n\t\t\t\t} else {\n\t\t\t\t\ttupleData.push(\n\t\t\t\t\t\ttransformJsonDataToAbiFormat(\n\t\t\t\t\t\t\tabiComponents as FullValidationSchema,\n\t\t\t\t\t\t\ttupleItem as Array<unknown>,\n\t\t\t\t\t\t\ttransformedData,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\tnewData.push(tupleData);\n\t\t} else {\n\t\t\tnewData.push(dataItem);\n\t\t}\n\t}\n\n\t// Have to reassign before pushing to transformedData\n\t// eslint-disable-next-line no-param-reassign\n\ttransformedData = transformedData ?? [];\n\ttransformedData.push(...newData);\n\n\treturn transformedData;\n};\n\n/**\n * Code points to int\n */\n\nexport const codePointToInt = (codePoint: number): number => {\n\tif (codePoint >= 48 && codePoint <= 57) {\n\t\t/* ['0'..'9'] -> [0..9] */\n\t\treturn codePoint - 48;\n\t}\n\n\tif (codePoint >= 65 && codePoint <= 70) {\n\t\t/* ['A'..'F'] -> [10..15] */\n\t\treturn codePoint - 55;\n\t}\n\n\tif (codePoint >= 97 && codePoint <= 102) {\n\t\t/* ['a'..'f'] -> [10..15] */\n\t\treturn codePoint - 87;\n\t}\n\n\tthrow new Error(`Invalid code point: ${codePoint}`);\n};\n\n/**\n * Converts value to it's number representation\n */\nexport const hexToNumber = (value: string): bigint | number => {\n\tif (!isHexStrict(value)) {\n\t\tthrow new Error('Invalid hex string');\n\t}\n\n\tconst [negative, hexValue] = value.startsWith('-') ? [true, value.slice(1)] : [false, value];\n\tconst num = BigInt(hexValue);\n\n\tif (num > Number.MAX_SAFE_INTEGER) {\n\t\treturn negative ? -num : num;\n\t}\n\n\tif (num < Number.MIN_SAFE_INTEGER) {\n\t\treturn num;\n\t}\n\n\treturn negative ? -1 * Number(num) : Number(num);\n};\n\n/**\n * Converts value to it's hex representation\n */\nexport const numberToHex = (value: ValidInputTypes): string => {\n\tif ((typeof value === 'number' || typeof value === 'bigint') && value < 0) {\n\t\treturn `-0x${value.toString(16).slice(1)}`;\n\t}\n\n\tif ((typeof value === 'number' || typeof value === 'bigint') && value >= 0) {\n\t\treturn `0x${value.toString(16)}`;\n\t}\n\n\tif (typeof value === 'string' && isHexStrict(value)) {\n\t\tconst [negative, hex] = value.startsWith('-') ? [true, value.slice(1)] : [false, value];\n\t\tconst hexValue = hex.split(/^(-)?0(x|X)/).slice(-1)[0];\n\t\treturn `${negative ? '-' : ''}0x${hexValue.replace(/^0+/, '').toLowerCase()}`;\n\t}\n\n\tif (typeof value === 'string' && !isHexStrict(value)) {\n\t\treturn numberToHex(BigInt(value));\n\t}\n\n\tthrow new InvalidNumberError(value);\n};\n\n/**\n * Adds a padding on the left of a string, if value is a integer or bigInt will be converted to a hex string.\n */\nexport const padLeft = (value: ValidInputTypes, characterAmount: number, sign = '0'): string => {\n\tif (typeof value === 'string' && !isHexStrict(value)) {\n\t\treturn value.padStart(characterAmount, sign);\n\t}\n\n\tconst hex = typeof value === 'string' && isHexStrict(value) ? value : numberToHex(value);\n\n\tconst [prefix, hexValue] = hex.startsWith('-') ? ['-0x', hex.slice(3)] : ['0x', hex.slice(2)];\n\n\treturn `${prefix}${hexValue.padStart(characterAmount, sign)}`;\n};\n\nexport function uint8ArrayToHexString(uint8Array: Uint8Array): string {\n\tlet hexString = '0x';\n\tfor (const e of uint8Array) {\n\t\tconst hex = e.toString(16);\n\t\thexString += hex.length === 1 ? `0${hex}` : hex;\n\t}\n\treturn hexString;\n}\n\n// for optimized technique for hex to bytes conversion\nconst charCodeMap = {\n\tzero: 48,\n\tnine: 57,\n\tA: 65,\n\tF: 70,\n\ta: 97,\n\tf: 102,\n  } as const\n\n  function charCodeToBase16(char: number) {\n\tif (char >= charCodeMap.zero && char <= charCodeMap.nine)\n\t  return char - charCodeMap.zero\n\tif (char >= charCodeMap.A && char <= charCodeMap.F)\n\t  return char - (charCodeMap.A - 10)\n\tif (char >= charCodeMap.a && char <= charCodeMap.f)\n\t  return char - (charCodeMap.a - 10)\n\treturn undefined\n  }\n\nexport function hexToUint8Array(hex: string): Uint8Array {\n\tlet offset = 0;\n\tif (hex.startsWith('0') && (hex[1] === 'x' || hex[1] === 'X')) {\n\t\toffset = 2;\n\t}\n\tif (hex.length % 2 !== 0) {\n\t\tthrow new InvalidBytesError(`hex string has odd length: ${hex}`);\n\t}\n\tconst length = (hex.length - offset) / 2;\n\tconst bytes = new Uint8Array(length);\n\tfor (let index = 0, j = offset; index < length; index+=1) {\n\t  // eslint-disable-next-line no-plusplus\n\t  const nibbleLeft = charCodeToBase16(hex.charCodeAt(j++))\n\t  // eslint-disable-next-line no-plusplus\n\t  const nibbleRight = charCodeToBase16(hex.charCodeAt(j++))\n\t  if (nibbleLeft === undefined || nibbleRight === undefined) {\n\t\tthrow new InvalidBytesError(\n\t\t\t`Invalid byte sequence (\"${hex[j - 2]}${\n\t\t\t\thex[j - 1]\n\t\t\t  }\" in \"${hex}\").`,\n\t\t)\n\t  }\n\t  bytes[index] = nibbleLeft * 16 + nibbleRight\n\t}\n\treturn bytes\n}\n\n// @TODO: Remove this function and its usages once all sub dependencies uses version 1.3.3 or above of @noble/hashes\nexport function ensureIfUint8Array<T = any>(data: T) {\n\tif (\n\t\t!(data instanceof Uint8Array) &&\n\t\t(data as { constructor: { name: string } })?.constructor?.name === 'Uint8Array'\n\t) {\n\t\treturn Uint8Array.from(data as unknown as Uint8Array);\n\t}\n\treturn data;\n}\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/src/validation/abi.ts",[],["237"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/src/validation/address.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/src/validation/block.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/src/validation/bloom.ts",[],["238","239","240","241"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/src/validation/boolean.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/src/validation/bytes.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/src/validation/eth.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/src/validation/filter.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/src/validation/index.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/src/validation/numbers.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/src/validation/object.ts",[],["242","243"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/src/validation/string.ts",["244","245","246","247","248","249"],[],"﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { ValidInputTypes } from '../types.js';\n\n/**\n * checks input if typeof data is valid string input\n */\nexport const isString = (value: ValidInputTypes) => typeof value === 'string';\n\nexport const isHexStrict = (hex: ValidInputTypes) =>\n\ttypeof hex === 'string' && /^((-)?0x[0-9a-f]+|(0x))$/i.test(hex);\n\n/**\n * Is the string a hex string.\n *\n * @param  value\n * @param  length\n * @returns  output the string is a hex string\n */\nexport function isHexString(value: string, length?: number): boolean {\n\tif (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) return false;\n\n\tif (typeof length !== 'undefined' && length > 0 && value.length !== 2 + 2 * length)\n\t\treturn false;\n\n\treturn true;\n}\n\nexport const isHex = (hex: ValidInputTypes): boolean =>\n\ttypeof hex === 'number' ||\n\ttypeof hex === 'bigint' ||\n\t(typeof hex === 'string' && /^((-0x|0x|-)?[0-9a-f]+|(0x))$/i.test(hex));\n\nexport const isHexString8Bytes = (value: string, prefixed = true) =>\n\tprefixed ? isHexStrict(value) && value.length === 18 : isHex(value) && value.length === 16;\n\nexport const isHexString32Bytes = (value: string, prefixed = true) =>\n\tprefixed ? isHexStrict(value) && value.length === 66 : isHex(value) && value.length === 64;\n\n/**\n * Returns a `Boolean` on whether or not the a `String` starts with '0x'\n * @param str the string input value\n * @return a boolean if it is or is not hex prefixed\n * @throws if the str input is not a string\n */\nexport function isHexPrefixed(str: string): boolean {\n\tif (typeof str !== 'string') {\n\t\tthrow new Error(`[isHexPrefixed] input must be type 'string', received type ${typeof str}`);\n\t}\n\n\treturn str.startsWith('0x');\n}\n\n/**\n * Checks provided Uint8Array for leading zeroes and throws if found.\n *\n * Examples:\n *\n * Valid values: 0x1, 0x, 0x01, 0x1234\n * Invalid values: 0x0, 0x00, 0x001, 0x0001\n *\n * Note: This method is useful for validating that RLP encoded integers comply with the rule that all\n * integer values encoded to RLP must be in the most compact form and contain no leading zero bytes\n * @param values An object containing string keys and Uint8Array values\n * @throws if any provided value is found to have leading zero bytes\n */\nexport const validateNoLeadingZeroes = function (values: {\n\t[key: string]: Uint8Array | undefined;\n}) {\n\tfor (const [k, v] of Object.entries(values)) {\n\t\tif (v !== undefined && v.length > 0 && v[0] === 0) {\n\t\t\tthrow new Error(`${k} cannot have leading zeroes, received: ${v.toString()}`);\n\t\t}\n\t}\n};\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/src/validation/topic.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/src/validator.ts",[],["250","251","252"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/src/web3_validator.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/test/fixtures/abi_to_json_schema.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/test/fixtures/errors.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/test/fixtures/validation.ts",[],["253","254","255","256","257","258","259","260","261","262","263","264","265"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/test/integration/void.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/test/unit/convert_to_zod.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/test/unit/default_validator.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/test/unit/error.test.ts",["266"],[],"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { Web3ValidationErrorObject } from 'web3-types';\n\nimport { Web3ValidatorError } from '../../src/errors';\nimport {\n\tfullErrors,\n\terrorsWithInstanceNoParamsNoMessage,\n\tunspecifiedErrors,\n} from '../fixtures/errors';\n\ndescribe('Web3ValidationError', () => {\n\tit.each(fullErrors)('errors with message', (error: Web3ValidationErrorObject) => {\n\t\tconst validationError = new Web3ValidatorError([error]);\n\n\t\texpect(validationError).toBeInstanceOf(Web3ValidatorError);\n\t\texpect(validationError.message).toBe(`Web3 validator found 1 error[s]:\\n${error.message}`);\n\t});\n\n\tit.each(errorsWithInstanceNoParamsNoMessage)(\n\t\t'errors with only instance',\n\t\t(error: Web3ValidationErrorObject) => {\n\t\t\tconst validationError = new Web3ValidatorError([error]);\n\n\t\t\texpect(validationError).toBeInstanceOf(Web3ValidatorError);\n\t\t\texpect(validationError.message).toBe(\n\t\t\t\t`Web3 validator found 1 error[s]:\\nunspecified error`,\n\t\t\t);\n\t\t},\n\t);\n\n\tit.each(unspecifiedErrors)('unspecified errors', (error: Web3ValidationErrorObject) => {\n\t\tconst validationError = new Web3ValidatorError([error]);\n\n\t\texpect(validationError).toBeInstanceOf(Web3ValidatorError);\n\t\texpect(validationError.message).toBe(`Web3 validator found 1 error[s]:\\nunspecified error`);\n\t});\n});\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/test/unit/index.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/test/unit/utils.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/test/unit/validation/address.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/test/unit/validation/block.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/test/unit/validation/bloom.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/test/unit/validation/boolean.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/test/unit/validation/bytes.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/test/unit/validation/eth.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/test/unit/validation/filter.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/test/unit/validation/numbers.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/test/unit/validation/object.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/test/unit/validation/string.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/test/unit/validation/topic.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/test/unit/validator.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/test/unit/web3_validator.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-validator/test/unit/web3_validator_tuples.test.ts",["267","268"],[],"﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { Web3Validator } from '../../src/web3_validator';\n\ndescribe('web3-validator', () => {\n\tdescribe('Web3Validator', () => {\n\t\tlet validator: Web3Validator;\n\n\t\tbeforeEach(() => {\n\t\t\tvalidator = new Web3Validator();\n\t\t});\n\t\tdescribe('validate', () => {\n\t\t\tit('nested tuples', () => {\n\t\t\t\tconst schema = [['uint', 'uint'], 'uint'];\n\t\t\t\tvalidator.validate(schema, [[7, 5], 3]);\n\t\t\t});\n\t\t\tit('nested tuples deep', () => {\n\t\t\t\tconst address = '0x7ab80aeb6bb488b7f6c41c58e83ef248eb39c882';\n\n\t\t\t\tconst schema = [\n\t\t\t\t\t[\n\t\t\t\t\t\t['uint', ['uint', ['uint', ['uint', 'uint'], 'address']]],\n\t\t\t\t\t\t['uint', 'uint'],\n\t\t\t\t\t],\n\t\t\t\t\t'uint',\n\t\t\t\t];\n\t\t\t\tvalidator.validate(schema, [\n\t\t\t\t\t[\n\t\t\t\t\t\t[7, [7, [7, [7, 5], address]]],\n\t\t\t\t\t\t[7, 5],\n\t\t\t\t\t],\n\t\t\t\t\t3,\n\t\t\t\t]);\n\t\t\t});\n\t\t\tit('nested tuples deep object schema', () => {\n\t\t\t\tconst schema = {\n\t\t\t\t\ttype: 'array',\n\t\t\t\t\titems: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$id: '/0/0',\n\t\t\t\t\t\t\tformat: 'uint',\n\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'array',\n\t\t\t\t\t\t\titems: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$id: '/0/0',\n\t\t\t\t\t\t\t\t\tformat: 'uint',\n\t\t\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttype: 'array',\n\t\t\t\t\t\t\t\t\titems: [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t$id: '/0/0',\n\t\t\t\t\t\t\t\t\t\t\tformat: 'uint',\n\t\t\t\t\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t$id: '/0/1',\n\t\t\t\t\t\t\t\t\t\t\tformat: 'uint',\n\t\t\t\t\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\tmaxItems: 2,\n\t\t\t\t\t\t\t\t\tminItems: 2,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\tmaxItems: 2,\n\t\t\t\t\t\t\tminItems: 2,\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tmaxItems: 2,\n\t\t\t\t\tminItems: 2,\n\t\t\t\t};\n\t\t\t\texpect(validator.validateJSONSchema(schema, [7, [7, [7, 5]]])).toBeUndefined();\n\t\t\t});\n\t\t});\n\t});\n});\n",{"ruleId":"269","severity":1,"message":"270","line":489,"column":40,"nodeType":"271","messageId":"272","endLine":489,"endColumn":43,"suggestions":"273"},{"ruleId":"274","severity":2,"message":"275","line":163,"column":5,"nodeType":"276","messageId":"277","endLine":163,"endColumn":21,"suppressions":"278"},{"ruleId":"279","severity":2,"message":"280","line":341,"column":2,"nodeType":"281","messageId":"282","endLine":341,"endColumn":17,"suppressions":"283"},{"ruleId":"284","severity":2,"message":"285","line":473,"column":55,"nodeType":"286","messageId":"287","endLine":473,"endColumn":58,"suppressions":"288"},{"ruleId":"284","severity":2,"message":"285","line":475,"column":56,"nodeType":"286","messageId":"287","endLine":475,"endColumn":59,"suppressions":"289"},{"ruleId":"290","severity":2,"message":"291","line":20,"column":1,"nodeType":"292","endLine":20,"endColumn":50,"fix":"293","suppressions":"294"},{"ruleId":"295","severity":2,"message":"296","line":65,"column":4,"nodeType":"297","messageId":"298","endLine":66,"endColumn":8,"suppressions":"299"},{"ruleId":"295","severity":2,"message":"300","line":65,"column":6,"nodeType":"297","messageId":"298","endLine":65,"endColumn":45,"suppressions":"301"},{"ruleId":"295","severity":2,"message":"300","line":72,"column":18,"nodeType":"297","messageId":"298","endLine":72,"endColumn":33,"suppressions":"302"},{"ruleId":"295","severity":2,"message":"296","line":75,"column":8,"nodeType":"297","messageId":"298","endLine":75,"endColumn":21,"suppressions":"303"},{"ruleId":"304","severity":2,"message":"305","line":22,"column":63,"nodeType":"306","messageId":"307","endLine":22,"endColumn":67,"suppressions":"308"},{"ruleId":"309","severity":2,"message":"310","line":25,"column":33,"nodeType":"311","endLine":25,"endColumn":37,"suppressions":"312"},{"ruleId":"313","severity":1,"message":"314","line":31,"column":4,"nodeType":null,"messageId":"315","endLine":31,"endColumn":10},{"ruleId":"313","severity":1,"message":"314","line":32,"column":4,"nodeType":null,"messageId":"315","endLine":32,"endColumn":10},{"ruleId":"313","severity":1,"message":"314","line":57,"column":4,"nodeType":null,"messageId":"315","endLine":57,"endColumn":10},{"ruleId":"313","severity":1,"message":"316","line":58,"column":4,"nodeType":null,"messageId":"317","endLine":58,"endColumn":11},{"ruleId":"313","severity":1,"message":"314","line":79,"column":4,"nodeType":null,"messageId":"315","endLine":79,"endColumn":10},{"ruleId":"318","severity":1,"message":"319","line":82,"column":40,"nodeType":"320","messageId":"321","endLine":82,"endColumn":49},{"ruleId":"322","severity":2,"message":"323","line":103,"column":37,"nodeType":"281","messageId":"324","endLine":103,"endColumn":46,"suppressions":"325"},{"ruleId":"326","severity":2,"message":"327","line":128,"column":2,"nodeType":"320","messageId":"328","endLine":128,"endColumn":23,"suppressions":"329"},{"ruleId":"330","severity":2,"message":"331","line":161,"column":8,"nodeType":"332","messageId":"333","endLine":161,"endColumn":65,"suppressions":"334"},{"ruleId":"309","severity":2,"message":"310","line":33,"column":77,"nodeType":"311","endLine":33,"endColumn":81,"suppressions":"335"},{"ruleId":"309","severity":2,"message":"310","line":82,"column":56,"nodeType":"311","endLine":82,"endColumn":60,"suppressions":"336"},{"ruleId":"337","severity":2,"message":"338","line":193,"column":8,"nodeType":"339","messageId":"298","endLine":193,"endColumn":10,"suppressions":"340"},{"ruleId":"309","severity":2,"message":"310","line":233,"column":9,"nodeType":"311","endLine":233,"endColumn":13,"suppressions":"341"},{"ruleId":"309","severity":2,"message":"310","line":256,"column":8,"nodeType":"311","endLine":256,"endColumn":12,"suppressions":"342"},{"ruleId":"309","severity":2,"message":"310","line":504,"column":8,"nodeType":"311","endLine":504,"endColumn":12,"suppressions":"343"},{"ruleId":"309","severity":2,"message":"310","line":511,"column":9,"nodeType":"311","endLine":511,"endColumn":13,"suppressions":"344"},{"ruleId":"309","severity":2,"message":"310","line":525,"column":4,"nodeType":"311","endLine":525,"endColumn":8,"suppressions":"345"},{"ruleId":"309","severity":2,"message":"310","line":565,"column":4,"nodeType":"311","endLine":565,"endColumn":8,"suppressions":"346"},{"ruleId":"309","severity":2,"message":"310","line":583,"column":4,"nodeType":"311","endLine":583,"endColumn":8,"suppressions":"347"},{"ruleId":"309","severity":2,"message":"310","line":608,"column":4,"nodeType":"311","endLine":608,"endColumn":8,"suppressions":"348"},{"ruleId":"309","severity":2,"message":"310","line":616,"column":4,"nodeType":"311","endLine":616,"endColumn":8,"suppressions":"349"},{"ruleId":"309","severity":2,"message":"310","line":635,"column":4,"nodeType":"311","endLine":635,"endColumn":8,"suppressions":"350"},{"ruleId":"330","severity":1,"message":"351","line":31,"column":77,"nodeType":"352","messageId":"333","endLine":31,"endColumn":90},{"ruleId":"353","severity":1,"message":"354","line":27,"column":4,"nodeType":"355","messageId":"356","endLine":30,"endColumn":6},{"ruleId":"353","severity":1,"message":"354","line":31,"column":4,"nodeType":"355","messageId":"356","endLine":48,"endColumn":6},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["357","358"],"prefer-destructuring","Use array destructuring.","AssignmentExpression","preferDestructuring",["359"],"no-param-reassign","Assignment to function parameter 'transformedData'.","Identifier","assignmentToFunctionParam",["360"],"no-plusplus","Unary operator '++' used.","UpdateExpression","unexpectedUnaryOp",["361"],["362"],"require-extensions/require-extensions","Relative imports and exports must end with .js","ImportDeclaration",{"range":"363","text":"364"},["365"],"no-bitwise","Unexpected use of '&'.","BinaryExpression","unexpected",["366"],"Unexpected use of '<<'.",["367"],["368"],["369"],"@typescript-eslint/ban-types","Don't use `null` as a type. Use 'undefined' instead of 'null'","TSNullKeyword","bannedTypeMessage",["370"],"no-null/no-null","Use undefined instead of null","Literal",["371"],"tsdoc/syntax","tsdoc-param-tag-missing-hyphen: The @param block should be followed by a parameter name and then a hyphen","tsdoc-param-tag-missing-hyphen","tsdoc-undefined-tag: The TSDoc tag \"@return\" is not defined in this configuration","tsdoc-undefined-tag","func-names","Unexpected unnamed function.","FunctionExpression","unnamed","no-use-before-define","'Validator' was used before it was defined.","usedBeforeDefined",["372"],"class-methods-use-this","Expected 'this' to be used by class method 'convertErrors'.","missingThis",["373"],"@typescript-eslint/restrict-template-expressions","Invalid type \"unknown\" of template literal expression.","ConditionalExpression","invalidType",["374"],["375"],["376"],"@typescript-eslint/no-empty-function","Unexpected empty arrow function.","ArrowFunctionExpression",["377"],["378"],["379"],["380"],["381"],["382"],["383"],["384"],["385"],["386"],["387"],"Invalid type \"string | undefined\" of template literal expression.","MemberExpression","jest/expect-expect","Test has no assertions","CallExpression","noAssertions",{"messageId":"388","fix":"389","desc":"390"},{"messageId":"391","fix":"392","desc":"393"},{"kind":"394","justification":"395"},{"kind":"394","justification":"395"},{"kind":"394","justification":"395"},{"kind":"394","justification":"395"},[803,813],"'../types.js'",{"kind":"394","justification":"395"},{"kind":"394","justification":"395"},{"kind":"394","justification":"395"},{"kind":"394","justification":"395"},{"kind":"394","justification":"395"},{"kind":"394","justification":"395"},{"kind":"394","justification":"395"},{"kind":"394","justification":"395"},{"kind":"394","justification":"395"},{"kind":"394","justification":"395"},{"kind":"394","justification":"395"},{"kind":"394","justification":"395"},{"kind":"394","justification":"395"},{"kind":"394","justification":"395"},{"kind":"394","justification":"395"},{"kind":"394","justification":"395"},{"kind":"394","justification":"395"},{"kind":"394","justification":"395"},{"kind":"394","justification":"395"},{"kind":"394","justification":"395"},{"kind":"394","justification":"395"},{"kind":"394","justification":"395"},{"kind":"394","justification":"395"},"suggestUnknown",{"range":"396","text":"397"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"396","text":"398"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.","directive","",[14341,14344],"unknown","never"]