[{"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/src/constant.ts":"1","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/src/contract.ts":"2","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/src/encoding.ts":"3","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/src/index.ts":"4","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/src/log_subscription.ts":"5","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/src/types.ts":"6","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/src/utils.ts":"7","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/fixtures/AbiItem.ts":"8","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/fixtures/MyContract.ts":"9","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/fixtures/SimpleOverloaded.ts":"10","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/fixtures/erc20.ts":"11","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/fixtures/erc721.ts":"12","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/fixtures/storage.ts":"13","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/fixtures/system_test_utils.ts":"14","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/fixtures/unitTestFixtures.ts":"15","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/integration/contract_accesslist.test.ts":"16","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/integration/contract_clone.test.ts":"17","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/integration/contract_defaults.test.ts":"18","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/integration/contract_defaults_extra.test.ts":"19","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/integration/contract_deploy.test.ts":"20","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/integration/contract_empty_string.test.ts":"21","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/integration/contract_erc20.test.ts":"22","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/integration/contract_erc721.test.ts":"23","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/integration/contract_estimateGas_without_0x.test.ts":"24","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/integration/contract_events.test.ts":"25","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/integration/contract_filter_events.test.ts":"26","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/integration/contract_methods.test.ts":"27","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/integration/contract_methods_errors.test.ts":"28","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/integration/contract_negative_numbers.test.ts":"29","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/integration/contract_simple_overloaded.test.ts":"30","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/integration/local_account/contract_deploy.test.ts":"31","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/integration/local_account/contract_erc20.test.ts":"32","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/integration/local_account/contract_erc721.test.ts":"33","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/integration/local_account/contract_overloaded_methods.test.ts":"34","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/shared_fixtures/build/Basic.ts":"35","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/shared_fixtures/build/DeployRevert.ts":"36","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/shared_fixtures/build/ERC20Token.ts":"37","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/shared_fixtures/build/ERC721Token.ts":"38","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/shared_fixtures/build/ErrorsContract.ts":"39","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/shared_fixtures/build/Greeter.ts":"40","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/shared_fixtures/build/GreeterWithOverloading.ts":"41","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/shared_fixtures/build/MsgSender.ts":"42","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/shared_fixtures/build/MyContract.ts":"43","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/shared_fixtures/build/NegativeNumbers.ts":"44","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/shared_fixtures/utils.ts":"45","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/unit/contract.test.ts":"46","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/unit/contract_typing.test.ts":"47","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/unit/encode_event_abi.test.ts":"48","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/unit/function_overloading.test.ts":"49","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/unit/log_subscription.test.ts":"50"},{"size":710,"mtime":1695221293907,"results":"51","hashOfConfig":"52"},{"size":49272,"mtime":1713453005520,"results":"53","hashOfConfig":"52"},{"size":5256,"mtime":1712622240448,"results":"54","hashOfConfig":"52"},{"size":1708,"mtime":1702592366280,"results":"55","hashOfConfig":"52"},{"size":5445,"mtime":1695221293909,"results":"56","hashOfConfig":"52"},{"size":18454,"mtime":1712622240449,"results":"57","hashOfConfig":"52"},{"size":6616,"mtime":1702592823313,"results":"58","hashOfConfig":"52"},{"size":2422,"mtime":1707426625049,"results":"59","hashOfConfig":"60"},{"size":2061,"mtime":1700492614525,"results":"61","hashOfConfig":"60"},{"size":10184,"mtime":1686223146090,"results":"62","hashOfConfig":"60"},{"size":5221,"mtime":1678154646110,"results":"63","hashOfConfig":"60"},{"size":6087,"mtime":1678154646110,"results":"64","hashOfConfig":"60"},{"size":1287,"mtime":1678154646110,"results":"65","hashOfConfig":"60"},{"size":15907,"mtime":1713826363670,"results":"66","hashOfConfig":"60"},{"size":6928,"mtime":1678154646110,"results":"67","hashOfConfig":"60"},{"size":3087,"mtime":1707238177033,"results":"68","hashOfConfig":"60"},{"size":1769,"mtime":1678154646111,"results":"69","hashOfConfig":"60"},{"size":4238,"mtime":1679686929276,"results":"70","hashOfConfig":"60"},{"size":10021,"mtime":1710253049850,"results":"71","hashOfConfig":"60"},{"size":10066,"mtime":1713453005520,"results":"72","hashOfConfig":"60"},{"size":1627,"mtime":1705452942913,"results":"73","hashOfConfig":"60"},{"size":10535,"mtime":1711987890612,"results":"74","hashOfConfig":"60"},{"size":11027,"mtime":1705452942913,"results":"75","hashOfConfig":"60"},{"size":2960,"mtime":1702663180738,"results":"76","hashOfConfig":"60"},{"size":8809,"mtime":1705452942913,"results":"77","hashOfConfig":"60"},{"size":9238,"mtime":1695221293912,"results":"78","hashOfConfig":"60"},{"size":6493,"mtime":1707238177038,"results":"79","hashOfConfig":"60"},{"size":4590,"mtime":1707238177038,"results":"80","hashOfConfig":"60"},{"size":4851,"mtime":1688764157598,"results":"81","hashOfConfig":"60"},{"size":3887,"mtime":1695075213386,"results":"82","hashOfConfig":"60"},{"size":5264,"mtime":1700492614534,"results":"83","hashOfConfig":"60"},{"size":9037,"mtime":1695304359481,"results":"84","hashOfConfig":"60"},{"size":14209,"mtime":1697243400164,"results":"85","hashOfConfig":"60"},{"size":3901,"mtime":1705452942913,"results":"86","hashOfConfig":"60"},{"size":13544,"mtime":1700492614523,"results":"87","hashOfConfig":"60"},{"size":1016,"mtime":1700492614523,"results":"88","hashOfConfig":"60"},{"size":17276,"mtime":1700492614524,"results":"89","hashOfConfig":"60"},{"size":28948,"mtime":1700492614524,"results":"90","hashOfConfig":"60"},{"size":2740,"mtime":1700492614524,"results":"91","hashOfConfig":"60"},{"size":9395,"mtime":1700492614525,"results":"92","hashOfConfig":"60"},{"size":10792,"mtime":1702486194986,"results":"93","hashOfConfig":"60"},{"size":8367,"mtime":1700492614525,"results":"94","hashOfConfig":"60"},{"size":2061,"mtime":1700492614525,"results":"95","hashOfConfig":"60"},{"size":6610,"mtime":1700492614526,"results":"96","hashOfConfig":"60"},{"size":1920,"mtime":1678154646075,"results":"97","hashOfConfig":"60"},{"size":128041,"mtime":1712622240449,"results":"98","hashOfConfig":"60"},{"size":4102,"mtime":1710206429064,"results":"99","hashOfConfig":"60"},{"size":5713,"mtime":1695221293913,"results":"100","hashOfConfig":"60"},{"size":6773,"mtime":1712055784046,"results":"101","hashOfConfig":"60"},{"size":2655,"mtime":1702486194991,"results":"102","hashOfConfig":"60"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"7b0ixz",{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109"},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119"},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123"},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1v9exb0",{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","suppressedMessages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","suppressedMessages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","suppressedMessages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","suppressedMessages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","suppressedMessages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","suppressedMessages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","suppressedMessages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","suppressedMessages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","suppressedMessages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","suppressedMessages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","suppressedMessages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","suppressedMessages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","suppressedMessages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193"},{"filePath":"194","messages":"195","suppressedMessages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197"},{"filePath":"198","messages":"199","suppressedMessages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"201","messages":"202","suppressedMessages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"204","messages":"205","suppressedMessages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"207","messages":"208","suppressedMessages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"210","messages":"211","suppressedMessages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"213","messages":"214","suppressedMessages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"216","messages":"217","suppressedMessages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"219","messages":"220","suppressedMessages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"222","messages":"223","suppressedMessages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"225","messages":"226","suppressedMessages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"228","messages":"229","suppressedMessages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"231","messages":"232","suppressedMessages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"234","messages":"235","suppressedMessages":"236","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"237","messages":"238","suppressedMessages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"240","messages":"241","suppressedMessages":"242","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"243","messages":"244","suppressedMessages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246"},{"filePath":"247","messages":"248","suppressedMessages":"249","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"250","messages":"251","suppressedMessages":"252","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253"},{"filePath":"254","messages":"255","suppressedMessages":"256","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257"},{"filePath":"258","messages":"259","suppressedMessages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261"},"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/src/constant.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/src/contract.ts",["262","263","264"],["265","266","267","268","269","270","271","272","273","274","275","276"],"﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport {\n\tWeb3Context,\n\tWeb3EventEmitter,\n\tWeb3PromiEvent,\n\tWeb3ConfigEvent,\n\tWeb3SubscriptionManager,\n} from 'web3-core';\nimport {\n\tContractExecutionError,\n\tContractTransactionDataAndInputError,\n\tSubscriptionError,\n\tWeb3ContractError,\n} from 'web3-errors';\nimport {\n\tcreateAccessList,\n\tcall,\n\testimateGas,\n\tgetLogs,\n\tsendTransaction,\n\tdecodeEventABI,\n\tNewHeadsSubscription,\n\tALL_EVENTS,\n\tALL_EVENTS_ABI,\n\tSendTransactionEvents,\n} from 'web3-eth';\nimport {\n\tencodeEventSignature,\n\tencodeFunctionSignature,\n\tdecodeContractErrorData,\n\tisAbiErrorFragment,\n\tisAbiEventFragment,\n\tisAbiFunctionFragment,\n\tjsonInterfaceMethodToString,\n} from 'web3-eth-abi';\nimport {\n\tAbiConstructorFragment,\n\tAbiErrorFragment,\n\tAbiEventFragment,\n\tAbiFragment,\n\tAbiFunctionFragment,\n\tContractAbi,\n\tContractConstructorArgs,\n\tContractEvent,\n\tContractEvents,\n\tContractMethod,\n\tContractMethodInputParameters,\n\tContractMethodOutputParameters,\n\tAddress,\n\tBlockNumberOrTag,\n\tBlockTags,\n\tBytes,\n\tEthExecutionAPI,\n\tFilter,\n\tFilterAbis,\n\tHexString,\n\tLogsInput,\n\tMutable,\n\tContractInitOptions,\n\tNonPayableCallOptions,\n\tPayableCallOptions,\n\tDataFormat,\n\tDEFAULT_RETURN_FORMAT,\n\tNumbers,\n\tWeb3ValidationErrorObject,\n\tEventLog,\n\tContractAbiWithSignature,\n\tContractOptions,\n\tTransactionReceipt,\n\tFormatType,\n\tDecodedParams,\n} from 'web3-types';\nimport {\n\tformat,\n\tisDataFormat,\n\tkeccak256,\n\ttoChecksumAddress,\n\tisContractInitOptions,\n} from 'web3-utils';\nimport {\n\tisNullish,\n\tvalidator,\n\tutils as validatorUtils,\n\tValidationSchemaInput,\n\tWeb3ValidatorError,\n} from 'web3-validator';\nimport {\n\tdecodeMethodReturn,\n\tdecodeMethodParams,\n\tencodeEventABI,\n\tencodeMethodABI,\n} from './encoding.js';\nimport { LogsSubscription } from './log_subscription.js';\nimport {\n\tContractEventOptions,\n\tNonPayableMethodObject,\n\tNonPayableTxOptions,\n\tPayableMethodObject,\n\tPayableTxOptions,\n\tWeb3ContractContext,\n} from './types.js';\nimport {\n\tgetCreateAccessListParams,\n\tgetEstimateGasParams,\n\tgetEthTxCallParams,\n\tgetSendTxParams,\n\tisWeb3ContractContext,\n} from './utils.js';\n\ntype ContractBoundMethod<\n\tAbi extends AbiFunctionFragment,\n\tMethod extends ContractMethod<Abi> = ContractMethod<Abi>,\n> = (\n\t...args: Method['Inputs'] extends undefined | unknown ? any[] : Method['Inputs']\n) => Method['Abi']['stateMutability'] extends 'payable' | 'pure'\n\t? PayableMethodObject<Method['Inputs'], Method['Outputs']>\n\t: NonPayableMethodObject<Method['Inputs'], Method['Outputs']>;\n\nexport type ContractOverloadedMethodInputs<AbiArr extends ReadonlyArray<unknown>> = NonNullable<\n\tAbiArr extends readonly []\n\t\t? undefined\n\t\t: AbiArr extends readonly [infer A, ...infer R]\n\t\t? A extends AbiFunctionFragment\n\t\t\t? ContractMethodInputParameters<A['inputs']> | ContractOverloadedMethodInputs<R>\n\t\t\t: undefined\n\t\t: undefined\n>;\n\nexport type ContractOverloadedMethodOutputs<AbiArr extends ReadonlyArray<unknown>> = NonNullable<\n\tAbiArr extends readonly []\n\t\t? undefined\n\t\t: AbiArr extends readonly [infer A, ...infer R]\n\t\t? A extends AbiFunctionFragment\n\t\t\t? ContractMethodOutputParameters<A['outputs']> | ContractOverloadedMethodOutputs<R>\n\t\t\t: undefined\n\t\t: undefined\n>;\n\n// To avoid circular dependency between types and encoding, declared these types here.\nexport type ContractMethodsInterface<Abi extends ContractAbi> = {\n\t[MethodAbi in FilterAbis<\n\t\tAbi,\n\t\tAbiFunctionFragment & { type: 'function' }\n\t> as MethodAbi['name']]: ContractBoundMethod<MethodAbi>;\n\t// To allow users to use method signatures\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n} & { [key: string]: ContractBoundMethod<any> };\n\nexport type ContractMethodSend = Web3PromiEvent<\n\tFormatType<TransactionReceipt, DataFormat>,\n\tSendTransactionEvents<DataFormat>\n>;\nexport type ContractDeploySend<Abi extends ContractAbi> = Web3PromiEvent<\n\t// eslint-disable-next-line no-use-before-define\n\tContract<Abi>,\n\tSendTransactionEvents<DataFormat>\n>;\n\n/**\n * @hidden\n * The event object can be accessed from `myContract.events.myEvent`.\n *\n * \\> Remember: To subscribe to an event, your provider must have support for subscriptions.\n *\n * ```ts\n * const subscription = await myContract.events.MyEvent([options])\n * ```\n *\n * @param options - The options used to subscribe for the event\n * @returns - A Promise resolved with {@link LogsSubscription} object\n */\nexport type ContractBoundEvent = (options?: ContractEventOptions) => LogsSubscription;\n\n// To avoid circular dependency between types and encoding, declared these types here.\nexport type ContractEventsInterface<\n\tAbi extends ContractAbi,\n\tEvents extends ContractEvents<Abi> = ContractEvents<Abi>,\n> = {\n\t[Name in keyof Events | 'allEvents']: ContractBoundEvent;\n} & {\n\t[key: string]: ContractBoundEvent;\n};\n\n// To avoid circular dependency between types and encoding, declared these types here.\nexport type ContractEventEmitterInterface<Abi extends ContractAbi> = {\n\t[EventAbi in FilterAbis<\n\t\tAbi,\n\t\tAbiFunctionFragment & { type: 'event' }\n\t> as EventAbi['name']]: ContractEvent<EventAbi>['Inputs'];\n};\n\ntype EventParameters = Parameters<typeof encodeEventABI>[2];\n\nconst contractSubscriptions = {\n\tlogs: LogsSubscription,\n\tnewHeads: NewHeadsSubscription,\n\tnewBlockHeaders: NewHeadsSubscription,\n};\n\n/**\n * The `web3.eth.Contract` makes it easy to interact with smart contracts on the ethereum blockchain.\n * For using contract package, first install Web3 package using: `npm i web3` or `yarn add web3` based on your package manager, after that contracts features can be used as mentioned in following snippet.\n * ```ts\n *\n * import { Web3 } from 'web3';\n *\n * const web3 = new Web3('https://127.0.0.1:4545');\n * const abi = [...] as const; // your contract ABI\n *\n * let contract = new web3.eth.Contract(abi,'0xdAC17F958D2ee523a2206206994597C13D831ec7');\n * await contract.methods.balanceOf('0xdAC17F958D2ee523a2206206994597C13D831ec7').call();\n * ```\n * For using individual package install `web3-eth-contract` and `web3-core` packages using: `npm i web3-eth-contract web3-core` or `yarn add web3-eth-contract web3-core`. This is more efficient approach for building lightweight applications.\n * ```ts\n *\n * import { Web3Context } from 'web3-core';\n * import { Contract } from 'web3-eth-contract';\n *\n * const abi = [...] as const; // your contract ABI\n *\n * let contract = new web3.eth.Contract(\n * \tabi,\n * \t'0xdAC17F958D2ee523a2206206994597C13D831ec7'\n * \t new Web3Context('http://127.0.0.1:8545'));\n *\n * await contract.methods.balanceOf('0xdAC17F958D2ee523a2206206994597C13D831ec7').call();\n * ```\n * ## Generated Methods\n * Following methods are generated by web3.js contract object for each of contract functions by using its ABI.\n *\n * ### send\n * This is used to send a transaction to the smart contract and execute its method. Note this can alter the smart contract state.\n *\n * #### Parameters\n * options?: PayableTxOptions | NonPayableTxOptions\n *\n * #### Returns\n * [Web3PromiEvent](/api/web3/namespace/core#Web3PromiEvent) : Web3 Promi Event\n *\n * ```ts\n * // using the promise\n * myContract.methods.myMethod(123).send({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'})\n * \t.then(function(receipt){\n * \t\t// other parts of code to use receipt\n * \t});\n *\n *\n * // using the event emitter\n * myContract.methods.myMethod(123).send({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'})\n * \t.on('transactionHash', function(hash){\n * \t\t// ...\n * \t})\n * \t.on('confirmation', function(confirmationNumber, receipt){\n * \t\t// ...\n * \t})\n * \t.on('receipt', function(receipt){\n * \t\t// ...\n * \t})\n * \t.on('error', function(error, receipt) {\n * \t\t// ...\n * \t});\n *\n * ```\n *\n * ### call\n * This will execute smart contract method in the EVM without sending any transaction. Note calling cannot alter the smart contract state.\n *\n * #### Parameters\n * options?: PayableCallOptions | NonPayableCallOptions,\n * block?: BlockNumberOrTag,\n *\n * #### Returns\n * Promise : having results of call\n *\n * ```ts\n *\n * let myContract = new web3.eth.Contract(abi, address);\n *\n * myContract.methods.myFunction().call()\n * .then(console.log);\n *\n * ```\n * ### estimateGas\n * Returns the amount of gas consumed by executing the method in EVM without creating a new transaction on the blockchain. The returned amount can be used as a gas estimate for executing the transaction publicly. The actual gas used can be different when sending the transaction later, as the state of the smart contract can be different at that time.\n *\n * #### Parameters\n * options?: PayableCallOptions,\n * returnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\n *\n * #### Returns\n * Promise: The gas amount estimated.\n *\n * ```ts\n * const estimatedGas = await contract.methods.approve('0xdAC17F958D2ee523a2206206994597C13D831ec7', 300)\n *     .estimateGas();\n *\n * ```\n *\n * ### encodeABI\n * Encodes the ABI for this method. The resulting hex string is 32-bit function signature hash plus the passed parameters in Solidity tightly packed format. This can be used to send a transaction, call a method, or pass it into another smart contract’s method as arguments. Set the data field on web3.eth.sendTransaction options as the encodeABI() result and it is the same as calling the contract method with contract.myMethod.send().\n *\n * Some use cases for encodeABI() include: preparing a smart contract transaction for a multisignature wallet, working with offline wallets and cold storage and creating transaction payload for complex smart contract proxy calls.\n *\n * #### Parameters\n * None\n *\n * #### Returns\n * String: The encoded ABI.\n *\n * ```ts\n * const encodedABI = await contract.methods.approve('0xdAC17F958D2ee523a2206206994597C13D831ec7', 300)\n *     .encodeABI();\n *\n * ```\n *\n\n * ### decodeMethodData\n * Decodes the given ABI-encoded data, revealing both the method name and the parameters used in the smart contract call.\n * This function reverses the encoding process happens at the method `encodeABI`.\n * It's particularly useful for debugging and understanding the interactions with and between smart contracts.\n *\n * #### Parameters\n *\n * - `data` **HexString**: The string of ABI-encoded data that needs to be decoded. This should include the method signature and the encoded parameters.\n *\n * #### Returns\n *\n * - **Object**: This object combines both the decoded parameters and the method name in a readable format. Specifically, the returned object contains:\n *   - `__method__` **String**: The name of the contract method, reconstructed from the ABI.\n *   - `__length__` **Number**: The number of parameters decoded.\n *   - Additional properties representing each parameter by name, as well as their position and values.\n *\n * #### Example\n *\n * Given an ABI-encoded string from a transaction, you can decode this data to identify the method called and the parameters passed.\n * Here's a simplified example:\n *\n *\n * ```typescript\n * const GreeterAbi = [\n * \t{\n * \t\tinputs: [\n * \t\t\t{\n * \t\t\t\tinternalType: 'string',\n * \t\t\t\tname: '_greeting',\n * \t\t\t\ttype: 'string',\n * \t\t\t},\n * \t\t],\n * \t\tname: 'setGreeting',\n * \t\toutputs: [],\n * \t\ttype: 'function',\n * \t},\n * ];\n * const contract = new Contract(GreeterAbi); // Initialize with your contract's ABI\n *\n * // The ABI-encoded data string for \"setGreeting('Hello World')\"\n * const encodedData =\n * \t'0xa41368620000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000b48656c6c6f20576f726c64000000000000000000000000000000000000000000';\n *\n * try {\n * \tconst decoded = contract.decodeMethodData(encodedData);\n * \tconsole.log(decoded.__method__); // Outputs: \"setGreeting(string)\"\n * \tconsole.log(decoded); // Outputs the detailed parameter data\n * \t// This tells that the method called was `setGreeting` with a single string parameter \"Hello World\":\n * \t// {\n * \t//   __method__: 'setGreeting(string)',\n * \t//   __length__: 1,\n * \t//   '0': 'Hello World',\n * \t//   _greeting: 'Hello World'\n * \t// }\n * } catch (error) {\n * \tconsole.error(error);\n * }\n * ```\n *\n\n * ### createAccessList\n * This will create an access list a method execution will access when executed in the EVM.\n * Note: You must specify a from address and gas if it’s not specified in options when instantiating parent contract object.\n *\n * #### Parameters\n * options?: PayableCallOptions | NonPayableCallOptions,\n * block?: BlockNumberOrTag,\n *\n * #### Returns\n * Promise: The generated access list for transaction.\n *\n * ```ts\n * const accessList = await contract.methods.approve('0xbEe634C21c16F05B03B704BaE071536121e6cFeA', 300)\n *     .createAccessList({\n *         from: \"0x9992695e1053bb737d3cfae4743dcfc4b94f203d\"\n *    });\n * ```\n *\n */\nexport class Contract<Abi extends ContractAbi>\n\textends Web3Context<EthExecutionAPI, typeof contractSubscriptions>\n\timplements Web3EventEmitter<ContractEventEmitterInterface<Abi>>\n{\n\t/**\n\t * The options `object` for the contract instance. `from`, `gas` and `gasPrice` are used as fallback values when sending transactions.\n\t *\n\t * ```ts\n\t * myContract.options;\n\t * > {\n\t *     address: '0x1234567890123456789012345678901234567891',\n\t *     jsonInterface: [...],\n\t *     from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe',\n\t *     gasPrice: '10000000000000',\n\t *     gas: 1000000\n\t * }\n\t *\n\t * myContract.options.from = '0x1234567890123456789012345678901234567891'; // default from address\n\t * myContract.options.gasPrice = '20000000000000'; // default gas price in wei\n\t * myContract.options.gas = 5000000; // provide as fallback always 5M gas\n\t * ```\n\t */\n\n\tpublic readonly options: ContractOptions;\n\n\t/**\n\t * Set to true if you want contracts' defaults to sync with global defaults.\n\t */\n\tpublic syncWithContext = false;\n\n\tprivate _errorsInterface!: AbiErrorFragment[];\n\tprivate _jsonInterface!: ContractAbiWithSignature;\n\tprivate _address?: Address;\n\tprivate _functions: Record<\n\t\tstring,\n\t\t{\n\t\t\tsignature: string;\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\tmethod: ContractBoundMethod<any>;\n\t\t}\n\t> = {};\n\tprivate readonly _overloadedMethodAbis: Map<string, AbiFunctionFragment[]>;\n\tprivate _methods!: ContractMethodsInterface<Abi>;\n\tprivate _events!: ContractEventsInterface<Abi>;\n\t/**\n\t * Set property to `data`, `input`, or `both` to change the property of the contract being sent to the\n\t * RPC provider when using contract methods.\n\t * Default is `input`\n\t */\n\n\tprivate context?: Web3Context;\n\t/**\n\t * Creates a new contract instance with all its methods and events defined in its ABI provided.\n\t *\n\t * ```ts\n\t * new web3.eth.Contract(jsonInterface[, address][, options])\n\t * ```\n\t *\n\t * @param jsonInterface - The JSON interface for the contract to instantiate.\n\t * @param address - The address of the smart contract to call.\n\t * @param options - The options of the contract. Some are used as fallbacks for calls and transactions.\n\t * @param context - The context of the contract used for customizing the behavior of the contract.\n\t * @returns - The contract instance with all its methods and events.\n\t *\n\t * ```ts title=\"Example\"\n\t * var myContract = new web3.eth.Contract([...], '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe', {\n\t *   from: '0x1234567890123456789012345678901234567891', // default from address\n\t *   gasPrice: '20000000000' // default gas price in wei, 20 gwei in this case\n\t * });\n\t * ```\n\t *\n\t * To use the type safe interface for these contracts you have to include the ABI definitions in your TypeScript project and then declare these as `const`.\n\t *\n\t * ```ts title=\"Example\"\n\t * const myContractAbi = [....] as const; // ABI definitions\n\t * const myContract = new web3.eth.Contract(myContractAbi, '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe');\n\t * ```\n\t */\n\tpublic constructor(\n\t\tjsonInterface: Abi,\n\t\tcontext?: Web3ContractContext | Web3Context,\n\t\treturnFormat?: DataFormat,\n\t);\n\tpublic constructor(\n\t\tjsonInterface: Abi,\n\t\taddress?: Address,\n\t\tcontextOrReturnFormat?: Web3ContractContext | Web3Context | DataFormat,\n\t\treturnFormat?: DataFormat,\n\t);\n\tpublic constructor(\n\t\tjsonInterface: Abi,\n\t\toptions?: ContractInitOptions,\n\t\tcontextOrReturnFormat?: Web3ContractContext | Web3Context | DataFormat,\n\t\treturnFormat?: DataFormat,\n\t);\n\tpublic constructor(\n\t\tjsonInterface: Abi,\n\t\taddress: Address | undefined,\n\t\toptions: ContractInitOptions,\n\t\tcontextOrReturnFormat?: Web3ContractContext | Web3Context | DataFormat,\n\t\treturnFormat?: DataFormat,\n\t);\n\tpublic constructor(\n\t\tjsonInterface: Abi,\n\t\taddressOrOptionsOrContext?:\n\t\t\t| Address\n\t\t\t| ContractInitOptions\n\t\t\t| Web3ContractContext\n\t\t\t| Web3Context,\n\t\toptionsOrContextOrReturnFormat?:\n\t\t\t| ContractInitOptions\n\t\t\t| Web3ContractContext\n\t\t\t| Web3Context\n\t\t\t| DataFormat,\n\t\tcontextOrReturnFormat?: Web3ContractContext | Web3Context | DataFormat,\n\t\treturnFormat?: DataFormat,\n\t) {\n\t\t// eslint-disable-next-line no-nested-ternary\n\t\tconst options = isContractInitOptions(addressOrOptionsOrContext)\n\t\t\t? addressOrOptionsOrContext\n\t\t\t: isContractInitOptions(optionsOrContextOrReturnFormat)\n\t\t\t? optionsOrContextOrReturnFormat\n\t\t\t: undefined;\n\n\t\tlet contractContext;\n\t\tif (isWeb3ContractContext(addressOrOptionsOrContext)) {\n\t\t\tcontractContext = addressOrOptionsOrContext;\n\t\t} else if (isWeb3ContractContext(optionsOrContextOrReturnFormat)) {\n\t\t\tcontractContext = optionsOrContextOrReturnFormat;\n\t\t} else {\n\t\t\tcontractContext = contextOrReturnFormat;\n\t\t}\n\n\t\tlet provider;\n\t\tif (\n\t\t\ttypeof addressOrOptionsOrContext === 'object' &&\n\t\t\t'provider' in addressOrOptionsOrContext\n\t\t) {\n\t\t\tprovider = addressOrOptionsOrContext.provider;\n\t\t} else if (\n\t\t\ttypeof optionsOrContextOrReturnFormat === 'object' &&\n\t\t\t'provider' in optionsOrContextOrReturnFormat\n\t\t) {\n\t\t\tprovider = optionsOrContextOrReturnFormat.provider;\n\t\t} else if (\n\t\t\ttypeof contextOrReturnFormat === 'object' &&\n\t\t\t'provider' in contextOrReturnFormat\n\t\t) {\n\t\t\tprovider = contextOrReturnFormat.provider;\n\t\t} else {\n\t\t\tprovider = Contract.givenProvider;\n\t\t}\n\n\t\tsuper({\n\t\t\t...contractContext,\n\t\t\tprovider,\n\t\t\tregisteredSubscriptions: contractSubscriptions,\n\t\t});\n\n\t\t// Init protected properties\n\t\tif ((contractContext as Web3Context)?.wallet) {\n\t\t\tthis._wallet = (contractContext as Web3Context).wallet;\n\t\t}\n\t\tif ((contractContext as Web3Context)?.accountProvider) {\n\t\t\tthis._accountProvider = (contractContext as Web3Context).accountProvider;\n\t\t}\n\n\t\tif (\n\t\t\t!isNullish(options) &&\n\t\t\t!isNullish(options.data) &&\n\t\t\t!isNullish(options.input) &&\n\t\t\tthis.config.contractDataInputFill !== 'both'\n\t\t)\n\t\t\tthrow new ContractTransactionDataAndInputError({\n\t\t\t\tdata: options.data as HexString,\n\t\t\t\tinput: options.input as HexString,\n\t\t\t});\n\t\tthis._overloadedMethodAbis = new Map<string, AbiFunctionFragment[]>();\n\n\t\t// eslint-disable-next-line no-nested-ternary\n\t\tconst returnDataFormat = isDataFormat(contextOrReturnFormat)\n\t\t\t? contextOrReturnFormat\n\t\t\t: isDataFormat(optionsOrContextOrReturnFormat)\n\t\t\t? optionsOrContextOrReturnFormat\n\t\t\t: returnFormat ?? this.defaultReturnFormat;\n\t\tconst address =\n\t\t\ttypeof addressOrOptionsOrContext === 'string' ? addressOrOptionsOrContext : undefined;\n\t\tthis.config.contractDataInputFill =\n\t\t\t(options as ContractInitOptions)?.dataInputFill ?? this.config.contractDataInputFill;\n\t\tthis._parseAndSetJsonInterface(jsonInterface, returnDataFormat);\n\n\t\tif (this.defaultReturnFormat !== returnDataFormat) {\n\t\t\tthis.defaultReturnFormat = returnDataFormat;\n\t\t}\n\n\t\tif (!isNullish(address)) {\n\t\t\tthis._parseAndSetAddress(address, returnDataFormat);\n\t\t}\n\n\t\tthis.options = {\n\t\t\taddress,\n\t\t\tjsonInterface: this._jsonInterface,\n\t\t\tgas: options?.gas ?? options?.gasLimit,\n\t\t\tgasPrice: options?.gasPrice,\n\t\t\tfrom: options?.from,\n\t\t\tinput: options?.input,\n\t\t\tdata: options?.data,\n\t\t};\n\n\t\tthis.syncWithContext = (options as ContractInitOptions)?.syncWithContext ?? false;\n\t\tif (contractContext instanceof Web3Context) {\n\t\t\tthis.subscribeToContextEvents(contractContext);\n\t\t}\n\t\tObject.defineProperty(this.options, 'address', {\n\t\t\tset: (value: Address) => this._parseAndSetAddress(value, returnDataFormat),\n\t\t\tget: () => this._address,\n\t\t});\n\n\t\tObject.defineProperty(this.options, 'jsonInterface', {\n\t\t\tset: (value: ContractAbi) => this._parseAndSetJsonInterface(value, returnDataFormat),\n\t\t\tget: () => this._jsonInterface,\n\t\t});\n\n\t\tif (contractContext instanceof Web3Context) {\n\t\t\tcontractContext.on(Web3ConfigEvent.CONFIG_CHANGE, event => {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\t\t\t\tthis.setConfig({ [event.name]: event.newValue });\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Subscribe to an event.\n\t *\n\t * ```ts\n\t * await myContract.events.MyEvent([options])\n\t * ```\n\t *\n\t * There is a special event `allEvents` that can be used to subscribe all events.\n\t *\n\t * ```ts\n\t * await myContract.events.allEvents([options])\n\t * ```\n\t *\n\t * @returns - When individual event is accessed will returns {@link ContractBoundEvent} object\n\t */\n\tpublic get events() {\n\t\treturn this._events;\n\t}\n\n\t/**\n\t * Creates a transaction object for that method, which then can be `called`, `send`, `estimated`, `createAccessList` , or `ABI encoded`.\n\t *\n\t * The methods of this smart contract are available through:\n\t *\n\t * The name: `myContract.methods.myMethod(123)`\n\t * The name with parameters: `myContract.methods['myMethod(uint256)'](123)`\n\t * The signature `myContract.methods['0x58cf5f10'](123)`\n\t *\n\t * This allows calling functions with same name but different parameters from the JavaScript contract object.\n\t *\n\t * \\> The method signature does not provide a type safe interface, so we recommend to use method `name` instead.\n\t *\n\t * ```ts\n\t * // calling a method\n\t * const result = await myContract.methods.myMethod(123).call({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'});\n\t *\n\t * // or sending and using a promise\n\t * const receipt = await myContract.methods.myMethod(123).send({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'});\n\t *\n\t * // or sending and using the events\n\t * const sendObject = myContract.methods.myMethod(123).send({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'});\n\t * sendObject.on('transactionHash', function(hash){\n\t *   ...\n\t * });\n\t * sendObject.on('receipt', function(receipt){\n\t *   ...\n\t * });\n\t * sendObject.on('confirmation', function(confirmationNumber, receipt){\n\t *   ...\n\t * });\n\t * sendObject.on('error', function(error, receipt) {\n\t *   ...\n\t * });\n\t * ```\n\t *\n\t * @returns - Either returns {@link PayableMethodObject} or {@link NonPayableMethodObject} based on the definitions of the ABI of that contract.\n\t */\n\tpublic get methods() {\n\t\treturn this._methods;\n\t}\n\n\t/**\n\t * Clones the current contract instance. This doesn't deploy contract on blockchain and only creates a local clone.\n\t *\n\t * @returns - The new contract instance.\n\t *\n\t * ```ts\n\t * const contract1 = new web3.eth.Contract(abi, address, {gasPrice: '12345678', from: fromAddress});\n\t *\n\t * const contract2 = contract1.clone();\n\t * contract2.options.address = '0xdAC17F958D2ee523a2206206994597C13D831ec7';\n\t *\n\t * (contract1.options.address !== contract2.options.address);\n\t * > true\n\t * ```\n\t */\n\tpublic clone() {\n\t\tlet newContract: Contract<any>;\n\t\tif (this.options.address) {\n\t\t\tnewContract = new Contract<Abi>(\n\t\t\t\t[...this._jsonInterface, ...this._errorsInterface] as unknown as Abi,\n\t\t\t\tthis.options.address,\n\t\t\t\t{\n\t\t\t\t\tgas: this.options.gas,\n\t\t\t\t\tgasPrice: this.options.gasPrice,\n\t\t\t\t\tfrom: this.options.from,\n\t\t\t\t\tinput: this.options.input,\n\t\t\t\t\tdata: this.options.data,\n\t\t\t\t\tprovider: this.currentProvider,\n\t\t\t\t\tsyncWithContext: this.syncWithContext,\n\t\t\t\t\tdataInputFill: this.config.contractDataInputFill,\n\t\t\t\t},\n\t\t\t\tthis.getContextObject(),\n\t\t\t);\n\t\t} else {\n\t\t\tnewContract = new Contract<Abi>(\n\t\t\t\t[...this._jsonInterface, ...this._errorsInterface] as unknown as Abi,\n\t\t\t\t{\n\t\t\t\t\tgas: this.options.gas,\n\t\t\t\t\tgasPrice: this.options.gasPrice,\n\t\t\t\t\tfrom: this.options.from,\n\t\t\t\t\tinput: this.options.input,\n\t\t\t\t\tdata: this.options.data,\n\t\t\t\t\tprovider: this.currentProvider,\n\t\t\t\t\tsyncWithContext: this.syncWithContext,\n\t\t\t\t\tdataInputFill: this.config.contractDataInputFill,\n\t\t\t\t},\n\t\t\t\tthis.getContextObject(),\n\t\t\t);\n\t\t}\n\t\tif (this.context) newContract.subscribeToContextEvents(this.context);\n\n\t\treturn newContract;\n\t}\n\n\t/**\n\t * Call this function to deploy the contract to the blockchain. After successful deployment the promise will resolve with a new contract instance.\n\t *\n\t * ```ts\n\t * myContract.deploy({\n\t *   input: '0x12345...', // data keyword can be used, too.\n\t *   arguments: [123, 'My String']\n\t * })\n\t * .send({\n\t *   from: '0x1234567890123456789012345678901234567891',\n\t *   gas: 1500000,\n\t *   gasPrice: '30000000000000'\n\t * }, function(error, transactionHash){ ... })\n\t * .on('error', function(error){ ... })\n\t * .on('transactionHash', function(transactionHash){ ... })\n\t * .on('receipt', function(receipt){\n\t *  console.log(receipt.contractAddress) // contains the new contract address\n\t * })\n\t * .on('confirmation', function(confirmationNumber, receipt){ ... })\n\t * .then(function(newContractInstance){\n\t *   console.log(newContractInstance.options.address) // instance with the new contract address\n\t * });\n\t *\n\t *\n\t * // When the data is already set as an option to the contract itself\n\t * myContract.options.data = '0x12345...';\n\t *\n\t * myContract.deploy({\n\t *   arguments: [123, 'My String']\n\t * })\n\t * .send({\n\t *   from: '0x1234567890123456789012345678901234567891',\n\t *   gas: 1500000,\n\t *   gasPrice: '30000000000000'\n\t * })\n\t * .then(function(newContractInstance){\n\t *   console.log(newContractInstance.options.address) // instance with the new contract address\n\t * });\n\t *\n\t *\n\t * // Simply encoding\n\t * myContract.deploy({\n\t *   input: '0x12345...',\n\t *   arguments: [123, 'My String']\n\t * })\n\t * .encodeABI();\n\t * > '0x12345...0000012345678765432'\n\t *\n\t *\n\t * // decoding\n\t * myContract.deploy({\n\t *   input: '0x12345...',\n\t *   // arguments: [123, 'My Greeting'] if you just need to decode the data, you can skip the arguments\n\t * })\n\t * .decodeData('0x12345...0000012345678765432');\n\t * > {\n\t *      __method__: 'constructor',\n\t *      __length__: 2,\n\t *      '0': '123',\n\t *      _id: '123',\n\t *      '1': 'My Greeting',\n\t *      _greeting: 'My Greeting',\n\t *   }\n\t *\n\t *\n\t * // Gas estimation\n\t * myContract.deploy({\n\t *   input: '0x12345...',\n\t *   arguments: [123, 'My String']\n\t * })\n\t * .estimateGas(function(err, gas){\n\t *   console.log(gas);\n\t * });\n\t * ```\n\t *\n\t * @returns - The transaction object\n\t */\n\tpublic deploy(deployOptions?: {\n\t\t/**\n\t\t * The byte code of the contract.\n\t\t */\n\t\tdata?: HexString;\n\t\tinput?: HexString;\n\t\t/**\n\t\t * The arguments which get passed to the constructor on deployment.\n\t\t */\n\t\targuments?: ContractConstructorArgs<Abi>;\n\t}) {\n\t\tlet abi = this._jsonInterface.find(j => j.type === 'constructor') as AbiConstructorFragment;\n\t\tif (!abi) {\n\t\t\tabi = {\n\t\t\t\ttype: 'constructor',\n\t\t\t\tstateMutability: '',\n\t\t\t} as AbiConstructorFragment;\n\t\t}\n\n\t\tconst _input = format(\n\t\t\t{ format: 'bytes' },\n\t\t\tdeployOptions?.input ?? this.options.input,\n\t\t\tDEFAULT_RETURN_FORMAT,\n\t\t);\n\n\t\tconst _data = format(\n\t\t\t{ format: 'bytes' },\n\t\t\tdeployOptions?.data ?? this.options.data,\n\t\t\tDEFAULT_RETURN_FORMAT,\n\t\t);\n\n\t\tif ((!_input || _input.trim() === '0x') && (!_data || _data.trim() === '0x')) {\n\t\t\tthrow new Web3ContractError('contract creation without any data provided.');\n\t\t}\n\n\t\tconst args = deployOptions?.arguments ?? [];\n\n\t\tconst contractOptions: ContractOptions = { ...this.options, input: _input, data: _data };\n\t\tconst deployData = _input ?? _data;\n\t\treturn {\n\t\t\targuments: args,\n\t\t\tsend: (options?: PayableTxOptions): ContractDeploySend<Abi> => {\n\t\t\t\tconst modifiedOptions = { ...options };\n\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\t\t\treturn this._contractMethodDeploySend(\n\t\t\t\t\tabi as AbiFunctionFragment,\n\t\t\t\t\targs as unknown[],\n\t\t\t\t\tmodifiedOptions,\n\t\t\t\t\tcontractOptions,\n\t\t\t\t);\n\t\t\t},\n\t\t\testimateGas: async <ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\t\t\toptions?: PayableCallOptions,\n\t\t\t\treturnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat,\n\t\t\t) => {\n\t\t\t\tconst modifiedOptions = { ...options };\n\t\t\t\treturn this._contractMethodEstimateGas({\n\t\t\t\t\tabi: abi as AbiFunctionFragment,\n\t\t\t\t\tparams: args as unknown[],\n\t\t\t\t\treturnFormat,\n\t\t\t\t\toptions: modifiedOptions,\n\t\t\t\t\tcontractOptions,\n\t\t\t\t});\n\t\t\t},\n\t\t\tencodeABI: () =>\n\t\t\t\tencodeMethodABI(\n\t\t\t\t\tabi as AbiFunctionFragment,\n\t\t\t\t\targs as unknown[],\n\t\t\t\t\tformat(\n\t\t\t\t\t\t{ format: 'bytes' },\n\t\t\t\t\t\tdeployData as Bytes,\n\t\t\t\t\t\tthis.defaultReturnFormat as typeof DEFAULT_RETURN_FORMAT,\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\tdecodeData: (data: HexString) => ({\n\t\t\t\t...decodeMethodParams(\n\t\t\t\t\tabi as AbiFunctionFragment,\n\t\t\t\t\tdata.replace(deployData as string, ''),\n\t\t\t\t\tfalse,\n\t\t\t\t),\n\t\t\t\t__method__: abi.type, // abi.type is constructor\n\t\t\t}),\n\t\t};\n\t}\n\n\t/**\n\t * Gets past events for this contract.\n\t *\n\t * ```ts\n\t * const events = await myContract.getPastEvents('MyEvent', {\n\t *   filter: {myIndexedParam: [20,23], myOtherIndexedParam: '0x123456789...'}, // Using an array means OR: e.g. 20 or 23\n\t *   fromBlock: 0,\n\t *   toBlock: 'latest'\n\t * });\n\t *\n\t * > [{\n\t *   returnValues: {\n\t *       myIndexedParam: 20,\n\t *       myOtherIndexedParam: '0x123456789...',\n\t *       myNonIndexParam: 'My String'\n\t *   },\n\t *   raw: {\n\t *       data: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\n\t *       topics: ['0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7', '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385']\n\t *   },\n\t *   event: 'MyEvent',\n\t *   signature: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',\n\t *   logIndex: 0,\n\t *   transactionIndex: 0,\n\t *   transactionHash: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\n\t *   blockHash: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',\n\t *   blockNumber: 1234,\n\t *   address: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'\n\t * },{\n\t *   ...\n\t * }]\n\t * ```\n\t *\n\t * @param eventName - The name of the event in the contract, or `allEvents` to get all events.\n\t * @param filter - The filter options used to get events.\n\t * @param returnFormat - Return format\n\t * @returns - An array with the past event `Objects`, matching the given event name and filter.\n\t */\n\tpublic async getPastEvents<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\treturnFormat?: ReturnFormat,\n\t): Promise<(string | EventLog)[]>;\n\tpublic async getPastEvents<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\teventName: keyof ContractEvents<Abi> | 'allEvents' | 'ALLEVENTS',\n\t\treturnFormat?: ReturnFormat,\n\t): Promise<(string | EventLog)[]>;\n\tpublic async getPastEvents<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\tfilter: Omit<Filter, 'address'>,\n\t\treturnFormat?: ReturnFormat,\n\t): Promise<(string | EventLog)[]>;\n\tpublic async getPastEvents<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\teventName: keyof ContractEvents<Abi> | 'allEvents' | 'ALLEVENTS',\n\t\tfilter: Omit<Filter, 'address'>,\n\t\treturnFormat?: ReturnFormat,\n\t): Promise<(string | EventLog)[]>;\n\tpublic async getPastEvents<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\tparam1?:\n\t\t\t| keyof ContractEvents<Abi>\n\t\t\t| 'allEvents'\n\t\t\t| 'ALLEVENTS'\n\t\t\t| Omit<Filter, 'address'>\n\t\t\t| ReturnFormat,\n\t\tparam2?: Omit<Filter, 'address'> | ReturnFormat,\n\t\tparam3?: ReturnFormat,\n\t): Promise<(string | EventLog)[]> {\n\t\tconst eventName = typeof param1 === 'string' ? param1 : ALL_EVENTS;\n\n\t\tconst options =\n\t\t\t// eslint-disable-next-line no-nested-ternary\n\t\t\ttypeof param1 !== 'string' && !isDataFormat(param1)\n\t\t\t\t? param1\n\t\t\t\t: !isDataFormat(param2)\n\t\t\t\t? param2\n\t\t\t\t: {};\n\n\t\t// eslint-disable-next-line no-nested-ternary\n\t\tconst returnFormat = isDataFormat(param1)\n\t\t\t? param1\n\t\t\t: isDataFormat(param2)\n\t\t\t? param2\n\t\t\t: param3 ?? this.defaultReturnFormat;\n\n\t\tconst abi =\n\t\t\teventName === 'allEvents' || eventName === ALL_EVENTS\n\t\t\t\t? ALL_EVENTS_ABI\n\t\t\t\t: (this._jsonInterface.find(\n\t\t\t\t\t\tj => 'name' in j && j.name === eventName,\n\t\t\t\t  ) as AbiEventFragment & { signature: string });\n\n\t\tif (!abi) {\n\t\t\tthrow new Web3ContractError(`Event ${eventName} not found.`);\n\t\t}\n\n\t\tconst { fromBlock, toBlock, topics, address } = encodeEventABI(\n\t\t\tthis.options,\n\t\t\tabi,\n\t\t\toptions ?? {},\n\t\t);\n\n\t\tconst logs = await getLogs(this, { fromBlock, toBlock, topics, address }, returnFormat);\n\t\tconst decodedLogs = logs\n\t\t\t? logs.map(log =>\n\t\t\t\t\ttypeof log === 'string'\n\t\t\t\t\t\t? log\n\t\t\t\t\t\t: decodeEventABI(abi, log as LogsInput, this._jsonInterface, returnFormat),\n\t\t\t  )\n\t\t\t: [];\n\n\t\tconst filter = options?.filter ?? {};\n\t\tconst filterKeys = Object.keys(filter);\n\n\t\tif (filterKeys.length > 0) {\n\t\t\treturn decodedLogs.filter(log => {\n\t\t\t\tif (typeof log === 'string') return true;\n\n\t\t\t\treturn filterKeys.every((key: string) => {\n\t\t\t\t\tif (Array.isArray(filter[key])) {\n\t\t\t\t\t\treturn (filter[key] as Numbers[]).some(\n\t\t\t\t\t\t\t(v: Numbers) =>\n\t\t\t\t\t\t\t\tString(log.returnValues[key]).toUpperCase() ===\n\t\t\t\t\t\t\t\tString(v).toUpperCase(),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst inputAbi = abi.inputs?.filter(input => input.name === key)[0];\n\t\t\t\t\tif (inputAbi?.indexed && inputAbi.type === 'string') {\n\t\t\t\t\t\tconst hashedIndexedString = keccak256(filter[key] as string);\n\t\t\t\t\t\tif (hashedIndexedString === String(log.returnValues[key])) return true;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\tString(log.returnValues[key]).toUpperCase() ===\n\t\t\t\t\t\tString(filter[key]).toUpperCase()\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\treturn decodedLogs;\n\t}\n\n\tprivate _parseAndSetAddress(\n\t\tvalue?: Address,\n\t\treturnFormat: DataFormat = this.defaultReturnFormat,\n\t) {\n\t\tthis._address = value\n\t\t\t? toChecksumAddress(format({ format: 'address' }, value, returnFormat))\n\t\t\t: value;\n\t}\n\n\tpublic decodeMethodData(data: HexString): DecodedParams & { __method__: string } {\n\t\tconst methodSignature = data.slice(0, 10);\n\t\tconst functionsAbis = this._jsonInterface.filter(j => j.type !== 'error');\n\n\t\tconst abi = functionsAbis.find(\n\t\t\ta => methodSignature === encodeFunctionSignature(jsonInterfaceMethodToString(a)),\n\t\t);\n\t\tif (!abi) {\n\t\t\tthrow new Web3ContractError(\n\t\t\t\t`The ABI for the provided method signature ${methodSignature} was not found.`,\n\t\t\t);\n\t\t}\n\t\treturn { ...decodeMethodParams(abi, data), __method__: jsonInterfaceMethodToString(abi) };\n\t}\n\n\tprivate _parseAndSetJsonInterface(\n\t\tabis: ContractAbi,\n\t\treturnFormat: DataFormat = this.defaultReturnFormat,\n\t) {\n\t\tthis._functions = {};\n\t\tthis._methods = {} as ContractMethodsInterface<Abi>;\n\t\tthis._events = {} as ContractEventsInterface<Abi>;\n\n\t\tlet result: ContractAbi = [];\n\n\t\tconst functionsAbi = abis.filter(abi => abi.type !== 'error');\n\t\tconst errorsAbi = abis.filter(abi =>\n\t\t\tisAbiErrorFragment(abi),\n\t\t) as unknown as AbiErrorFragment[];\n\n\t\tfor (const a of functionsAbi) {\n\t\t\tconst abi: Mutable<AbiFragment & { signature: HexString }> = {\n\t\t\t\t...a,\n\t\t\t\tsignature: '',\n\t\t\t};\n\n\t\t\tif (isAbiFunctionFragment(abi)) {\n\t\t\t\tconst methodName = jsonInterfaceMethodToString(abi);\n\t\t\t\tconst methodSignature = encodeFunctionSignature(methodName);\n\t\t\t\tabi.methodNameWithInputs = methodName;\n\t\t\t\tabi.signature = methodSignature;\n\n\t\t\t\t// make constant and payable backwards compatible\n\t\t\t\tabi.constant =\n\t\t\t\t\tabi.stateMutability === 'view' ??\n\t\t\t\t\tabi.stateMutability === 'pure' ??\n\t\t\t\t\tabi.constant;\n\n\t\t\t\tabi.payable = abi.stateMutability === 'payable' ?? abi.payable;\n\t\t\t\tthis._overloadedMethodAbis.set(abi.name, [\n\t\t\t\t\t...(this._overloadedMethodAbis.get(abi.name) ?? []),\n\t\t\t\t\tabi,\n\t\t\t\t]);\n\t\t\t\tconst abiFragment = this._overloadedMethodAbis.get(abi.name) ?? [];\n\t\t\t\tconst contractMethod = this._createContractMethod<\n\t\t\t\t\ttypeof abiFragment,\n\t\t\t\t\tAbiErrorFragment\n\t\t\t\t>(abiFragment, errorsAbi);\n\n\t\t\t\tconst exactContractMethod = this._createContractMethod<\n\t\t\t\t\ttypeof abiFragment,\n\t\t\t\t\tAbiErrorFragment\n\t\t\t\t>(abiFragment, errorsAbi, true);\n\n\t\t\t\tthis._functions[methodName] = {\n\t\t\t\t\tsignature: methodSignature,\n\t\t\t\t\tmethod: exactContractMethod,\n\t\t\t\t};\n\n\t\t\t\t// We don't know a particular type of the Abi method so can't type check\n\t\t\t\tthis._methods[abi.name as keyof ContractMethodsInterface<Abi>] =\n\t\t\t\t\tcontractMethod as never;\n\n\t\t\t\t// We don't know a particular type of the Abi method so can't type check\n\t\t\t\tthis._methods[methodName as keyof ContractMethodsInterface<Abi>] =\n\t\t\t\t\texactContractMethod as never;\n\n\t\t\t\t// We don't know a particular type of the Abi method so can't type check\n\t\t\t\tthis._methods[methodSignature as keyof ContractMethodsInterface<Abi>] =\n\t\t\t\t\texactContractMethod as never;\n\t\t\t} else if (isAbiEventFragment(abi)) {\n\t\t\t\tconst eventName = jsonInterfaceMethodToString(abi);\n\t\t\t\tconst eventSignature = encodeEventSignature(eventName);\n\t\t\t\tconst event = this._createContractEvent(abi, returnFormat);\n\t\t\t\tabi.signature = eventSignature;\n\n\t\t\t\tif (!(eventName in this._events) || abi.name === 'bound') {\n\t\t\t\t\t// It's a private type and we don't want to expose it and no need to check\n\t\t\t\t\tthis._events[eventName as keyof ContractEventsInterface<Abi>] = event as never;\n\t\t\t\t}\n\t\t\t\t// It's a private type and we don't want to expose it and no need to check\n\t\t\t\tthis._events[abi.name as keyof ContractEventsInterface<Abi>] = event as never;\n\t\t\t\t// It's a private type and we don't want to expose it and no need to check\n\t\t\t\tthis._events[eventSignature as keyof ContractEventsInterface<Abi>] = event as never;\n\t\t\t}\n\n\t\t\tresult = [...result, abi];\n\t\t}\n\n\t\tthis._events.allEvents = this._createContractEvent(ALL_EVENTS_ABI, returnFormat);\n\t\tthis._jsonInterface = [...result] as unknown as ContractAbiWithSignature;\n\t\tthis._errorsInterface = errorsAbi;\n\t}\n\n\t// eslint-disable-next-line class-methods-use-this\n\tprivate _getAbiParams(abi: AbiFunctionFragment, params: unknown[]): Array<unknown> {\n\t\ttry {\n\t\t\treturn validatorUtils.transformJsonDataToAbiFormat(abi.inputs ?? [], params);\n\t\t} catch (error) {\n\t\t\tthrow new Web3ContractError(\n\t\t\t\t`Invalid parameters for method ${abi.name}: ${(error as Error).message}`,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate _createContractMethod<T extends AbiFunctionFragment[], E extends AbiErrorFragment>(\n\t\tabiArr: T,\n\t\terrorsAbis: E[],\n\t\texact = false, // when true, it will only match the exact method signature\n\t): ContractBoundMethod<T[0]> {\n\t\tconst abi = abiArr[abiArr.length - 1];\n\t\treturn (...params: unknown[]) => {\n\t\t\tlet abiParams!: Array<unknown>;\n\t\t\tconst abis =\n\t\t\t\t(exact\n\t\t\t\t\t? this._overloadedMethodAbis\n\t\t\t\t\t\t\t.get(abi.name)\n\t\t\t\t\t\t\t?.filter(_abi => _abi.signature === abi.signature)\n\t\t\t\t\t: this._overloadedMethodAbis.get(abi.name)) ?? [];\n\t\t\tlet methodAbi: AbiFunctionFragment = abis[0];\n\t\t\tconst internalErrorsAbis = errorsAbis;\n\n\t\t\tconst arrayOfAbis: AbiFunctionFragment[] = abis.filter(\n\t\t\t\t_abi => (_abi.inputs ?? []).length === params.length,\n\t\t\t);\n\n\t\t\tif (abis.length === 1 || arrayOfAbis.length === 0) {\n\t\t\t\tabiParams = this._getAbiParams(methodAbi, params);\n\t\t\t\tvalidator.validate(abi.inputs ?? [], abiParams);\n\t\t\t} else {\n\t\t\t\tconst errors: Web3ValidationErrorObject[] = [];\n\n\t\t\t\t// all the methods that have is valid for the given inputs\n\t\t\t\tconst applicableMethodAbi: AbiFunctionFragment[] = [];\n\t\t\t\tfor (const _abi of arrayOfAbis) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tabiParams = this._getAbiParams(_abi, params);\n\t\t\t\t\t\tvalidator.validate(\n\t\t\t\t\t\t\t_abi.inputs as unknown as ValidationSchemaInput,\n\t\t\t\t\t\t\tabiParams,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tapplicableMethodAbi.push(_abi);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\terrors.push(e as Web3ValidationErrorObject);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (applicableMethodAbi.length === 1) {\n\t\t\t\t\t[methodAbi] = applicableMethodAbi; // take the first item that is the only item in the array\n\t\t\t\t} else if (applicableMethodAbi.length > 1) {\n\t\t\t\t\t[methodAbi] = applicableMethodAbi; // take the first item in the array\n\t\t\t\t\tconsole.warn(\n\t\t\t\t\t\t`Multiple methods found that is compatible with the given inputs.\\n\\tFound ${\n\t\t\t\t\t\t\tapplicableMethodAbi.length\n\t\t\t\t\t\t} compatible methods: ${JSON.stringify(\n\t\t\t\t\t\t\tapplicableMethodAbi.map(\n\t\t\t\t\t\t\t\tm =>\n\t\t\t\t\t\t\t\t\t`${\n\t\t\t\t\t\t\t\t\t\t(m as { methodNameWithInputs: string }).methodNameWithInputs\n\t\t\t\t\t\t\t\t\t} (signature: ${(m as { signature: string }).signature})`,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t)} \\n\\tThe first one will be used: ${\n\t\t\t\t\t\t\t(methodAbi as { methodNameWithInputs: string }).methodNameWithInputs\n\t\t\t\t\t\t}`,\n\t\t\t\t\t);\n\t\t\t\t\t// TODO: 5.x Should throw a new error with the list of methods found.\n\t\t\t\t\t// Related issue: https://github.com/web3/web3.js/issues/6923\n\t\t\t\t\t// This is in order to provide an error message when there is more than one method found that fits the inputs.\n\t\t\t\t\t// To do that, replace the pervious line of code with something like the following line:\n\t\t\t\t\t// throw new Web3ValidatorError({ message: 'Multiple methods found',  ... list of applicable methods }));\n\t\t\t\t}\n\t\t\t\tif (errors.length === arrayOfAbis.length) {\n\t\t\t\t\tthrow new Web3ValidatorError(errors);\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst methods = {\n\t\t\t\targuments: abiParams,\n\n\t\t\t\tcall: async (\n\t\t\t\t\toptions?: PayableCallOptions | NonPayableCallOptions,\n\t\t\t\t\tblock?: BlockNumberOrTag,\n\t\t\t\t) =>\n\t\t\t\t\tthis._contractMethodCall(\n\t\t\t\t\t\tmethodAbi,\n\t\t\t\t\t\tabiParams,\n\t\t\t\t\t\tinternalErrorsAbis,\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tblock,\n\t\t\t\t\t),\n\n\t\t\t\tsend: (options?: PayableTxOptions | NonPayableTxOptions): ContractMethodSend =>\n\t\t\t\t\tthis._contractMethodSend(methodAbi, abiParams, internalErrorsAbis, options),\n\n\t\t\t\testimateGas: async <ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\t\t\t\toptions?: PayableCallOptions | NonPayableCallOptions,\n\t\t\t\t\treturnFormat: ReturnFormat = this\n\t\t\t\t\t\t.defaultReturnFormat as unknown as ReturnFormat,\n\t\t\t\t) =>\n\t\t\t\t\tthis._contractMethodEstimateGas({\n\t\t\t\t\t\tabi: methodAbi,\n\t\t\t\t\t\tparams: abiParams,\n\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t\toptions,\n\t\t\t\t\t}),\n\n\t\t\t\tencodeABI: () => encodeMethodABI(methodAbi, abiParams),\n\t\t\t\tdecodeData: (data: HexString) => decodeMethodParams(methodAbi, data),\n\n\t\t\t\tcreateAccessList: async (\n\t\t\t\t\toptions?: PayableCallOptions | NonPayableCallOptions,\n\t\t\t\t\tblock?: BlockNumberOrTag,\n\t\t\t\t) =>\n\t\t\t\t\tthis._contractMethodCreateAccessList(\n\t\t\t\t\t\tmethodAbi,\n\t\t\t\t\t\tabiParams,\n\t\t\t\t\t\tinternalErrorsAbis,\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tblock,\n\t\t\t\t\t),\n\t\t\t};\n\n\t\t\tif (methodAbi.stateMutability === 'payable') {\n\t\t\t\treturn methods as PayableMethodObject<\n\t\t\t\t\tContractOverloadedMethodInputs<T>,\n\t\t\t\t\tContractOverloadedMethodOutputs<T>\n\t\t\t\t>;\n\t\t\t}\n\t\t\treturn methods as NonPayableMethodObject<\n\t\t\t\tContractOverloadedMethodInputs<T>,\n\t\t\t\tContractOverloadedMethodOutputs<T>\n\t\t\t>;\n\t\t};\n\t}\n\n\tprivate async _contractMethodCall<Options extends PayableCallOptions | NonPayableCallOptions>(\n\t\tabi: AbiFunctionFragment,\n\t\tparams: unknown[],\n\t\terrorsAbi: AbiErrorFragment[],\n\t\toptions?: Options,\n\t\tblock?: BlockNumberOrTag,\n\t) {\n\t\tconst tx = getEthTxCallParams({\n\t\t\tabi,\n\t\t\tparams,\n\t\t\toptions: {\n\t\t\t\t...options,\n\t\t\t\tdataInputFill: this.config.contractDataInputFill,\n\t\t\t},\n\t\t\tcontractOptions: {\n\t\t\t\t...this.options,\n\t\t\t\tfrom: this.options.from ?? this.config.defaultAccount,\n\t\t\t},\n\t\t});\n\t\ttry {\n\t\t\tconst result = await call(\n\t\t\t\tthis,\n\t\t\t\ttx,\n\t\t\t\tblock,\n\t\t\t\tthis.defaultReturnFormat as typeof DEFAULT_RETURN_FORMAT,\n\t\t\t);\n\t\t\treturn decodeMethodReturn(abi, result);\n\t\t} catch (error: unknown) {\n\t\t\tif (error instanceof ContractExecutionError) {\n\t\t\t\t// this will parse the error data by trying to decode the ABI error inputs according to EIP-838\n\t\t\t\tdecodeContractErrorData(errorsAbi, error.cause);\n\t\t\t}\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate async _contractMethodCreateAccessList<\n\t\tOptions extends PayableCallOptions | NonPayableCallOptions,\n\t>(\n\t\tabi: AbiFunctionFragment,\n\t\tparams: unknown[],\n\t\terrorsAbi: AbiErrorFragment[],\n\t\toptions?: Options,\n\t\tblock?: BlockNumberOrTag,\n\t) {\n\t\tconst tx = getCreateAccessListParams({\n\t\t\tabi,\n\t\t\tparams,\n\t\t\toptions: { ...options, dataInputFill: this.config.contractDataInputFill },\n\t\t\tcontractOptions: {\n\t\t\t\t...this.options,\n\t\t\t\tfrom: this.options.from ?? this.config.defaultAccount,\n\t\t\t},\n\t\t});\n\n\t\ttry {\n\t\t\treturn createAccessList(this, tx, block, this.defaultReturnFormat);\n\t\t} catch (error: unknown) {\n\t\t\tif (error instanceof ContractExecutionError) {\n\t\t\t\t// this will parse the error data by trying to decode the ABI error inputs according to EIP-838\n\t\t\t\tdecodeContractErrorData(errorsAbi, error.cause);\n\t\t\t}\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate _contractMethodSend<Options extends PayableCallOptions | NonPayableCallOptions>(\n\t\tabi: AbiFunctionFragment,\n\t\tparams: unknown[],\n\t\terrorsAbi: AbiErrorFragment[],\n\t\toptions?: Options,\n\t\tcontractOptions?: ContractOptions,\n\t) {\n\t\tlet modifiedContractOptions = contractOptions ?? this.options;\n\t\tmodifiedContractOptions = {\n\t\t\t...modifiedContractOptions,\n\t\t\tinput: undefined,\n\t\t\tfrom: modifiedContractOptions.from ?? this.defaultAccount ?? undefined,\n\t\t};\n\t\tconst tx = getSendTxParams({\n\t\t\tabi,\n\t\t\tparams,\n\t\t\toptions: { ...options, dataInputFill: this.config.contractDataInputFill },\n\t\t\tcontractOptions: modifiedContractOptions,\n\t\t});\n\n\t\tconst transactionToSend = sendTransaction(this, tx, this.defaultReturnFormat, {\n\t\t\t// TODO Should make this configurable by the user\n\t\t\tcheckRevertBeforeSending: false,\n\t\t\tcontractAbi: this._jsonInterface,\n\t\t});\n\n\t\t// eslint-disable-next-line no-void\n\t\tvoid transactionToSend.on('error', (error: unknown) => {\n\t\t\tif (error instanceof ContractExecutionError) {\n\t\t\t\t// this will parse the error data by trying to decode the ABI error inputs according to EIP-838\n\t\t\t\tdecodeContractErrorData(errorsAbi, error.cause);\n\t\t\t}\n\t\t});\n\t\treturn transactionToSend;\n\t}\n\n\tprivate _contractMethodDeploySend<Options extends PayableCallOptions | NonPayableCallOptions>(\n\t\tabi: AbiFunctionFragment,\n\t\tparams: unknown[],\n\t\toptions?: Options,\n\t\tcontractOptions?: ContractOptions,\n\t) {\n\t\tlet modifiedContractOptions = contractOptions ?? this.options;\n\t\tmodifiedContractOptions = {\n\t\t\t...modifiedContractOptions,\n\t\t\tfrom: modifiedContractOptions.from ?? this.defaultAccount ?? undefined,\n\t\t};\n\t\tconst tx = getSendTxParams({\n\t\t\tabi,\n\t\t\tparams,\n\t\t\toptions: { ...options, dataInputFill: this.contractDataInputFill },\n\t\t\tcontractOptions: modifiedContractOptions,\n\t\t});\n\t\treturn sendTransaction(this, tx, this.defaultReturnFormat, {\n\t\t\ttransactionResolver: receipt => {\n\t\t\t\tif (receipt.status === BigInt(0)) {\n\t\t\t\t\tthrow new Web3ContractError(\"code couldn't be stored\", receipt);\n\t\t\t\t}\n\n\t\t\t\tconst newContract = this.clone();\n\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\t\t\tnewContract.options.address = receipt.contractAddress;\n\t\t\t\treturn newContract;\n\t\t\t},\n\t\t\tcontractAbi: this._jsonInterface,\n\t\t\t// TODO Should make this configurable by the user\n\t\t\tcheckRevertBeforeSending: false,\n\t\t});\n\t}\n\n\tprivate async _contractMethodEstimateGas<\n\t\tOptions extends PayableCallOptions | NonPayableCallOptions,\n\t\tReturnFormat extends DataFormat,\n\t>({\n\t\tabi,\n\t\tparams,\n\t\treturnFormat,\n\t\toptions,\n\t\tcontractOptions,\n\t}: {\n\t\tabi: AbiFunctionFragment;\n\t\tparams: unknown[];\n\t\treturnFormat: ReturnFormat;\n\t\toptions?: Options;\n\t\tcontractOptions?: ContractOptions;\n\t}) {\n\t\tconst tx = getEstimateGasParams({\n\t\t\tabi,\n\t\t\tparams,\n\t\t\toptions: { ...options, dataInputFill: this.config.contractDataInputFill },\n\t\t\tcontractOptions: contractOptions ?? this.options,\n\t\t});\n\t\treturn estimateGas(this, tx, BlockTags.LATEST, returnFormat ?? this.defaultReturnFormat);\n\t}\n\n\t// eslint-disable-next-line class-methods-use-this\n\tprivate _createContractEvent(\n\t\tabi: AbiEventFragment & { signature: HexString },\n\t\treturnFormat: DataFormat = this.defaultReturnFormat,\n\t): ContractBoundEvent {\n\t\treturn (...params: unknown[]) => {\n\t\t\tconst { topics, fromBlock } = encodeEventABI(\n\t\t\t\tthis.options,\n\t\t\t\tabi,\n\t\t\t\tparams[0] as EventParameters,\n\t\t\t);\n\t\t\tconst sub = new LogsSubscription(\n\t\t\t\t{\n\t\t\t\t\taddress: this.options.address,\n\t\t\t\t\ttopics,\n\t\t\t\t\tabi,\n\t\t\t\t\tjsonInterface: this._jsonInterface,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\t\t\t\t\tsubscriptionManager: this.subscriptionManager as Web3SubscriptionManager<\n\t\t\t\t\t\tunknown,\n\t\t\t\t\t\tany\n\t\t\t\t\t>,\n\t\t\t\t\treturnFormat,\n\t\t\t\t},\n\t\t\t);\n\t\t\tif (!isNullish(fromBlock)) {\n\t\t\t\t// emit past events when fromBlock is defined\n\t\t\t\tthis.getPastEvents(abi.name, { fromBlock, topics }, returnFormat)\n\t\t\t\t\t.then(logs => {\n\t\t\t\t\t\tif (logs) {\n\t\t\t\t\t\t\tlogs.forEach(log => sub.emit('data', log as EventLog));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.catch((error: Error) => {\n\t\t\t\t\t\tsub.emit(\n\t\t\t\t\t\t\t'error',\n\t\t\t\t\t\t\tnew SubscriptionError('Failed to get past events.', error),\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t}\n\t\t\tthis.subscriptionManager?.addSubscription(sub).catch((error: Error) => {\n\t\t\t\tsub.emit('error', new SubscriptionError('Failed to subscribe.', error));\n\t\t\t});\n\n\t\t\treturn sub;\n\t\t};\n\t}\n\n\tprotected subscribeToContextEvents<T extends Web3Context>(context: T): void {\n\t\t// eslint-disable-next-line @typescript-eslint/no-this-alias\n\t\tconst contractThis = this;\n\t\tthis.context = context;\n\n\t\tif (contractThis.syncWithContext) {\n\t\t\tcontext.on(Web3ConfigEvent.CONFIG_CHANGE, event => {\n\t\t\t\tcontractThis.setConfig({ [event.name]: event.newValue });\n\t\t\t});\n\t\t}\n\t}\n}\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/src/encoding.ts",[],["277","278","279"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/src/index.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/src/log_subscription.ts",["280"],["281","282","283","284","285","286"],"﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport {\n\tAbiEventFragment,\n\tLogsInput,\n\tHexString,\n\tTopic,\n\tDataFormat,\n\tEventLog,\n\tContractAbiWithSignature,\n} from 'web3-types';\nimport { Web3RequestManager, Web3Subscription, Web3SubscriptionManager } from 'web3-core';\nimport { decodeEventABI } from 'web3-eth';\n\n/**\n * LogSubscription to be used to subscribe to events logs.\n *\n * Following events are supported and can be accessed with either {@link LogsSubscription.once} or ${@link LogsSubscription.on} methods.\n *\n * - **connected**: Emitted when the subscription is connected.\n * - **data**: Fires on each incoming event with the event object as argument.\n * - **changed**: Fires on each event which was removed from the blockchain. The event will have the additional property `removed: true`.\n * - **error**: Fires on each error.\n *\n * ```ts\n * const subscription = await myContract.events.MyEvent({\n *   filter: {myIndexedParam: [20,23], myOtherIndexedParam: '0x123456789...'}, // Using an array means OR: e.g. 20 or 23\n *   fromBlock: 0\n * });\n *\n * subscription.on(\"connected\", function(subscriptionId){\n *   console.log(subscriptionId);\n * });\n *\n * subscription.on('data', function(event){\n *   console.log(event); // same results as the optional callback above\n * });\n *\n * subscription.on('changed', function(event){\n *   // remove event from local database\n * })\n *\n * subscription.on('error', function(error, receipt) { // If the transaction was rejected by the network with a receipt, the second parameter will be the receipt.\n *   ...\n * });\n *\n * // event output example\n * > {\n *   returnValues: {\n *       myIndexedParam: 20,\n *       myOtherIndexedParam: '0x123456789...',\n *       myNonIndexParam: 'My String'\n *   },\n *   raw: {\n *       data: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\n *       topics: ['0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7', '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385']\n *   },\n *   event: 'MyEvent',\n *   signature: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',\n *   logIndex: 0,\n *   transactionIndex: 0,\n *   transactionHash: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\n *   blockHash: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',\n *   blockNumber: 1234,\n *   address: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'\n * }\n * ```\n */\nexport class LogsSubscription extends Web3Subscription<\n\t{\n\t\tdata: EventLog;\n\t\tchanged: EventLog & { removed: true };\n\t},\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\t{ address?: HexString; topics?: (Topic | Topic[] | null)[]; abi: AbiEventFragment }\n> {\n\t/**\n\t * Address of tye contract\n\t */\n\tpublic readonly address?: HexString;\n\n\t/**\n\t * The list of topics subscribed\n\t */\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tpublic readonly topics?: (Topic | Topic[] | null)[];\n\n\t/**\n\t * The {@doclink glossary/json_interface | JSON Interface} of the event.\n\t */\n\tpublic readonly abi: AbiEventFragment & { signature: HexString };\n\n\tpublic readonly jsonInterface: ContractAbiWithSignature;\n\n\tpublic constructor(\n\t\targs: {\n\t\t\taddress?: HexString;\n\t\t\t// eslint-disable-next-line @typescript-eslint/ban-types\n\t\t\ttopics?: (Topic | Topic[] | null)[];\n\t\t\tabi: AbiEventFragment & { signature: HexString };\n\t\t\tjsonInterface: ContractAbiWithSignature;\n\t\t},\n\t\toptions: { subscriptionManager: Web3SubscriptionManager; returnFormat?: DataFormat },\n\t);\n\t/**\n\t * @deprecated This constructor overloading should not be used\n\t */\n\tpublic constructor(\n\t\targs: {\n\t\t\taddress?: HexString;\n\t\t\t// eslint-disable-next-line @typescript-eslint/ban-types\n\t\t\ttopics?: (Topic | Topic[] | null)[];\n\t\t\tabi: AbiEventFragment & { signature: HexString };\n\t\t\tjsonInterface: ContractAbiWithSignature;\n\t\t},\n\t\toptions: { requestManager: Web3RequestManager; returnFormat?: DataFormat },\n\t);\n\tpublic constructor(\n\t\targs: {\n\t\t\taddress?: HexString;\n\t\t\t// eslint-disable-next-line @typescript-eslint/ban-types\n\t\t\ttopics?: (Topic | Topic[] | null)[];\n\t\t\tabi: AbiEventFragment & { signature: HexString };\n\t\t\tjsonInterface: ContractAbiWithSignature;\n\t\t},\n\t\toptions: (\n\t\t\t| { subscriptionManager: Web3SubscriptionManager }\n\t\t\t| { requestManager: Web3RequestManager }\n\t\t) & {\n\t\t\treturnFormat?: DataFormat;\n\t\t},\n\t) {\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n\t\tsuper(args, options as any);\n\n\t\tthis.address = args.address;\n\t\tthis.topics = args.topics;\n\t\tthis.abi = args.abi;\n\t\tthis.jsonInterface = args.jsonInterface;\n\t}\n\n\tprotected _buildSubscriptionParams() {\n\t\treturn ['logs', { address: this.address, topics: this.topics }];\n\t}\n\n\tprotected formatSubscriptionResult(data: EventLog) {\n\t\treturn decodeEventABI(this.abi, data as LogsInput, this.jsonInterface, super.returnFormat);\n\t}\n}\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/src/types.ts",["287","288","289","290"],[],"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { Web3ContextInitOptions, Web3PromiEvent } from 'web3-core';\nimport {\n\tAccessListResult,\n\tBlockNumberOrTag,\n\tEthExecutionAPI,\n\tHexString,\n\tNumbers,\n\tTransactionReceipt,\n\tNonPayableCallOptions,\n\tPayableCallOptions,\n\tDataFormat,\n\tDEFAULT_RETURN_FORMAT,\n\tFormatType,\n} from 'web3-types';\nimport { NewHeadsSubscription, SendTransactionEvents } from 'web3-eth';\nimport { LogsSubscription } from './log_subscription.js';\n\nexport type NonPayableTxOptions = NonPayableCallOptions;\nexport type PayableTxOptions = PayableCallOptions;\nexport { ContractAbiWithSignature, EventLog, ContractOptions } from 'web3-types';\n\nexport interface ContractEventOptions {\n\t/**\n\t * Let you filter events by indexed parameters, e.g. `{filter: {myNumber: [12,13]}}` means all events where `myNumber` is `12` or `13`.\n\t */\n\tfilter?: Record<string, unknown>;\n\t/**\n\t * The block number (greater than or equal to) from which to get events on. Pre-defined block numbers as `earliest`, `latest`, `pending`, `safe` or `finalized` can also be used. For specific range use {@link Contract.getPastEvents}.\n\t */\n\tfromBlock?: BlockNumberOrTag;\n\t/**\n\t * This allows to manually set the topics for the event filter. If given the filter property and event signature, (topic[0]) will not be set automatically. Each topic can also be a nested array of topics that behaves as `or` operation between the given nested topics.\n\t */\n\ttopics?: string[];\n}\n\nexport interface NonPayableMethodObject<Inputs = unknown[], Outputs = unknown[]> {\n\targuments: Inputs;\n\t/**\n\t * This will call a method and execute its smart contract method in the EVM without sending any transaction. Note calling cannot alter the smart contract state.\n\t *\n\t * ```ts\n\t * // using the promise\n\t * const result = await myContract.methods.myMethod(123).call({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'});\n\t *\n\t * // MULTI-ARGUMENT RETURN:\n\t * // Solidity\n\t * contract MyContract {\n\t *   function myFunction() returns(uint256 myNumber, string myString) {\n\t *       return (23456, \"Hello!%\");\n\t *   }\n\t * }\n\t *\n\t * // web3.js\n\t * var MyContract = new web3.eth.Contract(abi, address);\n\t * const result = MyContract.methods.myFunction().call()\n\t * console.log(result)\n\t * > Result {\n\t *   myNumber: '23456',\n\t *   myString: 'Hello!%',\n\t *   0: '23456', // these are here as fallbacks if the name is not know or given\n\t *   1: 'Hello!%'\n\t * }\n\t *\n\t *\n\t * // SINGLE-ARGUMENT RETURN:\n\t * // Solidity\n\t * contract MyContract {\n\t *   function myFunction() returns(string myString) {\n\t *       return \"Hello!%\";\n\t *   }\n\t * }\n\t *\n\t * // web3.js\n\t * const MyContract = new web3.eth.Contract(abi, address);\n\t * const result = await MyContract.methods.myFunction().call();\n\t * console.log(result);\n\t * > \"Hello!%\"\n\t * ```\n\t *\n\t * @param tx - The options used for calling.\n\t * @param block - If you pass this parameter it will not use the default block set with contract.defaultBlock. Pre-defined block numbers as `earliest`, `latest`, `pending`, `safe` or `finalized can also be used. Useful for requesting data from or replaying transactions in past blocks.\n\t * @returns - The return value(s) of the smart contract method. If it returns a single value, it’s returned as is. If it has multiple return values they are returned as an object with properties and indices.\n\t */\n\n\tcall<SpecialOutput = Outputs>(\n\t\ttx?: NonPayableCallOptions,\n\t\tblock?: BlockNumberOrTag,\n\t): Promise<SpecialOutput>;\n\n\t/**\n\t * This will send a transaction to the smart contract and execute its method. Note this can alter the smart contract state.\n\t *\n\t * ```ts\n\t * await myContract.methods.myMethod(123).send({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'});\n\t *\n\t * const receipt = await myContract.methods.myMethod(123).send({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'});\n\t *\n\t *\n\t * // using the event emitter\n\t * const sendObj = myContract.methods.myMethod(123).send({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'})\n\t * sendObj.on('transactionHash', function(hash){\n\t *   ...\n\t * });\n\t *\n\t * sendObj.on('confirmation', function(confirmationNumber, receipt){\n\t *   ...\n\t * });\n\t *\n\t * sendObj.on('receipt', function(receipt){\n\t *   // receipt example\n\t *   console.log(receipt);\n\t *   > {\n\t *       \"transactionHash\": \"0x9fc76417374aa880d4449a1f7f31ec597f00b1f6f3dd2d66f4c9c6c445836d8b\",\n\t *       \"transactionIndex\": 0,\n\t *       \"blockHash\": \"0xef95f2f1ed3ca60b048b4bf67cde2195961e0bba6f70bcbea9a2c4e133e34b46\",\n\t *       \"blockNumber\": 3,\n\t *       \"contractAddress\": \"0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe\",\n\t *       \"cumulativeGasUsed\": 314159,\n\t *       \"gasUsed\": 30234,\n\t *       \"events\": {\n\t *           \"MyEvent\": {\n\t *               returnValues: {\n\t *                   myIndexedParam: 20,\n\t *                   myOtherIndexedParam: '0x123456789...',\n\t *                   myNonIndexParam: 'My String'\n\t *               },\n\t *               raw: {\n\t *                   data: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\n\t *                   topics: ['0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7', '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385']\n\t *               },\n\t *               event: 'MyEvent',\n\t *               signature: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',\n\t *               logIndex: 0,\n\t *               transactionIndex: 0,\n\t *               transactionHash: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\n\t *               blockHash: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',\n\t *               blockNumber: 1234,\n\t *               address: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'\n\t *           },\n\t *           \"MyOtherEvent\": {\n\t *               ...\n\t *           },\n\t *           \"MyMultipleEvent\":[{...}, {...}] // If there are multiple of the same event, they will be in an array\n\t *       }\n\t *   }\n\t * });\n\t *\n\t * sendObj.on('error', function(error, receipt) { // If the transaction was rejected by the network with a receipt, the second parameter will be the receipt.\n\t *   ...\n\t * });\n\t * ```\n\t *\n\t * @param tx - The options used for sending.\n\t * @returns - Returns a {@link PromiEvent} resolved with transaction receipt.\n\t */\n\tsend(\n\t\ttx?: NonPayableTxOptions,\n\t): Web3PromiEvent<\n\t\tFormatType<TransactionReceipt, typeof DEFAULT_RETURN_FORMAT>,\n\t\tSendTransactionEvents<typeof DEFAULT_RETURN_FORMAT>\n\t>;\n\n\t/**\n\t * Returns the amount of gas consumed by executing the method locally without creating a new transaction on the blockchain.\n\t * The returned amount can be used as a gas estimate for executing the transaction publicly. The actual gas used can be\n\t * different when sending the transaction later, as the state of the smart contract can be different at that time.\n\t *\n\t * ```ts\n\t * const gasAmount = await myContract.methods.myMethod(123).estimateGas({gas: 5000000});\n\t * if(gasAmount == 5000000) {\n\t *   console.log('Method ran out of gas');\n\t * }\n\t * ```\n\t *\n\t * @param options  - The options used for calling\n\t * @param returnFormat - The data format you want the output in.\n\t * @returns - The gas amount estimated.\n\t */\n\testimateGas<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\toptions?: NonPayableCallOptions,\n\t\treturnFormat?: ReturnFormat,\n\t): Promise<FormatType<Numbers, ReturnFormat>>;\n\n\t/**\n\t * Encodes the ABI for this method. The resulting hex string is 32-bit function signature hash plus the passed parameters in Solidity tightly packed format.\n\t * This can be used to send a transaction, call a method, or pass it into another smart contract’s method as arguments.\n\t * Set the data field on `web3.eth.sendTransaction` options as the encodeABI() result and it is the same as calling the contract method with `contract.myMethod.send()`.\n\t *\n\t * Some use cases for encodeABI() include: preparing a smart contract transaction for a multi signature wallet,\n\t * working with offline wallets and cold storage and creating transaction payload for complex smart contract proxy calls.\n\t *\n\t * @returns - The encoded ABI byte code to send via a transaction or call.\n\t */\n\tencodeABI(): string;\n\n\t/**\n\t * Decode raw result of method call into readable value(s).\n\t *\n\t * @param data - The data to decode.\n\t * @returns - The decoded data.\n\t */\n\tdecodeData<SpecialInputs = Inputs>(data: HexString): SpecialInputs;\n\n\t/**\n\t * This method generates an access list for a transaction. You must specify a `from` address and `gas` if it’s not specified in options.\n\t *\n\t * @param options - The options used for createAccessList.\n\t * @param block - If you pass this parameter it will not use the default block set with contract.defaultBlock. Pre-defined block numbers as `earliest`, `latest`, `pending`, `safe` or `finalized can also be used. Useful for requesting data from or replaying transactions in past blocks.\n\t * @returns The returned data of the createAccessList,  e.g. The generated access list for transaction.\n\t *\n\t * ```ts\n\t *  const result = await MyContract.methods.myFunction().createAccessList();\n\t *  console.log(result);\n\t *\n\t * > {\n\t *  \"accessList\": [\n\t *     {\n\t *       \"address\": \"0x15859bdf5aff2080a9968f6a410361e9598df62f\",\n\t *       \"storageKeys\": [\n\t *         \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n\t *       ]\n\t *     }\n\t *   ],\n\t *   \"gasUsed\": \"0x7671\"\n\t * }\n\t * ```\n\t */\n\tcreateAccessList(\n\t\ttx?: NonPayableCallOptions,\n\t\tblock?: BlockNumberOrTag,\n\t): Promise<AccessListResult>;\n}\n\nexport interface PayableMethodObject<Inputs = unknown[], Outputs = unknown[]> {\n\targuments: Inputs;\n\t/**\n\t * Will call a method and execute its smart contract method in the EVM without sending any transaction. Note calling cannot alter the smart contract state.\n\t *\n\t * ```ts\n\t * // using the promise\n\t * const result = await myContract.methods.myMethod(123).call({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'});\n\t *\n\t * // MULTI-ARGUMENT RETURN:\n\t * // Solidity\n\t * contract MyContract {\n\t *   function myFunction() returns(uint256 myNumber, string myString) {\n\t *       return (23456, \"Hello!%\");\n\t *   }\n\t * }\n\t *\n\t * // web3.js\n\t * var MyContract = new web3.eth.Contract(abi, address);\n\t * const result = MyContract.methods.myFunction().call()\n\t * console.log(result)\n\t * > Result {\n\t *   myNumber: '23456',\n\t *   myString: 'Hello!%',\n\t *   0: '23456', // these are here as fallbacks if the name is not know or given\n\t *   1: 'Hello!%'\n\t * }\n\t *\n\t *\n\t * // SINGLE-ARGUMENT RETURN:\n\t * // Solidity\n\t * contract MyContract {\n\t *   function myFunction() returns(string myString) {\n\t *       return \"Hello!%\";\n\t *   }\n\t * }\n\t *\n\t * // web3.js\n\t * const MyContract = new web3.eth.Contract(abi, address);\n\t * const result = await MyContract.methods.myFunction().call();\n\t * console.log(result);\n\t * > \"Hello!%\"\n\t * ```\n\t *\n\t * @param tx - The options used for calling.\n\t * @param block - If you pass this parameter it will not use the default block set with contract.defaultBlock. Pre-defined block numbers as `earliest`, `latest`, `pending`, `safe` or `finalized can also be used. Useful for requesting data from or replaying transactions in past blocks.\n\t * @returns - The return value(s) of the smart contract method. If it returns a single value, it’s returned as is. If it has multiple return values they are returned as an object with properties and indices.\n\t */\n\tcall<SpecialOutput = Outputs>(\n\t\ttx?: PayableCallOptions,\n\t\tblock?: BlockNumberOrTag,\n\t): Promise<SpecialOutput>;\n\n\t/**\n\t * Will send a transaction to the smart contract and execute its method. Note this can alter the smart contract state.\n\t *\n\t * ```ts\n\t * await myContract.methods.myMethod(123).send({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'});\n\t *\n\t * const receipt = await myContract.methods.myMethod(123).send({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'});\n\t *\n\t *\n\t * // using the event emitter\n\t * const sendObj = myContract.methods.myMethod(123).send({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'})\n\t * sendObj.on('transactionHash', function(hash){\n\t *   ...\n\t * });\n\t *\n\t * sendObj.on('confirmation', function(confirmationNumber, receipt){\n\t *   ...\n\t * });\n\t *\n\t * sendObj.on('receipt', function(receipt){\n\t *   // receipt example\n\t *   console.log(receipt);\n\t *   > {\n\t *       \"transactionHash\": \"0x9fc76417374aa880d4449a1f7f31ec597f00b1f6f3dd2d66f4c9c6c445836d8b\",\n\t *       \"transactionIndex\": 0,\n\t *       \"blockHash\": \"0xef95f2f1ed3ca60b048b4bf67cde2195961e0bba6f70bcbea9a2c4e133e34b46\",\n\t *       \"blockNumber\": 3,\n\t *       \"contractAddress\": \"0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe\",\n\t *       \"cumulativeGasUsed\": 314159,\n\t *       \"gasUsed\": 30234,\n\t *       \"events\": {\n\t *           \"MyEvent\": {\n\t *               returnValues: {\n\t *                   myIndexedParam: 20,\n\t *                   myOtherIndexedParam: '0x123456789...',\n\t *                   myNonIndexParam: 'My String'\n\t *               },\n\t *               raw: {\n\t *                   data: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\n\t *                   topics: ['0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7', '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385']\n\t *               },\n\t *               event: 'MyEvent',\n\t *               signature: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',\n\t *               logIndex: 0,\n\t *               transactionIndex: 0,\n\t *               transactionHash: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\n\t *               blockHash: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',\n\t *               blockNumber: 1234,\n\t *               address: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'\n\t *           },\n\t *           \"MyOtherEvent\": {\n\t *               ...\n\t *           },\n\t *           \"MyMultipleEvent\":[{...}, {...}] // If there are multiple of the same event, they will be in an array\n\t *       }\n\t *   }\n\t * });\n\t *\n\t * sendObj.on('error', function(error, receipt) { // If the transaction was rejected by the network with a receipt, the second parameter will be the receipt.\n\t *   ...\n\t * });\n\t * ```\n\t *\n\t * @param tx - The options used for sending.\n\t * @returns - Returns a {@link PromiEvent} object resolved with transaction receipt.\n\t */\n\tsend(\n\t\ttx?: PayableTxOptions,\n\t): Web3PromiEvent<\n\t\tFormatType<TransactionReceipt, typeof DEFAULT_RETURN_FORMAT>,\n\t\tSendTransactionEvents<typeof DEFAULT_RETURN_FORMAT>\n\t>;\n\n\t/**\n\t * Returns the amount of gas consumed by executing the method locally without creating a new transaction on the blockchain.\n\t * The returned amount can be used as a gas estimate for executing the transaction publicly. The actual gas used can be\n\t * different when sending the transaction later, as the state of the smart contract can be different at that time.\n\t *\n\t * ```ts\n\t * const gasAmount = await myContract.methods.myMethod(123).estimateGas({gas: 5000000});\n\t * if(gasAmount == 5000000) {\n\t *   console.log('Method ran out of gas');\n\t * }\n\t * ```\n\t *\n\t * @param options  - The options used for calling\n\t * @param returnFormat - The data format you want the output in.\n\t * @returns - The gas amount estimated.\n\t */\n\testimateGas<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\toptions?: PayableCallOptions,\n\t\treturnFormat?: ReturnFormat,\n\t): Promise<FormatType<Numbers, ReturnFormat>>;\n\n\t/**\n\t * Encodes the ABI for this method. The resulting hex string is 32-bit function signature hash plus the passed parameters in Solidity tightly packed format.\n\t * This can be used to send a transaction, call a method, or pass it into another smart contract’s method as arguments.\n\t * Set the data field on `web3.eth.sendTransaction` options as the encodeABI() result and it is the same as calling the contract method with `contract.myMethod.send()`.\n\t *\n\t * Some use cases for encodeABI() include: preparing a smart contract transaction for a multi signature wallet,\n\t * working with offline wallets and cold storage and creating transaction payload for complex smart contract proxy calls.\n\t *\n\t * @returns - The encoded ABI byte code to send via a transaction or call.\n\t */\n\tencodeABI(): HexString;\n\n\t/**\n\t * Decode raw result of method call into readable value(s).\n\t *\n\t * @param data - The data to decode.\n\t * @returns - The decoded data.\n\t */\n\tdecodeData<SpecialInputs = Inputs>(data: HexString): SpecialInputs;\n\n\t/**\n\t * This method generates an access list for a transaction. You must specify a `from` address and `gas` if it’s not specified in options.\n\t *\n\t * @param options - The options used for createAccessList.\n\t * @param block - If you pass this parameter it will not use the default block set with contract.defaultBlock. Pre-defined block numbers as `earliest`, `latest`, `pending`, `safe` or `finalized can also be used. Useful for requesting data from or replaying transactions in past blocks.\n\t * @returns The returned data of the createAccessList,  e.g. The generated access list for transaction.\n\t *\n\t * ```ts\n\t *  const result = await MyContract.methods.myFunction().createAccessList();\n\t *  console.log(result);\n\t *\n\t * > {\n\t *  \"accessList\": [\n\t *     {\n\t *       \"address\": \"0x15859bdf5aff2080a9968f6a410361e9598df62f\",\n\t *       \"storageKeys\": [\n\t *         \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n\t *       ]\n\t *     }\n\t *   ],\n\t *   \"gasUsed\": \"0x7671\"\n\t * }\n\t *```\n\t */\n\tcreateAccessList(tx?: PayableCallOptions, block?: BlockNumberOrTag): Promise<AccessListResult>;\n}\n\nexport type Web3ContractContext = Partial<\n\tWeb3ContextInitOptions<\n\t\tEthExecutionAPI,\n\t\t{\n\t\t\tlogs: typeof LogsSubscription;\n\t\t\tnewHeads: typeof NewHeadsSubscription;\n\t\t\tnewBlockHeaders: typeof NewHeadsSubscription;\n\t\t}\n\t>\n>;\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/src/utils.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/fixtures/AbiItem.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/fixtures/MyContract.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/fixtures/SimpleOverloaded.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/fixtures/erc20.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/fixtures/erc721.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/fixtures/storage.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/fixtures/system_test_utils.ts",[],["291","292","293","294","295","296","297","298","299","300","301","302","303","304"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/fixtures/unitTestFixtures.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/integration/contract_accesslist.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/integration/contract_clone.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/integration/contract_defaults.test.ts",[],["305"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/integration/contract_defaults_extra.test.ts",[],["306","307","308"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/integration/contract_deploy.test.ts",[],["309","310","311","312"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/integration/contract_empty_string.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/integration/contract_erc20.test.ts",[],["313","314"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/integration/contract_erc721.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/integration/contract_estimateGas_without_0x.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/integration/contract_events.test.ts",[],["315","316","317","318","319","320","321"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/integration/contract_filter_events.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/integration/contract_methods.test.ts",[],["322","323"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/integration/contract_methods_errors.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/integration/contract_negative_numbers.test.ts",["324"],[],"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport Contract from '../../src';\nimport { createTempAccount, getSystemTestProvider } from '../fixtures/system_test_utils';\nimport {\n\tNegativeNumbersAbi,\n\tNegativeNumbersBytecode,\n} from '../shared_fixtures/build/NegativeNumbers';\n\ndescribe('Contract - NegativeNumbers.sol', () => {\n\tconst storedNegativeNumber = '-170141183460469231731687303715884105727';\n\n\tlet contract: Contract<typeof NegativeNumbersAbi>;\n\tlet contractDeployed: Contract<typeof NegativeNumbersAbi>;\n\tlet account: Record<string, string>;\n\tlet sendOptions: Record<string, string>;\n\n\tbeforeAll(async () => {\n\t\tcontract = new Contract(NegativeNumbersAbi, undefined, {\n\t\t\tprovider: getSystemTestProvider(),\n\t\t});\n\t\taccount = await createTempAccount();\n\n\t\tconst deployOptions: Record<string, unknown> = {\n\t\t\tdata: NegativeNumbersBytecode,\n\t\t\targuments: [storedNegativeNumber],\n\t\t};\n\t\tsendOptions = {\n\t\t\tfrom: account.address,\n\t\t\tgas: '1000000',\n\t\t};\n\n\t\tcontractDeployed = await contract.deploy(deployOptions).send(sendOptions);\n\t});\n\n\tit('should retrieve storedNegativeNumber', async () => {\n\t\tconst response = await contractDeployed.methods.storedNegativeNumber().call();\n\t\texpect(response).toBe(BigInt(storedNegativeNumber));\n\t});\n\n\tit('should return storedNegativeNumber when calling oneNegativeNumber(storedNegativeNumber)', async () => {\n\t\tconst transactionReceipt = await contractDeployed.methods\n\t\t\t.oneNegativeNumber(storedNegativeNumber)\n\t\t\t.send(sendOptions);\n\n\t\texpect(transactionReceipt.logs).toMatchObject([\n\t\t\t{\n\t\t\t\ttopics: ['0x5b53dc4e9e8fa2416d4e172bdad04be5a6d622643bc9ef45987b2caadd0d0c95'],\n\t\t\t\tdata: '0xffffffffffffffffffffffffffffffff80000000000000000000000000000001',\n\t\t\t},\n\t\t\t{\n\t\t\t\ttopics: [\n\t\t\t\t\t'0x33e7dccd3899498f4408d6468e5dfad650f32574dba2ec4f13399a82e62166d5',\n\t\t\t\t\t'0xffffffffffffffffffffffffffffffff80000000000000000000000000000001',\n\t\t\t\t],\n\t\t\t\tdata: '0x',\n\t\t\t},\n\t\t]);\n\t});\n\n\tit('should return storedNegativeNumber when calling twoNegativeNumbers(storedNegativeNumber, secondNegativeNumber)', async () => {\n\t\tconst secondNegativeNumber =\n\t\t\t'-17014118346046923173168730371588410572712039182039812039812098312';\n\n\t\tconst transactionReceipt = await contractDeployed.methods\n\t\t\t.twoNegativeNumbers(storedNegativeNumber, secondNegativeNumber)\n\t\t\t.send(sendOptions);\n\n\t\texpect(transactionReceipt.logs).toMatchObject([\n\t\t\t{\n\t\t\t\ttopics: ['0xfaa997e4b16dcde196bbb99868e16fa934a0b4c1f019e494d9fbffb5abc46fc2'],\n\t\t\t\tdata: '0xffffffffffffffffffffffffffffffff80000000000000000000000000000001ffffffffffd6a416919bf9968e000000000000000048c26d7f0da3fa91bf56f8',\n\t\t\t},\n\t\t\t{\n\t\t\t\ttopics: [\n\t\t\t\t\t'0x0204c97becd72594486cf753e30e8acfc9951ee663e404bc858e3d10b80da99b',\n\t\t\t\t\t'0xffffffffffffffffffffffffffffffff80000000000000000000000000000001',\n\t\t\t\t\t'0xffffffffffd6a416919bf9968e000000000000000048c26d7f0da3fa91bf56f8',\n\t\t\t\t],\n\t\t\t\tdata: '0x',\n\t\t\t},\n\t\t]);\n\t});\n\n\tit('should return storedNegativeNumber when calling otherNegativeNumbers(storedNegativeNumber, secondNegativeNumber)', async () => {\n\t\tconst secondNegativeNumber =\n\t\t\t'-17014118346046923173168730371588410572712039182039812039812098312';\n\n\t\tconst transactionReceipt = await contractDeployed.methods\n\t\t\t.otherNegativeNumbers(storedNegativeNumber, secondNegativeNumber, 'fooBar')\n\t\t\t.send(sendOptions);\n\n\t\texpect(transactionReceipt.logs).toMatchObject([\n\t\t\t{\n\t\t\t\ttopics: ['0x2e1fb99ee1b27b6491b2d46a54ac8daca82f2da6810e4b8eed4d634f78fa6948'],\n\t\t\t\tdata: '0xffffffffffffffffffffffffffffffff80000000000000000000000000000001ffffffffffd6a416919bf9968e000000000000000048c26d7f0da3fa91bf56f800000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000006666f6f4261720000000000000000000000000000000000000000000000000000',\n\t\t\t},\n\t\t\t{\n\t\t\t\ttopics: [\n\t\t\t\t\t'0x0e29b573959c1b6ffd5e16886385ec1732e187cc5ac10e8faceb5e02a1c7b50b',\n\t\t\t\t\t'0xffffffffffffffffffffffffffffffff80000000000000000000000000000001',\n\t\t\t\t\t'0xffffffffffd6a416919bf9968e000000000000000048c26d7f0da3fa91bf56f8',\n\t\t\t\t],\n\t\t\t\tdata: '0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000006666f6f4261720000000000000000000000000000000000000000000000000000',\n\t\t\t},\n\t\t]);\n\t});\n});\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/integration/contract_simple_overloaded.test.ts",["325"],[],"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport Contract from '../../src';\nimport { SimpleOverloadedAbi, SimpleOverloadedBytecode } from '../fixtures/SimpleOverloaded';\nimport { createTempAccount, getSystemTestProvider } from '../fixtures/system_test_utils';\n\ndescribe('SimpleOverloaded', () => {\n\tlet contract: Contract<typeof SimpleOverloadedAbi>;\n\tlet mainAcc: { address: string; privateKey: string };\n\tlet contractDeployed: Contract<typeof SimpleOverloadedAbi>;\n\n\tbeforeAll(async () => {\n\t\tmainAcc = await createTempAccount();\n\t\tcontract = new Contract(SimpleOverloadedAbi, undefined, {\n\t\t\tprovider: getSystemTestProvider(),\n\t\t});\n\t\tcontractDeployed = await contract\n\t\t\t.deploy({\n\t\t\t\tdata: SimpleOverloadedBytecode,\n\t\t\t})\n\t\t\t.send({ from: mainAcc.address, gas: '10000000' });\n\t});\n\n\tit('should call getSecret with no args', async () => {\n\t\tconst response = await contractDeployed.methods.getSecret().call();\n\t\texpect(response).toBe(BigInt(42));\n\t});\n\n\tit('should call getSecret with one args', async () => {\n\t\tconst response = await contractDeployed.methods.getSecret(42).call();\n\t\texpect(response).toBe(BigInt(84));\n\t});\n\n\tit('should call getSecret with two args', async () => {\n\t\tconst response = await contractDeployed.methods.getSecret(42, 'some string').call();\n\t\texpect(response).toStrictEqual({ '0': BigInt(84), '1': 'some string', __length__: 2 });\n\t});\n\n\tit('should send setSecret with no args', async () => {\n\t\tconst transactionReceipt = await contractDeployed.methods\n\t\t\t.setSecret()\n\t\t\t.send({ from: mainAcc.address, gas: '10000000' });\n\t\texpect(transactionReceipt.status).toBe(BigInt(1));\n\n\t\tconst response = await contractDeployed.methods.getSecret(42, 'some string').call();\n\t\texpect(response).toStrictEqual({ '0': BigInt(84), '1': 'some string', __length__: 2 });\n\t});\n\n\tit('should send setSecret with one args', async () => {\n\t\tconst transactionReceipt = await contractDeployed.methods\n\t\t\t.setSecret(42)\n\t\t\t.send({ from: mainAcc.address, gas: '10000000' });\n\t\texpect(transactionReceipt.status).toBe(BigInt(1));\n\n\t\tconst response = await contractDeployed.methods.getSecret(42, 'some string').call();\n\t\texpect(response).toStrictEqual({ '0': BigInt(126), '1': 'some string', __length__: 2 });\n\t});\n\n\tit('should send setSecret with two args', async () => {\n\t\tconst transactionReceipt = await contractDeployed.methods\n\t\t\t.setSecret(42, 'more string')\n\t\t\t.send({ from: mainAcc.address, gas: '10000000' });\n\t\texpect(transactionReceipt.status).toBe(BigInt(1));\n\n\t\tconst response = await contractDeployed.methods.getSecret(42, 'some string').call();\n\t\texpect(response).toStrictEqual({\n\t\t\t'0': BigInt(168),\n\t\t\t'1': 'more stringsome string',\n\t\t\t__length__: 2,\n\t\t});\n\t});\n\n\tit('should send multicall with one arg', async () => {\n\t\tconst transactionReceipt = await contractDeployed.methods\n\t\t\t.multicall(['0x5b9fdc30', '0x5b9fdc30', '0x5b9fdc30'])\n\t\t\t.send({ from: mainAcc.address, gas: '10000000' });\n\t\texpect(transactionReceipt.status).toBe(BigInt(1));\n\t});\n\n\tit('should send multicall with two args', async () => {\n\t\tconst transactionReceipt = await contractDeployed.methods\n\t\t\t.multicall(99999999999, ['0x5b9fdc30', '0x5b9fdc30', '0x5b9fdc30'])\n\t\t\t.send({ from: mainAcc.address, gas: '10000000' });\n\t\texpect(transactionReceipt.status).toBe(BigInt(1));\n\t});\n});\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/integration/local_account/contract_deploy.test.ts",[],["326","327","328"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/integration/local_account/contract_erc20.test.ts",[],["329"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/integration/local_account/contract_erc721.test.ts",[],["330"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/integration/local_account/contract_overloaded_methods.test.ts",[],["331"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/shared_fixtures/build/Basic.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/shared_fixtures/build/DeployRevert.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/shared_fixtures/build/ERC20Token.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/shared_fixtures/build/ERC721Token.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/shared_fixtures/build/ErrorsContract.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/shared_fixtures/build/Greeter.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/shared_fixtures/build/GreeterWithOverloading.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/shared_fixtures/build/MsgSender.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/shared_fixtures/build/MyContract.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/shared_fixtures/build/NegativeNumbers.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/shared_fixtures/utils.ts",[],["332"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/unit/contract.test.ts",["333","334","335","336","337","338","339","340"],["341","342","343","344","345","346","347","348","349","350","351","352","353","354","355","356","357","358","359","360","361","362","363","364","365","366","367","368","369","370","371","372","373","374","375","376","377","378","379","380","381","382","383","384","385","386","387","388","389","390","391","392","393","394","395","396","397","398","399","400","401","402","403","404","405","406","407","408","409","410","411","412","413","414","415","416","417","418","419","420","421"],"﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport * as eth from 'web3-eth';\nimport { ValidChains, Hardfork, AccessListResult, Address, ETH_DATA_FORMAT , DEFAULT_RETURN_FORMAT } from 'web3-types';\nimport { Web3ContractError } from 'web3-errors';\nimport { Web3Context , Web3ConfigEvent } from 'web3-core';\nimport { Web3ValidatorError } from 'web3-validator';\nimport { AbiItem } from 'web3-utils';\nimport { stringify } from 'flatted';\nimport {Abi} from '../fixtures/AbiItem'\nimport { Contract } from '../../src';\nimport { sampleStorageContractABI } from '../fixtures/storage';\nimport { GreeterAbi, GreeterBytecode } from '../shared_fixtures/build/Greeter';\nimport {\n\tGreeterWithOverloadingAbi,\n\tGreeterWithOverloadingBytecode,\n} from '../shared_fixtures/build/GreeterWithOverloading';\nimport { AllGetPastEventsData, getLogsData, getPastEventsData } from '../fixtures/unitTestFixtures';\nimport { getSystemTestProvider } from '../fixtures/system_test_utils';\nimport { erc721Abi } from '../fixtures/erc721';\nimport { ERC20TokenAbi } from '../shared_fixtures/build/ERC20Token';\nimport { processAsync } from '../shared_fixtures/utils';\n\njest.mock('web3-eth', () => {\n\tconst allAutoMocked = jest.createMockFromModule('web3-eth');\n\tconst actual = jest.requireActual('web3-eth');\n\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\treturn {\n\t\t__esModules: true,\n\t\t// @ts-expect-error ignore allAutoMocked type\n\t\t...allAutoMocked,\n\t\tdecodeEventABI: actual.decodeEventABI,\n\t};\n});\n\ndescribe('Contract', () => {\n\tdescribe('constructor', () => {\n\t\tit('should init with only the abi', () => {\n\t\t\tconst contract = new Contract([]);\n\n\t\t\texpect(contract).toBeInstanceOf(Contract);\n\t\t});\n\n\t\tit('should throw if both options.data and options.input are provided', () => {\n\t\t\texpect(\n\t\t\t\t() =>\n\t\t\t\t\tnew Contract([], {\n\t\t\t\t\t\tdata: GreeterBytecode,\n\t\t\t\t\t\tinput: GreeterBytecode,\n\t\t\t\t\t}),\n\t\t\t).toThrow(\n\t\t\t\t'You can\\'t have \"data\" and \"input\" as properties of a contract at the same time, please use either \"data\" or \"input\" instead.',\n\t\t\t);\n\t\t});\n\n\t\tit('should init with abi and address', () => {\n\t\t\tconst contract = new Contract([], '0x00000000219ab540356cBB839Cbe05303d7705Fa');\n\n\t\t\texpect(contract).toBeInstanceOf(Contract);\n\t\t});\n\n\t\tit('should init with abi and options', () => {\n\t\t\tconst contract = new Contract([], { gas: '123' });\n\n\t\t\texpect(contract).toBeInstanceOf(Contract);\n\t\t});\n\n\t\tit('method should have correct type by ABI', () => {\n\t\t\tconst contractInstance = new Contract([\n\t\t\t\t{\n\t\t\t\t\tinputs: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tinternalType: 'uint256',\n\t\t\t\t\t\t\tname: 'tokenId',\n\t\t\t\t\t\t\ttype: 'uint256',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tname: 'tokenURI',\n\t\t\t\t\toutputs: [{ internalType: 'string', name: '', type: 'string' }],\n\t\t\t\t\tstateMutability: 'view',\n\t\t\t\t\ttype: 'function',\n\t\t\t\t},\n\t\t\t] as const);\n\n\t\t\tconst method = contractInstance.methods.tokenURI(123);\n\n\t\t\texpect(method).toBeDefined();\n\t\t});\n\n\t\tit('should init with abi, options and context', () => {\n\t\t\tconst contract = new Contract(\n\t\t\t\t[],\n\t\t\t\t{ gas: '123' },\n\t\t\t\t{ config: { defaultAccount: '0x00000000219ab540356cBB839Cbe05303d7705Fa' } },\n\t\t\t);\n\n\t\t\texpect(contract).toBeInstanceOf(Contract);\n\t\t});\n\n\t\tit('should init with abiItem, options and context', () => {\n\t\t\tconst contract = new Contract(\n\t\t\t\t[Abi as AbiItem],\n\t\t\t\t{ gas: '123' },\n\t\t\t\t{ config: { defaultAccount: '0x00000000219ab540356cBB839Cbe05303d7705Fa' } },\n\t\t\t);\n\n\t\t\texpect(contract).toBeInstanceOf(Contract);\n\t\t});\n\n\t\tit('should init with abi, address and options', () => {\n\t\t\tconst contract = new Contract([], '0x00000000219ab540356cBB839Cbe05303d7705Fa', {\n\t\t\t\tgas: '123',\n\t\t\t});\n\n\t\t\texpect(contract).toBeInstanceOf(Contract);\n\t\t});\n\n\t\tit('should init with abi, address, options and context', () => {\n\t\t\tconst contract = new Contract(\n\t\t\t\t[],\n\t\t\t\t'0x00000000219ab540356cBB839Cbe05303d7705Fa',\n\t\t\t\t{ gas: '123' },\n\t\t\t\t{ config: { defaultAccount: '0x00000000219ab540356cBB839Cbe05303d7705Fa' } },\n\t\t\t);\n\n\t\t\texpect(contract).toBeInstanceOf(Contract);\n\t\t});\n\n\t\tit('should set the provider, from options, upon instantiation', () => {\n\t\t\tconst provider = getSystemTestProvider();\n\t\t\tconst contract = new Contract([], '', {\n\t\t\t\tprovider,\n\t\t\t});\n\n\t\t\texpect(contract.provider).toEqual({\n\t\t\t\tclientUrl: provider,\n\t\t\t\thttpProviderOptions: undefined,\n\t\t\t});\n\t\t});\n\n\t\tit('should set the provider, from context, upon instantiation', () => {\n\t\t\tconst provider = getSystemTestProvider();\n\t\t\tconst contract = new Contract(\n\t\t\t\t[],\n\t\t\t\t'',\n\t\t\t\t{},\n\t\t\t\t{\n\t\t\t\t\tprovider,\n\t\t\t\t},\n\t\t\t);\n\n\t\t\texpect(contract.provider).toEqual({\n\t\t\t\tclientUrl: provider,\n\t\t\t\thttpProviderOptions: undefined,\n\t\t\t});\n\t\t});\n\n\t\tit('should pass the returnDataFormat to `_parseAndSetAddress` and `_parseAndSetJsonInterface`', () => {\n\t\t\tconst contract = new Contract([], '', ETH_DATA_FORMAT);\n\n\t\t\t// @ts-expect-error run protected method\n\t\t\tconst parseAndSetAddressSpy = jest.spyOn(contract, '_parseAndSetAddress');\n\t\t\tcontract.options.address = '0x6e599da0bff7a6598ac1224e4985430bf16458a4';\n\n\t\t\texpect(parseAndSetAddressSpy).toHaveBeenCalledWith(\n\t\t\t\t'0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n\t\t\t\tETH_DATA_FORMAT,\n\t\t\t);\n\t\t\tconst parseAndSetJsonInterfaceSpy = jest.spyOn(\n\t\t\t\tcontract,\n\t\t\t\t// @ts-expect-error run protected method\n\t\t\t\t'_parseAndSetJsonInterface',\n\t\t\t);\n\t\t\tcontract.options.jsonInterface = [];\n\t\t\texpect(parseAndSetJsonInterfaceSpy).toHaveBeenCalledWith([], ETH_DATA_FORMAT);\n\t\t});\n\n\t\tit('should pass the returnDataFormat, as the constructor forth parameter, to `_parseAndSetAddress` and `_parseAndSetJsonInterface`', () => {\n\t\t\tconst contract = new Contract([], '', {}, ETH_DATA_FORMAT);\n\n\t\t\t// @ts-expect-error run protected method\n\t\t\tconst parseAndSetAddressSpy = jest.spyOn(contract, '_parseAndSetAddress');\n\t\t\tcontract.options.address = '0x6e599da0bff7a6598ac1224e4985430bf16458a4';\n\n\t\t\texpect(parseAndSetAddressSpy).toHaveBeenCalledWith(\n\t\t\t\t'0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n\t\t\t\tETH_DATA_FORMAT,\n\t\t\t);\n\t\t\tconst parseAndSetJsonInterfaceSpy = jest.spyOn(\n\t\t\t\tcontract,\n\t\t\t\t// @ts-expect-error run protected method\n\t\t\t\t'_parseAndSetJsonInterface',\n\t\t\t);\n\t\t\tcontract.options.jsonInterface = [];\n\t\t\texpect(parseAndSetJsonInterfaceSpy).toHaveBeenCalledWith([], ETH_DATA_FORMAT);\n\t\t});\n\n\t\tit('should pass the returnDataFormat, as the constructor fifth parameter, to `_parseAndSetAddress` and `_parseAndSetJsonInterface`', () => {\n\t\t\tconst contract = new Contract([], '', {}, {}, ETH_DATA_FORMAT);\n\n\t\t\t// @ts-expect-error run protected method\n\t\t\tconst parseAndSetAddressSpy = jest.spyOn(contract, '_parseAndSetAddress');\n\t\t\tcontract.options.address = '0x6e599da0bff7a6598ac1224e4985430bf16458a4';\n\n\t\t\texpect(parseAndSetAddressSpy).toHaveBeenCalledWith(\n\t\t\t\t'0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n\t\t\t\tETH_DATA_FORMAT,\n\t\t\t);\n\t\t\tconst parseAndSetJsonInterfaceSpy = jest.spyOn(\n\t\t\t\tcontract,\n\t\t\t\t// @ts-expect-error run protected method\n\t\t\t\t'_parseAndSetJsonInterface',\n\t\t\t);\n\t\t\tcontract.options.jsonInterface = [];\n\t\t\texpect(parseAndSetJsonInterfaceSpy).toHaveBeenCalledWith([], ETH_DATA_FORMAT);\n\t\t});\n\t});\n\n\tdescribe('Contract functions and defaults', () => {\n\t\tlet sendOptions: Record<string, unknown>;\n\t\tconst deployedAddr = '0x20bc23D0598b12c34cBDEf1fae439Ba8744DB426';\n\n\t\tbeforeEach(() => {\n\t\t\tsendOptions = {\n\t\t\t\tfrom: '0x12364916b10Ae90076dDa6dE756EE1395BB69ec2',\n\t\t\t\tgas: '1000000',\n\t\t\t};\n\t\t});\n\n\t\tit('should deploy contract with input property', async () => {\n\t\t\tconst input = `${GreeterBytecode}0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000b4d79204772656574696e67000000000000000000000000000000000000000000`;\n\t\t\tconst contract = new Contract(GreeterAbi);\n\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\t\t\tconst sendTransactionSpy = jest\n\t\t\t\t.spyOn(eth, 'sendTransaction')\n\t\t\t\t.mockImplementation((_objInstance, tx) => {\n\t\t\t\t\texpect(tx.to).toBeUndefined();\n\t\t\t\t\texpect(tx.gas).toStrictEqual(sendOptions.gas);\n\t\t\t\t\texpect(tx.gasPrice).toBeUndefined();\n\t\t\t\t\texpect(tx.from).toStrictEqual(sendOptions.from);\n\t\t\t\t\texpect(tx.input).toStrictEqual(input); // padded data\n\n\t\t\t\t\tconst newContract = contract.clone();\n\t\t\t\t\tnewContract.options.address = deployedAddr;\n\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\t\t\t\treturn Promise.resolve(newContract) as any;\n\t\t\t\t});\n\n\t\t\tconst deployedContract = await contract\n\t\t\t\t.deploy({\n\t\t\t\t\tinput: GreeterBytecode,\n\t\t\t\t\targuments: ['My Greeting'],\n\t\t\t\t})\n\t\t\t\t.send(sendOptions);\n\n\t\t\texpect(deployedContract).toBeDefined();\n\t\t\texpect(deployedContract.options.address).toStrictEqual(deployedAddr);\n\t\t\tsendTransactionSpy.mockClear();\n\t\t});\n\n\t\tit('should deploy contract with input property with no ABI', async () => {\n\t\t\tconst input = `${GreeterBytecode}0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000b4d79204772656574696e67000000000000000000000000000000000000000000`;\n\t\t\tconst contract = new Contract([]);\n\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\t\t\tconst sendTransactionSpy = jest\n\t\t\t\t.spyOn(eth, 'sendTransaction')\n\t\t\t\t.mockImplementation((_objInstance, tx) => {\n\t\t\t\t\texpect(tx.to).toBeUndefined();\n\t\t\t\t\texpect(tx.gas).toStrictEqual(sendOptions.gas);\n\t\t\t\t\texpect(tx.gasPrice).toBeUndefined();\n\t\t\t\t\texpect(tx.from).toStrictEqual(sendOptions.from);\n\t\t\t\t\texpect(tx.input).toStrictEqual(input); // padded data\n\n\t\t\t\t\tconst newContract = contract.clone();\n\t\t\t\t\tnewContract.options.address = deployedAddr;\n\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\t\t\t\treturn Promise.resolve(newContract) as any;\n\t\t\t\t});\n\n\t\t\tconst deployedContract = await contract\n\t\t\t\t.deploy({\n\t\t\t\t\tinput: GreeterBytecode,\n\t\t\t\t\targuments: ['My Greeting'],\n\t\t\t\t})\n\t\t\t\t.send(sendOptions);\n\n\t\t\texpect(deployedContract).toBeDefined();\n\t\t\texpect(deployedContract.options.address).toStrictEqual(deployedAddr);\n\t\t\tsendTransactionSpy.mockClear();\n\t\t});\n\n\t\tit('should deploy contract with data property', async () => {\n\t\t\tconst data = `${GreeterBytecode}0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000b4d79204772656574696e67000000000000000000000000000000000000000000`;\n\t\t\tconst contract = new Contract(GreeterAbi);\n\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\t\t\tconst sendTransactionSpy = jest\n\t\t\t\t.spyOn(eth, 'sendTransaction')\n\t\t\t\t.mockImplementation((_objInstance, tx) => {\n\t\t\t\t\texpect(tx.to).toBeUndefined();\n\t\t\t\t\texpect(tx.gas).toStrictEqual(sendOptions.gas);\n\t\t\t\t\texpect(tx.gasPrice).toBeUndefined();\n\t\t\t\t\texpect(tx.from).toStrictEqual(sendOptions.from);\n\t\t\t\t\texpect(tx.data).toStrictEqual(data); // padded data\n\n\t\t\t\t\tconst newContract = contract.clone();\n\t\t\t\t\tnewContract.options.address = deployedAddr;\n\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\t\t\t\treturn Promise.resolve(newContract) as any;\n\t\t\t\t});\n\n\t\t\tconst deployedContract = await contract\n\t\t\t\t.deploy({\n\t\t\t\t\tdata: GreeterBytecode,\n\t\t\t\t\targuments: ['My Greeting'],\n\t\t\t\t})\n\t\t\t\t.send(sendOptions);\n\n\t\t\texpect(deployedContract).toBeDefined();\n\t\t\texpect(deployedContract.options.address).toStrictEqual(deployedAddr);\n\t\t\tsendTransactionSpy.mockClear();\n\t\t});\n\n\t\t// eslint-disable-next-line @typescript-eslint/require-await\n\t\tit('should not deploy contract with empty data', async () => {\n\t\t\tconst contract = new Contract(GreeterAbi);\n\n\t\t\texpect(() => contract.deploy({ data: '' }).send(sendOptions)).toThrow(\n\t\t\t\t'contract creation without any data provided',\n\t\t\t);\n\t\t});\n\n\t\t// eslint-disable-next-line @typescript-eslint/require-await\n\t\tit('send method on deployed contract should work using input', async () => {\n\t\t\tconst arg = 'Hello';\n\t\t\tconst contract = new Contract(GreeterAbi);\n\t\t\tsendOptions = {\n\t\t\t\tfrom: '0x12364916b10Ae90076dDa6dE756EE1395BB69ec2',\n\t\t\t\tgas: '1000000',\n\t\t\t};\n\t\t\tconst spyTx = jest\n\t\t\t\t.spyOn(eth, 'sendTransaction')\n\t\t\t\t.mockImplementation((_objInstance, _tx) => {\n\t\t\t\t\tconst newContract = contract.clone();\n\t\t\t\t\tnewContract.options.address = deployedAddr;\n\t\t\t\t\texpect(_tx.data).toBeDefined();\n\t\t\t\t\tif (\n\t\t\t\t\t\t_tx.data ===\n\t\t\t\t\t\t'0xa41368620000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000548656c6c6f000000000000000000000000000000000000000000000000000000'\n\t\t\t\t\t) {\n\t\t\t\t\t\t// eslint-disable-next-line\n\t\t\t\t\t\texpect(_tx.to).toStrictEqual(deployedAddr);\n\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-empty-function\n\t\t\t\t\t\treturn { status: '0x1', on: () => {} } as any;\n\t\t\t\t\t}\n\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-empty-function\n\t\t\t\t\treturn Promise.resolve(Object.assign(newContract, { on: () => {} })) as any;\n\t\t\t\t});\n\n\t\t\tconst deployedContract = await contract\n\t\t\t\t.deploy({\n\t\t\t\t\tdata: GreeterBytecode,\n\t\t\t\t\targuments: ['My Greeting'],\n\t\t\t\t})\n\t\t\t\t.send(sendOptions);\n\t\t\tconst receipt = await deployedContract.methods.setGreeting(arg).send(sendOptions);\n\t\t\texpect(receipt.status).toBe('0x1');\n\n\t\t\tspyTx.mockClear();\n\t\t});\n\n\t\tit('test calling overloaded solidity method', async () => {\n\t\t\tconst arg = 'Hello';\n\t\t\tconst contract = new Contract(GreeterWithOverloadingAbi);\n\t\t\tsendOptions = {\n\t\t\t\tfrom: '0x12364916b10Ae90076dDa6dE756EE1395BB69ec2',\n\t\t\t\tgas: '1000000',\n\t\t\t};\n\t\t\tconst spyTx = jest\n\t\t\t\t.spyOn(eth, 'sendTransaction')\n\t\t\t\t.mockImplementation((_objInstance, _tx) => {\n\t\t\t\t\tconst newContract = contract.clone();\n\t\t\t\t\tnewContract.options.address = deployedAddr;\n\t\t\t\t\texpect(_tx.data).toBeDefined();\n\t\t\t\t\tif (\n\t\t\t\t\t\t_tx.data ===\n\t\t\t\t\t\t\t'0xa41368620000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000548656c6c6f000000000000000000000000000000000000000000000000000000' ||\n\t\t\t\t\t\t_tx.data ===\n\t\t\t\t\t\t\t'0x4495ef8a00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000548656c6c6f000000000000000000000000000000000000000000000000000000'\n\t\t\t\t\t) {\n\t\t\t\t\t\t// eslint-disable-next-line\n\t\t\t\t\t\texpect(_tx.to).toStrictEqual(deployedAddr);\n\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-empty-function\n\t\t\t\t\t\treturn { status: '0x1', on: () => {} } as any;\n\t\t\t\t\t}\n\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-empty-function\n\t\t\t\t\treturn Object.assign(Promise.resolve(newContract), { on: () => {} }) as any;\n\t\t\t\t});\n\n\t\t\tconst deployedContract = await contract\n\t\t\t\t.deploy({\n\t\t\t\t\tdata: GreeterWithOverloadingBytecode,\n\t\t\t\t\targuments: ['My Greeting'],\n\t\t\t\t})\n\t\t\t\t.send(sendOptions);\n\n\t\t\tconst receipt = await deployedContract.methods.setGreeting(arg).send(sendOptions);\n\t\t\texpect(receipt.status).toBe('0x1');\n\n\t\t\tconst receipt2 = await deployedContract.methods\n\t\t\t\t.setGreeting(arg, true)\n\t\t\t\t.send(sendOptions);\n\t\t\texpect(receipt2.status).toBe('0x1');\n\n\t\t\tspyTx.mockClear();\n\t\t});\n\n\t\tit('test calling overloaded solidity method with incompatible parameters', async () => {\n\t\t\tconst arg = 'Hello';\n\t\t\tconst contract = new Contract(GreeterWithOverloadingAbi);\n\t\t\tsendOptions = {\n\t\t\t\tfrom: '0x12364916b10Ae90076dDa6dE756EE1395BB69ec2',\n\t\t\t\tgas: '1000000',\n\t\t\t};\n\t\t\tconst spyTx = jest\n\t\t\t\t.spyOn(eth, 'sendTransaction')\n\t\t\t\t.mockImplementation((_objInstance, _tx) => {\n\t\t\t\t\tconst newContract = contract.clone();\n\t\t\t\t\tnewContract.options.address = deployedAddr;\n\t\t\t\t\texpect(_tx.data).toBeDefined();\n\t\t\t\t\tif (\n\t\t\t\t\t\t_tx.data ===\n\t\t\t\t\t\t\t'0xa41368620000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000548656c6c6f000000000000000000000000000000000000000000000000000000' ||\n\t\t\t\t\t\t_tx.data ===\n\t\t\t\t\t\t\t'0x4495ef8a00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000548656c6c6f000000000000000000000000000000000000000000000000000000'\n\t\t\t\t\t) {\n\t\t\t\t\t\t// eslint-disable-next-line jest/no-conditional-expect\n\t\t\t\t\t\texpect(_tx.to).toStrictEqual(deployedAddr);\n\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-empty-function\n\t\t\t\t\t\treturn { status: '0x1', on: () => {} } as any;\n\t\t\t\t\t}\n\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-empty-function\n\t\t\t\t\treturn Object.assign(Promise.resolve(newContract), { on: () => {} }) as any;\n\t\t\t\t});\n\n\t\t\tconst deployedContract = await contract\n\t\t\t\t.deploy({\n\t\t\t\t\tdata: GreeterWithOverloadingBytecode,\n\t\t\t\t\targuments: ['My Greeting'],\n\t\t\t\t})\n\t\t\t\t.send(sendOptions);\n\n\t\t\tconst receipt = await deployedContract.methods.setGreeting(arg).send(sendOptions);\n\t\t\texpect(receipt.status).toBe('0x1');\n\n\t\t\t// calling with correct parameters should pass\n\t\t\tconst receipt2 = await deployedContract.methods\n\t\t\t\t.setGreeting(arg, true)\n\t\t\t\t.send(sendOptions);\n\t\t\texpect(receipt2.status).toBe('0x1');\n\n\t\t\t// calling with wrong parameters should throw\n\t\t\ttry {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-call\n\t\t\t\tawait(deployedContract.methods.setGreeting as any)(arg, 'test').send(sendOptions);\n\t\t\t\texpect(true).toBe(false);\n\t\t\t} catch (error) {\n\t\t\t\t// eslint-disable-next-line jest/no-conditional-expect\n\t\t\t\texpect(error).toBeInstanceOf(Web3ValidatorError);\n\t\t\t\t// eslint-disable-next-line jest/no-conditional-expect\n\t\t\t\texpect((error as Web3ValidatorError).message).toBe(\n\t\t\t\t\t'Web3 validator found 1 error[s]:\\nWeb3 validator found 1 error[s]:\\nvalue \"test\" at \"/1\" must pass \"bool\" validation',\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// calling with wrong parameters should throw\n\t\t\ttry {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-call\n\t\t\t\tawait(deployedContract.methods.setGreeting as any)(arg, true, 'test').send(\n\t\t\t\t\tsendOptions,\n\t\t\t\t);\n\t\t\t\texpect(true).toBe(false);\n\t\t\t} catch (error) {\n\t\t\t\t// eslint-disable-next-line jest/no-conditional-expect\n\t\t\t\texpect(error).toBeInstanceOf(Web3ValidatorError);\n\t\t\t\t// eslint-disable-next-line jest/no-conditional-expect\n\t\t\t\texpect((error as Web3ValidatorError).message).toBe(\n\t\t\t\t\t'Web3 validator found 2 error[s]:\\nmust NOT have more than 1 items\\nvalue \"true\" at \"/1\" must pass \"string\" validation',\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tspyTx.mockClear();\n\t\t});\n\n\t\tit('send method on deployed contract should work using data (default)', async () => {\n\t\t\tconst arg = 'Hello';\n\t\t\tconst contract = new Contract(GreeterAbi);\n\t\t\tsendOptions = {\n\t\t\t\tfrom: '0x12364916b10Ae90076dDa6dE756EE1395BB69ec2',\n\t\t\t\tgas: '1000000',\n\t\t\t\tdata: '0xa41368620000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000548656c6c6f000000000000000000000000000000000000000000000000000000',\n\t\t\t};\n\t\t\tconst spyTx = jest\n\t\t\t\t.spyOn(eth, 'sendTransaction')\n\t\t\t\t.mockImplementation((_objInstance, _tx) => {\n\t\t\t\t\tconst newContract = contract.clone();\n\t\t\t\t\tnewContract.options.address = deployedAddr;\n\t\t\t\t\texpect(_tx.data).toBeDefined();\n\t\t\t\t\tif (\n\t\t\t\t\t\t_tx.data ===\n\t\t\t\t\t\t'0xa41368620000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000548656c6c6f000000000000000000000000000000000000000000000000000000'\n\t\t\t\t\t) {\n\t\t\t\t\t\t// eslint-disable-next-line\n\t\t\t\t\t\texpect(_tx.to).toStrictEqual(deployedAddr);\n\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-empty-function\n\t\t\t\t\t\treturn { status: '0x1', on: () => {} } as any;\n\t\t\t\t\t}\n\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-empty-function\n\t\t\t\t\treturn Promise.resolve(Object.assign(newContract, { on: () => {} })) as any;\n\t\t\t\t});\n\n\t\t\tconst deployedContract = await contract\n\t\t\t\t.deploy({\n\t\t\t\t\tdata: GreeterBytecode,\n\t\t\t\t\targuments: ['My Greeting'],\n\t\t\t\t})\n\t\t\t\t.send(sendOptions);\n\t\t\tconst receipt = await deployedContract.methods.setGreeting(arg).send(sendOptions);\n\t\t\texpect(receipt.status).toBe('0x1');\n\n\t\t\tspyTx.mockClear();\n\t\t});\n\n\t\tit('should config change if the linked web3config emitted a config change event', async () => {\n\t\t\tconst expectedProvider = 'http://127.0.0.1:8545';\n\t\t\tconst web3Context = new Web3Context({\n\t\t\t\tprovider: expectedProvider,\n\t\t\t\tconfig: {\n\t\t\t\t\tcontractDataInputFill: 'data',\n\t\t\t\t\tdefaultAccount: '0x00000000219ab540356cBB839Cbe05303d7705Fa',\n\t\t\t\t},\n\t\t\t});\n\t\t\tconst contract = new Contract(GreeterAbi, web3Context);\n\t\t\tweb3Context.emit(Web3ConfigEvent.CONFIG_CHANGE, {\n\t\t\t\tname: 'contractDataInputFill',\n\t\t\t\toldValue: 'data',\n\t\t\t\tnewValue: 'input',\n\t\t\t});\n\t\t\texpect(contract.config.contractDataInputFill).toBe('input');\n\t\t});\n\n\t\tit('should send method on deployed contract should work with data using web3config', async () => {\n\t\t\tconst expectedProvider = 'http://127.0.0.1:8545';\n\t\t\tconst web3Context = new Web3Context({\n\t\t\t\tprovider: expectedProvider,\n\t\t\t\tconfig: {\n\t\t\t\t\tcontractDataInputFill: 'data',\n\t\t\t\t\tdefaultAccount: '0x00000000219ab540356cBB839Cbe05303d7705Fa',\n\t\t\t\t},\n\t\t\t});\n\t\t\tconst arg = 'Hello';\n\t\t\tconst contract = new Contract(GreeterAbi, web3Context);\n\t\t\tsendOptions = {\n\t\t\t\tfrom: '0x12364916b10Ae90076dDa6dE756EE1395BB69ec2',\n\t\t\t\tgas: '1000000',\n\t\t\t};\n\t\t\tconst spyTx = jest\n\t\t\t\t.spyOn(eth, 'sendTransaction')\n\t\t\t\t.mockImplementation((_objInstance, _tx) => {\n\t\t\t\t\tconst newContract = contract.clone();\n\t\t\t\t\tnewContract.options.address = deployedAddr;\n\t\t\t\t\tif (\n\t\t\t\t\t\t_tx.data ===\n\t\t\t\t\t\t'0xa41368620000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000548656c6c6f000000000000000000000000000000000000000000000000000000'\n\t\t\t\t\t) {\n\t\t\t\t\t\t// eslint-disable-next-line\n\t\t\t\t\t\texpect(_tx.to).toStrictEqual(deployedAddr);\n\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-empty-function\n\t\t\t\t\t\treturn { status: '0x1', on: () => {} } as any;\n\t\t\t\t\t}\n\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-empty-function\n\t\t\t\t\treturn Promise.resolve(Object.assign(newContract, { on: () => {} })) as any;\n\t\t\t\t});\n\n\t\t\tconst deployedContract = await contract\n\t\t\t\t.deploy({\n\t\t\t\t\tdata: GreeterBytecode,\n\t\t\t\t\targuments: ['My Greeting'],\n\t\t\t\t})\n\t\t\t\t.send(sendOptions);\n\t\t\tconst receipt = await deployedContract.methods.setGreeting(arg).send(sendOptions);\n\t\t\texpect(receipt.status).toBe('0x1');\n\n\t\t\tspyTx.mockClear();\n\t\t});\n\n\t\tit('send method on deployed contract should work with both input and data using web3config', async () => {\n\t\t\tconst expectedProvider = 'http://127.0.0.1:8545';\n\t\t\tconst web3Context = new Web3Context({\n\t\t\t\tprovider: expectedProvider,\n\t\t\t\tconfig: {\n\t\t\t\t\tcontractDataInputFill: 'both',\n\t\t\t\t\tdefaultAccount: '0x00000000219ab540356cBB839Cbe05303d7705Fa',\n\t\t\t\t},\n\t\t\t});\n\t\t\tconst arg = 'Hello';\n\t\t\tconst contract = new Contract(GreeterAbi, web3Context);\n\t\t\tsendOptions = {\n\t\t\t\tfrom: '0x12364916b10Ae90076dDa6dE756EE1395BB69ec2',\n\t\t\t\tgas: '1000000',\n\t\t\t};\n\t\t\tconst spyTx = jest\n\t\t\t\t.spyOn(eth, 'sendTransaction')\n\t\t\t\t.mockImplementation((_objInstance, _tx) => {\n\t\t\t\t\tconst newContract = contract.clone();\n\t\t\t\t\tnewContract.options.address = deployedAddr;\n\t\t\t\t\tif (\n\t\t\t\t\t\t_tx.data ===\n\t\t\t\t\t\t'0xa41368620000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000548656c6c6f000000000000000000000000000000000000000000000000000000'\n\t\t\t\t\t) {\n\t\t\t\t\t\t// eslint-disable-next-line\n\t\t\t\t\t\texpect(_tx.input).toStrictEqual(\n\t\t\t\t\t\t\t'0xa41368620000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000548656c6c6f000000000000000000000000000000000000000000000000000000',\n\t\t\t\t\t\t);\n\t\t\t\t\t\t// eslint-disable-next-line\n\t\t\t\t\t\texpect(_tx.to).toStrictEqual(deployedAddr);\n\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-empty-function\n\t\t\t\t\t\treturn { status: '0x1', on: () => {} } as any;\n\t\t\t\t\t}\n\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-empty-function\n\t\t\t\t\treturn Promise.resolve(Object.assign(newContract, { on: () => {} })) as any;\n\t\t\t\t});\n\n\t\t\tconst deployedContract = await contract\n\t\t\t\t.deploy({\n\t\t\t\t\tdata: GreeterBytecode,\n\t\t\t\t\targuments: ['My Greeting'],\n\t\t\t\t})\n\t\t\t\t.send(sendOptions);\n\t\t\tconst receipt = await deployedContract.methods.setGreeting(arg).send(sendOptions);\n\t\t\texpect(receipt.status).toBe('0x1');\n\n\t\t\tspyTx.mockClear();\n\t\t});\n\n\t\tit('should send method on deployed contract should work with input using web3config', async () => {\n\t\t\tconst expectedProvider = 'http://127.0.0.1:8545';\n\t\t\tconst web3Context = new Web3Context({\n\t\t\t\tprovider: expectedProvider,\n\t\t\t\tconfig: {\n\t\t\t\t\tcontractDataInputFill: 'input',\n\t\t\t\t\tdefaultAccount: '0x00000000219ab540356cBB839Cbe05303d7705Fa',\n\t\t\t\t},\n\t\t\t});\n\t\t\tconst arg = 'Hello';\n\t\t\tconst contract = new Contract(GreeterAbi, web3Context);\n\t\t\tsendOptions = {\n\t\t\t\tfrom: '0x12364916b10Ae90076dDa6dE756EE1395BB69ec2',\n\t\t\t\tgas: '1000000',\n\t\t\t};\n\t\t\tconst spyTx = jest\n\t\t\t\t.spyOn(eth, 'sendTransaction')\n\t\t\t\t.mockImplementation((_objInstance, _tx) => {\n\t\t\t\t\tconst newContract = contract.clone();\n\t\t\t\t\tnewContract.options.address = deployedAddr;\n\t\t\t\t\tif (\n\t\t\t\t\t\t_tx.input ===\n\t\t\t\t\t\t'0xa41368620000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000548656c6c6f000000000000000000000000000000000000000000000000000000'\n\t\t\t\t\t) {\n\t\t\t\t\t\t// eslint-disable-next-line\n\t\t\t\t\t\texpect(_tx.to).toStrictEqual(deployedAddr);\n\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-empty-function\n\t\t\t\t\t\treturn { status: '0x1', on: () => {} } as any;\n\t\t\t\t\t}\n\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-empty-function\n\t\t\t\t\treturn Promise.resolve(Object.assign(newContract, { on: () => {} })) as any;\n\t\t\t\t});\n\n\t\t\tconst deployedContract = await contract\n\t\t\t\t.deploy({\n\t\t\t\t\tinput: GreeterBytecode,\n\t\t\t\t\targuments: ['My Greeting'],\n\t\t\t\t})\n\t\t\t\t.send(sendOptions);\n\t\t\tconst receipt = await deployedContract.methods.setGreeting(arg).send(sendOptions);\n\t\t\texpect(receipt.status).toBe('0x1');\n\n\t\t\tspyTx.mockClear();\n\t\t});\n\n\t\tit('call on deployed contract should decode result', async () => {\n\t\t\tconst arg = 'Hello';\n\t\t\tconst encodedArg =\n\t\t\t\t'0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000548656c6c6f000000000000000000000000000000000000000000000000000000';\n\t\t\tconst contract = new Contract(GreeterAbi);\n\n\t\t\tconst spyTx = jest.spyOn(eth, 'sendTransaction').mockImplementation(() => {\n\t\t\t\tconst newContract = contract.clone();\n\t\t\t\tnewContract.options.address = deployedAddr;\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\t\t\treturn Promise.resolve(newContract) as any;\n\t\t\t});\n\n\t\t\tconst spyEthCall = jest.spyOn(eth, 'call').mockImplementation((_objInstance, _tx) => {\n\t\t\t\texpect(_tx.to).toStrictEqual(deployedAddr);\n\t\t\t\texpect(_tx.data).toBe('0xcfae3217');\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\t\t\treturn Promise.resolve(encodedArg) as any; // contract class should decode encodedArg\n\t\t\t});\n\t\t\tconst deployedContract = await contract\n\t\t\t\t.deploy({\n\t\t\t\t\tdata: GreeterBytecode,\n\t\t\t\t\targuments: ['My Greeting'],\n\t\t\t\t})\n\t\t\t\t.send(sendOptions);\n\t\t\tconst res = await deployedContract.methods.greet().call();\n\t\t\texpect(res).toStrictEqual(arg);\n\n\t\t\tspyTx.mockClear();\n\t\t\tspyEthCall.mockClear();\n\t\t});\n\n\t\tit('should clone pre deployed contract with address', () => {\n\t\t\tconst contract = new Contract(\n\t\t\t\tsampleStorageContractABI,\n\t\t\t\t'0x00000000219ab540356cBB839Cbe05303d7705Fa',\n\t\t\t\t{ gas: '0x97254' },\n\t\t\t);\n\n\t\t\tconst clonnedContract = contract.clone();\n\n\t\t\texpect(stringify(contract)).toStrictEqual(stringify(clonnedContract));\n\n\t\t\tcontract.options.jsonInterface = GreeterAbi;\n\t\t});\n\n\t\tit('should clone new contract', () => {\n\t\t\tconst contract = new Contract(sampleStorageContractABI);\n\n\t\t\tconst clonnedContract = contract.clone();\n\t\t\texpect(stringify(contract)).toStrictEqual(stringify(clonnedContract));\n\t\t});\n\n\t\tit('should be able to update the jsonInterface', () => {\n\t\t\tconst contract = new Contract(sampleStorageContractABI);\n\n\t\t\texpect(contract.methods.retrieveNum).toBeDefined();\n\t\t\texpect(contract.methods.storeNum).toBeDefined();\n\n\t\t\texpect(contract.methods.greet).toBeUndefined();\n\t\t\texpect(contract.methods.increment).toBeUndefined();\n\t\t\texpect(contract.methods.setGreeting).toBeUndefined();\n\n\t\t\tcontract.options.jsonInterface = GreeterAbi;\n\n\t\t\texpect(contract.methods.retrieveNum).toBeUndefined();\n\t\t\texpect(contract.methods.storeNum).toBeUndefined();\n\n\t\t\texpect(contract.methods.greet).toBeDefined();\n\t\t\texpect(contract.methods.increment).toBeDefined();\n\t\t\texpect(contract.methods.setGreeting).toBeDefined();\n\t\t});\n\n\t\tit('defaults set and get should work', () => {\n\t\t\tconst contract = new Contract([], '0x00000000219ab540356cBB839Cbe05303d7705Fa');\n\n\t\t\tconst defaultAddr = '0xd7E30ae310C1D1800F5B641Baa7af95b2e1FD98C';\n\t\t\texpect(contract.defaultAccount).toBeUndefined();\n\t\t\tcontract.defaultAccount = defaultAddr;\n\t\t\texpect(contract.defaultAccount).toStrictEqual(defaultAddr);\n\n\t\t\tconst defaultBlock = '0xC43A';\n\t\t\texpect(contract.defaultBlock).toBe('latest');\n\t\t\tcontract.defaultBlock = defaultBlock;\n\t\t\texpect(contract.defaultBlock).toStrictEqual(defaultBlock);\n\n\t\t\tconst defaultHardfork = 'constantinople';\n\t\t\texpect(contract.defaultHardfork).toBe('london');\n\t\t\tcontract.defaultHardfork = defaultHardfork;\n\t\t\texpect(contract.defaultHardfork).toStrictEqual(defaultHardfork);\n\n\t\t\tconst baseChain = 'mainnet' as ValidChains;\n\t\t\tcontract.defaultChain = baseChain;\n\t\t\texpect(contract.defaultChain).toBe(baseChain);\n\n\t\t\tconst defaultCommonDifferentHardfork = {\n\t\t\t\tcustomChain: { name: 'testnet', networkId: '5678', chainId: '5634' },\n\t\t\t\tbaseChain,\n\t\t\t\thardfork: 'petersburg' as Hardfork,\n\t\t\t};\n\t\t\texpect(contract.defaultCommon).toBeUndefined();\n\n\t\t\t// Test that defaultcommon will error when defaulthardfork is not matching\n\t\t\t// Has to be wrapped in another function to check Error\n\t\t\texpect(() => {\n\t\t\t\tcontract.defaultCommon = defaultCommonDifferentHardfork;\n\t\t\t}).toThrow(\n\t\t\t\tnew Error(\n\t\t\t\t\t'Web3Config hardfork doesnt match in defaultHardfork constantinople and common.hardfork petersburg',\n\t\t\t\t),\n\t\t\t);\n\n\t\t\texpect(contract.defaultCommon).toBeUndefined();\n\n\t\t\t// Should error when defaultCommon has different chain than defaultChain\n\t\t\tconst defaultCommonDifferentChain = {\n\t\t\t\tcustomChain: { name: 'testnet', networkId: '5678', chainId: '5634' },\n\t\t\t\tbaseChain: 'sepolia' as ValidChains,\n\t\t\t\thardfork: 'constantinople' as Hardfork,\n\t\t\t};\n\t\t\texpect(() => {\n\t\t\t\tcontract.defaultCommon = defaultCommonDifferentChain;\n\t\t\t}).toThrow(\n\t\t\t\tnew Error(\n\t\t\t\t\t'Web3Config chain doesnt match in defaultHardfork mainnet and common.hardfork sepolia',\n\t\t\t\t),\n\t\t\t);\n\n\t\t\texpect(contract.defaultCommon).toBeUndefined();\n\n\t\t\tconst defaultCommon = {\n\t\t\t\tcustomChain: { name: 'testnet', networkId: '5678', chainId: '5634' },\n\t\t\t\tbaseChain: 'mainnet' as ValidChains,\n\t\t\t\thardfork: 'constantinople' as Hardfork,\n\t\t\t};\n\t\t\tcontract.defaultCommon = defaultCommon;\n\t\t\texpect(contract.defaultCommon).toBe(defaultCommon);\n\n\t\t\tconst transactionBlockTimeout = 130;\n\t\t\texpect(contract.transactionBlockTimeout).toBe(50);\n\t\t\tcontract.transactionBlockTimeout = transactionBlockTimeout;\n\t\t\texpect(contract.transactionBlockTimeout).toStrictEqual(transactionBlockTimeout);\n\n\t\t\tconst transactionConfirmationBlocks = 30;\n\t\t\texpect(contract.transactionConfirmationBlocks).toBe(24);\n\t\t\tcontract.transactionConfirmationBlocks = transactionConfirmationBlocks;\n\t\t\texpect(contract.transactionConfirmationBlocks).toStrictEqual(\n\t\t\t\ttransactionConfirmationBlocks,\n\t\t\t);\n\n\t\t\tconst transactionPollingInterval = 1000;\n\t\t\texpect(contract.transactionPollingInterval).toBe(1000);\n\t\t\tcontract.transactionPollingInterval = transactionPollingInterval;\n\t\t\texpect(contract.transactionPollingInterval).toStrictEqual(transactionPollingInterval);\n\n\t\t\tconst transactionPollingTimeout = 800000;\n\t\t\texpect(contract.transactionPollingTimeout).toBe(750000);\n\t\t\tcontract.transactionPollingTimeout = transactionPollingTimeout;\n\t\t\texpect(contract.transactionPollingTimeout).toStrictEqual(transactionPollingTimeout);\n\n\t\t\tconst transactionReceiptPollingInterval = 2000; // its new in 4.x\n\t\t\texpect(contract.transactionReceiptPollingInterval).toBe(1000);\n\t\t\tcontract.transactionReceiptPollingInterval = transactionReceiptPollingInterval;\n\t\t\texpect(contract.transactionReceiptPollingInterval).toStrictEqual(\n\t\t\t\ttransactionReceiptPollingInterval,\n\t\t\t);\n\n\t\t\tconst transactionConfirmationPollingInterval = 2501; // its new in 4.x\n\t\t\texpect(contract.transactionConfirmationPollingInterval).toBe(1000);\n\t\t\tcontract.transactionConfirmationPollingInterval =\n\t\t\t\ttransactionConfirmationPollingInterval;\n\t\t\texpect(contract.transactionConfirmationPollingInterval).toStrictEqual(\n\t\t\t\ttransactionConfirmationPollingInterval,\n\t\t\t);\n\n\t\t\tconst transactionSendTimeout = 730000; // its new in 4.x\n\t\t\texpect(contract.transactionSendTimeout).toBe(750000);\n\t\t\tcontract.transactionSendTimeout = transactionSendTimeout;\n\t\t\texpect(contract.transactionSendTimeout).toStrictEqual(transactionSendTimeout);\n\n\t\t\tconst blockHeaderTimeout = 12;\n\t\t\texpect(contract.blockHeaderTimeout).toBe(10);\n\t\t\tcontract.blockHeaderTimeout = blockHeaderTimeout;\n\t\t\texpect(contract.blockHeaderTimeout).toStrictEqual(blockHeaderTimeout);\n\n\t\t\texpect(contract.handleRevert).toBe(false);\n\t\t\tcontract.handleRevert = true;\n\t\t\texpect(contract.handleRevert).toBe(true);\n\t\t});\n\n\t\tit('should set and get correct address', () => {\n\t\t\tconst addr = '0x1230B93ffd14F2F022039675fA3fc3A46eE4C701';\n\t\t\tconst contract = new Contract(\n\t\t\t\t[],\n\t\t\t\t'',\n\t\t\t\t{ gas: '123' },\n\t\t\t\t{ config: { defaultAccount: '0x00000000219ab540356cBB839Cbe05303d7705Fa' } },\n\t\t\t);\n\n\t\t\tcontract.options.address = addr;\n\t\t\texpect(contract.options.address).toStrictEqual(addr);\n\t\t});\n\n\t\tit('should set, at the constructor, and later get jsonInterface', () => {\n\t\t\tconst contract = new Contract(\n\t\t\t\tsampleStorageContractABI,\n\t\t\t\t'0x1230B93ffd14F2F022039675fA3fc3A46eE4C701',\n\t\t\t\t{ gas: '123' },\n\t\t\t\t{ config: { defaultAccount: '0x00000000219ab540356cBB839Cbe05303d7705Fa' } },\n\t\t\t);\n\n\t\t\texpect(contract.options.jsonInterface).toMatchObject(sampleStorageContractABI);\n\t\t});\n\n\t\tit('should set and get jsonInterface', () => {\n\t\t\tconst contract = new Contract(\n\t\t\t\tsampleStorageContractABI,\n\t\t\t\t'0x1230B93ffd14F2F022039675fA3fc3A46eE4C701',\n\t\t\t\t{ gas: '123' },\n\t\t\t\t{ config: { defaultAccount: '0x00000000219ab540356cBB839Cbe05303d7705Fa' } },\n\t\t\t);\n\n\t\t\tcontract.options.jsonInterface = ERC20TokenAbi;\n\t\t\texpect(contract.options.jsonInterface).toMatchObject(ERC20TokenAbi);\n\t\t});\n\n\t\tit('should be able to call a payable method', async () => {\n\t\t\tconst contract = new Contract(\n\t\t\t\terc721Abi,\n\t\t\t\t'0x1230B93ffd14F2F022039675fA3fc3A46eE4C701',\n\t\t\t\t{ gas: '123' },\n\t\t\t\t{ config: { defaultAccount: '0x00000000219ab540356cBB839Cbe05303d7705Fa' } },\n\t\t\t);\n\n\t\t\t// @ts-expect-error fix-types\n\t\t\tconst spyEthCall = jest.spyOn(eth, 'call').mockImplementation((_objInstance, _tx) => {\n\t\t\t\texpect(_tx.to).toBe('0x1230B93ffd14F2F022039675fA3fc3A46eE4C701');\n\t\t\t\texpect(_tx.data).toBe(\n\t\t\t\t\t'0x095ea7b300000000000000000000000000000000219ab540356cbb839cbe05303d7705fa0000000000000000000000000000000000000000000000000000000000000001',\n\t\t\t\t);\n\t\t\t\treturn '0x00';\n\t\t\t});\n\n\t\t\tawait expect(\n\t\t\t\tcontract.methods.approve('0x00000000219ab540356cBB839Cbe05303d7705Fa', 1).call(),\n\t\t\t).resolves.toBeTruthy();\n\n\t\t\tspyEthCall.mockClear();\n\t\t});\n\n\t\tit('should be able to call a payable method with data as a contract init option', async () => {\n\t\t\tconst contract = new Contract(\n\t\t\t\terc721Abi,\n\t\t\t\t'0x1230B93ffd14F2F022039675fA3fc3A46eE4C701',\n\t\t\t\t{ gas: '123', dataInputFill: 'data' },\n\t\t\t\t{ config: { defaultAccount: '0x00000000219ab540356cBB839Cbe05303d7705Fa' } },\n\t\t\t);\n\n\t\t\tconst spyEthCall = jest\n\t\t\t\t.spyOn(eth, 'call')\n\t\t\t\t.mockImplementation(async (_objInstance, _tx) => {\n\t\t\t\t\texpect(_tx.to).toBe('0x1230B93ffd14F2F022039675fA3fc3A46eE4C701');\n\t\t\t\t\texpect(_tx.data).toBe(\n\t\t\t\t\t\t'0x095ea7b300000000000000000000000000000000219ab540356cbb839cbe05303d7705fa0000000000000000000000000000000000000000000000000000000000000001',\n\t\t\t\t\t);\n\t\t\t\t\treturn '0x00';\n\t\t\t\t});\n\n\t\t\tawait expect(\n\t\t\t\tcontract.methods.approve('0x00000000219ab540356cBB839Cbe05303d7705Fa', 1).call(),\n\t\t\t).resolves.toBeTruthy();\n\n\t\t\tspyEthCall.mockClear();\n\t\t});\n\n\t\tit('should be able to call a payable method with input as a contract init option', async () => {\n\t\t\tconst contract = new Contract(\n\t\t\t\terc721Abi,\n\t\t\t\t'0x1230B93ffd14F2F022039675fA3fc3A46eE4C701',\n\t\t\t\t{ gas: '123', dataInputFill: 'input' },\n\t\t\t\t{ config: { defaultAccount: '0x00000000219ab540356cBB839Cbe05303d7705Fa' } },\n\t\t\t);\n\n\t\t\tconst spyEthCall = jest\n\t\t\t\t.spyOn(eth, 'call')\n\t\t\t\t.mockImplementation(async (_objInstance, _tx) => {\n\t\t\t\t\texpect(_tx.to).toBe('0x1230B93ffd14F2F022039675fA3fc3A46eE4C701');\n\t\t\t\t\texpect(_tx.input).toBe(\n\t\t\t\t\t\t'0x095ea7b300000000000000000000000000000000219ab540356cbb839cbe05303d7705fa0000000000000000000000000000000000000000000000000000000000000001',\n\t\t\t\t\t);\n\t\t\t\t\treturn '0x00';\n\t\t\t\t});\n\n\t\t\tawait expect(\n\t\t\t\tcontract.methods.approve('0x00000000219ab540356cBB839Cbe05303d7705Fa', 1).call(),\n\t\t\t).resolves.toBeTruthy();\n\n\t\t\tspyEthCall.mockClear();\n\t\t});\n\n\t\tit('should be able to call a payable method with data as a web3Context option', async () => {\n\t\t\tconst expectedProvider = 'http://127.0.0.1:8545';\n\t\t\tconst web3Context = new Web3Context({\n\t\t\t\tprovider: expectedProvider,\n\t\t\t\tconfig: {\n\t\t\t\t\tcontractDataInputFill: 'data',\n\t\t\t\t\tdefaultAccount: '0x00000000219ab540356cBB839Cbe05303d7705Fa',\n\t\t\t\t},\n\t\t\t});\n\t\t\tconst contract = new Contract(\n\t\t\t\terc721Abi,\n\t\t\t\t'0x1230B93ffd14F2F022039675fA3fc3A46eE4C701',\n\t\t\t\t{ gas: '123' },\n\t\t\t\tweb3Context,\n\t\t\t);\n\n\t\t\tconst spyEthCall = jest\n\t\t\t\t.spyOn(eth, 'call')\n\t\t\t\t.mockImplementation(async (_objInstance, _tx) => {\n\t\t\t\t\texpect(_tx.to).toBe('0x1230B93ffd14F2F022039675fA3fc3A46eE4C701');\n\t\t\t\t\texpect(_tx.data).toBe(\n\t\t\t\t\t\t'0x095ea7b300000000000000000000000000000000219ab540356cbb839cbe05303d7705fa0000000000000000000000000000000000000000000000000000000000000001',\n\t\t\t\t\t);\n\t\t\t\t\treturn '0x00';\n\t\t\t\t});\n\n\t\t\tawait expect(\n\t\t\t\tcontract.methods.approve('0x00000000219ab540356cBB839Cbe05303d7705Fa', 1).call(),\n\t\t\t).resolves.toBeTruthy();\n\n\t\t\tspyEthCall.mockClear();\n\t\t});\n\n\t\tit('should be able to call a payable method with both data and input as a web3Context option', async () => {\n\t\t\tconst expectedProvider = 'http://127.0.0.1:8545';\n\t\t\tconst web3Context = new Web3Context({\n\t\t\t\tprovider: expectedProvider,\n\t\t\t\tconfig: {\n\t\t\t\t\tcontractDataInputFill: 'both',\n\t\t\t\t\tdefaultAccount: '0x00000000219ab540356cBB839Cbe05303d7705Fa',\n\t\t\t\t},\n\t\t\t});\n\t\t\tconst contract = new Contract(\n\t\t\t\terc721Abi,\n\t\t\t\t'0x1230B93ffd14F2F022039675fA3fc3A46eE4C701',\n\t\t\t\t{ gas: '123' },\n\t\t\t\tweb3Context,\n\t\t\t);\n\n\t\t\tconst spyEthCall = jest\n\t\t\t\t.spyOn(eth, 'call')\n\t\t\t\t.mockImplementation(async (_objInstance, _tx) => {\n\t\t\t\t\texpect(_tx.to).toBe('0x1230B93ffd14F2F022039675fA3fc3A46eE4C701');\n\t\t\t\t\texpect(_tx.data).toBe(\n\t\t\t\t\t\t'0x095ea7b300000000000000000000000000000000219ab540356cbb839cbe05303d7705fa0000000000000000000000000000000000000000000000000000000000000001',\n\t\t\t\t\t);\n\t\t\t\t\texpect(_tx.input).toBe(\n\t\t\t\t\t\t'0x095ea7b300000000000000000000000000000000219ab540356cbb839cbe05303d7705fa0000000000000000000000000000000000000000000000000000000000000001',\n\t\t\t\t\t);\n\t\t\t\t\treturn '0x00';\n\t\t\t\t});\n\n\t\t\tawait expect(\n\t\t\t\tcontract.methods.approve('0x00000000219ab540356cBB839Cbe05303d7705Fa', 1).call(),\n\t\t\t).resolves.toBeTruthy();\n\n\t\t\tspyEthCall.mockClear();\n\t\t});\n\n\t\tit('getPastEvents with filter should work', async () => {\n\t\t\tconst contract = new Contract<typeof GreeterAbi>(GreeterAbi);\n\n\t\t\tconst spyTx = jest.spyOn(eth, 'sendTransaction').mockImplementation(() => {\n\t\t\t\tconst newContract = contract.clone();\n\t\t\t\tnewContract.options.address = deployedAddr;\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\t\t\treturn Promise.resolve(newContract) as any;\n\t\t\t});\n\n\t\t\tconst spyGetLogs = jest\n\t\t\t\t.spyOn(eth, 'getLogs')\n\t\t\t\t.mockImplementation((_objInstance, _params) => {\n\t\t\t\t\texpect(_params.address).toStrictEqual(deployedAddr.toLocaleLowerCase());\n\t\t\t\t\texpect(_params.fromBlock).toStrictEqual(getLogsData.request.fromBlock);\n\t\t\t\t\texpect(_params.toBlock).toStrictEqual(getLogsData.request.toBlock);\n\t\t\t\t\texpect(_params.topics).toStrictEqual(getLogsData.request.topics);\n\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\t\t\t\treturn Promise.resolve(getLogsData.response) as any;\n\t\t\t\t});\n\n\t\t\tconst deployedContract = await contract\n\t\t\t\t.deploy({\n\t\t\t\t\tdata: GreeterBytecode,\n\t\t\t\t\targuments: ['My Greeting'],\n\t\t\t\t})\n\t\t\t\t.send(sendOptions);\n\n\t\t\tconst fromBlock = 'earliest';\n\t\t\tconst toBlock = 'latest';\n\t\t\tconst pastEvent = await deployedContract.getPastEvents(getPastEventsData.event as any, {\n\t\t\t\tfromBlock,\n\t\t\t\ttoBlock,\n\t\t\t});\n\n\t\t\texpect(pastEvent).toStrictEqual(getPastEventsData.response);\n\t\t\tspyTx.mockClear();\n\t\t\tspyGetLogs.mockClear();\n\t\t});\n\n\t\tit('getPastEvents with filter by topics should work', async () => {\n\t\t\tconst contract = new Contract<typeof GreeterAbi>(GreeterAbi);\n\n\t\t\tconst spyTx = jest.spyOn(eth, 'sendTransaction').mockImplementation(() => {\n\t\t\t\tconst newContract = contract.clone();\n\t\t\t\tnewContract.options.address = deployedAddr;\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\t\t\treturn Promise.resolve(newContract) as any;\n\t\t\t});\n\n\t\t\tconst spyGetLogs = jest\n\t\t\t\t.spyOn(eth, 'getLogs')\n\t\t\t\t.mockImplementation((_objInstance, _params) => {\n\t\t\t\t\texpect(_params.address).toStrictEqual(deployedAddr.toLocaleLowerCase());\n\t\t\t\t\texpect(_params.fromBlock).toStrictEqual(getLogsData.request.fromBlock);\n\t\t\t\t\texpect(_params.toBlock).toStrictEqual(getLogsData.request.toBlock);\n\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\t\t\t\treturn Promise.resolve([getLogsData.response[0]]) as any;\n\t\t\t\t});\n\n\t\t\tconst deployedContract = await contract\n\t\t\t\t.deploy({\n\t\t\t\t\tdata: GreeterBytecode,\n\t\t\t\t\targuments: ['My Greeting'],\n\t\t\t\t})\n\t\t\t\t.send(sendOptions);\n\n\t\t\tconst fromBlock = 'earliest';\n\t\t\tconst toBlock = 'latest';\n\t\t\tconst pastEvent = await deployedContract.getPastEvents(getPastEventsData.event as any, {\n\t\t\t\tfromBlock,\n\t\t\t\ttoBlock,\n\t\t\t\ttopics: ['0x7d7846723bda52976e0286c6efffee937ee9f76817a867ec70531ad29fb1fc0e'],\n\t\t\t});\n\n\t\t\texpect(pastEvent).toStrictEqual(getPastEventsData.response);\n\t\t\tspyTx.mockClear();\n\t\t\tspyGetLogs.mockClear();\n\t\t});\n\n\t\tit('getPastEvents for all events should work', async () => {\n\t\t\tconst contract = new Contract<typeof GreeterAbi>(GreeterAbi);\n\n\t\t\tconst spyTx = jest.spyOn(eth, 'sendTransaction').mockImplementation(() => {\n\t\t\t\tconst newContract = contract.clone();\n\t\t\t\tnewContract.options.address = deployedAddr;\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\t\t\treturn Promise.resolve(newContract) as any;\n\t\t\t});\n\n\t\t\tconst spyGetLogs = jest\n\t\t\t\t.spyOn(eth, 'getLogs')\n\t\t\t\t.mockImplementation((_objInstance, _params) => {\n\t\t\t\t\texpect(_params.address).toStrictEqual(deployedAddr.toLocaleLowerCase());\n\t\t\t\t\texpect(_params.fromBlock).toBeUndefined();\n\t\t\t\t\texpect(_params.toBlock).toBeUndefined();\n\t\t\t\t\texpect(_params.topics).toBeUndefined();\n\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\t\t\t\treturn Promise.resolve(AllGetPastEventsData.getLogsData) as any; // AllGetPastEventsData.getLogsData data test is for: assume two transactions sent to contract with contractInstance.methods.setGreeting(\"Hello\") and contractInstance.methods.setGreeting(\"Another Greeting\")\n\t\t\t\t});\n\n\t\t\tconst deployedContract = await contract\n\t\t\t\t.deploy({\n\t\t\t\t\tdata: GreeterBytecode,\n\t\t\t\t\targuments: ['My Greeting'],\n\t\t\t\t})\n\t\t\t\t.send(sendOptions);\n\n\t\t\tconst pastEvent = await deployedContract.getPastEvents('allEvents');\n\n\t\t\texpect(pastEvent).toStrictEqual(AllGetPastEventsData.response);\n\t\t\tspyTx.mockClear();\n\t\t\tspyGetLogs.mockClear();\n\t\t});\n\n\t\tit('getPastEvents for all events with filter should work', async () => {\n\t\t\tconst contract = new Contract<typeof GreeterAbi>(GreeterAbi);\n\n\t\t\tconst spyTx = jest.spyOn(eth, 'sendTransaction').mockImplementation(() => {\n\t\t\t\tconst newContract = contract.clone();\n\t\t\t\tnewContract.options.address = deployedAddr;\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\t\t\treturn Promise.resolve(newContract) as any;\n\t\t\t});\n\n\t\t\tconst spyGetLogs = jest\n\t\t\t\t.spyOn(eth, 'getLogs')\n\t\t\t\t.mockImplementation((_objInstance, _params) => {\n\t\t\t\t\texpect(_params.address).toStrictEqual(deployedAddr.toLocaleLowerCase());\n\t\t\t\t\texpect(_params.fromBlock).toBeUndefined();\n\t\t\t\t\texpect(_params.toBlock).toBeUndefined();\n\t\t\t\t\texpect(_params.topics).toBeUndefined();\n\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\t\t\t\treturn Promise.resolve(AllGetPastEventsData.getLogsData) as any; // AllGetPastEventsData.getLogsData data test is for: assume two transactions sent to contract with contractInstance.methods.setGreeting(\"Hello\") and contractInstance.methods.setGreeting(\"Another Greeting\")\n\t\t\t\t});\n\n\t\t\tconst deployedContract = await contract\n\t\t\t\t.deploy({\n\t\t\t\t\tdata: GreeterBytecode,\n\t\t\t\t\targuments: ['My Greeting'],\n\t\t\t\t})\n\t\t\t\t.send(sendOptions);\n\n\t\t\tconst pastEvent = await deployedContract.getPastEvents('allEvents', {\n\t\t\t\tfilter: {\n\t\t\t\t\tgreeting: 'Another Greeting',\n\t\t\t\t},\n\t\t\t});\n\n\t\t\texpect(pastEvent).toHaveLength(1);\n\t\t\texpect(pastEvent[0]).toStrictEqual(AllGetPastEventsData.response[1]);\n\n\t\t\tconst pastEventWithoutEventName = await deployedContract.getPastEvents({\n\t\t\t\tfilter: {\n\t\t\t\t\tgreeting: 'Another Greeting',\n\t\t\t\t},\n\t\t\t});\n\n\t\t\texpect(pastEventWithoutEventName).toHaveLength(1);\n\t\t\texpect(pastEventWithoutEventName[0]).toStrictEqual(AllGetPastEventsData.response[1]);\n\n\t\t\tconst pastEventFilterArray = await deployedContract.getPastEvents({\n\t\t\t\tfilter: {\n\t\t\t\t\tgreeting: ['Another Greeting'],\n\t\t\t\t},\n\t\t\t});\n\n\t\t\texpect(pastEventFilterArray).toHaveLength(1);\n\t\t\texpect(pastEventFilterArray[0]).toStrictEqual(AllGetPastEventsData.response[1]);\n\n\t\t\tconst pastEventFilterWithIncorrectParam = await deployedContract.getPastEvents({\n\t\t\t\tfilter: {\n\t\t\t\t\tincorrectParam: 'test',\n\t\t\t\t},\n\t\t\t});\n\t\t\texpect(pastEventFilterWithIncorrectParam).toHaveLength(0);\n\n\t\t\tspyTx.mockClear();\n\t\t\tspyGetLogs.mockClear();\n\t\t});\n\n\t\tit('getPastEvents for all events with filter by topics should work', async () => {\n\t\t\tconst contract = new Contract<typeof GreeterAbi>(GreeterAbi);\n\n\t\t\tconst spyTx = jest.spyOn(eth, 'sendTransaction').mockImplementation(() => {\n\t\t\t\tconst newContract = contract.clone();\n\t\t\t\tnewContract.options.address = deployedAddr;\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\t\t\treturn Promise.resolve(newContract) as any;\n\t\t\t});\n\n\t\t\tconst spyGetLogs = jest\n\t\t\t\t.spyOn(eth, 'getLogs')\n\t\t\t\t.mockImplementation((_objInstance, _params) => {\n\t\t\t\t\texpect(_params.address).toStrictEqual(deployedAddr.toLocaleLowerCase());\n\t\t\t\t\texpect(_params.fromBlock).toBeUndefined();\n\t\t\t\t\texpect(_params.toBlock).toBeUndefined();\n\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\t\t\t\treturn Promise.resolve([AllGetPastEventsData.getLogsData[1]]) as any; // AllGetPastEventsData.getLogsData data test is for: assume two transactions sent to contract with contractInstance.methods.setGreeting(\"Hello\") and contractInstance.methods.setGreeting(\"Another Greeting\")\n\t\t\t\t});\n\n\t\t\tconst deployedContract = await contract\n\t\t\t\t.deploy({\n\t\t\t\t\tdata: GreeterBytecode,\n\t\t\t\t\targuments: ['My Greeting'],\n\t\t\t\t})\n\t\t\t\t.send(sendOptions);\n\n\t\t\tconst pastEvent = await deployedContract.getPastEvents({\n\t\t\t\ttopics: ['0x7d7846723bda52976e0286c6efffee937ee9f76817a867ec70531ad29fb1fc0e'],\n\t\t\t});\n\t\t\texpect(pastEvent).toHaveLength(1);\n\t\t\texpect(pastEvent[0]).toStrictEqual(AllGetPastEventsData.response[1]);\n\n\t\t\tspyTx.mockClear();\n\t\t\tspyGetLogs.mockClear();\n\t\t});\n\n\t\tit('allEvents() should throw error with inner error', async () => {\n\t\t\tconst contract = new Contract<typeof GreeterAbi>(GreeterAbi);\n\n\t\t\tconst spyTx = jest.spyOn(eth, 'sendTransaction').mockImplementation(() => {\n\t\t\t\tconst newContract = contract.clone();\n\t\t\t\tnewContract.options.address = deployedAddr;\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\t\t\treturn Promise.resolve(newContract) as any;\n\t\t\t});\n\n\t\t\tconst spyGetLogs = jest\n\t\t\t\t.spyOn(eth, 'getLogs')\n\t\t\t\t.mockImplementation((_objInstance, _params) => {\n\t\t\t\t\tthrow new Error('Inner error');\n\t\t\t\t});\n\n\t\t\tconst deployedContract = await contract\n\t\t\t\t.deploy({\n\t\t\t\t\tdata: GreeterBytecode,\n\t\t\t\t\targuments: ['My Greeting'],\n\t\t\t\t})\n\t\t\t\t.send(sendOptions);\n\n\t\t\tawait expect(\n\t\t\t\tprocessAsync((resolve, reject) => {\n\t\t\t\t\tconst event = deployedContract.events.allEvents({ fromBlock: 'earliest' });\n\n\t\t\t\t\tevent.on('error', reject);\n\t\t\t\t\tevent.on('data', resolve);\n\t\t\t\t}),\n\t\t\t).rejects.toThrow(\n\t\t\t\texpect.objectContaining({\n\t\t\t\t\tcause: expect.any(Error),\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tspyTx.mockClear();\n\t\t\tspyGetLogs.mockClear();\n\t\t});\n\n\t\tit('encodeABI should work for the deploy function using data', () => {\n\t\t\tconst contract = new Contract(GreeterAbi);\n\n\t\t\tconst spyTx = jest.spyOn(eth, 'sendTransaction').mockImplementation(() => {\n\t\t\t\tconst newContract = contract.clone();\n\t\t\t\tnewContract.options.address = deployedAddr;\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\t\t\treturn Promise.resolve(newContract) as any;\n\t\t\t});\n\n\t\t\tconst deploy = contract.deploy({\n\t\t\t\tdata: GreeterBytecode,\n\t\t\t\targuments: ['My Greeting'],\n\t\t\t});\n\n\t\t\tconst result = deploy.encodeABI();\n\t\t\texpect(result).toBe(\n\t\t\t\t'0x60806040523480156200001157600080fd5b5060405162000ed038038062000ed08339818101604052810190620000379190620001ea565b806001908162000048919062000486565b5060008081905550506200056d565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620000c08262000075565b810181811067ffffffffffffffff82111715620000e257620000e162000086565b5b80604052505050565b6000620000f762000057565b9050620001058282620000b5565b919050565b600067ffffffffffffffff82111562000128576200012762000086565b5b620001338262000075565b9050602081019050919050565b60005b838110156200016057808201518184015260208101905062000143565b60008484015250505050565b6000620001836200017d846200010a565b620000eb565b905082815260208101848484011115620001a257620001a162000070565b5b620001af84828562000140565b509392505050565b600082601f830112620001cf57620001ce6200006b565b5b8151620001e18482602086016200016c565b91505092915050565b60006020828403121562000203576200020262000061565b5b600082015167ffffffffffffffff81111562000224576200022362000066565b5b6200023284828501620001b7565b91505092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200028e57607f821691505b602082108103620002a457620002a362000246565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200030e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620002cf565b6200031a8683620002cf565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000367620003616200035b8462000332565b6200033c565b62000332565b9050919050565b6000819050919050565b620003838362000346565b6200039b62000392826200036e565b848454620002dc565b825550505050565b600090565b620003b2620003a3565b620003bf81848462000378565b505050565b5b81811015620003e757620003db600082620003a8565b600181019050620003c5565b5050565b601f82111562000436576200040081620002aa565b6200040b84620002bf565b810160208510156200041b578190505b620004336200042a85620002bf565b830182620003c4565b50505b505050565b600082821c905092915050565b60006200045b600019846008026200043b565b1980831691505092915050565b600062000476838362000448565b9150826002028217905092915050565b62000491826200023b565b67ffffffffffffffff811115620004ad57620004ac62000086565b5b620004b9825462000275565b620004c6828285620003eb565b600060209050601f831160018114620004fe5760008415620004e9578287015190505b620004f5858262000468565b86555062000565565b601f1984166200050e86620002aa565b60005b82811015620005385784890151825560018201915060208501945060208101905062000511565b8683101562000558578489015162000554601f89168262000448565b8355505b6001600288020188555050505b505050505050565b610953806200057d6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063a413686214610046578063cfae321714610077578063d09de08a14610095575b600080fd5b610060600480360381019061005b91906103c0565b61009f565b60405161006e9291906104a3565b60405180910390f35b61007f6101bd565b60405161008c91906104d3565b60405180910390f35b61009d61024f565b005b600060607f0d363f2fba46ab11b6db8da0125b0d5484787c44e265b48810735998bab12b756001846040516100d59291906105ee565b60405180910390a182600190816100ec91906107c6565b507f7d7846723bda52976e0286c6efffee937ee9f76817a867ec70531ad29fb1fc0e600160405161011d9190610898565b60405180910390a160018080805461013490610524565b80601f016020809104026020016040519081016040528092919081815260200182805461016090610524565b80156101ad5780601f10610182576101008083540402835291602001916101ad565b820191906000526020600020905b81548152906001019060200180831161019057829003601f168201915b5050505050905091509150915091565b6060600180546101cc90610524565b80601f01602080910402602001604051908101604052809291908181526020018280546101f890610524565b80156102455780601f1061021a57610100808354040283529160200191610245565b820191906000526020600020905b81548152906001019060200180831161022857829003601f168201915b5050505050905090565b600160005461025e91906108e9565b600081905550565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6102cd82610284565b810181811067ffffffffffffffff821117156102ec576102eb610295565b5b80604052505050565b60006102ff610266565b905061030b82826102c4565b919050565b600067ffffffffffffffff82111561032b5761032a610295565b5b61033482610284565b9050602081019050919050565b82818337600083830152505050565b600061036361035e84610310565b6102f5565b90508281526020810184848401111561037f5761037e61027f565b5b61038a848285610341565b509392505050565b600082601f8301126103a7576103a661027a565b5b81356103b7848260208601610350565b91505092915050565b6000602082840312156103d6576103d5610270565b5b600082013567ffffffffffffffff8111156103f4576103f3610275565b5b61040084828501610392565b91505092915050565b60008115159050919050565b61041e81610409565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561045e578082015181840152602081019050610443565b60008484015250505050565b600061047582610424565b61047f818561042f565b935061048f818560208601610440565b61049881610284565b840191505092915050565b60006040820190506104b86000830185610415565b81810360208301526104ca818461046a565b90509392505050565b600060208201905081810360008301526104ed818461046a565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061053c57607f821691505b60208210810361054f5761054e6104f5565b5b50919050565b60008190508160005260206000209050919050565b6000815461057781610524565b610581818661042f565b9450600182166000811461059c57600181146105b2576105e5565b60ff1983168652811515602002860193506105e5565b6105bb85610555565b60005b838110156105dd578154818901526001820191506020810190506105be565b808801955050505b50505092915050565b60006040820190508181036000830152610608818561056a565b9050818103602083015261061c818461046a565b90509392505050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026106727fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610635565b61067c8683610635565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006106c36106be6106b984610694565b61069e565b610694565b9050919050565b6000819050919050565b6106dd836106a8565b6106f16106e9826106ca565b848454610642565b825550505050565b600090565b6107066106f9565b6107118184846106d4565b505050565b5b818110156107355761072a6000826106fe565b600181019050610717565b5050565b601f82111561077a5761074b81610555565b61075484610625565b81016020851015610763578190505b61077761076f85610625565b830182610716565b50505b505050565b600082821c905092915050565b600061079d6000198460080261077f565b1980831691505092915050565b60006107b6838361078c565b9150826002028217905092915050565b6107cf82610424565b67ffffffffffffffff8111156107e8576107e7610295565b5b6107f28254610524565b6107fd828285610739565b600060209050601f831160018114610830576000841561081e578287015190505b61082885826107aa565b865550610890565b601f19841661083e86610555565b60005b8281101561086657848901518255600182019150602085019450602081019050610841565b86831015610883578489015161087f601f89168261078c565b8355505b6001600288020188555050505b505050505050565b600060208201905081810360008301526108b2818461056a565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006108f482610694565b91506108ff83610694565b9250828201905080821115610917576109166108ba565b5b9291505056fea26469706673582212207e5ba44159ffb37af8e8a9e7c5b6fb5ce81ea195b62ae3ac36288f2cf72c18a764736f6c634300081000330000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000b4d79204772656574696e67000000000000000000000000000000000000000000',\n\t\t\t);\n\n\t\t\tspyTx.mockClear();\n\t\t});\n\n\t\tit('decodeData should work for the deploy function', () => {\n\t\t\tconst contract = new Contract(GreeterAbi);\n\n\t\t\tconst spyTx = jest.spyOn(eth, 'sendTransaction').mockImplementation(() => {\n\t\t\t\tconst newContract = contract.clone();\n\t\t\t\tnewContract.options.address = deployedAddr;\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\t\t\treturn Promise.resolve(newContract) as any;\n\t\t\t});\n\n\t\t\tconst deploy = contract.deploy({\n\t\t\t\tdata: GreeterBytecode,\n\t\t\t\targuments: ['My Greeting'],\n\t\t\t});\n\n\t\t\tconst result = deploy.encodeABI();\n\t\t\texpect(result).toBe(\n\t\t\t\t'0x60806040523480156200001157600080fd5b5060405162000ed038038062000ed08339818101604052810190620000379190620001ea565b806001908162000048919062000486565b5060008081905550506200056d565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620000c08262000075565b810181811067ffffffffffffffff82111715620000e257620000e162000086565b5b80604052505050565b6000620000f762000057565b9050620001058282620000b5565b919050565b600067ffffffffffffffff82111562000128576200012762000086565b5b620001338262000075565b9050602081019050919050565b60005b838110156200016057808201518184015260208101905062000143565b60008484015250505050565b6000620001836200017d846200010a565b620000eb565b905082815260208101848484011115620001a257620001a162000070565b5b620001af84828562000140565b509392505050565b600082601f830112620001cf57620001ce6200006b565b5b8151620001e18482602086016200016c565b91505092915050565b60006020828403121562000203576200020262000061565b5b600082015167ffffffffffffffff81111562000224576200022362000066565b5b6200023284828501620001b7565b91505092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200028e57607f821691505b602082108103620002a457620002a362000246565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200030e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620002cf565b6200031a8683620002cf565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000367620003616200035b8462000332565b6200033c565b62000332565b9050919050565b6000819050919050565b620003838362000346565b6200039b62000392826200036e565b848454620002dc565b825550505050565b600090565b620003b2620003a3565b620003bf81848462000378565b505050565b5b81811015620003e757620003db600082620003a8565b600181019050620003c5565b5050565b601f82111562000436576200040081620002aa565b6200040b84620002bf565b810160208510156200041b578190505b620004336200042a85620002bf565b830182620003c4565b50505b505050565b600082821c905092915050565b60006200045b600019846008026200043b565b1980831691505092915050565b600062000476838362000448565b9150826002028217905092915050565b62000491826200023b565b67ffffffffffffffff811115620004ad57620004ac62000086565b5b620004b9825462000275565b620004c6828285620003eb565b600060209050601f831160018114620004fe5760008415620004e9578287015190505b620004f5858262000468565b86555062000565565b601f1984166200050e86620002aa565b60005b82811015620005385784890151825560018201915060208501945060208101905062000511565b8683101562000558578489015162000554601f89168262000448565b8355505b6001600288020188555050505b505050505050565b610953806200057d6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063a413686214610046578063cfae321714610077578063d09de08a14610095575b600080fd5b610060600480360381019061005b91906103c0565b61009f565b60405161006e9291906104a3565b60405180910390f35b61007f6101bd565b60405161008c91906104d3565b60405180910390f35b61009d61024f565b005b600060607f0d363f2fba46ab11b6db8da0125b0d5484787c44e265b48810735998bab12b756001846040516100d59291906105ee565b60405180910390a182600190816100ec91906107c6565b507f7d7846723bda52976e0286c6efffee937ee9f76817a867ec70531ad29fb1fc0e600160405161011d9190610898565b60405180910390a160018080805461013490610524565b80601f016020809104026020016040519081016040528092919081815260200182805461016090610524565b80156101ad5780601f10610182576101008083540402835291602001916101ad565b820191906000526020600020905b81548152906001019060200180831161019057829003601f168201915b5050505050905091509150915091565b6060600180546101cc90610524565b80601f01602080910402602001604051908101604052809291908181526020018280546101f890610524565b80156102455780601f1061021a57610100808354040283529160200191610245565b820191906000526020600020905b81548152906001019060200180831161022857829003601f168201915b5050505050905090565b600160005461025e91906108e9565b600081905550565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6102cd82610284565b810181811067ffffffffffffffff821117156102ec576102eb610295565b5b80604052505050565b60006102ff610266565b905061030b82826102c4565b919050565b600067ffffffffffffffff82111561032b5761032a610295565b5b61033482610284565b9050602081019050919050565b82818337600083830152505050565b600061036361035e84610310565b6102f5565b90508281526020810184848401111561037f5761037e61027f565b5b61038a848285610341565b509392505050565b600082601f8301126103a7576103a661027a565b5b81356103b7848260208601610350565b91505092915050565b6000602082840312156103d6576103d5610270565b5b600082013567ffffffffffffffff8111156103f4576103f3610275565b5b61040084828501610392565b91505092915050565b60008115159050919050565b61041e81610409565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561045e578082015181840152602081019050610443565b60008484015250505050565b600061047582610424565b61047f818561042f565b935061048f818560208601610440565b61049881610284565b840191505092915050565b60006040820190506104b86000830185610415565b81810360208301526104ca818461046a565b90509392505050565b600060208201905081810360008301526104ed818461046a565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061053c57607f821691505b60208210810361054f5761054e6104f5565b5b50919050565b60008190508160005260206000209050919050565b6000815461057781610524565b610581818661042f565b9450600182166000811461059c57600181146105b2576105e5565b60ff1983168652811515602002860193506105e5565b6105bb85610555565b60005b838110156105dd578154818901526001820191506020810190506105be565b808801955050505b50505092915050565b60006040820190508181036000830152610608818561056a565b9050818103602083015261061c818461046a565b90509392505050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026106727fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610635565b61067c8683610635565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006106c36106be6106b984610694565b61069e565b610694565b9050919050565b6000819050919050565b6106dd836106a8565b6106f16106e9826106ca565b848454610642565b825550505050565b600090565b6107066106f9565b6107118184846106d4565b505050565b5b818110156107355761072a6000826106fe565b600181019050610717565b5050565b601f82111561077a5761074b81610555565b61075484610625565b81016020851015610763578190505b61077761076f85610625565b830182610716565b50505b505050565b600082821c905092915050565b600061079d6000198460080261077f565b1980831691505092915050565b60006107b6838361078c565b9150826002028217905092915050565b6107cf82610424565b67ffffffffffffffff8111156107e8576107e7610295565b5b6107f28254610524565b6107fd828285610739565b600060209050601f831160018114610830576000841561081e578287015190505b61082885826107aa565b865550610890565b601f19841661083e86610555565b60005b8281101561086657848901518255600182019150602085019450602081019050610841565b86831015610883578489015161087f601f89168261078c565b8355505b6001600288020188555050505b505050505050565b600060208201905081810360008301526108b2818461056a565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006108f482610694565b91506108ff83610694565b9250828201905080821115610917576109166108ba565b5b9291505056fea26469706673582212207e5ba44159ffb37af8e8a9e7c5b6fb5ce81ea195b62ae3ac36288f2cf72c18a764736f6c634300081000330000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000b4d79204772656574696e67000000000000000000000000000000000000000000',\n\t\t\t);\n\n\t\t\tconst params = deploy.decodeData(result);\n\t\t\texpect(params).toMatchObject({\n\t\t\t\t__method__: 'constructor',\n\t\t\t\t__length__: 1,\n\t\t\t\t'0': 'My Greeting',\n\t\t\t\t_greeting: 'My Greeting',\n\t\t\t});\n\n\t\t\tspyTx.mockClear();\n\t\t});\n\n\t\tit('decodeMethodData should decode data for methods', async () => {\n\t\t\tconst arg = 'Hello';\n\n\t\t\tconst contract = new Contract(GreeterAbi, { data: GreeterBytecode });\n\n\t\t\tconst spyTx = jest.spyOn(eth, 'sendTransaction').mockImplementation(() => {\n\t\t\t\tconst newContract = contract.clone();\n\t\t\t\tnewContract.options.address = deployedAddr;\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\t\t\treturn Promise.resolve(newContract) as any;\n\t\t\t});\n\n\t\t\tconst deployedContract = await contract\n\t\t\t\t.deploy({\n\t\t\t\t\targuments: ['My Greeting'],\n\t\t\t\t})\n\t\t\t\t.send(sendOptions);\n\n\t\t\tconst result = deployedContract.methods.setGreeting(arg).encodeABI();\n\n\t\t\texpect(result).toBe(\n\t\t\t\t'0xa41368620000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000548656c6c6f000000000000000000000000000000000000000000000000000000',\n\t\t\t);\n\n\t\t\t// const params = deployedContract.methods.setGreeting(arg).decodeData(result);\n\n\t\t\tconst params = deployedContract.decodeMethodData(result);\n\t\t\texpect(params).toMatchObject({\n\t\t\t\t__method__: 'setGreeting(string)',\n\t\t\t\t__length__: 1,\n\t\t\t\t'0': 'Hello',\n\t\t\t\t_greeting: 'Hello',\n\t\t\t});\n\n\t\t\tspyTx.mockClear();\n\t\t});\n\n\t\tit.skip('estimateGas should use DEFAULT_RETURN_FORMAT by default', async () => {\n\t\t\tconst contract = new Contract(GreeterAbi);\n\n\t\t\tconst spyTx = jest.spyOn(eth, 'sendTransaction').mockImplementation(() => {\n\t\t\t\tconst newContract = contract.clone();\n\t\t\t\tnewContract.options.address = deployedAddr;\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\t\t\treturn Promise.resolve(newContract) as any;\n\t\t\t});\n\n\t\t\tconst spyEstimateGas = jest\n\t\t\t\t.spyOn(eth, 'estimateGas')\n\t\t\t\t.mockImplementationOnce(async (_objInstance, _tx, _block, returnFormat) => {\n\t\t\t\t\texpect(_block).toBe('latest');\n\t\t\t\t\texpect(_tx.to).toBeUndefined();\n\t\t\t\t\texpect(_tx.from).toStrictEqual(sendOptions.from);\n\t\t\t\t\texpect(_tx.input).toBe(\n\t\t\t\t\t\t'0x60806040523480156200001157600080fd5b5060405162000ed038038062000ed08339818101604052810190620000379190620001ea565b806001908162000048919062000486565b5060008081905550506200056d565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620000c08262000075565b810181811067ffffffffffffffff82111715620000e257620000e162000086565b5b80604052505050565b6000620000f762000057565b9050620001058282620000b5565b919050565b600067ffffffffffffffff82111562000128576200012762000086565b5b620001338262000075565b9050602081019050919050565b60005b838110156200016057808201518184015260208101905062000143565b60008484015250505050565b6000620001836200017d846200010a565b620000eb565b905082815260208101848484011115620001a257620001a162000070565b5b620001af84828562000140565b509392505050565b600082601f830112620001cf57620001ce6200006b565b5b8151620001e18482602086016200016c565b91505092915050565b60006020828403121562000203576200020262000061565b5b600082015167ffffffffffffffff81111562000224576200022362000066565b5b6200023284828501620001b7565b91505092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200028e57607f821691505b602082108103620002a457620002a362000246565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200030e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620002cf565b6200031a8683620002cf565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000367620003616200035b8462000332565b6200033c565b62000332565b9050919050565b6000819050919050565b620003838362000346565b6200039b62000392826200036e565b848454620002dc565b825550505050565b600090565b620003b2620003a3565b620003bf81848462000378565b505050565b5b81811015620003e757620003db600082620003a8565b600181019050620003c5565b5050565b601f82111562000436576200040081620002aa565b6200040b84620002bf565b810160208510156200041b578190505b620004336200042a85620002bf565b830182620003c4565b50505b505050565b600082821c905092915050565b60006200045b600019846008026200043b565b1980831691505092915050565b600062000476838362000448565b9150826002028217905092915050565b62000491826200023b565b67ffffffffffffffff811115620004ad57620004ac62000086565b5b620004b9825462000275565b620004c6828285620003eb565b600060209050601f831160018114620004fe5760008415620004e9578287015190505b620004f5858262000468565b86555062000565565b601f1984166200050e86620002aa565b60005b82811015620005385784890151825560018201915060208501945060208101905062000511565b8683101562000558578489015162000554601f89168262000448565b8355505b6001600288020188555050505b505050505050565b610953806200057d6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063a413686214610046578063cfae321714610077578063d09de08a14610095575b600080fd5b610060600480360381019061005b91906103c0565b61009f565b60405161006e9291906104a3565b60405180910390f35b61007f6101bd565b60405161008c91906104d3565b60405180910390f35b61009d61024f565b005b600060607f0d363f2fba46ab11b6db8da0125b0d5484787c44e265b48810735998bab12b756001846040516100d59291906105ee565b60405180910390a182600190816100ec91906107c6565b507f7d7846723bda52976e0286c6efffee937ee9f76817a867ec70531ad29fb1fc0e600160405161011d9190610898565b60405180910390a160018080805461013490610524565b80601f016020809104026020016040519081016040528092919081815260200182805461016090610524565b80156101ad5780601f10610182576101008083540402835291602001916101ad565b820191906000526020600020905b81548152906001019060200180831161019057829003601f168201915b5050505050905091509150915091565b6060600180546101cc90610524565b80601f01602080910402602001604051908101604052809291908181526020018280546101f890610524565b80156102455780601f1061021a57610100808354040283529160200191610245565b820191906000526020600020905b81548152906001019060200180831161022857829003601f168201915b5050505050905090565b600160005461025e91906108e9565b600081905550565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6102cd82610284565b810181811067ffffffffffffffff821117156102ec576102eb610295565b5b80604052505050565b60006102ff610266565b905061030b82826102c4565b919050565b600067ffffffffffffffff82111561032b5761032a610295565b5b61033482610284565b9050602081019050919050565b82818337600083830152505050565b600061036361035e84610310565b6102f5565b90508281526020810184848401111561037f5761037e61027f565b5b61038a848285610341565b509392505050565b600082601f8301126103a7576103a661027a565b5b81356103b7848260208601610350565b91505092915050565b6000602082840312156103d6576103d5610270565b5b600082013567ffffffffffffffff8111156103f4576103f3610275565b5b61040084828501610392565b91505092915050565b60008115159050919050565b61041e81610409565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561045e578082015181840152602081019050610443565b60008484015250505050565b600061047582610424565b61047f818561042f565b935061048f818560208601610440565b61049881610284565b840191505092915050565b60006040820190506104b86000830185610415565b81810360208301526104ca818461046a565b90509392505050565b600060208201905081810360008301526104ed818461046a565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061053c57607f821691505b60208210810361054f5761054e6104f5565b5b50919050565b60008190508160005260206000209050919050565b6000815461057781610524565b610581818661042f565b9450600182166000811461059c57600181146105b2576105e5565b60ff1983168652811515602002860193506105e5565b6105bb85610555565b60005b838110156105dd578154818901526001820191506020810190506105be565b808801955050505b50505092915050565b60006040820190508181036000830152610608818561056a565b9050818103602083015261061c818461046a565b90509392505050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026106727fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610635565b61067c8683610635565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006106c36106be6106b984610694565b61069e565b610694565b9050919050565b6000819050919050565b6106dd836106a8565b6106f16106e9826106ca565b848454610642565b825550505050565b600090565b6107066106f9565b6107118184846106d4565b505050565b5b818110156107355761072a6000826106fe565b600181019050610717565b5050565b601f82111561077a5761074b81610555565b61075484610625565b81016020851015610763578190505b61077761076f85610625565b830182610716565b50505b505050565b600082821c905092915050565b600061079d6000198460080261077f565b1980831691505092915050565b60006107b6838361078c565b9150826002028217905092915050565b6107cf82610424565b67ffffffffffffffff8111156107e8576107e7610295565b5b6107f28254610524565b6107fd828285610739565b600060209050601f831160018114610830576000841561081e578287015190505b61082885826107aa565b865550610890565b601f19841661083e86610555565b60005b8281101561086657848901518255600182019150602085019450602081019050610841565b86831015610883578489015161087f601f89168261078c565b8355505b6001600288020188555050505b505050505050565b600060208201905081810360008301526108b2818461056a565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006108f482610694565b91506108ff83610694565b9250828201905080821115610917576109166108ba565b5b9291505056fea26469706673582212207e5ba44159ffb37af8e8a9e7c5b6fb5ce81ea195b62ae3ac36288f2cf72c18a764736f6c634300081000330000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000b4d79204772656574696e67000000000000000000000000000000000000000000',\n\t\t\t\t\t);\n\t\t\t\t\texpect(returnFormat).toBe(DEFAULT_RETURN_FORMAT);\n\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\t\t\t\treturn Promise.resolve(BigInt(36916));\n\t\t\t\t});\n\n\t\t\tconst deploy = contract.deploy({\n\t\t\t\tinput: GreeterBytecode,\n\t\t\t\targuments: ['My Greeting'],\n\t\t\t});\n\n\t\t\tconst result = await deploy.estimateGas(sendOptions);\n\t\t\texpect(result).toStrictEqual(BigInt(36916));\n\n\t\t\tspyTx.mockClear();\n\t\t\tspyEstimateGas.mockClear();\n\t\t});\n\n\t\tit('estimateGas should work for the deploy function using input', async () => {\n\t\t\tconst contract = new Contract(GreeterAbi);\n\n\t\t\tconst spyTx = jest.spyOn(eth, 'sendTransaction').mockImplementation(() => {\n\t\t\t\tconst newContract = contract.clone();\n\t\t\t\tnewContract.options.address = deployedAddr;\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\t\t\treturn Promise.resolve(newContract) as any;\n\t\t\t});\n\n\t\t\tconst spyEstimateGas = jest\n\t\t\t\t.spyOn(eth, 'estimateGas')\n\t\t\t\t.mockImplementationOnce((_objInstance, _tx, _block, returnFormat) => {\n\t\t\t\t\texpect(_block).toBe('latest');\n\t\t\t\t\texpect(_tx.to).toBeUndefined();\n\t\t\t\t\texpect(_tx.from).toStrictEqual(sendOptions.from);\n\t\t\t\t\texpect(_tx.input).toBe(\n\t\t\t\t\t\t'0x60806040523480156200001157600080fd5b5060405162000ed038038062000ed08339818101604052810190620000379190620001ea565b806001908162000048919062000486565b5060008081905550506200056d565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620000c08262000075565b810181811067ffffffffffffffff82111715620000e257620000e162000086565b5b80604052505050565b6000620000f762000057565b9050620001058282620000b5565b919050565b600067ffffffffffffffff82111562000128576200012762000086565b5b620001338262000075565b9050602081019050919050565b60005b838110156200016057808201518184015260208101905062000143565b60008484015250505050565b6000620001836200017d846200010a565b620000eb565b905082815260208101848484011115620001a257620001a162000070565b5b620001af84828562000140565b509392505050565b600082601f830112620001cf57620001ce6200006b565b5b8151620001e18482602086016200016c565b91505092915050565b60006020828403121562000203576200020262000061565b5b600082015167ffffffffffffffff81111562000224576200022362000066565b5b6200023284828501620001b7565b91505092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200028e57607f821691505b602082108103620002a457620002a362000246565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200030e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620002cf565b6200031a8683620002cf565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000367620003616200035b8462000332565b6200033c565b62000332565b9050919050565b6000819050919050565b620003838362000346565b6200039b62000392826200036e565b848454620002dc565b825550505050565b600090565b620003b2620003a3565b620003bf81848462000378565b505050565b5b81811015620003e757620003db600082620003a8565b600181019050620003c5565b5050565b601f82111562000436576200040081620002aa565b6200040b84620002bf565b810160208510156200041b578190505b620004336200042a85620002bf565b830182620003c4565b50505b505050565b600082821c905092915050565b60006200045b600019846008026200043b565b1980831691505092915050565b600062000476838362000448565b9150826002028217905092915050565b62000491826200023b565b67ffffffffffffffff811115620004ad57620004ac62000086565b5b620004b9825462000275565b620004c6828285620003eb565b600060209050601f831160018114620004fe5760008415620004e9578287015190505b620004f5858262000468565b86555062000565565b601f1984166200050e86620002aa565b60005b82811015620005385784890151825560018201915060208501945060208101905062000511565b8683101562000558578489015162000554601f89168262000448565b8355505b6001600288020188555050505b505050505050565b610953806200057d6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063a413686214610046578063cfae321714610077578063d09de08a14610095575b600080fd5b610060600480360381019061005b91906103c0565b61009f565b60405161006e9291906104a3565b60405180910390f35b61007f6101bd565b60405161008c91906104d3565b60405180910390f35b61009d61024f565b005b600060607f0d363f2fba46ab11b6db8da0125b0d5484787c44e265b48810735998bab12b756001846040516100d59291906105ee565b60405180910390a182600190816100ec91906107c6565b507f7d7846723bda52976e0286c6efffee937ee9f76817a867ec70531ad29fb1fc0e600160405161011d9190610898565b60405180910390a160018080805461013490610524565b80601f016020809104026020016040519081016040528092919081815260200182805461016090610524565b80156101ad5780601f10610182576101008083540402835291602001916101ad565b820191906000526020600020905b81548152906001019060200180831161019057829003601f168201915b5050505050905091509150915091565b6060600180546101cc90610524565b80601f01602080910402602001604051908101604052809291908181526020018280546101f890610524565b80156102455780601f1061021a57610100808354040283529160200191610245565b820191906000526020600020905b81548152906001019060200180831161022857829003601f168201915b5050505050905090565b600160005461025e91906108e9565b600081905550565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6102cd82610284565b810181811067ffffffffffffffff821117156102ec576102eb610295565b5b80604052505050565b60006102ff610266565b905061030b82826102c4565b919050565b600067ffffffffffffffff82111561032b5761032a610295565b5b61033482610284565b9050602081019050919050565b82818337600083830152505050565b600061036361035e84610310565b6102f5565b90508281526020810184848401111561037f5761037e61027f565b5b61038a848285610341565b509392505050565b600082601f8301126103a7576103a661027a565b5b81356103b7848260208601610350565b91505092915050565b6000602082840312156103d6576103d5610270565b5b600082013567ffffffffffffffff8111156103f4576103f3610275565b5b61040084828501610392565b91505092915050565b60008115159050919050565b61041e81610409565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561045e578082015181840152602081019050610443565b60008484015250505050565b600061047582610424565b61047f818561042f565b935061048f818560208601610440565b61049881610284565b840191505092915050565b60006040820190506104b86000830185610415565b81810360208301526104ca818461046a565b90509392505050565b600060208201905081810360008301526104ed818461046a565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061053c57607f821691505b60208210810361054f5761054e6104f5565b5b50919050565b60008190508160005260206000209050919050565b6000815461057781610524565b610581818661042f565b9450600182166000811461059c57600181146105b2576105e5565b60ff1983168652811515602002860193506105e5565b6105bb85610555565b60005b838110156105dd578154818901526001820191506020810190506105be565b808801955050505b50505092915050565b60006040820190508181036000830152610608818561056a565b9050818103602083015261061c818461046a565b90509392505050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026106727fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610635565b61067c8683610635565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006106c36106be6106b984610694565b61069e565b610694565b9050919050565b6000819050919050565b6106dd836106a8565b6106f16106e9826106ca565b848454610642565b825550505050565b600090565b6107066106f9565b6107118184846106d4565b505050565b5b818110156107355761072a6000826106fe565b600181019050610717565b5050565b601f82111561077a5761074b81610555565b61075484610625565b81016020851015610763578190505b61077761076f85610625565b830182610716565b50505b505050565b600082821c905092915050565b600061079d6000198460080261077f565b1980831691505092915050565b60006107b6838361078c565b9150826002028217905092915050565b6107cf82610424565b67ffffffffffffffff8111156107e8576107e7610295565b5b6107f28254610524565b6107fd828285610739565b600060209050601f831160018114610830576000841561081e578287015190505b61082885826107aa565b865550610890565b601f19841661083e86610555565b60005b8281101561086657848901518255600182019150602085019450602081019050610841565b86831015610883578489015161087f601f89168261078c565b8355505b6001600288020188555050505b505050505050565b600060208201905081810360008301526108b2818461056a565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006108f482610694565b91506108ff83610694565b9250828201905080821115610917576109166108ba565b5b9291505056fea26469706673582212207e5ba44159ffb37af8e8a9e7c5b6fb5ce81ea195b62ae3ac36288f2cf72c18a764736f6c634300081000330000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000b4d79204772656574696e67000000000000000000000000000000000000000000',\n\t\t\t\t\t);\n\t\t\t\t\texpect(returnFormat).toBe(ETH_DATA_FORMAT);\n\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\t\t\t\treturn Promise.resolve(BigInt(36916)) as any;\n\t\t\t\t});\n\n\t\t\tconst deploy = contract.deploy({\n\t\t\t\tinput: GreeterBytecode,\n\t\t\t\targuments: ['My Greeting'],\n\t\t\t});\n\n\t\t\tconst result = await deploy.estimateGas(sendOptions, ETH_DATA_FORMAT);\n\t\t\texpect(result).toStrictEqual(BigInt(36916));\n\n\t\t\tspyTx.mockClear();\n\t\t\tspyEstimateGas.mockClear();\n\t\t});\n\n\t\tit('estimateGas should work for the deploy function using data', async () => {\n\t\t\tconst contract = new Contract(GreeterAbi);\n\n\t\t\tconst spyTx = jest.spyOn(eth, 'sendTransaction').mockImplementation(() => {\n\t\t\t\tconst newContract = contract.clone();\n\t\t\t\tnewContract.options.address = deployedAddr;\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\t\t\treturn Promise.resolve(newContract) as any;\n\t\t\t});\n\n\t\t\tconst spyEstimateGas = jest\n\t\t\t\t.spyOn(eth, 'estimateGas')\n\t\t\t\t.mockImplementationOnce((_objInstance, _tx, _block, returnFormat) => {\n\t\t\t\t\texpect(_block).toBe('latest');\n\t\t\t\t\texpect(_tx.to).toBeUndefined();\n\t\t\t\t\texpect(_tx.from).toStrictEqual(sendOptions.from);\n\t\t\t\t\texpect(_tx.data).toBe(\n\t\t\t\t\t\t'0x60806040523480156200001157600080fd5b5060405162000ed038038062000ed08339818101604052810190620000379190620001ea565b806001908162000048919062000486565b5060008081905550506200056d565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620000c08262000075565b810181811067ffffffffffffffff82111715620000e257620000e162000086565b5b80604052505050565b6000620000f762000057565b9050620001058282620000b5565b919050565b600067ffffffffffffffff82111562000128576200012762000086565b5b620001338262000075565b9050602081019050919050565b60005b838110156200016057808201518184015260208101905062000143565b60008484015250505050565b6000620001836200017d846200010a565b620000eb565b905082815260208101848484011115620001a257620001a162000070565b5b620001af84828562000140565b509392505050565b600082601f830112620001cf57620001ce6200006b565b5b8151620001e18482602086016200016c565b91505092915050565b60006020828403121562000203576200020262000061565b5b600082015167ffffffffffffffff81111562000224576200022362000066565b5b6200023284828501620001b7565b91505092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200028e57607f821691505b602082108103620002a457620002a362000246565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200030e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620002cf565b6200031a8683620002cf565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000367620003616200035b8462000332565b6200033c565b62000332565b9050919050565b6000819050919050565b620003838362000346565b6200039b62000392826200036e565b848454620002dc565b825550505050565b600090565b620003b2620003a3565b620003bf81848462000378565b505050565b5b81811015620003e757620003db600082620003a8565b600181019050620003c5565b5050565b601f82111562000436576200040081620002aa565b6200040b84620002bf565b810160208510156200041b578190505b620004336200042a85620002bf565b830182620003c4565b50505b505050565b600082821c905092915050565b60006200045b600019846008026200043b565b1980831691505092915050565b600062000476838362000448565b9150826002028217905092915050565b62000491826200023b565b67ffffffffffffffff811115620004ad57620004ac62000086565b5b620004b9825462000275565b620004c6828285620003eb565b600060209050601f831160018114620004fe5760008415620004e9578287015190505b620004f5858262000468565b86555062000565565b601f1984166200050e86620002aa565b60005b82811015620005385784890151825560018201915060208501945060208101905062000511565b8683101562000558578489015162000554601f89168262000448565b8355505b6001600288020188555050505b505050505050565b610953806200057d6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063a413686214610046578063cfae321714610077578063d09de08a14610095575b600080fd5b610060600480360381019061005b91906103c0565b61009f565b60405161006e9291906104a3565b60405180910390f35b61007f6101bd565b60405161008c91906104d3565b60405180910390f35b61009d61024f565b005b600060607f0d363f2fba46ab11b6db8da0125b0d5484787c44e265b48810735998bab12b756001846040516100d59291906105ee565b60405180910390a182600190816100ec91906107c6565b507f7d7846723bda52976e0286c6efffee937ee9f76817a867ec70531ad29fb1fc0e600160405161011d9190610898565b60405180910390a160018080805461013490610524565b80601f016020809104026020016040519081016040528092919081815260200182805461016090610524565b80156101ad5780601f10610182576101008083540402835291602001916101ad565b820191906000526020600020905b81548152906001019060200180831161019057829003601f168201915b5050505050905091509150915091565b6060600180546101cc90610524565b80601f01602080910402602001604051908101604052809291908181526020018280546101f890610524565b80156102455780601f1061021a57610100808354040283529160200191610245565b820191906000526020600020905b81548152906001019060200180831161022857829003601f168201915b5050505050905090565b600160005461025e91906108e9565b600081905550565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6102cd82610284565b810181811067ffffffffffffffff821117156102ec576102eb610295565b5b80604052505050565b60006102ff610266565b905061030b82826102c4565b919050565b600067ffffffffffffffff82111561032b5761032a610295565b5b61033482610284565b9050602081019050919050565b82818337600083830152505050565b600061036361035e84610310565b6102f5565b90508281526020810184848401111561037f5761037e61027f565b5b61038a848285610341565b509392505050565b600082601f8301126103a7576103a661027a565b5b81356103b7848260208601610350565b91505092915050565b6000602082840312156103d6576103d5610270565b5b600082013567ffffffffffffffff8111156103f4576103f3610275565b5b61040084828501610392565b91505092915050565b60008115159050919050565b61041e81610409565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561045e578082015181840152602081019050610443565b60008484015250505050565b600061047582610424565b61047f818561042f565b935061048f818560208601610440565b61049881610284565b840191505092915050565b60006040820190506104b86000830185610415565b81810360208301526104ca818461046a565b90509392505050565b600060208201905081810360008301526104ed818461046a565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061053c57607f821691505b60208210810361054f5761054e6104f5565b5b50919050565b60008190508160005260206000209050919050565b6000815461057781610524565b610581818661042f565b9450600182166000811461059c57600181146105b2576105e5565b60ff1983168652811515602002860193506105e5565b6105bb85610555565b60005b838110156105dd578154818901526001820191506020810190506105be565b808801955050505b50505092915050565b60006040820190508181036000830152610608818561056a565b9050818103602083015261061c818461046a565b90509392505050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026106727fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610635565b61067c8683610635565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006106c36106be6106b984610694565b61069e565b610694565b9050919050565b6000819050919050565b6106dd836106a8565b6106f16106e9826106ca565b848454610642565b825550505050565b600090565b6107066106f9565b6107118184846106d4565b505050565b5b818110156107355761072a6000826106fe565b600181019050610717565b5050565b601f82111561077a5761074b81610555565b61075484610625565b81016020851015610763578190505b61077761076f85610625565b830182610716565b50505b505050565b600082821c905092915050565b600061079d6000198460080261077f565b1980831691505092915050565b60006107b6838361078c565b9150826002028217905092915050565b6107cf82610424565b67ffffffffffffffff8111156107e8576107e7610295565b5b6107f28254610524565b6107fd828285610739565b600060209050601f831160018114610830576000841561081e578287015190505b61082885826107aa565b865550610890565b601f19841661083e86610555565b60005b8281101561086657848901518255600182019150602085019450602081019050610841565b86831015610883578489015161087f601f89168261078c565b8355505b6001600288020188555050505b505050505050565b600060208201905081810360008301526108b2818461056a565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006108f482610694565b91506108ff83610694565b9250828201905080821115610917576109166108ba565b5b9291505056fea26469706673582212207e5ba44159ffb37af8e8a9e7c5b6fb5ce81ea195b62ae3ac36288f2cf72c18a764736f6c634300081000330000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000b4d79204772656574696e67000000000000000000000000000000000000000000',\n\t\t\t\t\t);\n\t\t\t\t\texpect(returnFormat).toBe(ETH_DATA_FORMAT);\n\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\t\t\t\treturn Promise.resolve(BigInt(36916)) as any;\n\t\t\t\t});\n\n\t\t\tconst deploy = contract.deploy({\n\t\t\t\tdata: GreeterBytecode,\n\t\t\t\targuments: ['My Greeting'],\n\t\t\t});\n\n\t\t\tconst result = await deploy.estimateGas(sendOptions, ETH_DATA_FORMAT);\n\t\t\texpect(result).toStrictEqual(BigInt(36916));\n\n\t\t\tspyTx.mockClear();\n\t\t\tspyEstimateGas.mockClear();\n\t\t});\n\n\t\tit('estimateGas should work for the deploy function using both data and input web3config', async () => {\n\t\t\tconst expectedProvider = 'http://127.0.0.1:8545';\n\t\t\tconst web3Context = new Web3Context({\n\t\t\t\tprovider: expectedProvider,\n\t\t\t\tconfig: { contractDataInputFill: 'both' },\n\t\t\t});\n\n\t\t\tconst contract = new Contract(GreeterAbi, web3Context);\n\n\t\t\tconst spyTx = jest.spyOn(eth, 'sendTransaction').mockImplementation(() => {\n\t\t\t\tconst newContract = contract.clone();\n\t\t\t\tnewContract.options.address = deployedAddr;\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\t\t\treturn Promise.resolve(newContract) as any;\n\t\t\t});\n\n\t\t\tconst spyEstimateGas = jest\n\t\t\t\t.spyOn(eth, 'estimateGas')\n\t\t\t\t.mockImplementationOnce((_objInstance, _tx, _block, returnFormat) => {\n\t\t\t\t\texpect(_block).toBe('latest');\n\t\t\t\t\texpect(_tx.to).toBeUndefined();\n\t\t\t\t\texpect(_tx.from).toStrictEqual(sendOptions.from);\n\t\t\t\t\texpect(_tx.data).toBe(\n\t\t\t\t\t\t'0x60806040523480156200001157600080fd5b5060405162000ed038038062000ed08339818101604052810190620000379190620001ea565b806001908162000048919062000486565b5060008081905550506200056d565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620000c08262000075565b810181811067ffffffffffffffff82111715620000e257620000e162000086565b5b80604052505050565b6000620000f762000057565b9050620001058282620000b5565b919050565b600067ffffffffffffffff82111562000128576200012762000086565b5b620001338262000075565b9050602081019050919050565b60005b838110156200016057808201518184015260208101905062000143565b60008484015250505050565b6000620001836200017d846200010a565b620000eb565b905082815260208101848484011115620001a257620001a162000070565b5b620001af84828562000140565b509392505050565b600082601f830112620001cf57620001ce6200006b565b5b8151620001e18482602086016200016c565b91505092915050565b60006020828403121562000203576200020262000061565b5b600082015167ffffffffffffffff81111562000224576200022362000066565b5b6200023284828501620001b7565b91505092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200028e57607f821691505b602082108103620002a457620002a362000246565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200030e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620002cf565b6200031a8683620002cf565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000367620003616200035b8462000332565b6200033c565b62000332565b9050919050565b6000819050919050565b620003838362000346565b6200039b62000392826200036e565b848454620002dc565b825550505050565b600090565b620003b2620003a3565b620003bf81848462000378565b505050565b5b81811015620003e757620003db600082620003a8565b600181019050620003c5565b5050565b601f82111562000436576200040081620002aa565b6200040b84620002bf565b810160208510156200041b578190505b620004336200042a85620002bf565b830182620003c4565b50505b505050565b600082821c905092915050565b60006200045b600019846008026200043b565b1980831691505092915050565b600062000476838362000448565b9150826002028217905092915050565b62000491826200023b565b67ffffffffffffffff811115620004ad57620004ac62000086565b5b620004b9825462000275565b620004c6828285620003eb565b600060209050601f831160018114620004fe5760008415620004e9578287015190505b620004f5858262000468565b86555062000565565b601f1984166200050e86620002aa565b60005b82811015620005385784890151825560018201915060208501945060208101905062000511565b8683101562000558578489015162000554601f89168262000448565b8355505b6001600288020188555050505b505050505050565b610953806200057d6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063a413686214610046578063cfae321714610077578063d09de08a14610095575b600080fd5b610060600480360381019061005b91906103c0565b61009f565b60405161006e9291906104a3565b60405180910390f35b61007f6101bd565b60405161008c91906104d3565b60405180910390f35b61009d61024f565b005b600060607f0d363f2fba46ab11b6db8da0125b0d5484787c44e265b48810735998bab12b756001846040516100d59291906105ee565b60405180910390a182600190816100ec91906107c6565b507f7d7846723bda52976e0286c6efffee937ee9f76817a867ec70531ad29fb1fc0e600160405161011d9190610898565b60405180910390a160018080805461013490610524565b80601f016020809104026020016040519081016040528092919081815260200182805461016090610524565b80156101ad5780601f10610182576101008083540402835291602001916101ad565b820191906000526020600020905b81548152906001019060200180831161019057829003601f168201915b5050505050905091509150915091565b6060600180546101cc90610524565b80601f01602080910402602001604051908101604052809291908181526020018280546101f890610524565b80156102455780601f1061021a57610100808354040283529160200191610245565b820191906000526020600020905b81548152906001019060200180831161022857829003601f168201915b5050505050905090565b600160005461025e91906108e9565b600081905550565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6102cd82610284565b810181811067ffffffffffffffff821117156102ec576102eb610295565b5b80604052505050565b60006102ff610266565b905061030b82826102c4565b919050565b600067ffffffffffffffff82111561032b5761032a610295565b5b61033482610284565b9050602081019050919050565b82818337600083830152505050565b600061036361035e84610310565b6102f5565b90508281526020810184848401111561037f5761037e61027f565b5b61038a848285610341565b509392505050565b600082601f8301126103a7576103a661027a565b5b81356103b7848260208601610350565b91505092915050565b6000602082840312156103d6576103d5610270565b5b600082013567ffffffffffffffff8111156103f4576103f3610275565b5b61040084828501610392565b91505092915050565b60008115159050919050565b61041e81610409565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561045e578082015181840152602081019050610443565b60008484015250505050565b600061047582610424565b61047f818561042f565b935061048f818560208601610440565b61049881610284565b840191505092915050565b60006040820190506104b86000830185610415565b81810360208301526104ca818461046a565b90509392505050565b600060208201905081810360008301526104ed818461046a565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061053c57607f821691505b60208210810361054f5761054e6104f5565b5b50919050565b60008190508160005260206000209050919050565b6000815461057781610524565b610581818661042f565b9450600182166000811461059c57600181146105b2576105e5565b60ff1983168652811515602002860193506105e5565b6105bb85610555565b60005b838110156105dd578154818901526001820191506020810190506105be565b808801955050505b50505092915050565b60006040820190508181036000830152610608818561056a565b9050818103602083015261061c818461046a565b90509392505050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026106727fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610635565b61067c8683610635565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006106c36106be6106b984610694565b61069e565b610694565b9050919050565b6000819050919050565b6106dd836106a8565b6106f16106e9826106ca565b848454610642565b825550505050565b600090565b6107066106f9565b6107118184846106d4565b505050565b5b818110156107355761072a6000826106fe565b600181019050610717565b5050565b601f82111561077a5761074b81610555565b61075484610625565b81016020851015610763578190505b61077761076f85610625565b830182610716565b50505b505050565b600082821c905092915050565b600061079d6000198460080261077f565b1980831691505092915050565b60006107b6838361078c565b9150826002028217905092915050565b6107cf82610424565b67ffffffffffffffff8111156107e8576107e7610295565b5b6107f28254610524565b6107fd828285610739565b600060209050601f831160018114610830576000841561081e578287015190505b61082885826107aa565b865550610890565b601f19841661083e86610555565b60005b8281101561086657848901518255600182019150602085019450602081019050610841565b86831015610883578489015161087f601f89168261078c565b8355505b6001600288020188555050505b505050505050565b600060208201905081810360008301526108b2818461056a565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006108f482610694565b91506108ff83610694565b9250828201905080821115610917576109166108ba565b5b9291505056fea26469706673582212207e5ba44159ffb37af8e8a9e7c5b6fb5ce81ea195b62ae3ac36288f2cf72c18a764736f6c634300081000330000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000b4d79204772656574696e67000000000000000000000000000000000000000000',\n\t\t\t\t\t);\n\t\t\t\t\texpect(_tx.input).toBe(\n\t\t\t\t\t\t'0x60806040523480156200001157600080fd5b5060405162000ed038038062000ed08339818101604052810190620000379190620001ea565b806001908162000048919062000486565b5060008081905550506200056d565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620000c08262000075565b810181811067ffffffffffffffff82111715620000e257620000e162000086565b5b80604052505050565b6000620000f762000057565b9050620001058282620000b5565b919050565b600067ffffffffffffffff82111562000128576200012762000086565b5b620001338262000075565b9050602081019050919050565b60005b838110156200016057808201518184015260208101905062000143565b60008484015250505050565b6000620001836200017d846200010a565b620000eb565b905082815260208101848484011115620001a257620001a162000070565b5b620001af84828562000140565b509392505050565b600082601f830112620001cf57620001ce6200006b565b5b8151620001e18482602086016200016c565b91505092915050565b60006020828403121562000203576200020262000061565b5b600082015167ffffffffffffffff81111562000224576200022362000066565b5b6200023284828501620001b7565b91505092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200028e57607f821691505b602082108103620002a457620002a362000246565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200030e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620002cf565b6200031a8683620002cf565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000367620003616200035b8462000332565b6200033c565b62000332565b9050919050565b6000819050919050565b620003838362000346565b6200039b62000392826200036e565b848454620002dc565b825550505050565b600090565b620003b2620003a3565b620003bf81848462000378565b505050565b5b81811015620003e757620003db600082620003a8565b600181019050620003c5565b5050565b601f82111562000436576200040081620002aa565b6200040b84620002bf565b810160208510156200041b578190505b620004336200042a85620002bf565b830182620003c4565b50505b505050565b600082821c905092915050565b60006200045b600019846008026200043b565b1980831691505092915050565b600062000476838362000448565b9150826002028217905092915050565b62000491826200023b565b67ffffffffffffffff811115620004ad57620004ac62000086565b5b620004b9825462000275565b620004c6828285620003eb565b600060209050601f831160018114620004fe5760008415620004e9578287015190505b620004f5858262000468565b86555062000565565b601f1984166200050e86620002aa565b60005b82811015620005385784890151825560018201915060208501945060208101905062000511565b8683101562000558578489015162000554601f89168262000448565b8355505b6001600288020188555050505b505050505050565b610953806200057d6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063a413686214610046578063cfae321714610077578063d09de08a14610095575b600080fd5b610060600480360381019061005b91906103c0565b61009f565b60405161006e9291906104a3565b60405180910390f35b61007f6101bd565b60405161008c91906104d3565b60405180910390f35b61009d61024f565b005b600060607f0d363f2fba46ab11b6db8da0125b0d5484787c44e265b48810735998bab12b756001846040516100d59291906105ee565b60405180910390a182600190816100ec91906107c6565b507f7d7846723bda52976e0286c6efffee937ee9f76817a867ec70531ad29fb1fc0e600160405161011d9190610898565b60405180910390a160018080805461013490610524565b80601f016020809104026020016040519081016040528092919081815260200182805461016090610524565b80156101ad5780601f10610182576101008083540402835291602001916101ad565b820191906000526020600020905b81548152906001019060200180831161019057829003601f168201915b5050505050905091509150915091565b6060600180546101cc90610524565b80601f01602080910402602001604051908101604052809291908181526020018280546101f890610524565b80156102455780601f1061021a57610100808354040283529160200191610245565b820191906000526020600020905b81548152906001019060200180831161022857829003601f168201915b5050505050905090565b600160005461025e91906108e9565b600081905550565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6102cd82610284565b810181811067ffffffffffffffff821117156102ec576102eb610295565b5b80604052505050565b60006102ff610266565b905061030b82826102c4565b919050565b600067ffffffffffffffff82111561032b5761032a610295565b5b61033482610284565b9050602081019050919050565b82818337600083830152505050565b600061036361035e84610310565b6102f5565b90508281526020810184848401111561037f5761037e61027f565b5b61038a848285610341565b509392505050565b600082601f8301126103a7576103a661027a565b5b81356103b7848260208601610350565b91505092915050565b6000602082840312156103d6576103d5610270565b5b600082013567ffffffffffffffff8111156103f4576103f3610275565b5b61040084828501610392565b91505092915050565b60008115159050919050565b61041e81610409565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561045e578082015181840152602081019050610443565b60008484015250505050565b600061047582610424565b61047f818561042f565b935061048f818560208601610440565b61049881610284565b840191505092915050565b60006040820190506104b86000830185610415565b81810360208301526104ca818461046a565b90509392505050565b600060208201905081810360008301526104ed818461046a565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061053c57607f821691505b60208210810361054f5761054e6104f5565b5b50919050565b60008190508160005260206000209050919050565b6000815461057781610524565b610581818661042f565b9450600182166000811461059c57600181146105b2576105e5565b60ff1983168652811515602002860193506105e5565b6105bb85610555565b60005b838110156105dd578154818901526001820191506020810190506105be565b808801955050505b50505092915050565b60006040820190508181036000830152610608818561056a565b9050818103602083015261061c818461046a565b90509392505050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026106727fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610635565b61067c8683610635565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006106c36106be6106b984610694565b61069e565b610694565b9050919050565b6000819050919050565b6106dd836106a8565b6106f16106e9826106ca565b848454610642565b825550505050565b600090565b6107066106f9565b6107118184846106d4565b505050565b5b818110156107355761072a6000826106fe565b600181019050610717565b5050565b601f82111561077a5761074b81610555565b61075484610625565b81016020851015610763578190505b61077761076f85610625565b830182610716565b50505b505050565b600082821c905092915050565b600061079d6000198460080261077f565b1980831691505092915050565b60006107b6838361078c565b9150826002028217905092915050565b6107cf82610424565b67ffffffffffffffff8111156107e8576107e7610295565b5b6107f28254610524565b6107fd828285610739565b600060209050601f831160018114610830576000841561081e578287015190505b61082885826107aa565b865550610890565b601f19841661083e86610555565b60005b8281101561086657848901518255600182019150602085019450602081019050610841565b86831015610883578489015161087f601f89168261078c565b8355505b6001600288020188555050505b505050505050565b600060208201905081810360008301526108b2818461056a565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006108f482610694565b91506108ff83610694565b9250828201905080821115610917576109166108ba565b5b9291505056fea26469706673582212207e5ba44159ffb37af8e8a9e7c5b6fb5ce81ea195b62ae3ac36288f2cf72c18a764736f6c634300081000330000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000b4d79204772656574696e67000000000000000000000000000000000000000000',\n\t\t\t\t\t);\n\t\t\t\t\texpect(returnFormat).toBe(ETH_DATA_FORMAT);\n\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\t\t\t\treturn Promise.resolve(BigInt(36916)) as any;\n\t\t\t\t});\n\n\t\t\tconst deploy = contract.deploy({\n\t\t\t\tdata: GreeterBytecode,\n\t\t\t\targuments: ['My Greeting'],\n\t\t\t});\n\n\t\t\tconst result = await deploy.estimateGas(sendOptions, ETH_DATA_FORMAT);\n\t\t\texpect(result).toStrictEqual(BigInt(36916));\n\n\t\t\tspyTx.mockClear();\n\t\t\tspyEstimateGas.mockClear();\n\t\t});\n\t\tit('estimateGas should work for the deploy function using data web3config', async () => {\n\t\t\tconst expectedProvider = 'http://127.0.0.1:8545';\n\t\t\tconst web3Context = new Web3Context({\n\t\t\t\tprovider: expectedProvider,\n\t\t\t\tconfig: { contractDataInputFill: 'data' },\n\t\t\t});\n\n\t\t\tconst contract = new Contract(GreeterAbi, web3Context);\n\n\t\t\tconst spyTx = jest.spyOn(eth, 'sendTransaction').mockImplementation(() => {\n\t\t\t\tconst newContract = contract.clone();\n\t\t\t\tnewContract.options.address = deployedAddr;\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\t\t\treturn Promise.resolve(newContract) as any;\n\t\t\t});\n\n\t\t\tconst spyEstimateGas = jest\n\t\t\t\t.spyOn(eth, 'estimateGas')\n\t\t\t\t.mockImplementationOnce((_objInstance, _tx, _block, returnFormat) => {\n\t\t\t\t\texpect(_block).toBe('latest');\n\t\t\t\t\texpect(_tx.to).toBeUndefined();\n\t\t\t\t\texpect(_tx.from).toStrictEqual(sendOptions.from);\n\t\t\t\t\texpect(_tx.data).toBe(\n\t\t\t\t\t\t'0x60806040523480156200001157600080fd5b5060405162000ed038038062000ed08339818101604052810190620000379190620001ea565b806001908162000048919062000486565b5060008081905550506200056d565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620000c08262000075565b810181811067ffffffffffffffff82111715620000e257620000e162000086565b5b80604052505050565b6000620000f762000057565b9050620001058282620000b5565b919050565b600067ffffffffffffffff82111562000128576200012762000086565b5b620001338262000075565b9050602081019050919050565b60005b838110156200016057808201518184015260208101905062000143565b60008484015250505050565b6000620001836200017d846200010a565b620000eb565b905082815260208101848484011115620001a257620001a162000070565b5b620001af84828562000140565b509392505050565b600082601f830112620001cf57620001ce6200006b565b5b8151620001e18482602086016200016c565b91505092915050565b60006020828403121562000203576200020262000061565b5b600082015167ffffffffffffffff81111562000224576200022362000066565b5b6200023284828501620001b7565b91505092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200028e57607f821691505b602082108103620002a457620002a362000246565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200030e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620002cf565b6200031a8683620002cf565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000367620003616200035b8462000332565b6200033c565b62000332565b9050919050565b6000819050919050565b620003838362000346565b6200039b62000392826200036e565b848454620002dc565b825550505050565b600090565b620003b2620003a3565b620003bf81848462000378565b505050565b5b81811015620003e757620003db600082620003a8565b600181019050620003c5565b5050565b601f82111562000436576200040081620002aa565b6200040b84620002bf565b810160208510156200041b578190505b620004336200042a85620002bf565b830182620003c4565b50505b505050565b600082821c905092915050565b60006200045b600019846008026200043b565b1980831691505092915050565b600062000476838362000448565b9150826002028217905092915050565b62000491826200023b565b67ffffffffffffffff811115620004ad57620004ac62000086565b5b620004b9825462000275565b620004c6828285620003eb565b600060209050601f831160018114620004fe5760008415620004e9578287015190505b620004f5858262000468565b86555062000565565b601f1984166200050e86620002aa565b60005b82811015620005385784890151825560018201915060208501945060208101905062000511565b8683101562000558578489015162000554601f89168262000448565b8355505b6001600288020188555050505b505050505050565b610953806200057d6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063a413686214610046578063cfae321714610077578063d09de08a14610095575b600080fd5b610060600480360381019061005b91906103c0565b61009f565b60405161006e9291906104a3565b60405180910390f35b61007f6101bd565b60405161008c91906104d3565b60405180910390f35b61009d61024f565b005b600060607f0d363f2fba46ab11b6db8da0125b0d5484787c44e265b48810735998bab12b756001846040516100d59291906105ee565b60405180910390a182600190816100ec91906107c6565b507f7d7846723bda52976e0286c6efffee937ee9f76817a867ec70531ad29fb1fc0e600160405161011d9190610898565b60405180910390a160018080805461013490610524565b80601f016020809104026020016040519081016040528092919081815260200182805461016090610524565b80156101ad5780601f10610182576101008083540402835291602001916101ad565b820191906000526020600020905b81548152906001019060200180831161019057829003601f168201915b5050505050905091509150915091565b6060600180546101cc90610524565b80601f01602080910402602001604051908101604052809291908181526020018280546101f890610524565b80156102455780601f1061021a57610100808354040283529160200191610245565b820191906000526020600020905b81548152906001019060200180831161022857829003601f168201915b5050505050905090565b600160005461025e91906108e9565b600081905550565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6102cd82610284565b810181811067ffffffffffffffff821117156102ec576102eb610295565b5b80604052505050565b60006102ff610266565b905061030b82826102c4565b919050565b600067ffffffffffffffff82111561032b5761032a610295565b5b61033482610284565b9050602081019050919050565b82818337600083830152505050565b600061036361035e84610310565b6102f5565b90508281526020810184848401111561037f5761037e61027f565b5b61038a848285610341565b509392505050565b600082601f8301126103a7576103a661027a565b5b81356103b7848260208601610350565b91505092915050565b6000602082840312156103d6576103d5610270565b5b600082013567ffffffffffffffff8111156103f4576103f3610275565b5b61040084828501610392565b91505092915050565b60008115159050919050565b61041e81610409565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561045e578082015181840152602081019050610443565b60008484015250505050565b600061047582610424565b61047f818561042f565b935061048f818560208601610440565b61049881610284565b840191505092915050565b60006040820190506104b86000830185610415565b81810360208301526104ca818461046a565b90509392505050565b600060208201905081810360008301526104ed818461046a565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061053c57607f821691505b60208210810361054f5761054e6104f5565b5b50919050565b60008190508160005260206000209050919050565b6000815461057781610524565b610581818661042f565b9450600182166000811461059c57600181146105b2576105e5565b60ff1983168652811515602002860193506105e5565b6105bb85610555565b60005b838110156105dd578154818901526001820191506020810190506105be565b808801955050505b50505092915050565b60006040820190508181036000830152610608818561056a565b9050818103602083015261061c818461046a565b90509392505050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026106727fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610635565b61067c8683610635565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006106c36106be6106b984610694565b61069e565b610694565b9050919050565b6000819050919050565b6106dd836106a8565b6106f16106e9826106ca565b848454610642565b825550505050565b600090565b6107066106f9565b6107118184846106d4565b505050565b5b818110156107355761072a6000826106fe565b600181019050610717565b5050565b601f82111561077a5761074b81610555565b61075484610625565b81016020851015610763578190505b61077761076f85610625565b830182610716565b50505b505050565b600082821c905092915050565b600061079d6000198460080261077f565b1980831691505092915050565b60006107b6838361078c565b9150826002028217905092915050565b6107cf82610424565b67ffffffffffffffff8111156107e8576107e7610295565b5b6107f28254610524565b6107fd828285610739565b600060209050601f831160018114610830576000841561081e578287015190505b61082885826107aa565b865550610890565b601f19841661083e86610555565b60005b8281101561086657848901518255600182019150602085019450602081019050610841565b86831015610883578489015161087f601f89168261078c565b8355505b6001600288020188555050505b505050505050565b600060208201905081810360008301526108b2818461056a565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006108f482610694565b91506108ff83610694565b9250828201905080821115610917576109166108ba565b5b9291505056fea26469706673582212207e5ba44159ffb37af8e8a9e7c5b6fb5ce81ea195b62ae3ac36288f2cf72c18a764736f6c634300081000330000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000b4d79204772656574696e67000000000000000000000000000000000000000000',\n\t\t\t\t\t);\n\t\t\t\t\texpect(returnFormat).toBe(ETH_DATA_FORMAT);\n\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\t\t\t\treturn Promise.resolve(BigInt(36916)) as any;\n\t\t\t\t});\n\n\t\t\tconst deploy = contract.deploy({\n\t\t\t\tdata: GreeterBytecode,\n\t\t\t\targuments: ['My Greeting'],\n\t\t\t});\n\n\t\t\tconst result = await deploy.estimateGas(sendOptions, ETH_DATA_FORMAT);\n\t\t\texpect(result).toStrictEqual(BigInt(36916));\n\n\t\t\tspyTx.mockClear();\n\t\t\tspyEstimateGas.mockClear();\n\t\t});\n\n\t\tit('estimateGas should work for contract method', async () => {\n\t\t\tconst arg = 'Hello';\n\n\t\t\tconst contract = new Contract(GreeterAbi, { data: GreeterBytecode });\n\n\t\t\tconst spyTx = jest.spyOn(eth, 'sendTransaction').mockImplementation(() => {\n\t\t\t\tconst newContract = contract.clone();\n\t\t\t\tnewContract.options.address = deployedAddr;\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\t\t\treturn Promise.resolve(newContract) as any;\n\t\t\t});\n\n\t\t\tconst spyEstimateGas = jest\n\t\t\t\t.spyOn(eth, 'estimateGas')\n\t\t\t\t.mockImplementationOnce((_objInstance, _tx, _block) => {\n\t\t\t\t\texpect(_block).toBe('latest');\n\t\t\t\t\texpect(_tx.to).toStrictEqual(deployedAddr);\n\t\t\t\t\texpect(_tx.from).toStrictEqual(sendOptions.from);\n\t\t\t\t\texpect(_tx.data).toBe(\n\t\t\t\t\t\t'0xa41368620000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000548656c6c6f000000000000000000000000000000000000000000000000000000',\n\t\t\t\t\t);\n\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\t\t\t\treturn Promise.resolve(BigInt(36916)) as any;\n\t\t\t\t});\n\n\t\t\tconst deployedContract = await contract\n\t\t\t\t.deploy({\n\t\t\t\t\targuments: ['My Greeting'],\n\t\t\t\t})\n\t\t\t\t.send(sendOptions);\n\n\t\t\tconst result = await deployedContract.methods.setGreeting(arg).estimateGas(sendOptions);\n\t\t\texpect(result).toStrictEqual(BigInt(36916));\n\n\t\t\tspyTx.mockClear();\n\t\t\tspyEstimateGas.mockClear();\n\t\t});\n\n\t\tit('encodeABI should work for contract method', async () => {\n\t\t\tconst arg = 'Hello';\n\n\t\t\tconst contract = new Contract(GreeterAbi, { data: GreeterBytecode });\n\n\t\t\tconst spyTx = jest.spyOn(eth, 'sendTransaction').mockImplementation(() => {\n\t\t\t\tconst newContract = contract.clone();\n\t\t\t\tnewContract.options.address = deployedAddr;\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\t\t\treturn Promise.resolve(newContract) as any;\n\t\t\t});\n\n\t\t\tconst deployedContract = await contract\n\t\t\t\t.deploy({\n\t\t\t\t\targuments: ['My Greeting'],\n\t\t\t\t})\n\t\t\t\t.send(sendOptions);\n\n\t\t\tconst result = deployedContract.methods.setGreeting(arg).encodeABI();\n\n\t\t\texpect(result).toBe(\n\t\t\t\t'0xa41368620000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000548656c6c6f000000000000000000000000000000000000000000000000000000',\n\t\t\t);\n\n\t\t\tspyTx.mockClear();\n\t\t});\n\n\t\tit('contract method send without contract address should throw error', async () => {\n\t\t\tconst arg = 'Hello';\n\n\t\t\tconst contract = new Contract(GreeterAbi);\n\n\t\t\tawait expect(async () => {\n\t\t\t\tawait contract.methods.setGreeting(arg).send(sendOptions);\n\t\t\t}).rejects.toThrow(new Web3ContractError('Contract address not specified'));\n\t\t});\n\n\t\tit('contract method send without from address should throw error', async () => {\n\t\t\tconst gas = '1000000';\n\t\t\tconst sendOptionsSpecial = { gas };\n\t\t\tconst arg = 'Hello';\n\n\t\t\tconst contract = new Contract(GreeterAbi);\n\t\t\tcontract.options.address = '0x12364916b10Ae90076dDa6dE756EE1395BB69ec2';\n\n\t\t\t/* eslint-disable no-useless-escape */\n\t\t\tawait expect(async () => {\n\t\t\t\tawait contract.methods.setGreeting(arg).send(sendOptionsSpecial);\n\t\t\t}).rejects.toThrow('Contract \"from\" address not specified');\n\t\t});\n\n\t\tit('contract method createAccessList should work', async () => {\n\t\t\tconst fromAddr: Address = '0x20bc23D0598b12c34cBDEf1fae439Ba8744DB426';\n\t\t\tconst result: AccessListResult = {\n\t\t\t\taccessList: [\n\t\t\t\t\t{\n\t\t\t\t\t\taddress: deployedAddr,\n\t\t\t\t\t\tstorageKeys: [\n\t\t\t\t\t\t\t'0x0000000000000000000000000000000000000000000000000000000000000001',\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tgasUsed: '0x644e',\n\t\t\t};\n\n\t\t\tconst contract = new Contract(GreeterAbi, deployedAddr);\n\n\t\t\tconst spyEthCall = jest\n\t\t\t\t.spyOn(eth, 'createAccessList')\n\t\t\t\t.mockImplementation((_objInstance, _tx) => {\n\t\t\t\t\texpect(_tx.to).toStrictEqual(deployedAddr);\n\t\t\t\t\texpect(_tx.data).toBe('0xcfae3217');\n\t\t\t\t\texpect(_tx.from).toBe(fromAddr);\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\t\t\t\treturn Promise.resolve(result) as any; // contract class should decode encodedArg\n\t\t\t\t});\n\n\t\t\tconst res = await contract.methods.greet().createAccessList({ from: fromAddr });\n\t\t\texpect(res).toStrictEqual(result);\n\n\t\t\tspyEthCall.mockClear();\n\t\t});\n\n\t\tit('contract method createAccessList should work using data with web3config', async () => {\n\t\t\tconst expectedProvider = 'http://127.0.0.1:8545';\n\t\t\tconst web3Context = new Web3Context({\n\t\t\t\tprovider: expectedProvider,\n\t\t\t\tconfig: { contractDataInputFill: 'data' },\n\t\t\t});\n\t\t\tconst fromAddr: Address = '0x20bc23D0598b12c34cBDEf1fae439Ba8744DB426';\n\t\t\tconst result: AccessListResult = {\n\t\t\t\taccessList: [\n\t\t\t\t\t{\n\t\t\t\t\t\taddress: deployedAddr,\n\t\t\t\t\t\tstorageKeys: [\n\t\t\t\t\t\t\t'0x0000000000000000000000000000000000000000000000000000000000000001',\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tgasUsed: '0x644e',\n\t\t\t};\n\n\t\t\tconst contract = new Contract(GreeterAbi, deployedAddr, web3Context);\n\n\t\t\tconst spyEthCall = jest\n\t\t\t\t.spyOn(eth, 'createAccessList')\n\t\t\t\t.mockImplementation((_objInstance, _tx) => {\n\t\t\t\t\texpect(_tx.to).toStrictEqual(deployedAddr);\n\t\t\t\t\texpect(_tx.data).toBe('0xcfae3217');\n\t\t\t\t\texpect(_tx.from).toBe(fromAddr);\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\t\t\t\treturn Promise.resolve(result) as any; // contract class should decode encodedArg\n\t\t\t\t});\n\n\t\t\tconst res = await contract.methods.greet().createAccessList({ from: fromAddr });\n\t\t\texpect(res).toStrictEqual(result);\n\n\t\t\tspyEthCall.mockClear();\n\t\t});\n\t\tit('contract method createAccessList should work using data with web3config with both input and data', async () => {\n\t\t\tconst expectedProvider = 'http://127.0.0.1:8545';\n\t\t\tconst web3Context = new Web3Context({\n\t\t\t\tprovider: expectedProvider,\n\t\t\t\tconfig: { contractDataInputFill: 'both' },\n\t\t\t});\n\t\t\tconst fromAddr: Address = '0x20bc23D0598b12c34cBDEf1fae439Ba8744DB426';\n\t\t\tconst result: AccessListResult = {\n\t\t\t\taccessList: [\n\t\t\t\t\t{\n\t\t\t\t\t\taddress: deployedAddr,\n\t\t\t\t\t\tstorageKeys: [\n\t\t\t\t\t\t\t'0x0000000000000000000000000000000000000000000000000000000000000001',\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tgasUsed: '0x644e',\n\t\t\t};\n\n\t\t\tconst contract = new Contract(GreeterAbi, deployedAddr, web3Context);\n\n\t\t\tconst spyEthCall = jest\n\t\t\t\t.spyOn(eth, 'createAccessList')\n\t\t\t\t.mockImplementation((_objInstance, _tx) => {\n\t\t\t\t\texpect(_tx.to).toStrictEqual(deployedAddr);\n\t\t\t\t\texpect(_tx.data).toBe('0xcfae3217');\n\t\t\t\t\texpect(_tx.input).toBe('0xcfae3217');\n\t\t\t\t\texpect(_tx.from).toBe(fromAddr);\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\t\t\t\treturn Promise.resolve(result) as any; // contract class should decode encodedArg\n\t\t\t\t});\n\n\t\t\tconst res = await contract.methods.greet().createAccessList({ from: fromAddr });\n\t\t\texpect(res).toStrictEqual(result);\n\n\t\t\tspyEthCall.mockClear();\n\t\t});\n\n\t\tit('should correctly apply provided Web3Context to new Contract instance', () => {\n\t\t\tconst expectedProvider = 'http://127.0.0.1:8545';\n\t\t\tconst web3Context = new Web3Context({\n\t\t\t\tprovider: expectedProvider,\n\t\t\t\tconfig: { handleRevert: true, defaultTransactionType: '0x2' },\n\t\t\t});\n\t\t\tconst contract = new Contract(GreeterAbi, web3Context);\n\t\t\texpect(contract.config).toStrictEqual(web3Context.config);\n\t\t});\n\t});\n});\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/unit/contract_typing.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/unit/encode_event_abi.test.ts",["422","423","424","425"],["426","427","428","429"],"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { AbiEventFragment, ContractOptions } from 'web3-types';\nimport { encodeEventABI } from '../../src';\n\nconst contractOptions: ContractOptions = {\n\taddress: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe',\n} as ContractOptions;\nconst abiEventFragment: AbiEventFragment & { signature: string } = {\n\tanonymous: false,\n\tinputs: [\n\t\t{\n\t\t\tindexed: true,\n\t\t\tinternalType: 'string',\n\t\t\tname: 'str',\n\t\t\ttype: 'string',\n\t\t},\n\t\t{\n\t\t\tindexed: true,\n\t\t\tinternalType: 'uint256',\n\t\t\tname: 'val',\n\t\t\ttype: 'uint256',\n\t\t},\n\t\t{\n\t\t\tindexed: true,\n\t\t\tinternalType: 'bool',\n\t\t\tname: 'flag',\n\t\t\ttype: 'bool',\n\t\t},\n\t],\n\tname: 'MultiValueIndexedEventWithStringIndexed',\n\ttype: 'event',\n\tsignature: '0x5b5730af07e266d8b4845f404beb3b193085c686b0edd8e8e20cd4b3fc2b6cd5',\n};\n\ndescribe('encodeEventAbi', () => {\n\tit('should format fromBlock for filter', () => {\n\t\tconst encodedEventFilter = encodeEventABI(contractOptions, abiEventFragment, {\n\t\t\tfromBlock: 10,\n\t\t});\n\n\t\texpect(encodedEventFilter).toMatchObject({\n\t\t\tfromBlock: '0xa',\n\t\t\taddress: '0xde0b295669a9fd93d5f28d9ec85e40f4cb697bae',\n\t\t});\n\t});\n\n\tit('should format toBlock for filter', () => {\n\t\tconst encodedEventFilter = encodeEventABI(contractOptions, abiEventFragment, {\n\t\t\ttoBlock: 10,\n\t\t});\n\n\t\texpect(encodedEventFilter).toMatchObject({\n\t\t\ttoBlock: '0xa',\n\t\t\taddress: '0xde0b295669a9fd93d5f28d9ec85e40f4cb697bae',\n\t\t});\n\t});\n\n\tit('should set topics array for filter to given topics array', () => {\n\t\tconst encodedEventFilter = encodeEventABI(contractOptions, abiEventFragment, {\n\t\t\ttopics: ['0x3f6d5d7b72c0059e2ecac56fd4adeefb2cff23aa41d13170f78ea6bf81e6e0ca'],\n\t\t});\n\n\t\texpect(encodedEventFilter).toMatchObject({\n\t\t\ttopics: ['0x3f6d5d7b72c0059e2ecac56fd4adeefb2cff23aa41d13170f78ea6bf81e6e0ca'],\n\t\t\taddress: '0xde0b295669a9fd93d5f28d9ec85e40f4cb697bae',\n\t\t});\n\t});\n\n\tit('should set filter to get all events for address starting at fromBlock', () => {\n\t\tconst encodedEventFilter = encodeEventABI(\n\t\t\tcontractOptions,\n\t\t\t{\n\t\t\t\tanonymous: false,\n\t\t\t\tname: 'ALLEVENTS',\n\t\t\t\ttype: 'event',\n\t\t\t\tsignature: '0x5b5730af07e266d8b4845f404beb3b193085c686b0edd8e8e20cd4b3fc2b6cd5',\n\t\t\t},\n\t\t\t{\n\t\t\t\tfromBlock: 1000,\n\t\t\t},\n\t\t);\n\n\t\texpect(encodedEventFilter).toMatchObject({\n\t\t\tfromBlock: '0x3e8',\n\t\t\taddress: '0xde0b295669a9fd93d5f28d9ec85e40f4cb697bae',\n\t\t});\n\t});\n\n\t// This test fails because encoding of a dynamic sized array is not current supported\n\t// Received error: AbiError: Parameter encoding error\n\tit.skip('should set the filter topics to the keccak256 hash of the provided filter value', () => {\n\t\tconst _abiEventFragment: AbiEventFragment & { signature: string } = {\n\t\t\tanonymous: false,\n\t\t\tinputs: [\n\t\t\t\t{\n\t\t\t\t\tindexed: true,\n\t\t\t\t\tinternalType: 'uint256[]',\n\t\t\t\t\tname: 'vals',\n\t\t\t\t\ttype: 'uint256[]',\n\t\t\t\t},\n\t\t\t],\n\t\t\tname: 'IndexedArrayEvent',\n\t\t\ttype: 'event',\n\t\t\tsignature: '0x71aefd401e4886a78931d42be506247958b9751348fa91aa2f9dbbd557e9208e',\n\t\t};\n\n\t\tencodeEventABI(contractOptions, _abiEventFragment, {\n\t\t\tfilter: {\n\t\t\t\tvals: [1, 2, 3],\n\t\t\t},\n\t\t});\n\t});\n\n\t// This test fails because encoding of a dynamic sized array is not current supported\n\t// Received error: AbiError: Parameter encoding error\n\tit.skip('should set the filter topics', () => {\n\t\tconst _abiEventFragment: AbiEventFragment & { signature: string } = {\n\t\t\tanonymous: false,\n\t\t\tinputs: [\n\t\t\t\t{\n\t\t\t\t\tindexed: true,\n\t\t\t\t\tinternalType: 'uint256[]',\n\t\t\t\t\tname: 'vals',\n\t\t\t\t\ttype: 'uint256[]',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tindexed: true,\n\t\t\t\t\tinternalType: 'string[]',\n\t\t\t\t\tname: 'strs',\n\t\t\t\t\ttype: 'string[]',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tindexed: true,\n\t\t\t\t\tinternalType: 'bool[]',\n\t\t\t\t\tname: 'flags',\n\t\t\t\t\ttype: 'bool[]',\n\t\t\t\t},\n\t\t\t],\n\t\t\tname: 'IndexedMultiValArrayEvent',\n\t\t\ttype: 'event',\n\t\t\tsignature: '0x9b5a12617e7ca791109ef5e09b8cc23cb4034e0e3dfb4aadac37b55fd28718f6',\n\t\t};\n\n\t\tencodeEventABI(contractOptions, _abiEventFragment, {\n\t\t\tfilter: {\n\t\t\t\tvals: [1, 2, 3],\n\t\t\t},\n\t\t});\n\t});\n\n\tit('should filter by the keccak256 of the provided indexed string filter', () => {\n\t\tconst encodedEventFilter = encodeEventABI(contractOptions, abiEventFragment, {\n\t\t\tfilter: {\n\t\t\t\tstr: 'str4',\n\t\t\t},\n\t\t});\n\n\t\texpect(encodedEventFilter).toMatchObject({\n\t\t\ttopics: [\n\t\t\t\t'0x5b5730af07e266d8b4845f404beb3b193085c686b0edd8e8e20cd4b3fc2b6cd5',\n\t\t\t\t'0x3f6d5d7b72c0059e2ecac56fd4adeefb2cff23aa41d13170f78ea6bf81e6e0ca',\n\t\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\t\tnull,\n\t\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\t\tnull,\n\t\t\t],\n\t\t\taddress: '0xde0b295669a9fd93d5f28d9ec85e40f4cb697bae',\n\t\t});\n\t});\n\n\tit('should filter by the provided bool filter', () => {\n\t\tconst encodedEventFilter = encodeEventABI(contractOptions, abiEventFragment, {\n\t\t\tfilter: {\n\t\t\t\tflag: true,\n\t\t\t},\n\t\t});\n\n\t\texpect(encodedEventFilter).toMatchObject({\n\t\t\ttopics: [\n\t\t\t\t'0x5b5730af07e266d8b4845f404beb3b193085c686b0edd8e8e20cd4b3fc2b6cd5',\n\t\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\t\tnull,\n\t\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\t\tnull,\n\t\t\t\t'0x0000000000000000000000000000000000000000000000000000000000000001',\n\t\t\t],\n\t\t\taddress: '0xde0b295669a9fd93d5f28d9ec85e40f4cb697bae',\n\t\t});\n\t});\n});\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/unit/function_overloading.test.ts",["430","431","432","433","434","435","436","437","438","439","440","441"],[],"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { Contract } from '../../src/index';\n\nconst ABI = [\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: 'uint256',\n\t\t\t\tname: 'userId',\n\t\t\t\ttype: 'uint256',\n\t\t\t},\n\t\t],\n\t\tname: 'funcWithParamsOverloading_pure',\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: 'string',\n\t\t\t\tname: '',\n\t\t\t\ttype: 'string',\n\t\t\t},\n\t\t],\n\t\tstateMutability: 'pure',\n\t\ttype: 'function',\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: 'bytes',\n\t\t\t\tname: 'userProfile',\n\t\t\t\ttype: 'bytes',\n\t\t\t},\n\t\t],\n\t\tname: 'funcWithParamsOverloading_pure',\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: 'string',\n\t\t\t\tname: '',\n\t\t\t\ttype: 'string',\n\t\t\t},\n\t\t],\n\t\tstateMutability: 'pure',\n\t\ttype: 'function',\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: 'address',\n\t\t\t\tname: 'userAddress',\n\t\t\t\ttype: 'address',\n\t\t\t},\n\t\t],\n\t\tname: 'funcWithParamsOverloading_pure',\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: 'string',\n\t\t\t\tname: '',\n\t\t\t\ttype: 'string',\n\t\t\t},\n\t\t],\n\t\tstateMutability: 'pure',\n\t\ttype: 'function',\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: 'string',\n\t\t\t\tname: 'userName',\n\t\t\t\ttype: 'string',\n\t\t\t},\n\t\t],\n\t\tname: 'funcWithParamsOverloading_pure',\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: 'string',\n\t\t\t\tname: '',\n\t\t\t\ttype: 'string',\n\t\t\t},\n\t\t],\n\t\tstateMutability: 'pure',\n\t\ttype: 'function',\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: 'uint8',\n\t\t\t\tname: 'userId',\n\t\t\t\ttype: 'uint8',\n\t\t\t},\n\t\t],\n\t\tname: 'funcWithParamsOverloading_pure',\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: 'string',\n\t\t\t\tname: '',\n\t\t\t\ttype: 'string',\n\t\t\t},\n\t\t],\n\t\tstateMutability: 'pure',\n\t\ttype: 'function',\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: 'address',\n\t\t\t\tname: 'userAddress',\n\t\t\t\ttype: 'address',\n\t\t\t},\n\t\t],\n\t\tname: 'funcWithParamsOverloading_view',\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: 'string',\n\t\t\t\tname: '',\n\t\t\t\ttype: 'string',\n\t\t\t},\n\t\t],\n\t\tstateMutability: 'pure',\n\t\ttype: 'function',\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: 'uint256',\n\t\t\t\tname: 'userId',\n\t\t\t\ttype: 'uint256',\n\t\t\t},\n\t\t],\n\t\tname: 'funcWithParamsOverloading_view',\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: 'string',\n\t\t\t\tname: '',\n\t\t\t\ttype: 'string',\n\t\t\t},\n\t\t],\n\t\tstateMutability: 'pure',\n\t\ttype: 'function',\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: 'uint8',\n\t\t\t\tname: 'userId',\n\t\t\t\ttype: 'uint8',\n\t\t\t},\n\t\t],\n\t\tname: 'funcWithParamsOverloading_view',\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: 'string',\n\t\t\t\tname: '',\n\t\t\t\ttype: 'string',\n\t\t\t},\n\t\t],\n\t\tstateMutability: 'view',\n\t\ttype: 'function',\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: 'string',\n\t\t\t\tname: 'userName',\n\t\t\t\ttype: 'string',\n\t\t\t},\n\t\t],\n\t\tname: 'funcWithParamsOverloading_view',\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: 'string',\n\t\t\t\tname: '',\n\t\t\t\ttype: 'string',\n\t\t\t},\n\t\t],\n\t\tstateMutability: 'pure',\n\t\ttype: 'function',\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: 'bytes',\n\t\t\t\tname: 'userProfile',\n\t\t\t\ttype: 'bytes',\n\t\t\t},\n\t\t],\n\t\tname: 'funcWithParamsOverloading_view',\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: 'string',\n\t\t\t\tname: '',\n\t\t\t\ttype: 'string',\n\t\t\t},\n\t\t],\n\t\tstateMutability: 'pure',\n\t\ttype: 'function',\n\t},\n] as const;\n\ndescribe('test Params Overloading', () => {\n\tconst contract: Contract<typeof ABI> = new Contract(ABI);\n\tdescribe('calling a function with multiple compatible inputs without specifying', () => {\n\t\t// TODO: 5.x Should throw a new error with the list of methods found.\n\t\t// Related issue: https://github.com/web3/web3.js/issues/6923\n\t\tit('should call the first one when the signature is not passed but also show a warning', async () => {\n\t\t\tconst originalWarn = console.warn;\n\t\t\tconsole.warn = function (message: string) {\n\t\t\t\texpect(message).toMatch('Multiple methods found that is compatible with the given inputs.');\n\t\t\t};\n\t\t\tconst abi = contract.methods['funcWithParamsOverloading_pure'](\n\t\t\t\t'0x12eca7a3959a42973ef4452e44948650be8b8610',\n\t\t\t).encodeABI();\n\t\t\tconsole.warn = originalWarn;\n\t\t\texpect(abi.substring(0, 10)).toBe('0x125f6ec5');\n\t\t});\n\t});\n\n\tdescribe('funcWithParamsOverloading_pure', () => {\n\t\tit('uint256', async () => {\n\t\t\tconst abi = contract.methods['funcWithParamsOverloading_pure(uint256)'](\n\t\t\t\t'0x12eca7a3959a42973ef4452e44948650be8b8610',\n\t\t\t).encodeABI();\n\t\t\texpect(abi.substring(0, 10)).toBe('0x125f6ec5');\n\t\t});\n\n\t\tit('bytes', async () => {\n\t\t\tconst abi = contract.methods['funcWithParamsOverloading_pure(bytes)'](\n\t\t\t\t'0x12eca7a3959a42973ef4452e44948650be8b8610',\n\t\t\t).encodeABI();\n\t\t\texpect(abi.substring(0, 10)).toBe('0x14ab2370');\n\t\t});\n\n\t\tit('address', async () => {\n\t\t\tconst abi = contract.methods['funcWithParamsOverloading_pure(address)'](\n\t\t\t\t'0x12eca7a3959a42973ef4452e44948650be8b8610',\n\t\t\t).encodeABI();\n\t\t\texpect(abi.substring(0, 10)).toBe('0x6a46aa98');\n\t\t});\n\n\t\tit('string exact', async () => {\n\t\t\tconst abi = contract.methods['funcWithParamsOverloading_pure(string)'](\n\t\t\t\t'0x12eca7a3959a42973ef4452e44948650be8b8610',\n\t\t\t).encodeABI();\n\t\t\texpect(abi.substring(0, 10)).toBe('0x79473ea8');\n\t\t});\n\n\t\tit('uint8', async () => {\n\t\t\tconst abi = contract.methods['funcWithParamsOverloading_pure(uint8)']('0x12').encodeABI();\n\t\t\texpect(abi.substring(0, 10)).toBe('0xf2f11ccd');\n\t\t});\n\t});\n\n\tdescribe('funcWithParamsOverloading_view', () => {\n\t\tit('address', async () => {\n\t\t\tconst abi = contract.methods['funcWithParamsOverloading_view(address)'](\n\t\t\t\t'0x12eca7a3959a42973ef4452e44948650be8b8610',\n\t\t\t).encodeABI();\n\t\t\texpect(abi.substring(0, 10)).toBe('0x251fcf7c');\n\t\t});\n\n\t\tit('uint256', async () => {\n\t\t\tconst abi = contract.methods['funcWithParamsOverloading_view(uint256)'](\n\t\t\t\t'0x12eca7a3959a42973ef4452e44948650be8b8610',\n\t\t\t).encodeABI();\n\t\t\texpect(abi.substring(0, 10)).toBe('0x68c3043e');\n\t\t});\n\n\t\tit('uint8', async () => {\n\t\t\tconst abi = contract.methods['funcWithParamsOverloading_view(uint8)']('0x12').encodeABI();\n\t\t\texpect(abi.substring(0, 10)).toBe('0xda202a6f');\n\t\t});\n\n\t\tit('string', async () => {\n\t\t\tconst abi = contract.methods['funcWithParamsOverloading_view(string)'](\n\t\t\t\t'0x12eca7a3959a42973ef4452e44948650be8b8610',\n\t\t\t).encodeABI();\n\t\t\texpect(abi.substring(0, 10)).toBe('0xe0c3c20d');\n\t\t});\n\n\t\tit('bytes', async () => {\n\t\t\tconst abi = contract.methods['funcWithParamsOverloading_view(bytes)'](\n\t\t\t\t'0x12eca7a3959a42973ef4452e44948650be8b8610',\n\t\t\t).encodeABI();\n\t\t\texpect(abi.substring(0, 10)).toBe('0xf16fda0d');\n\t\t});\n\t});\n});\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-contract/test/unit/log_subscription.test.ts",["442"],["443"],"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport * as eth from 'web3-eth';\nimport { WebSocketProvider } from 'web3-providers-ws';\nimport { Contract } from '../../src';\nimport { GreeterAbi, GreeterBytecode } from '../shared_fixtures/build/Greeter';\n\njest.mock('web3-eth');\n\ndescribe('contract log subscription', () => {\n\tconst contract = new Contract<typeof GreeterAbi>(GreeterAbi);\n\tconst sendOptions = {\n\t\tfrom: '0x12364916b10Ae90076dDa6dE756EE1395BB69ec2',\n\t\tgas: '1000000',\n\t};\n\tconst deployedAddr = '0x20bc23D0598b12c34cBDEf1fae439Ba8744DB426';\n\tconst providerString = 'ws://mydomain.com';\n\n\tbeforeAll(() => {\n\t\tjest.spyOn(WebSocketProvider.prototype, 'connect').mockImplementation(() => {\n\t\t\t// nothing\n\t\t});\n\t\tjest.spyOn(WebSocketProvider.prototype, 'getStatus').mockImplementation(() => 'connected');\n\t\tcontract.setProvider(providerString);\n\n\t\tjest.spyOn(eth, 'sendTransaction').mockImplementation(() => {\n\t\t\tconst newContract = contract.clone();\n\t\t\tnewContract.options.address = deployedAddr;\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\t\treturn Promise.resolve(newContract) as any;\n\t\t});\n\t});\n\n\tit('Request Manager should call eth_subscribe with correct params', async () => {\n\t\tconst spyRequestManagerSend = jest\n\t\t\t.spyOn(contract.requestManager, 'send')\n\t\t\t.mockImplementation(async () => {\n\t\t\t\treturn 'sub-id';\n\t\t\t});\n\n\t\tconst deployedContract = await contract\n\t\t\t.deploy({\n\t\t\t\tdata: GreeterBytecode,\n\t\t\t\targuments: ['My Greeting'],\n\t\t\t})\n\t\t\t.send(sendOptions);\n\n\t\tconst topics = ['0x59ebeb90bc63057b6515673c3ecf9438e5058bca0f92585014eced636878c9a5'];\n\n\t\tdeployedContract.events.allEvents({ fromBlock: 'earliest', topics });\n\n\t\tdeployedContract.events.GREETING_CHANGED({ fromBlock: 'earliest', topics });\n\n\t\texpect(spyRequestManagerSend).toHaveBeenCalledTimes(2);\n\t\texpect(spyRequestManagerSend).toHaveBeenCalledWith({\n\t\t\tmethod: 'eth_subscribe',\n\t\t\tparams: [\n\t\t\t\t'logs',\n\t\t\t\t// those params has been generated inside: _buildSubscriptionParams\n\t\t\t\t{ address: deployedAddr, topics },\n\t\t\t],\n\t\t});\n\t});\n});\n",{"ruleId":"444","severity":1,"message":"445","line":130,"column":58,"nodeType":"446","messageId":"447","endLine":130,"endColumn":61,"suggestions":"448"},{"ruleId":"444","severity":1,"message":"445","line":720,"column":29,"nodeType":"446","messageId":"447","endLine":720,"endColumn":32,"suggestions":"449"},{"ruleId":"444","severity":1,"message":"445","line":1497,"column":7,"nodeType":"446","messageId":"447","endLine":1497,"endColumn":10,"suggestions":"450"},{"ruleId":"444","severity":1,"message":"445","line":163,"column":42,"nodeType":"446","messageId":"447","endLine":163,"endColumn":45,"suggestions":"451","suppressions":"452"},{"ruleId":"453","severity":2,"message":"454","line":171,"column":2,"nodeType":"455","messageId":"456","endLine":171,"endColumn":10,"suppressions":"457"},{"ruleId":"444","severity":1,"message":"445","line":450,"column":32,"nodeType":"446","messageId":"447","endLine":450,"endColumn":35,"suggestions":"458","suppressions":"459"},{"ruleId":"460","severity":2,"message":"461","line":530,"column":19,"nodeType":"462","messageId":"463","endLine":534,"endColumn":15,"suppressions":"464"},{"ruleId":"460","severity":2,"message":"461","line":592,"column":28,"nodeType":"462","messageId":"463","endLine":596,"endColumn":46,"suppressions":"465"},{"ruleId":"466","severity":2,"message":"467","line":880,"column":5,"nodeType":"468","messageId":"469","endLine":885,"endColumn":7,"suppressions":"470"},{"ruleId":"460","severity":2,"message":"461","line":989,"column":4,"nodeType":"462","messageId":"463","endLine":993,"endColumn":9,"suppressions":"471"},{"ruleId":"460","severity":2,"message":"461","line":996,"column":24,"nodeType":"462","messageId":"463","endLine":1000,"endColumn":40,"suppressions":"472"},{"ruleId":"473","severity":2,"message":"474","line":1175,"column":2,"nodeType":"475","messageId":"476","endLine":1175,"endColumn":23,"suppressions":"477"},{"ruleId":"478","severity":2,"message":"479","line":1406,"column":3,"nodeType":"480","messageId":"481","endLine":1411,"endColumn":5,"suppressions":"482"},{"ruleId":"483","severity":2,"message":"484","line":1495,"column":6,"nodeType":"485","messageId":"486","endLine":1498,"endColumn":7,"suppressions":"487"},{"ruleId":"488","severity":2,"message":"489","line":1527,"column":9,"nodeType":"455","messageId":"490","endLine":1527,"endColumn":21,"suppressions":"491"},{"ruleId":"492","severity":2,"message":"493","line":92,"column":23,"nodeType":"494","endLine":92,"endColumn":27,"suppressions":"495"},{"ruleId":"492","severity":2,"message":"493","line":182,"column":10,"nodeType":"494","endLine":182,"endColumn":14,"suppressions":"496"},{"ruleId":"492","severity":2,"message":"493","line":188,"column":10,"nodeType":"494","endLine":188,"endColumn":14,"suppressions":"497"},{"ruleId":"444","severity":1,"message":"445","line":149,"column":26,"nodeType":"446","messageId":"447","endLine":149,"endColumn":29,"suggestions":"498"},{"ruleId":"499","severity":2,"message":"500","line":90,"column":53,"nodeType":"501","messageId":"502","endLine":90,"endColumn":57,"suppressions":"503"},{"ruleId":"499","severity":2,"message":"500","line":101,"column":46,"nodeType":"501","messageId":"502","endLine":101,"endColumn":50,"suppressions":"504"},{"ruleId":"499","severity":2,"message":"500","line":114,"column":32,"nodeType":"501","messageId":"502","endLine":114,"endColumn":36,"suppressions":"505"},{"ruleId":"499","severity":2,"message":"500","line":127,"column":32,"nodeType":"501","messageId":"502","endLine":127,"endColumn":36,"suppressions":"506"},{"ruleId":"499","severity":2,"message":"500","line":137,"column":32,"nodeType":"501","messageId":"502","endLine":137,"endColumn":36,"suppressions":"507"},{"ruleId":"508","severity":2,"message":"509","line":149,"column":15,"nodeType":"510","messageId":"511","endLine":149,"endColumn":29,"suppressions":"512"},{"ruleId":"513","severity":1,"message":"514","line":99,"column":185,"nodeType":null,"messageId":"515","endLine":99,"endColumn":186},{"ruleId":"513","severity":1,"message":"514","line":226,"column":185,"nodeType":null,"messageId":"515","endLine":226,"endColumn":186},{"ruleId":"513","severity":1,"message":"514","line":297,"column":185,"nodeType":null,"messageId":"515","endLine":297,"endColumn":186},{"ruleId":"513","severity":1,"message":"514","line":423,"column":185,"nodeType":null,"messageId":"515","endLine":423,"endColumn":186},{"ruleId":"516","severity":2,"message":"517","line":29,"column":1,"nodeType":"518","endLine":29,"endColumn":49,"suppressions":"519"},{"ruleId":"516","severity":2,"message":"520","line":55,"column":1,"nodeType":"518","endLine":55,"endColumn":46,"suppressions":"521"},{"ruleId":"516","severity":2,"message":"522","line":57,"column":1,"nodeType":"518","endLine":57,"endColumn":25,"suppressions":"523"},{"ruleId":"516","severity":2,"message":"524","line":60,"column":1,"nodeType":"518","endLine":60,"endColumn":60,"suppressions":"525"},{"ruleId":"516","severity":2,"message":"526","line":62,"column":1,"nodeType":"518","endLine":62,"endColumn":48,"suppressions":"527"},{"ruleId":"516","severity":2,"message":"528","line":64,"column":1,"nodeType":"518","endLine":64,"endColumn":50,"suppressions":"529"},{"ruleId":"530","severity":2,"message":"531","line":72,"column":2,"nodeType":"532","messageId":"533","endLine":72,"endColumn":21,"suppressions":"534"},{"ruleId":"466","severity":2,"message":"535","line":74,"column":2,"nodeType":"462","messageId":"536","endLine":74,"endColumn":56,"suppressions":"537"},{"ruleId":"538","severity":2,"message":"539","line":74,"column":19,"nodeType":"540","messageId":"541","endLine":74,"endColumn":30,"suppressions":"542"},{"ruleId":"543","severity":2,"message":"544","line":152,"column":4,"nodeType":"545","messageId":"546","endLine":152,"endColumn":20,"suppressions":"547"},{"ruleId":"548","severity":2,"message":"549","line":152,"column":4,"nodeType":"455","messageId":"550","endLine":152,"endColumn":18,"suppressions":"551"},{"ruleId":"552","severity":2,"message":"553","line":491,"column":4,"nodeType":"554","messageId":"555","endLine":496,"endColumn":6,"suppressions":"556"},{"ruleId":"466","severity":2,"message":"535","line":505,"column":2,"nodeType":"557","messageId":"536","endLine":508,"endColumn":3,"suppressions":"558"},{"ruleId":"466","severity":2,"message":"535","line":507,"column":38,"nodeType":"462","messageId":"536","endLine":507,"endColumn":90,"suppressions":"559"},{"ruleId":"530","severity":2,"message":"531","line":116,"column":5,"nodeType":"532","messageId":"533","endLine":116,"endColumn":24,"suppressions":"560"},{"ruleId":"466","severity":2,"message":"535","line":38,"column":2,"nodeType":"468","messageId":"536","endLine":42,"endColumn":4,"suppressions":"561"},{"ruleId":"478","severity":2,"message":"479","line":258,"column":5,"nodeType":"480","messageId":"481","endLine":268,"endColumn":6,"suppressions":"562"},{"ruleId":"478","severity":2,"message":"479","line":273,"column":5,"nodeType":"480","messageId":"481","endLine":276,"endColumn":7,"suppressions":"563"},{"ruleId":"564","severity":2,"message":"565","line":288,"column":11,"nodeType":"557","messageId":"566","endLine":290,"endColumn":63,"suppressions":"567"},{"ruleId":"564","severity":2,"message":"565","line":293,"column":11,"nodeType":"557","messageId":"566","endLine":297,"endColumn":6,"suppressions":"568"},{"ruleId":"564","severity":2,"message":"565","line":317,"column":11,"nodeType":"557","messageId":"566","endLine":323,"endColumn":49,"suppressions":"569"},{"ruleId":"564","severity":2,"message":"565","line":326,"column":11,"nodeType":"557","messageId":"566","endLine":334,"endColumn":6,"suppressions":"570"},{"ruleId":"571","severity":2,"message":"572","line":140,"column":8,"nodeType":"573","messageId":"574","endLine":143,"endColumn":11,"suggestions":"575","suppressions":"576"},{"ruleId":"571","severity":2,"message":"572","line":169,"column":8,"nodeType":"573","messageId":"574","endLine":172,"endColumn":11,"suggestions":"577","suppressions":"578"},{"ruleId":"579","severity":2,"message":"580","line":58,"column":11,"nodeType":"557","messageId":"581","endLine":74,"endColumn":5,"suppressions":"582"},{"ruleId":"579","severity":2,"message":"580","line":97,"column":5,"nodeType":"557","messageId":"581","endLine":97,"endColumn":63,"suppressions":"583"},{"ruleId":"579","severity":2,"message":"580","line":99,"column":5,"nodeType":"557","messageId":"581","endLine":99,"endColumn":61,"suppressions":"584"},{"ruleId":"579","severity":2,"message":"580","line":107,"column":12,"nodeType":"557","messageId":"581","endLine":125,"endColumn":6,"suppressions":"585"},{"ruleId":"579","severity":2,"message":"580","line":134,"column":12,"nodeType":"557","messageId":"581","endLine":164,"endColumn":6,"suppressions":"586"},{"ruleId":"552","severity":2,"message":"553","line":140,"column":8,"nodeType":"554","messageId":"555","endLine":142,"endColumn":27,"suppressions":"587"},{"ruleId":"579","severity":2,"message":"580","line":184,"column":10,"nodeType":"557","messageId":"581","endLine":184,"endColumn":83,"suppressions":"588"},{"ruleId":"564","severity":2,"message":"565","line":154,"column":12,"nodeType":"557","messageId":"566","endLine":159,"endColumn":8,"suppressions":"589"},{"ruleId":"564","severity":2,"message":"565","line":162,"column":12,"nodeType":"557","messageId":"566","endLine":178,"endColumn":8,"suppressions":"590"},{"ruleId":"591","severity":1,"message":"592","line":17,"column":8,"nodeType":"593","endLine":17,"endColumn":16},{"ruleId":"591","severity":1,"message":"592","line":17,"column":8,"nodeType":"593","endLine":17,"endColumn":16},{"ruleId":"516","severity":2,"message":"522","line":19,"column":1,"nodeType":"518","endLine":19,"endColumn":25,"suppressions":"594"},{"ruleId":"571","severity":2,"message":"572","line":125,"column":6,"nodeType":"573","messageId":"574","endLine":128,"endColumn":8,"suggestions":"595","suppressions":"596"},{"ruleId":"571","severity":2,"message":"572","line":133,"column":5,"nodeType":"573","messageId":"574","endLine":134,"endColumn":68,"suggestions":"597","suppressions":"598"},{"ruleId":"516","severity":2,"message":"522","line":19,"column":1,"nodeType":"518","endLine":19,"endColumn":25,"suppressions":"599"},{"ruleId":"516","severity":2,"message":"522","line":19,"column":1,"nodeType":"518","endLine":19,"endColumn":25,"suppressions":"600"},{"ruleId":"516","severity":2,"message":"522","line":19,"column":1,"nodeType":"518","endLine":19,"endColumn":25,"suppressions":"601"},{"ruleId":"602","severity":1,"message":"603","line":50,"column":27,"nodeType":"604","messageId":"605","endLine":50,"endColumn":38,"suppressions":"606"},{"ruleId":"607","severity":1,"message":"608","line":558,"column":94,"nodeType":"609","messageId":"610","endLine":558,"endColumn":96},{"ruleId":"607","severity":1,"message":"608","line":978,"column":51,"nodeType":"609","messageId":"610","endLine":978,"endColumn":53},{"ruleId":"607","severity":1,"message":"608","line":1003,"column":51,"nodeType":"609","messageId":"610","endLine":1003,"endColumn":53},{"ruleId":"607","severity":1,"message":"608","line":1036,"column":51,"nodeType":"609","messageId":"610","endLine":1036,"endColumn":53},{"ruleId":"607","severity":1,"message":"608","line":1069,"column":51,"nodeType":"609","messageId":"610","endLine":1069,"endColumn":53},{"ruleId":"611","severity":1,"message":"612","line":1322,"column":26,"nodeType":"455","messageId":"613","endLine":1322,"endColumn":38},{"ruleId":"611","severity":1,"message":"614","line":1322,"column":40,"nodeType":"455","messageId":"613","endLine":1322,"endColumn":47},{"ruleId":"615","severity":1,"message":"616","line":1441,"column":3,"nodeType":"557","messageId":"617","endLine":1476,"endColumn":5},{"ruleId":"466","severity":2,"message":"535","line":43,"column":2,"nodeType":"468","messageId":"536","endLine":48,"endColumn":4,"suppressions":"618"},{"ruleId":"466","severity":2,"message":"535","line":263,"column":6,"nodeType":"468","messageId":"536","endLine":263,"endColumn":49,"suppressions":"619"},{"ruleId":"466","severity":2,"message":"535","line":296,"column":6,"nodeType":"468","messageId":"536","endLine":296,"endColumn":49,"suppressions":"620"},{"ruleId":"466","severity":2,"message":"535","line":329,"column":6,"nodeType":"468","messageId":"536","endLine":329,"endColumn":49,"suppressions":"621"},{"ruleId":"607","severity":1,"message":"608","line":345,"column":61,"nodeType":"609","messageId":"610","endLine":345,"endColumn":63,"suppressions":"622"},{"ruleId":"564","severity":2,"message":"565","line":372,"column":7,"nodeType":"557","messageId":"566","endLine":372,"endColumn":49,"suppressions":"623"},{"ruleId":"466","severity":2,"message":"535","line":374,"column":7,"nodeType":"468","messageId":"536","endLine":374,"endColumn":53,"suppressions":"624"},{"ruleId":"625","severity":2,"message":"626","line":374,"column":41,"nodeType":"609","messageId":"627","endLine":374,"endColumn":43,"suppressions":"628"},{"ruleId":"466","severity":2,"message":"535","line":378,"column":6,"nodeType":"468","messageId":"536","endLine":378,"endColumn":82,"suppressions":"629"},{"ruleId":"625","severity":2,"message":"626","line":378,"column":68,"nodeType":"609","messageId":"627","endLine":378,"endColumn":70,"suppressions":"630"},{"ruleId":"564","severity":2,"message":"565","line":413,"column":7,"nodeType":"557","messageId":"566","endLine":413,"endColumn":49,"suppressions":"631"},{"ruleId":"466","severity":2,"message":"535","line":415,"column":7,"nodeType":"468","messageId":"536","endLine":415,"endColumn":53,"suppressions":"632"},{"ruleId":"625","severity":2,"message":"626","line":415,"column":41,"nodeType":"609","messageId":"627","endLine":415,"endColumn":43,"suppressions":"633"},{"ruleId":"466","severity":2,"message":"535","line":419,"column":6,"nodeType":"468","messageId":"536","endLine":419,"endColumn":82,"suppressions":"634"},{"ruleId":"625","severity":2,"message":"626","line":419,"column":69,"nodeType":"609","messageId":"627","endLine":419,"endColumn":71,"suppressions":"635"},{"ruleId":"564","severity":2,"message":"565","line":460,"column":7,"nodeType":"557","messageId":"566","endLine":460,"endColumn":49,"suppressions":"636"},{"ruleId":"466","severity":2,"message":"535","line":462,"column":7,"nodeType":"468","messageId":"536","endLine":462,"endColumn":53,"suppressions":"637"},{"ruleId":"625","severity":2,"message":"626","line":462,"column":41,"nodeType":"609","messageId":"627","endLine":462,"endColumn":43,"suppressions":"638"},{"ruleId":"466","severity":2,"message":"535","line":466,"column":6,"nodeType":"468","messageId":"536","endLine":466,"endColumn":82,"suppressions":"639"},{"ruleId":"625","severity":2,"message":"626","line":466,"column":69,"nodeType":"609","messageId":"627","endLine":466,"endColumn":71,"suppressions":"640"},{"ruleId":"538","severity":2,"message":"539","line":488,"column":10,"nodeType":"540","messageId":"541","endLine":488,"endColumn":73,"suppressions":"641"},{"ruleId":"538","severity":2,"message":"539","line":488,"column":11,"nodeType":"510","messageId":"541","endLine":488,"endColumn":54,"suppressions":"642"},{"ruleId":"564","severity":2,"message":"565","line":492,"column":5,"nodeType":"557","messageId":"566","endLine":492,"endColumn":53,"suppressions":"643"},{"ruleId":"564","severity":2,"message":"565","line":494,"column":5,"nodeType":"557","messageId":"566","endLine":496,"endColumn":6,"suppressions":"644"},{"ruleId":"538","severity":2,"message":"539","line":502,"column":10,"nodeType":"540","messageId":"541","endLine":502,"endColumn":79,"suppressions":"645"},{"ruleId":"538","severity":2,"message":"539","line":502,"column":11,"nodeType":"510","messageId":"541","endLine":502,"endColumn":54,"suppressions":"646"},{"ruleId":"564","severity":2,"message":"565","line":508,"column":5,"nodeType":"557","messageId":"566","endLine":508,"endColumn":53,"suppressions":"647"},{"ruleId":"564","severity":2,"message":"565","line":510,"column":5,"nodeType":"557","messageId":"566","endLine":512,"endColumn":6,"suppressions":"648"},{"ruleId":"564","severity":2,"message":"565","line":537,"column":7,"nodeType":"557","messageId":"566","endLine":537,"endColumn":49,"suppressions":"649"},{"ruleId":"466","severity":2,"message":"535","line":539,"column":7,"nodeType":"468","messageId":"536","endLine":539,"endColumn":53,"suppressions":"650"},{"ruleId":"625","severity":2,"message":"626","line":539,"column":41,"nodeType":"609","messageId":"627","endLine":539,"endColumn":43,"suppressions":"651"},{"ruleId":"466","severity":2,"message":"535","line":543,"column":6,"nodeType":"468","messageId":"536","endLine":543,"endColumn":82,"suppressions":"652"},{"ruleId":"625","severity":2,"message":"626","line":543,"column":68,"nodeType":"609","messageId":"627","endLine":543,"endColumn":70,"suppressions":"653"},{"ruleId":"564","severity":2,"message":"565","line":601,"column":7,"nodeType":"557","messageId":"566","endLine":601,"endColumn":49,"suppressions":"654"},{"ruleId":"466","severity":2,"message":"535","line":603,"column":7,"nodeType":"468","messageId":"536","endLine":603,"endColumn":53,"suppressions":"655"},{"ruleId":"625","severity":2,"message":"626","line":603,"column":41,"nodeType":"609","messageId":"627","endLine":603,"endColumn":43,"suppressions":"656"},{"ruleId":"466","severity":2,"message":"535","line":607,"column":6,"nodeType":"468","messageId":"536","endLine":607,"endColumn":82,"suppressions":"657"},{"ruleId":"625","severity":2,"message":"626","line":607,"column":68,"nodeType":"609","messageId":"627","endLine":607,"endColumn":70,"suppressions":"658"},{"ruleId":"564","severity":2,"message":"565","line":647,"column":7,"nodeType":"557","messageId":"566","endLine":649,"endColumn":8,"suppressions":"659"},{"ruleId":"660","severity":2,"message":"661","line":647,"column":25,"nodeType":"455","messageId":"662","endLine":647,"endColumn":38,"fix":"663","suppressions":"664"},{"ruleId":"564","severity":2,"message":"565","line":651,"column":7,"nodeType":"557","messageId":"566","endLine":651,"endColumn":49,"suppressions":"665"},{"ruleId":"466","severity":2,"message":"535","line":653,"column":7,"nodeType":"468","messageId":"536","endLine":653,"endColumn":53,"suppressions":"666"},{"ruleId":"625","severity":2,"message":"626","line":653,"column":41,"nodeType":"609","messageId":"627","endLine":653,"endColumn":43,"suppressions":"667"},{"ruleId":"466","severity":2,"message":"535","line":657,"column":6,"nodeType":"468","messageId":"536","endLine":657,"endColumn":82,"suppressions":"668"},{"ruleId":"625","severity":2,"message":"626","line":657,"column":68,"nodeType":"609","messageId":"627","endLine":657,"endColumn":70,"suppressions":"669"},{"ruleId":"564","severity":2,"message":"565","line":697,"column":7,"nodeType":"557","messageId":"566","endLine":697,"endColumn":49,"suppressions":"670"},{"ruleId":"466","severity":2,"message":"535","line":699,"column":7,"nodeType":"468","messageId":"536","endLine":699,"endColumn":53,"suppressions":"671"},{"ruleId":"625","severity":2,"message":"626","line":699,"column":41,"nodeType":"609","messageId":"627","endLine":699,"endColumn":43,"suppressions":"672"},{"ruleId":"466","severity":2,"message":"535","line":703,"column":6,"nodeType":"468","messageId":"536","endLine":703,"endColumn":82,"suppressions":"673"},{"ruleId":"625","severity":2,"message":"626","line":703,"column":68,"nodeType":"609","messageId":"627","endLine":703,"endColumn":70,"suppressions":"674"},{"ruleId":"466","severity":2,"message":"535","line":728,"column":5,"nodeType":"468","messageId":"536","endLine":728,"endColumn":48,"suppressions":"675"},{"ruleId":"466","severity":2,"message":"535","line":735,"column":5,"nodeType":"468","messageId":"536","endLine":735,"endColumn":47,"suppressions":"676"},{"ruleId":"466","severity":2,"message":"535","line":1094,"column":5,"nodeType":"468","messageId":"536","endLine":1094,"endColumn":48,"suppressions":"677"},{"ruleId":"466","severity":2,"message":"535","line":1106,"column":6,"nodeType":"468","messageId":"536","endLine":1106,"endColumn":58,"suppressions":"678"},{"ruleId":"466","severity":2,"message":"535","line":1135,"column":5,"nodeType":"468","messageId":"536","endLine":1135,"endColumn":48,"suppressions":"679"},{"ruleId":"466","severity":2,"message":"535","line":1146,"column":6,"nodeType":"468","messageId":"536","endLine":1146,"endColumn":63,"suppressions":"680"},{"ruleId":"466","severity":2,"message":"535","line":1176,"column":5,"nodeType":"468","messageId":"536","endLine":1176,"endColumn":48,"suppressions":"681"},{"ruleId":"466","severity":2,"message":"535","line":1188,"column":6,"nodeType":"468","messageId":"536","endLine":1188,"endColumn":70,"suppressions":"682"},{"ruleId":"466","severity":2,"message":"535","line":1212,"column":5,"nodeType":"468","messageId":"536","endLine":1212,"endColumn":48,"suppressions":"683"},{"ruleId":"466","severity":2,"message":"535","line":1224,"column":6,"nodeType":"468","messageId":"536","endLine":1224,"endColumn":70,"suppressions":"684"},{"ruleId":"466","severity":2,"message":"535","line":1279,"column":5,"nodeType":"468","messageId":"536","endLine":1279,"endColumn":48,"suppressions":"685"},{"ruleId":"466","severity":2,"message":"535","line":1290,"column":6,"nodeType":"468","messageId":"536","endLine":1290,"endColumn":75,"suppressions":"686"},{"ruleId":"466","severity":2,"message":"535","line":1317,"column":5,"nodeType":"468","messageId":"536","endLine":1317,"endColumn":48,"suppressions":"687"},{"ruleId":"466","severity":2,"message":"535","line":1357,"column":5,"nodeType":"468","messageId":"536","endLine":1357,"endColumn":48,"suppressions":"688"},{"ruleId":"466","severity":2,"message":"535","line":1380,"column":5,"nodeType":"468","messageId":"536","endLine":1380,"endColumn":48,"suppressions":"689"},{"ruleId":"466","severity":2,"message":"535","line":1413,"column":5,"nodeType":"468","messageId":"536","endLine":1413,"endColumn":48,"suppressions":"690"},{"ruleId":"466","severity":2,"message":"535","line":1448,"column":5,"nodeType":"468","messageId":"536","endLine":1448,"endColumn":48,"suppressions":"691"},{"ruleId":"466","severity":2,"message":"535","line":1485,"column":5,"nodeType":"468","messageId":"536","endLine":1485,"endColumn":48,"suppressions":"692"},{"ruleId":"466","severity":2,"message":"535","line":1500,"column":6,"nodeType":"468","messageId":"536","endLine":1500,"endColumn":51,"suppressions":"693"},{"ruleId":"466","severity":2,"message":"535","line":1522,"column":5,"nodeType":"468","messageId":"536","endLine":1522,"endColumn":48,"suppressions":"694"},{"ruleId":"466","severity":2,"message":"535","line":1537,"column":6,"nodeType":"468","messageId":"536","endLine":1537,"endColumn":51,"suppressions":"695"},{"ruleId":"466","severity":2,"message":"535","line":1565,"column":5,"nodeType":"468","messageId":"536","endLine":1565,"endColumn":48,"suppressions":"696"},{"ruleId":"466","severity":2,"message":"535","line":1583,"column":6,"nodeType":"468","messageId":"536","endLine":1583,"endColumn":51,"suppressions":"697"},{"ruleId":"466","severity":2,"message":"535","line":1610,"column":5,"nodeType":"468","messageId":"536","endLine":1610,"endColumn":48,"suppressions":"698"},{"ruleId":"466","severity":2,"message":"535","line":1625,"column":6,"nodeType":"468","messageId":"536","endLine":1625,"endColumn":51,"suppressions":"699"},{"ruleId":"466","severity":2,"message":"535","line":1649,"column":5,"nodeType":"468","messageId":"536","endLine":1649,"endColumn":48,"suppressions":"700"},{"ruleId":"466","severity":2,"message":"535","line":1663,"column":6,"nodeType":"468","messageId":"536","endLine":1663,"endColumn":51,"suppressions":"701"},{"ruleId":"466","severity":2,"message":"535","line":1688,"column":5,"nodeType":"468","messageId":"536","endLine":1688,"endColumn":48,"suppressions":"702"},{"ruleId":"466","severity":2,"message":"535","line":1753,"column":6,"nodeType":"468","messageId":"536","endLine":1753,"endColumn":44,"suppressions":"703"},{"ruleId":"466","severity":2,"message":"535","line":1790,"column":6,"nodeType":"468","messageId":"536","endLine":1790,"endColumn":44,"suppressions":"704"},{"ruleId":"466","severity":2,"message":"535","line":1827,"column":6,"nodeType":"468","messageId":"536","endLine":1827,"endColumn":44,"suppressions":"705"},{"ruleId":"615","severity":1,"message":"616","line":106,"column":2,"nodeType":"557","messageId":"617","endLine":127,"endColumn":4},{"ruleId":"706","severity":1,"message":"707","line":106,"column":2,"nodeType":"557","messageId":"708","endLine":127,"endColumn":4},{"ruleId":"615","severity":1,"message":"616","line":131,"column":2,"nodeType":"557","messageId":"617","endLine":164,"endColumn":4},{"ruleId":"706","severity":1,"message":"707","line":131,"column":2,"nodeType":"557","messageId":"708","endLine":164,"endColumn":4},{"ruleId":"492","severity":2,"message":"493","line":178,"column":5,"nodeType":"494","endLine":178,"endColumn":9,"suppressions":"709"},{"ruleId":"492","severity":2,"message":"493","line":180,"column":5,"nodeType":"494","endLine":180,"endColumn":9,"suppressions":"710"},{"ruleId":"492","severity":2,"message":"493","line":197,"column":5,"nodeType":"494","endLine":197,"endColumn":9,"suppressions":"711"},{"ruleId":"492","severity":2,"message":"493","line":199,"column":5,"nodeType":"494","endLine":199,"endColumn":9,"suppressions":"712"},{"ruleId":"607","severity":1,"message":"608","line":218,"column":101,"nodeType":"609","messageId":"610","endLine":218,"endColumn":103},{"ruleId":"713","severity":1,"message":"714","line":220,"column":19,"nodeType":"475","messageId":"715","endLine":220,"endColumn":28},{"ruleId":"607","severity":1,"message":"608","line":232,"column":26,"nodeType":"609","messageId":"610","endLine":232,"endColumn":28},{"ruleId":"607","severity":1,"message":"608","line":239,"column":24,"nodeType":"609","messageId":"610","endLine":239,"endColumn":26},{"ruleId":"607","severity":1,"message":"608","line":246,"column":26,"nodeType":"609","messageId":"610","endLine":246,"endColumn":28},{"ruleId":"607","severity":1,"message":"608","line":253,"column":31,"nodeType":"609","messageId":"610","endLine":253,"endColumn":33},{"ruleId":"607","severity":1,"message":"608","line":260,"column":24,"nodeType":"609","messageId":"610","endLine":260,"endColumn":26},{"ruleId":"607","severity":1,"message":"608","line":267,"column":26,"nodeType":"609","messageId":"610","endLine":267,"endColumn":28},{"ruleId":"607","severity":1,"message":"608","line":274,"column":26,"nodeType":"609","messageId":"610","endLine":274,"endColumn":28},{"ruleId":"607","severity":1,"message":"608","line":281,"column":24,"nodeType":"609","messageId":"610","endLine":281,"endColumn":26},{"ruleId":"607","severity":1,"message":"608","line":286,"column":25,"nodeType":"609","messageId":"610","endLine":286,"endColumn":27},{"ruleId":"607","severity":1,"message":"608","line":293,"column":24,"nodeType":"609","messageId":"610","endLine":293,"endColumn":26},{"ruleId":"607","severity":1,"message":"608","line":52,"column":33,"nodeType":"609","messageId":"610","endLine":52,"endColumn":35},{"ruleId":"466","severity":2,"message":"535","line":45,"column":4,"nodeType":"468","messageId":"536","endLine":45,"endColumn":47,"suppressions":"716"},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["717","718"],["719","720"],["721","722"],["723","724"],["725"],"no-use-before-define","'Contract' was used before it was defined.","Identifier","usedBeforeDefined",["726"],["727","728"],["729"],"no-nested-ternary","Do not nest ternary expressions.","ConditionalExpression","noNestedTernary",["730"],["731"],"@typescript-eslint/no-unsafe-return","Unsafe return of type `Web3PromiEvent<Contract<any>, SendTransactionEvents<DataFormat>>` from function with return type `ContractDeploySend<Abi>`.","ReturnStatement","unsafeReturnAssignment",["732"],["733"],["734"],"class-methods-use-this","Expected 'this' to be used by class method '_getAbiParams'.","FunctionExpression","missingThis",["735"],"no-void","Expected 'undefined' and instead saw 'void'.","UnaryExpression","noVoid",["736"],"@typescript-eslint/no-unsafe-assignment","Unsafe assignment of type Web3SubscriptionManager<unknown, any> to a variable of type Web3SubscriptionManager<unknown, { [key: string]: Web3SubscriptionConstructor<unknown, Web3Subscription<any, any, unknown, any>>; }>.","Property","unsafeAssignment",["737"],"@typescript-eslint/no-this-alias","Unexpected aliasing of 'this' to local variable.","thisAssignment",["738"],"no-null/no-null","Use undefined instead of null","Literal",["739"],["740"],["741"],["742","743"],"@typescript-eslint/ban-types","Don't use `null` as a type. Use 'undefined' instead of 'null'","TSNullKeyword","bannedTypeMessage",["744"],["745"],["746"],["747"],["748"],"@typescript-eslint/no-unsafe-argument","Unsafe argument of type `any` assigned to a parameter of type `{ subscriptionManager: Web3SubscriptionManager<unknown, { [key: string]: Web3SubscriptionConstructor<unknown, Web3Subscription<any, any, unknown, any>>; }>; returnFormat?: DataFormat | undefined; }`.","TSAsExpression","unsafeArgument",["749"],"tsdoc/syntax","tsdoc-code-span-missing-delimiter: The code span is missing its closing backtick","tsdoc-code-span-missing-delimiter","import/no-extraneous-dependencies","'web3-hardhat-plugin' should be listed in the project's dependencies. Run 'npm i -S web3-hardhat-plugin' to add it","ImportDeclaration",["750"],"'web3-eth-personal' should be listed in the project's dependencies. Run 'npm i -S web3-eth-personal' to add it",["751"],"'web3' should be listed in the project's dependencies. Run 'npm i -S web3' to add it",["752"],"'web3-eth-contract' should be listed in the project's dependencies. Run 'npm i -S web3-eth-contract' to add it",["753"],"'web3-providers-http' should be listed in the project's dependencies. Run 'npm i -S web3-providers-http' to add it",["754"],"'web3-providers-ipc' should be listed in the project's dependencies. Run 'npm i -S web3-providers-ipc' to add it",["755"],"@typescript-eslint/ban-ts-comment","Include a description after the \"@ts-expect-error\" directive to explain why the @ts-expect-error is necessary. The description must be 3 characters or longer.","Line","tsDirectiveCommentRequiresDescription",["756"],"Unsafe return of an `any` typed value.","unsafeReturn",["757"],"@typescript-eslint/no-unsafe-call","Unsafe call of an `any` typed value.","MemberExpression","unsafeCall",["758"],"no-plusplus","Unary operator '++' used.","UpdateExpression","unexpectedUnaryOp",["759"],"no-param-reassign","Assignment to function parameter 'currentAttempt'.","assignmentToFunctionParam",["760"],"no-await-in-loop","Unexpected `await` inside a loop.","AwaitExpression","unexpectedAwait",["761"],"CallExpression",["762"],["763"],["764"],["765"],["766"],["767"],"jest/no-conditional-expect","Avoid calling `expect` conditionally`","conditionalExpect",["768"],["769"],["770"],["771"],"@typescript-eslint/no-floating-promises","Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","ExpressionStatement","floatingVoid",["772"],["773"],["774"],["775"],"jest/no-standalone-expect","Expect must be inside of a test block.","unexpectedExpect",["776"],["777"],["778"],["779"],["780"],["781"],["782"],["783"],["784"],"import/no-named-as-default","Using exported name 'Contract' as identifier for default export.","ImportDefaultSpecifier",["785"],["786"],["787"],["788"],["789"],["790"],["791"],["792"],"@typescript-eslint/no-non-null-assertion","Forbidden non-null assertion.","TSNonNullExpression","noNonNull",["793"],"@typescript-eslint/require-await","Async arrow function has no 'await' expression.","ArrowFunctionExpression","missingAwait","@typescript-eslint/no-unused-vars","'_objInstance' is defined but never used.","unusedVar","'_params' is defined but never used.","jest/no-disabled-tests","Disabled test","disabledTest",["794"],["795"],["796"],["797"],["798"],["799"],["800"],"@typescript-eslint/no-empty-function","Unexpected empty method 'on'.","unexpected",["801"],["802"],["803"],["804"],["805"],["806"],["807"],["808"],["809"],["810"],["811"],["812"],["813"],["814"],["815"],["816"],["817"],["818"],["819"],["820"],["821"],["822"],["823"],["824"],["825"],["826"],["827"],["828"],["829"],["830"],["831"],["832"],"jest/prefer-to-be","Use `toBe` when expecting primitive literals","useToBe",{"range":"833","text":"834"},["835"],["836"],["837"],["838"],["839"],["840"],["841"],["842"],["843"],["844"],["845"],["846"],["847"],["848"],["849"],["850"],["851"],["852"],["853"],["854"],["855"],["856"],["857"],["858"],["859"],["860"],["861"],["862"],["863"],["864"],["865"],["866"],["867"],["868"],["869"],["870"],["871"],["872"],["873"],["874"],["875"],["876"],"jest/expect-expect","Test has no assertions","noAssertions",["877"],["878"],["879"],["880"],"func-names","Unexpected unnamed function.","unnamed",["881"],{"messageId":"882","fix":"883","desc":"884"},{"messageId":"885","fix":"886","desc":"887"},{"messageId":"882","fix":"888","desc":"884"},{"messageId":"885","fix":"889","desc":"887"},{"messageId":"882","fix":"890","desc":"884"},{"messageId":"885","fix":"891","desc":"887"},{"messageId":"882","fix":"892","desc":"884"},{"messageId":"885","fix":"893","desc":"887"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"messageId":"882","fix":"896","desc":"884"},{"messageId":"885","fix":"897","desc":"887"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"messageId":"882","fix":"898","desc":"884"},{"messageId":"885","fix":"899","desc":"887"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"messageId":"900","fix":"901","desc":"902"},{"kind":"894","justification":"895"},{"messageId":"900","fix":"903","desc":"902"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"messageId":"900","fix":"904","desc":"902"},{"kind":"894","justification":"895"},{"messageId":"900","fix":"905","desc":"902"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},[24078,24091],"toBe",{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},"suggestUnknown",{"range":"906","text":"907"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"906","text":"908"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"909","text":"907"},{"range":"909","text":"908"},{"range":"910","text":"907"},{"range":"910","text":"908"},{"range":"911","text":"907"},{"range":"911","text":"908"},"directive","",{"range":"912","text":"907"},{"range":"912","text":"908"},{"range":"913","text":"907"},{"range":"913","text":"908"},"floatingFixVoid",{"range":"914","text":"915"},"Add void operator to ignore.",{"range":"916","text":"917"},{"range":"918","text":"919"},{"range":"920","text":"921"},[2859,2862],"unknown","never",[23584,23587],[48242,48245],[4197,4200],[14564,14567],[5041,5044],[4927,5127],"void promiEvent.on('error', err => {\n\t\t\t\t\t\t\t\t// Returned error: insufficient funds for gas * price + value: balance 0, tx cost 25000327300000000, overshot 25000327300000000\n\t\t\t\t\t\t\t\tresolve(err);\n\t\t\t\t\t\t\t});",[6018,6134],"void promiEvent.on('error', err => {\n\t\t\t\t\t\t\t\t// Transaction has been reverted by the EVM\n\t\t\t\t\t\t\t\tresolve(err);\n\t\t\t\t\t\t\t});",[4015,4077],"void promievent\n\t\t\t\t\t.on('receipt', () => {\n\t\t\t\t\t\tresolve()\n\t\t\t\t\t})",[4225,4303],"void promievent\n\t\t\t\t.on('confirmation',  () => {confirmationHandler(); resolve();})"]