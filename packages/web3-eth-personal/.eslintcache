[{"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-personal/src/index.ts":"1","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-personal/src/personal.ts":"2","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-personal/src/rpc_method_wrappers.ts":"3","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-personal/test/fixtures/system_test_utils.ts":"4","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-personal/test/integration/personal.test.ts":"5","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-personal/test/unit/eth_personal.test.ts":"6"},{"size":1407,"mtime":1685575123091,"results":"7","hashOfConfig":"8"},{"size":9422,"mtime":1701873231378,"results":"9","hashOfConfig":"8"},{"size":3702,"mtime":1681401076218,"results":"10","hashOfConfig":"8"},{"size":15907,"mtime":1713826363670,"results":"11","hashOfConfig":"12"},{"size":4806,"mtime":1707238177039,"results":"13","hashOfConfig":"12"},{"size":9806,"mtime":1681401076218,"results":"14","hashOfConfig":"12"},{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1f9jzuo",{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"sekya",{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-personal/src/index.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-personal/src/personal.ts",["34","35"],[],"﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { Web3Context } from 'web3-core';\nimport { Address, EthPersonalAPI, HexString, Transaction } from 'web3-types';\n\nimport * as rpcWrappers from './rpc_method_wrappers.js';\n\n/**\n* Eth Personal allows you to interact with the Ethereum node’s accounts.\n* For using Eth Personal package, first install Web3 package using: `npm i web3` or `yarn add web3` based on your package manager.\n* ```ts\n* \n*import { Web3 } from 'web3';\n*  const web3 = new Web3('http://127.0.0.1:7545');\n*\n*  console.log(await web3.eth.personal.getAccounts());\n* \n* ```\n* For using individual package install `web3-eth-personal` packages using: `npm i web3-eth-personal` or `yarn add web3-eth-personal`.\n*\n* ```ts\n* import {Personal} from 'web3-eth-personal';\n* \n* const personal = new Personal('http://127.0.0.1:7545');\n* console.log(await personal.getAccounts());\n* ```\n*/\nexport class Personal extends Web3Context<EthPersonalAPI> {\n\t/**\n\t *Returns a list of accounts the node controls by using the provider and calling the RPC method personal_listAccounts. Using `web3.eth.accounts.create()` will not add accounts into this list. For that use `web3.eth.personal.newAccount()`.\n\t * @returns - An array of addresses controlled by the node.\n\t * @example\n\t * ```ts\n\t *  const accounts = await personal.getAccounts();\n\t * console.log(accounts);\n\t * >\n\t * [\n\t * \t'0x79D7BbaC53C9aF700d0B250e9AE789E503Fcd6AE',\n\t * \t'0xe2597eB05CF9a87eB1309e86750C903EC38E527e',\n\t * \t'0x7eD0e85B8E1E925600B4373e6d108F34AB38a401',\n\t * \t'0xE4bEEf667408b99053dC147Ed19592aDa0d77F59',\n\t * \t'0x7AB80aeB6bb488B7f6c41c58e83Ef248eB39c882',\n\t * \t'0x12B1D9d74d73b1C3A245B19C1C5501c653aF1af9',\n\t * \t'0x1a6075A263Ee140e00Dbf8E374Fc5A443d097894',\n\t * \t'0x4FEC0A51024B13030D26E70904B066C6d41157A5',\n\t * \t'0x03095dc4857BB26f3a4550c5651Df8b7f6b6B1Ef',\n\t * \t'0xac0B9b6e8A17991cb172B2ABAF45Fb5eb769E540'\n\t * ]\n\t * ```\n\t */\n\tpublic async getAccounts() {\n\t\treturn rpcWrappers.getAccounts(this.requestManager);\n\t}\n\n\t/**\n\t * Creates a new account and returns its address.\n\t * **_NOTE:_**  This function sends a sensitive information like password. Never call this function over a unsecured Websocket or HTTP provider, as your password will be sent in plain text!\n\t * @param password - The password to encrypt the account with.\n\t * @returns - The address of the new account.\n\t * @example\n\t * ```ts\n\t * const addr = await web3.eth.personal.newAccount('password');\n\t * console.log(addr);\n\t * > '0x1234567891011121314151617181920212223456'\n\t * ```\n\t */\n\tpublic async newAccount(password: string) {\n\t\treturn rpcWrappers.newAccount(this.requestManager, password);\n\t}\n\n\t/**\n\t * Unlocks an account for a given duration.\n\t * @param address - The address of the account to unlock.\n\t * @param password - The password of the account to unlock.\n\t * @param unlockDuration - The duration in seconds to unlock the account for.\n\t * @example\n\t * ```ts\n\t * await personal.unlockAccount(\n\t * \t\"0x0d4aa485ecbc499c70860feb7e5aaeaf5fd8172e\",\n\t * \t\"123456\",\n\t * \t600\n\t * );\n\t * ```\n\t */\n\tpublic async unlockAccount(address: Address, password: string, unlockDuration: number) {\n\t\treturn rpcWrappers.unlockAccount(this.requestManager, address, password, unlockDuration);\n\t}\n\t/**\n\t * Locks the given account\n\t * @param address - The address of the account to lock.\n\t * @returns - `true` if the account was locked, otherwise `false`.\n\t * @example\n\t * ```ts\n\t * await personal.lockAccount(\n\t * \t\"0x0d4aa485ecbc499c70860feb7e5aaeaf5fd8172e\"\n\t * );\n\t * ```\n\t */\n\tpublic async lockAccount(address: Address) {\n\t\treturn rpcWrappers.lockAccount(this.requestManager, address);\n\t}\n\t/**\n\t * Imports the given private key into the key store, encrypting it with the passphrase.\n\t * @param keyData - An unencrypted private key (hex string).\n\t * @param passphrase  - The password of the account\n\t * @returns - The address of the new account.\n\t * @example\n\t * ```ts\n\t * const accountAddress = await personal.importRawKey(\n\t * \t\"abe40cb08850da918ee951b237fa87946499b2d8643e4aa12b0610b050c731f6\",\n\t * \t\"123456\"\n\t * );\n\t *\n\t * console.log(unlockTx);\n\t * > 0x8727a8b34ec833154b72b62cac05d69f86eb6556\n\t * ```\n\t */\n\tpublic async importRawKey(keyData: HexString, passphrase: string) {\n\t\treturn rpcWrappers.importRawKey(this.requestManager, keyData, passphrase);\n\t}\n\n\t/**\n\t * This method sends a transaction over the management API.\n\t * **_NOTE:_** Sending your account password over an unsecured HTTP RPC connection is highly unsecure.\n\t * @param tx - The transaction options\n\t * @param passphrase - The passphrase of the current account\n\t * @returns - The transaction hash\n\t * @example\n\t * ```ts\n\t * const txHash = personal\n\t * .sendTransaction({\n\t *  \tfrom: \"0x0d4aa485ecbc499c70860feb7e5aaeaf5fd8172e\",\n\t * \tgasPrice: \"20000000000\",\n\t * \tgas: \"21000\",\n\t * \tto: \"0x3535353535353535353535353535353535353535\",\n\t * \tvalue: \"1000000\",\n\t * \tdata: \"\",\n\t * \tnonce: 0,\n\t * },\n\t * \"123456\");\n\t *\n\t * console.log(txHash);\n\t * > 0x9445325c3c5638c9fe425b003b8c32f03e9f99d409555a650a6838ba712bb51b\n\t * ```\n\t */\n\tpublic async sendTransaction(tx: Transaction, passphrase: string) {\n\t\treturn rpcWrappers.sendTransaction(this.requestManager, tx, passphrase);\n\t}\n\t/**\n\t * Signs a transaction. This account needs to be unlocked.\n\t * **_NOTE:_** Sending your account password over an unsecured HTTP RPC connection is highly unsecure.\n\t * @param tx - The transaction data to sign. See sendTransaction  for more information.\n\t * @param passphrase - The password of the `from` account, to sign the transaction with.\n\t * @returns - The RLP encoded transaction. The `raw` property can be used to send the transaction using  sendSignedTransaction.\n\t * @example\n\t * ```ts\n\t * const tx = personal\n\t * .signTransaction({\n\t * \tfrom: \"0x0d4aa485ecbc499c70860feb7e5aaeaf5fd8172e\",\n\t * \tgasPrice: \"20000000000\",\n\t * \tgas: \"21000\",\n\t * \tto: \"0x3535353535353535353535353535353535353535\",\n\t * \tvalue: \"1000000000000000000\",\n\t * \tdata: \"\",\n\t * \tnonce: 0,\n\t * },\n\t * \"123456\");\n\t *\n\t * console.log(tx);\n\t *\n\t * > {\n\t * \traw: '0xf86e808504a817c800825208943535353535353535353535353535353535353535880de0b6b3a764000080820a95a0c951c03238fe930e6e69ab9d6af9f29248a514048e44884f0e60c4de40de3526a038b71399bf0c8925749ab79e91ce6cd2fc068c84c18ff6a197b48c4cbef01e00',\n\t * \ttx: {\n\t * \ttype: '0x0',\n\t * \tnonce: '0x0',\n\t * \tgasPrice: '0x4a817c800',\n\t * \tmaxPriorityFeePerGas: null,\n\t * \tmaxFeePerGas: null,\n\t * \tgas: '0x5208',\n\t * \tvalue: '0xde0b6b3a7640000',\n\t * \tinput: '0x',\n\t * \tv: '0xa95',\n\t * \tr: '0xc951c03238fe930e6e69ab9d6af9f29248a514048e44884f0e60c4de40de3526',\n\t * \ts: '0x38b71399bf0c8925749ab79e91ce6cd2fc068c84c18ff6a197b48c4cbef01e00',\n\t * \tto: '0x3535353535353535353535353535353535353535',\n\t * \thash: '0x65e3df790ab2a32068b13cff970b26445b8995229ae4abbed61bd996f09fce69'\n\t * \t}\n\t * }\n\t * ```\n\t */\n\tpublic async signTransaction(tx: Transaction, passphrase: string) {\n\t\treturn rpcWrappers.signTransaction(this.requestManager, tx, passphrase);\n\t}\n\t/**\n\t * Calculates an Ethereum specific signature with:\n\t * sign(keccak256(\"\\x19Ethereum Signed Message:\\n\" + dataToSign.length + dataToSign)))\n\t * Adding a prefix to the message makes the calculated signature recognisable as an Ethereum specific signature.\n\t *\n\t * If you have the original message and the signed message, you can discover the signing account address using web3.eth.personal.ecRecover\n\t * **_NOTE:_** Sending your account password over an unsecured HTTP RPC connection is highly unsecure.\n\t * @param data - The data to sign.\n\t * @param address - The address to sign with.\n\t * @param passphrase - The passphrase to decrypt the account with.\n\t * @returns - The signature.\n\t * @example\n\t * ```ts\n\t * const sig = await personal.sign(\"Hello world\", \"0x0D4Aa485ECbC499c70860fEb7e5AaeAf5fd8172E\", \"123456\")\n\t * console.log(sig)\n\t * > 0x5d21d01b3198ac34d0585a9d76c4d1c8123e5e06746c8962318a1c08ffb207596e6fce4a6f377b7c0fc98c5f646cd73438c80e8a1a95cbec55a84c2889dca0301b\n\t * ```\n\t */\n\tpublic async sign(data: HexString, address: Address, passphrase: string) {\n\t\treturn rpcWrappers.sign(this.requestManager, data, address, passphrase);\n\t}\n\n\t/**\n\t * Recovers the account that signed the data.\n\t * @param signedData - Data that was signed. If String it will be converted using {@link utf8ToHex}\n\t * @param signature - The signature\n\t * @returns - The address of the account that signed the data.\n\t * @example\n\t * ```ts\n\t *  const address = await personal.ecRecover(\n\t * \t\"Hello world\",\n\t * \t\"0x5d21d01b3198ac34d0585a9d76c4d1c8123e5e06746c8962318a1c08ffb207596e6fce4a6f377b7c0fc98c5f646cd73438c80e8a1a95cbec55a84c2889dca0301b\"\n\t * );\n\t * console.log(address);\n\t * > 0x0d4aa485ecbc499c70860feb7e5aaeaf5fd8172e\n\t * ```\n\t */\n\tpublic async ecRecover(signedData: HexString, signature: string) {\n\t\treturn rpcWrappers.ecRecover(this.requestManager, signedData, signature);\n\t}\n}\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-personal/src/rpc_method_wrappers.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-personal/test/fixtures/system_test_utils.ts",[],["36","37","38","39","40","41","42","43","44","45","46","47","48","49","50"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-personal/test/integration/personal.test.ts",[],["51","52"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-personal/test/unit/eth_personal.test.ts",[],[],{"ruleId":"53","severity":1,"message":"54","line":211,"column":21,"nodeType":null,"messageId":"55","endLine":211,"endColumn":22},{"ruleId":"53","severity":1,"message":"54","line":211,"column":49,"nodeType":null,"messageId":"55","endLine":211,"endColumn":50},{"ruleId":"56","severity":2,"message":"57","line":21,"column":1,"nodeType":"58","endLine":26,"endColumn":28,"suppressions":"59"},{"ruleId":"56","severity":2,"message":"60","line":29,"column":1,"nodeType":"58","endLine":29,"endColumn":49,"suppressions":"61"},{"ruleId":"56","severity":2,"message":"62","line":55,"column":1,"nodeType":"58","endLine":55,"endColumn":46,"suppressions":"63"},{"ruleId":"56","severity":2,"message":"64","line":57,"column":1,"nodeType":"58","endLine":57,"endColumn":25,"suppressions":"65"},{"ruleId":"56","severity":2,"message":"66","line":60,"column":1,"nodeType":"58","endLine":60,"endColumn":60,"suppressions":"67"},{"ruleId":"56","severity":2,"message":"68","line":62,"column":1,"nodeType":"58","endLine":62,"endColumn":48,"suppressions":"69"},{"ruleId":"56","severity":2,"message":"70","line":64,"column":1,"nodeType":"58","endLine":64,"endColumn":50,"suppressions":"71"},{"ruleId":"72","severity":2,"message":"73","line":72,"column":2,"nodeType":"74","messageId":"75","endLine":72,"endColumn":21,"suppressions":"76"},{"ruleId":"77","severity":2,"message":"78","line":74,"column":2,"nodeType":"79","messageId":"80","endLine":74,"endColumn":56,"suppressions":"81"},{"ruleId":"82","severity":2,"message":"83","line":74,"column":19,"nodeType":"84","messageId":"85","endLine":74,"endColumn":30,"suppressions":"86"},{"ruleId":"87","severity":2,"message":"88","line":152,"column":4,"nodeType":"89","messageId":"90","endLine":152,"endColumn":20,"suppressions":"91"},{"ruleId":"92","severity":2,"message":"93","line":152,"column":4,"nodeType":"94","messageId":"95","endLine":152,"endColumn":18,"suppressions":"96"},{"ruleId":"97","severity":2,"message":"98","line":491,"column":4,"nodeType":"99","messageId":"100","endLine":496,"endColumn":6,"suppressions":"101"},{"ruleId":"77","severity":2,"message":"78","line":505,"column":2,"nodeType":"102","messageId":"80","endLine":508,"endColumn":3,"suppressions":"103"},{"ruleId":"77","severity":2,"message":"78","line":507,"column":38,"nodeType":"79","messageId":"80","endLine":507,"endColumn":90,"suppressions":"104"},{"ruleId":"105","severity":2,"message":"106","line":59,"column":3,"nodeType":"102","messageId":"107","endLine":59,"endColumn":68,"suppressions":"108"},{"ruleId":"105","severity":2,"message":"106","line":106,"column":3,"nodeType":"102","messageId":"107","endLine":106,"endColumn":28,"suppressions":"109"},"tsdoc/syntax","tsdoc-unnecessary-backslash: A backslash can only be used to escape a punctuation character","tsdoc-unnecessary-backslash","import/no-extraneous-dependencies","'web3-eth-accounts' should be listed in the project's dependencies. Run 'npm i -S web3-eth-accounts' to add it","ImportDeclaration",["110"],"'web3-hardhat-plugin' should be listed in the project's dependencies. Run 'npm i -S web3-hardhat-plugin' to add it",["111"],"'web3-eth-personal' should be listed in the project's dependencies. Run 'npm i -S web3-eth-personal' to add it",["112"],"'web3' should be listed in the project's dependencies. Run 'npm i -S web3' to add it",["113"],"'web3-eth-contract' should be listed in the project's dependencies. Run 'npm i -S web3-eth-contract' to add it",["114"],"'web3-providers-http' should be listed in the project's dependencies. Run 'npm i -S web3-providers-http' to add it",["115"],"'web3-providers-ipc' should be listed in the project's dependencies. Run 'npm i -S web3-providers-ipc' to add it",["116"],"@typescript-eslint/ban-ts-comment","Include a description after the \"@ts-expect-error\" directive to explain why the @ts-expect-error is necessary. The description must be 3 characters or longer.","Line","tsDirectiveCommentRequiresDescription",["117"],"@typescript-eslint/no-unsafe-return","Unsafe return of an `any` typed value.","ConditionalExpression","unsafeReturn",["118"],"@typescript-eslint/no-unsafe-call","Unsafe call of an `any` typed value.","MemberExpression","unsafeCall",["119"],"no-plusplus","Unary operator '++' used.","UpdateExpression","unexpectedUnaryOp",["120"],"no-param-reassign","Assignment to function parameter 'currentAttempt'.","Identifier","assignmentToFunctionParam",["121"],"no-await-in-loop","Unexpected `await` inside a loop.","AwaitExpression","unexpectedAwait",["122"],"CallExpression",["123"],["124"],"jest/no-standalone-expect","Expect must be inside of a test block.","unexpectedExpect",["125"],["126"],{"kind":"127","justification":"128"},{"kind":"127","justification":"128"},{"kind":"127","justification":"128"},{"kind":"127","justification":"128"},{"kind":"127","justification":"128"},{"kind":"127","justification":"128"},{"kind":"127","justification":"128"},{"kind":"127","justification":"128"},{"kind":"127","justification":"128"},{"kind":"127","justification":"128"},{"kind":"127","justification":"128"},{"kind":"127","justification":"128"},{"kind":"127","justification":"128"},{"kind":"127","justification":"128"},{"kind":"127","justification":"128"},{"kind":"127","justification":"128"},{"kind":"127","justification":"128"},"directive",""]