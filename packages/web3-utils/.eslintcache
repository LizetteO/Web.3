[{"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/src/chunk_response_parser.ts":"1","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/src/converters.ts":"2","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/src/event_emitter.ts":"3","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/src/formatter.ts":"4","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/src/hash.ts":"5","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/src/index.ts":"6","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/src/json_rpc.ts":"7","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/src/objects.ts":"8","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/src/promise_helpers.ts":"9","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/src/random.ts":"10","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/src/socket_provider.ts":"11","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/src/string_manipulation.ts":"12","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/src/uint8array.ts":"13","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/src/uuid.ts":"14","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/src/validation.ts":"15","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/src/web3_deferred_promise.ts":"16","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/src/web3_eip1193_provider.ts":"17","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/test/fixtures/converters.ts":"18","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/test/fixtures/formatter.ts":"19","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/test/fixtures/hash.ts":"20","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/test/fixtures/hugeData.ts":"21","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/test/fixtures/json_rpc.ts":"22","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/test/fixtures/objects.ts":"23","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/test/fixtures/random.ts":"24","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/test/fixtures/string_manipulation.ts":"25","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/test/fixtures/uint8array.ts":"26","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/test/fixtures/validation.ts":"27","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/test/integration/event_emitter.test.ts":"28","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/test/unit/chunk_response_parser.test.ts":"29","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/test/unit/converters.test.ts":"30","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/test/unit/converters_dom.test.ts":"31","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/test/unit/event_emitter_dom.test.ts":"32","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/test/unit/event_emitter_node.test.ts":"33","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/test/unit/formatter.test.ts":"34","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/test/unit/hash.test.ts":"35","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/test/unit/hash_dom.test.ts":"36","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/test/unit/json_rpc.test.ts":"37","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/test/unit/objects.test.ts":"38","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/test/unit/promise_helpers.test.ts":"39","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/test/unit/random.test.ts":"40","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/test/unit/socket_provider.test.ts":"41","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/test/unit/string_manipulation.test.ts":"42","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/test/unit/uint8array.test.ts":"43","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/test/unit/validation.test.ts":"44","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/test/unit/web3_deferred_promise.test.ts":"45"},{"size":2862,"mtime":1710253049851,"results":"46","hashOfConfig":"47"},{"size":18901,"mtime":1713818627480,"results":"48","hashOfConfig":"47"},{"size":1208,"mtime":1709850520302,"results":"49","hashOfConfig":"47"},{"size":9990,"mtime":1713453005526,"results":"50","hashOfConfig":"47"},{"size":11708,"mtime":1704729547058,"results":"51","hashOfConfig":"47"},{"size":1339,"mtime":1709764624543,"results":"52","hashOfConfig":"47"},{"size":4991,"mtime":1688764157602,"results":"53","hashOfConfig":"47"},{"size":2098,"mtime":1709765747133,"results":"54","hashOfConfig":"47"},{"size":6068,"mtime":1700492614538,"results":"55","hashOfConfig":"47"},{"size":1720,"mtime":1702489687902,"results":"56","hashOfConfig":"47"},{"size":17052,"mtime":1709850520303,"results":"57","hashOfConfig":"47"},{"size":5375,"mtime":1702489687903,"results":"58","hashOfConfig":"47"},{"size":1634,"mtime":1713221660649,"results":"59","hashOfConfig":"47"},{"size":1788,"mtime":1702489687904,"results":"60","hashOfConfig":"47"},{"size":5876,"mtime":1702489687904,"results":"61","hashOfConfig":"47"},{"size":4584,"mtime":1695832978359,"results":"62","hashOfConfig":"47"},{"size":3296,"mtime":1709850520304,"results":"63","hashOfConfig":"47"},{"size":16081,"mtime":1713818627480,"results":"64","hashOfConfig":"65"},{"size":2112,"mtime":1684618137120,"results":"66","hashOfConfig":"65"},{"size":12293,"mtime":1694808594890,"results":"67","hashOfConfig":"65"},{"size":11990,"mtime":1701873231386,"results":"68","hashOfConfig":"65"},{"size":2141,"mtime":1678154646184,"results":"69","hashOfConfig":"65"},{"size":2162,"mtime":1709765734435,"results":"70","hashOfConfig":"65"},{"size":731,"mtime":1678154646184,"results":"71","hashOfConfig":"65"},{"size":5282,"mtime":1689124114281,"results":"72","hashOfConfig":"65"},{"size":2441,"mtime":1683162042541,"results":"73","hashOfConfig":"65"},{"size":3639,"mtime":1700492614539,"results":"74","hashOfConfig":"65"},{"size":3696,"mtime":1704729547060,"results":"75","hashOfConfig":"65"},{"size":2433,"mtime":1710253049851,"results":"76","hashOfConfig":"65"},{"size":11058,"mtime":1713818627481,"results":"77","hashOfConfig":"65"},{"size":11266,"mtime":1704729547060,"results":"78","hashOfConfig":"65"},{"size":4024,"mtime":1696949980228,"results":"79","hashOfConfig":"65"},{"size":3803,"mtime":1696949980229,"results":"80","hashOfConfig":"65"},{"size":18065,"mtime":1689544832529,"results":"81","hashOfConfig":"65"},{"size":6706,"mtime":1694808594890,"results":"82","hashOfConfig":"65"},{"size":7180,"mtime":1704729547060,"results":"83","hashOfConfig":"65"},{"size":2925,"mtime":1678154646185,"results":"84","hashOfConfig":"65"},{"size":2617,"mtime":1709767513520,"results":"85","hashOfConfig":"65"},{"size":5823,"mtime":1700492614539,"results":"86","hashOfConfig":"65"},{"size":1223,"mtime":1678154646185,"results":"87","hashOfConfig":"65"},{"size":13003,"mtime":1700789858609,"results":"88","hashOfConfig":"65"},{"size":3381,"mtime":1678154646185,"results":"89","hashOfConfig":"65"},{"size":1248,"mtime":1683162042542,"results":"90","hashOfConfig":"65"},{"size":1819,"mtime":1700492614539,"results":"91","hashOfConfig":"65"},{"size":1919,"mtime":1678154646186,"results":"92","hashOfConfig":"65"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"15oh38p",{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106"},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122"},{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","suppressedMessages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","suppressedMessages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"18quu25",{"filePath":"150","messages":"151","suppressedMessages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","suppressedMessages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","suppressedMessages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","suppressedMessages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","suppressedMessages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","suppressedMessages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","suppressedMessages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","suppressedMessages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","suppressedMessages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","suppressedMessages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","suppressedMessages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"183","messages":"184","suppressedMessages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","suppressedMessages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189"},{"filePath":"190","messages":"191","suppressedMessages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193"},{"filePath":"194","messages":"195","suppressedMessages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","suppressedMessages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"200","messages":"201","suppressedMessages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"203","messages":"204","suppressedMessages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206"},{"filePath":"207","messages":"208","suppressedMessages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"210","messages":"211","suppressedMessages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"213","messages":"214","suppressedMessages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216"},{"filePath":"217","messages":"218","suppressedMessages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"220","messages":"221","suppressedMessages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223"},{"filePath":"224","messages":"225","suppressedMessages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"227","messages":"228","suppressedMessages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"230","messages":"231","suppressedMessages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"233","messages":"234","suppressedMessages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/src/chunk_response_parser.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/src/converters.ts",["236","237"],["238","239","240","241"],"﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * @module Utils\n */\n\nimport { keccak256 } from 'ethereum-cryptography/keccak.js';\nimport { bytesToUtf8, utf8ToBytes as ecUtf8ToBytes } from 'ethereum-cryptography/utils.js';\nimport { Address, Bytes, HexString, Numbers, ValueTypes } from 'web3-types';\nimport {\n\tisAddress,\n\tisHex,\n\tisHexStrict,\n\tisInt,\n\tisUInt,\n\tisNullish,\n\tutils,\n\tutils as validatorUtils,\n\tvalidator,\n} from 'web3-validator';\n\nimport {\n\tHexProcessingError,\n\tInvalidAddressError,\n\tInvalidBooleanError,\n\tInvalidBytesError,\n\tInvalidNumberError,\n\tInvalidUnitError,\n} from 'web3-errors';\nimport { isUint8Array } from './uint8array.js';\n\n// Ref: https://ethdocs.org/en/latest/ether.html\n// Note: this could be simplified using ** operator, but babel does not handle it well (https://github.com/babel/babel/issues/13109)\n/** @internal */\nexport const ethUnitMap = {\n\tnoether: BigInt(0),\n\twei: BigInt(1),\n\tkwei: BigInt(1000),\n\tKwei: BigInt(1000),\n\tbabbage: BigInt(1000),\n\tfemtoether: BigInt(1000),\n\tmwei: BigInt(1000000),\n\tMwei: BigInt(1000000),\n\tlovelace: BigInt(1000000),\n\tpicoether: BigInt(1000000),\n\tgwei: BigInt(1000000000),\n\tGwei: BigInt(1000000000),\n\tshannon: BigInt(1000000000),\n\tnanoether: BigInt(1000000000),\n\tnano: BigInt(1000000000),\n\tszabo: BigInt(1000000000000),\n\tmicroether: BigInt(1000000000000),\n\tmicro: BigInt(1000000000000),\n\tfinney: BigInt(1000000000000000),\n\tmilliether: BigInt(1000000000000000),\n\tmilli: BigInt(1000000000000000),\n\tether: BigInt('1000000000000000000'),\n\tkether: BigInt('1000000000000000000000'),\n\tgrand: BigInt('1000000000000000000000'),\n\tmether: BigInt('1000000000000000000000000'),\n\tgether: BigInt('1000000000000000000000000000'),\n\ttether: BigInt('1000000000000000000000000000000'),\n};\n\nconst PrecisionLossWarning = 'Warning: Using type `number` with values that are large or contain many decimals may cause loss of precision, it is recommended to use type `string` or `BigInt` when using conversion methods';\n\nexport type EtherUnits = keyof typeof ethUnitMap;\n/**\n * Convert a value from bytes to Uint8Array\n * @param data - Data to be converted\n * @returns - The Uint8Array representation of the input data\n *\n * @example\n * ```ts\n * console.log(web3.utils.bytesToUint8Array(\"0xab\")));\n * > Uint8Array(1) [ 171 ]\n * ```\n */\nexport const bytesToUint8Array = (data: Bytes): Uint8Array | never => {\n\tvalidator.validate(['bytes'], [data]);\n\n\tif (isUint8Array(data)) {\n\t\treturn data;\n\t}\n\n\tif (Array.isArray(data)) {\n\t\treturn new Uint8Array(data);\n\t}\n\n\tif (typeof data === 'string') {\n\t\treturn validatorUtils.hexToUint8Array(data);\n\t}\n\n\tthrow new InvalidBytesError(data);\n};\n\n/**\n * @internal\n */\nconst { uint8ArrayToHexString } = validatorUtils;\n\n/**\n * Convert a byte array to a hex string\n * @param bytes - Byte array to be converted\n * @returns - The hex string representation of the input byte array\n *\n * @example\n * ```ts\n * console.log(web3.utils.bytesToHex(new Uint8Array([72, 12])));\n * > \"0x480c\"\n *\n */\nexport const bytesToHex = (bytes: Bytes): HexString =>\n\tuint8ArrayToHexString(bytesToUint8Array(bytes));\n\n/**\n * Convert a hex string to a byte array\n * @param hex - Hex string to be converted\n * @returns - The byte array representation of the input hex string\n *\n * @example\n * ```ts\n * console.log(web3.utils.hexToBytes('0x74657374'));\n * > Uint8Array(4) [ 116, 101, 115, 116 ]\n * ```\n */\nexport const hexToBytes = (bytes: HexString): Uint8Array => {\n\tif (typeof bytes === 'string' && bytes.slice(0, 2).toLowerCase() !== '0x') {\n\t\treturn bytesToUint8Array(`0x${bytes}`);\n\t}\n\treturn bytesToUint8Array(bytes);\n};\n\n/**\n * Converts value to it's number representation\n * @param value - Hex string to be converted\n * @returns - The number representation of the input value\n *\n * @example\n * ```ts\n * conoslle.log(web3.utils.hexToNumber('0xa'));\n * > 10\n * ```\n */\nexport const hexToNumber = (value: HexString): bigint | number => {\n\tvalidator.validate(['hex'], [value]);\n\n\t// To avoid duplicate code and circular dependency we will\n\t// use `hexToNumber` implementation from `web3-validator`\n\treturn validatorUtils.hexToNumber(value);\n};\n\n/**\n * Converts value to it's number representation @alias `hexToNumber`\n */\nexport const toDecimal = hexToNumber;\n\n/**\n * Converts value to it's hex representation\n * @param value - Value to be converted\n * @param hexstrict - Add padding to converted value if odd, to make it hexstrict\n * @returns - The hex representation of the input value\n *\n * @example\n * ```ts\n * console.log(web3.utils.numberToHex(10));\n * > \"0xa\"\n * ```\n */\nexport const numberToHex = (value: Numbers, hexstrict?: boolean): HexString => {\n\tif (typeof value !== 'bigint') validator.validate(['int'], [value]);\n\t// To avoid duplicate code and circular dependency we will\n\t// use `numberToHex` implementation from `web3-validator`\n\tlet updatedValue = validatorUtils.numberToHex(value);\n\tif (hexstrict) {\n\t\tif (!updatedValue.startsWith('-') && updatedValue.length % 2 === 1) {\n\t\t\t// To avoid duplicate a circular dependency we will not be using the padLeft method\n\t\t\tupdatedValue = '0x0'.concat(updatedValue.slice(2));\n\t\t} else if (updatedValue.length % 2 === 0 && updatedValue.startsWith('-'))\n\t\t\tupdatedValue = '-0x0'.concat(updatedValue.slice(3));\n\t}\n\treturn updatedValue;\n};\n/**\n * Converts value to it's hex representation @alias `numberToHex`\n *\n */\nexport const fromDecimal = numberToHex;\n\n/**\n * Converts value to it's decimal representation in string\n * @param value - Hex string to be converted\n * @returns - The decimal representation of the input value\n *\n * @example\n * ```ts\n * console.log(web3.utils.hexToNumberString('0xa'));\n * > \"10\"\n * ```\n */\nexport const hexToNumberString = (data: HexString): string => hexToNumber(data).toString();\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string\n * @param str - Utf8 string to be converted\n * @returns - The hex representation of the input string\n *\n * @example\n * ```ts\n * console.log(utf8ToHex('web3.js'));\n * > \"0x776562332e6a73\"\n * ```\n *\n */\nexport const utf8ToHex = (str: string): HexString => {\n\tvalidator.validate(['string'], [str]);\n\n\t// To be compatible with 1.x trim null character\n\t// eslint-disable-next-line no-control-regex\n\tlet strWithoutNullCharacter = str.replace(/^(?:\\u0000)/, '');\n\t// eslint-disable-next-line no-control-regex\n\tstrWithoutNullCharacter = strWithoutNullCharacter.replace(/(?:\\u0000)$/, '');\n\n\treturn bytesToHex(new TextEncoder().encode(strWithoutNullCharacter));\n};\n\n/**\n * @alias utf8ToHex\n */\n\nexport const fromUtf8 = utf8ToHex;\n/**\n * @alias utf8ToHex\n */\nexport const stringToHex = utf8ToHex;\n\n/**\n * Should be called to get utf8 from it's hex representation\n * @param str - Hex string to be converted\n * @returns - Utf8 string\n *\n * @example\n * ```ts\n * console.log(web3.utils.hexToUtf8('0x48656c6c6f20576f726c64'));\n * > Hello World\n * ```\n */\nexport const hexToUtf8 = (str: HexString): string => bytesToUtf8(hexToBytes(str));\n\n/**\n * @alias hexToUtf8\n */\nexport const toUtf8 = (input: HexString | Uint8Array) => {\n\tif (typeof input === 'string') {\n\t\treturn hexToUtf8(input);\n\t}\n\tvalidator.validate(['bytes'], [input]);\n\treturn bytesToUtf8(input);\n};\n\nexport const utf8ToBytes = ecUtf8ToBytes;\n\n/**\n * @alias hexToUtf8\n */\nexport const hexToString = hexToUtf8;\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of ascii string\n * @param str - String to be converted to hex\n * @returns - Hex string\n *\n * @example\n * ```ts\n * console.log(web3.utils.asciiToHex('Hello World'));\n * > 0x48656c6c6f20576f726c64\n * ```\n */\nexport const asciiToHex = (str: string): HexString => {\n\tvalidator.validate(['string'], [str]);\n\tlet hexString = '';\n\tfor (let i = 0; i < str.length; i += 1) {\n\t\tconst hexCharCode = str.charCodeAt(i).toString(16);\n\t\t// might need a leading 0\n\t\thexString += hexCharCode.length % 2 !== 0 ? `0${hexCharCode}` : hexCharCode;\n\t}\n\treturn `0x${hexString}`;\n};\n\n/**\n * @alias asciiToHex\n */\nexport const fromAscii = asciiToHex;\n\n/**\n * Should be called to get ascii from it's hex representation\n * @param str - Hex string to be converted to ascii\n * @returns - Ascii string\n *\n * @example\n * ```ts\n * console.log(web3.utils.hexToAscii('0x48656c6c6f20576f726c64'));\n * > Hello World\n * ```\n */\nexport const hexToAscii = (str: HexString): string => {\n\tconst decoder = new TextDecoder('ascii');\n\treturn decoder.decode(hexToBytes(str));\n};\n\n/**\n * @alias hexToAscii\n */\nexport const toAscii = hexToAscii;\n\n/**\n * Auto converts any given value into it's hex representation.\n * @param value - Value to be converted to hex\n * @param returnType - If true, it will return the type of the value\n *\n * @example\n * ```ts\n * console.log(web3.utils.toHex(10));\n * > 0xa\n *\n * console.log(web3.utils.toHex('0x123', true));\n * > bytes\n *```\n */\nexport const toHex = (\n\tvalue: Numbers | Bytes | Address | boolean | object,\n\treturnType?: boolean,\n): HexString | ValueTypes => {\n\tif (typeof value === 'string' && isAddress(value)) {\n\t\treturn returnType ? 'address' : `0x${value.toLowerCase().replace(/^0x/i, '')}`;\n\t}\n\n\tif (typeof value === 'boolean') {\n\t\t// eslint-disable-next-line no-nested-ternary\n\t\treturn returnType ? 'bool' : value ? '0x01' : '0x00';\n\t}\n\n\tif (typeof value === 'number') {\n\t\t// eslint-disable-next-line no-nested-ternary\n\t\treturn returnType ? (value < 0 ? 'int256' : 'uint256') : numberToHex(value);\n\t}\n\n\tif (typeof value === 'bigint') {\n\t\treturn returnType ? 'bigint' : numberToHex(value);\n\t}\n\n\tif(isUint8Array(value)) {\n\t\treturn returnType ? 'bytes' : bytesToHex(value);\n\t}\n\n\tif (typeof value === 'object' && !!value) {\n\t\treturn returnType ? 'string' : utf8ToHex(JSON.stringify(value));\n\t}\n\n\tif (typeof value === 'string') {\n\t\tif (value.startsWith('-0x') || value.startsWith('-0X')) {\n\t\t\treturn returnType ? 'int256' : numberToHex(value);\n\t\t}\n\n\t\tif (isHexStrict(value)) {\n\t\t\treturn returnType ? 'bytes' : value;\n\t\t}\n\t\tif (isHex(value) && !isInt(value) && !isUInt(value)) {\n\t\t\treturn returnType ? 'bytes' : `0x${value}`;\n\t\t}\n\t\tif (isHex(value) && !isInt(value) && isUInt(value)) {\n\t\t\treturn returnType ? 'uint' : numberToHex(value);\n\t\t}\n\n\t\tif (!Number.isFinite(value)) {\n\t\t\treturn returnType ? 'string' : utf8ToHex(value);\n\t\t}\n\t}\n\n\tthrow new HexProcessingError(value);\n};\n\n/**\n * Converts any given value into it's number representation, if possible, else into it's bigint representation.\n * @param value - The value to convert\n * @returns - Returns the value in number or bigint representation\n *\n * @example\n * ```ts\n * console.log(web3.utils.toNumber(1));\n * > 1\n * console.log(web3.utils.toNumber(Number.MAX_SAFE_INTEGER));\n * > 9007199254740991\n *\n * console.log(web3.utils.toNumber(BigInt(Number.MAX_SAFE_INTEGER)));\n * > 9007199254740991\n *\n * console.log(web3.utils.toNumber(BigInt(Number.MAX_SAFE_INTEGER) + BigInt(1)));\n * > 9007199254740992n\n *\n * ```\n */\nexport const toNumber = (value: Numbers): number | bigint => {\n\tif (typeof value === 'number') {\n\t\t\tif (value > 1e+20) {\n\t\t\t\tconsole.warn(PrecisionLossWarning)\n                // JavaScript converts numbers >= 10^21 to scientific notation when coerced to strings,\n                // leading to potential parsing errors and incorrect representations.\n                // For instance, String(10000000000000000000000) yields '1e+22'.\n                // Using BigInt prevents this\n                return BigInt(value);\n            }\n\t\treturn value;\n\t}\n\n\tif (typeof value === 'bigint') {\n\t\treturn value >= Number.MIN_SAFE_INTEGER && value <= Number.MAX_SAFE_INTEGER\n\t\t\t? Number(value)\n\t\t\t: value;\n\t}\n\n\tif (typeof value === 'string' && isHexStrict(value)) {\n\t\treturn hexToNumber(value);\n\t}\n\n\ttry {\n\t\treturn toNumber(BigInt(value));\n\t} catch {\n\t\tthrow new InvalidNumberError(value);\n\t}\n};\n\n/**\n * Auto converts any given value into it's bigint representation\n *\n * @param value - The value to convert\n * @returns - Returns the value in bigint representation\n\n * @example\n * ```ts\n * console.log(web3.utils.toBigInt(1));\n * > 1n\n * ```\n */\nexport const toBigInt = (value: unknown): bigint => {\n\tif (typeof value === 'number') {\n\t\treturn BigInt(value);\n\t}\n\n\tif (typeof value === 'bigint') {\n\t\treturn value;\n\t}\n\n\t// isHex passes for dec, too\n\tif (typeof value === 'string' && isHex(value)) {\n\t\tif (value.startsWith('-')) {\n\t\t\treturn -BigInt(value.substring(1));\n\t\t}\n\t\treturn BigInt(value);\n\t}\n\n\tthrow new InvalidNumberError(value);\n};\n\n/**\n * Takes a number of wei and converts it to any other ether unit.\n * @param number - The value in wei\n * @param unit - The unit to convert to\n * @returns - Returns the converted value in the given unit\n *\n * @example\n * ```ts\n * console.log(web3.utils.fromWei(\"1\", \"ether\"));\n * > 0.000000000000000001\n *\n * console.log(web3.utils.fromWei(\"1\", \"shannon\"));\n * > 0.000000001\n * ```\n */\nexport const fromWei = (number: Numbers, unit: EtherUnits): string => {\n\tconst denomination = ethUnitMap[unit];\n\n\tif (!denomination) {\n\t\tthrow new InvalidUnitError(unit);\n\t}\n\n\t// value in wei would always be integer\n\t// 13456789, 1234\n\tconst value = String(toNumber(number));\n\n\t// count number of zeros in denomination\n\t// 1000000 -> 6\n\tconst numberOfZerosInDenomination = denomination.toString().length - 1;\n\n\tif (numberOfZerosInDenomination <= 0) {\n\t\treturn value.toString();\n\t}\n\n\t// pad the value with required zeros\n\t// 13456789 -> 13456789, 1234 -> 001234\n\tconst zeroPaddedValue = value.padStart(numberOfZerosInDenomination, '0');\n\n\t// get the integer part of value by counting number of zeros from start\n\t// 13456789 -> '13'\n\t// 001234 -> ''\n\tconst integer = zeroPaddedValue.slice(0, -numberOfZerosInDenomination);\n\n\t// get the fraction part of value by counting number of zeros backward\n\t// 13456789 -> '456789'\n\t// 001234 -> '001234'\n\tconst fraction = zeroPaddedValue.slice(-numberOfZerosInDenomination).replace(/\\.?0+$/, '');\n\n\tif (integer === '') {\n\t\treturn `0.${fraction}`;\n\t}\n\n\tif (fraction === '') {\n\t\treturn integer;\n\t}\n\n\treturn `${integer}.${fraction}`;\n};\n\n/**\n * Takes a number of a unit and converts it to wei.\n *\n * @param number - The number to convert.\n * @param unit - {@link EtherUnits} The unit of the number passed.\n * @returns The number converted to wei.\n *\n * @example\n * ```ts\n * console.log(web3.utils.toWei(\"0.001\", \"ether\"));\n * > 1000000000000000 //(wei)\n * ```\n */\n// todo in 1.x unit defaults to 'ether'\nexport const toWei = (number: Numbers, unit: EtherUnits): string => {\n\tvalidator.validate(['number'], [number]);\n\n\tconst denomination = ethUnitMap[unit];\n\n\tif (!denomination) {\n\t\tthrow new InvalidUnitError(unit);\n\t}\n\tlet parsedNumber = number;\n\tif (typeof parsedNumber === 'number'){\n\t\tif (parsedNumber  < 1e-15){\n\t\t\tconsole.warn(PrecisionLossWarning)\n\t\t}\n\t\tif (parsedNumber > 1e+20) {\n\t\t\tconsole.warn(PrecisionLossWarning)\n\n\t\t\tparsedNumber =  BigInt(parsedNumber);\n\t\t} else {\n\t\t\t// in case there is a decimal point, we need to convert it to string\n\t\t\tparsedNumber = parsedNumber.toLocaleString('fullwide', {useGrouping: false, maximumFractionDigits: 20})\n\t\t}\n\t}\n\t\n\t// if value is decimal e.g. 24.56 extract `integer` and `fraction` part\n\t// to avoid `fraction` to be null use `concat` with empty string\n\tconst [integer, fraction] = String(\n\t\ttypeof parsedNumber === 'string' && !isHexStrict(parsedNumber) ? parsedNumber : toNumber(parsedNumber),\n\t)\n\t\t.split('.')\n\t\t.concat('');\n\n\t// join the value removing `.` from\n\t// 24.56 -> 2456\n\t\n\tconst value = BigInt(`${integer}${fraction}`);\n\n\t// multiply value with denomination\n\t// 2456 * 1000000 -> 2456000000\n\tconst updatedValue = value * denomination;\n\n\t// count number of zeros in denomination\n\tconst numberOfZerosInDenomination = denomination.toString().length - 1;\n\n\t// check which either `fraction` or `denomination` have lower number of zeros\n\tconst decimals = Math.min(fraction.length, numberOfZerosInDenomination);\n\n\tif (decimals === 0) {\n\t\treturn updatedValue.toString();\n\t}\n\n\t// Add zeros to make length equal to required decimal points\n\t// If string is larger than decimal points required then remove last zeros\n\treturn updatedValue.toString().padStart(decimals, '0').slice(0, -decimals);\n};\n\n/**\n * Will convert an upper or lowercase Ethereum address to a checksum address.\n * @param address - An address string\n * @returns\tThe checksum address\n * @example\n * ```ts\n * web3.utils.toChecksumAddress('0xc1912fee45d61c87cc5ea59dae31190fffff232d');\n * > \"0xc1912fEE45d61C87Cc5EA59DaE31190FFFFf232d\"\n * ```\n */\nexport const toChecksumAddress = (address: Address): string => {\n\tif (!isAddress(address, false)) {\n\t\tthrow new InvalidAddressError(address);\n\t}\n\n\tconst lowerCaseAddress = address.toLowerCase().replace(/^0x/i, '');\n\n\t// calling `Uint8Array.from` because `noble-hashes` checks with `instanceof Uint8Array` that fails in some edge cases:\n\t// \thttps://github.com/paulmillr/noble-hashes/issues/25#issuecomment-1750106284\n\tconst hash = utils.uint8ArrayToHexString(\n\t\tkeccak256(validatorUtils.ensureIfUint8Array(utf8ToBytes(lowerCaseAddress))),\n\t);\n\n\tif (\n\t\tisNullish(hash) ||\n\t\thash === '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470'\n\t)\n\t\treturn ''; // // EIP-1052 if hash is equal to c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470, keccak was given empty data\n\n\tlet checksumAddress = '0x';\n\n\tconst addressHash = hash.replace(/^0x/i, '');\n\n\tfor (let i = 0; i < lowerCaseAddress.length; i += 1) {\n\t\t// If ith character is 8 to f then make it uppercase\n\t\tif (parseInt(addressHash[i], 16) > 7) {\n\t\t\tchecksumAddress += lowerCaseAddress[i].toUpperCase();\n\t\t} else {\n\t\t\tchecksumAddress += lowerCaseAddress[i];\n\t\t}\n\t}\n\treturn checksumAddress;\n};\n\nexport const toBool = (value: boolean | string | number | unknown): boolean => {\n\tif (typeof value === 'boolean') {\n\t\treturn value;\n\t}\n\n\tif (typeof value === 'number' && (value === 0 || value === 1)) {\n\t\treturn Boolean(value);\n\t}\n\n\tif (typeof value === 'bigint' && (value === BigInt(0) || value === BigInt(1))) {\n\t\treturn Boolean(value);\n\t}\n\n\tif (\n\t\ttypeof value === 'string' &&\n\t\t!isHexStrict(value) &&\n\t\t(value === '1' || value === '0' || value === 'false' || value === 'true')\n\t) {\n\t\tif (value === 'true') {\n\t\t\treturn true;\n\t\t}\n\t\tif (value === 'false') {\n\t\t\treturn false;\n\t\t}\n\t\treturn Boolean(Number(value));\n\t}\n\n\tif (typeof value === 'string' && isHexStrict(value) && (value === '0x1' || value === '0x0')) {\n\t\treturn Boolean(toNumber(value));\n\t}\n\n\tthrow new InvalidBooleanError(value);\n};\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/src/event_emitter.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/src/formatter.ts",["242"],[],"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { FormatterError } from 'web3-errors';\nimport {\n\tBytes,\n\tDataFormat,\n\tFMT_BYTES,\n\tFMT_NUMBER,\n\tFormatType,\n\tDEFAULT_RETURN_FORMAT,\n} from 'web3-types';\nimport { isNullish, isObject, JsonSchema, utils, ValidationSchemaInput } from 'web3-validator';\nimport { bytesToUint8Array, bytesToHex, numberToHex, toBigInt } from './converters.js';\nimport { mergeDeep } from './objects.js';\nimport { padLeft } from './string_manipulation.js';\nimport { isUint8Array, uint8ArrayConcat } from './uint8array.js';\n\nconst { parseBaseType } = utils;\n\nexport const isDataFormat = (dataFormat: unknown): dataFormat is DataFormat =>\n\ttypeof dataFormat === 'object' &&\n\t!isNullish(dataFormat) &&\n\t'number' in dataFormat &&\n\t'bytes' in dataFormat;\n\n/**\n * Finds the schema that corresponds to a specific data path within a larger JSON schema.\n * It works by iterating over the dataPath array and traversing the JSON schema one step at a time until it reaches the end of the path.\n *\n * @param schema - represents a JSON schema, which is an object that describes the structure of JSON data\n * @param dataPath - represents an array of strings that specifies the path to the data within the JSON schema\n * @param oneOfPath - represents an optional array of two-element tuples that specifies the \"oneOf\" option to choose, if the schema has oneOf and the data path can match multiple subschemas\n * @returns the JSON schema that matches the data path\n *\n */\nconst findSchemaByDataPath = (\n\tschema: JsonSchema,\n\tdataPath: string[],\n\toneOfPath: [string, number][] = [],\n): JsonSchema | undefined => {\n\tlet result: JsonSchema = { ...schema } as JsonSchema;\n\tlet previousDataPath: string | undefined;\n\n\tfor (const dataPart of dataPath) {\n\t\tif (result.oneOf && previousDataPath) {\n\t\t\tconst path = oneOfPath.find(function (element: [string, number]) {\n\t\t\t\treturn (this as unknown as string) === element[0];\n\t\t\t}, previousDataPath ?? '');\n\n\t\t\tif (path && path[0] === previousDataPath) {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n\t\t\t\tresult = result.oneOf[path[1]];\n\t\t\t}\n\t\t}\n\t\tif (!result.properties && !result.items) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (result.properties) {\n\t\t\tresult = (result.properties as Record<string, JsonSchema>)[dataPart];\n\t\t} else if (result.items && (result.items as JsonSchema).properties) {\n\t\t\tconst node = (result.items as JsonSchema).properties as Record<string, JsonSchema>;\n\n\t\t\tif (!node) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tresult = node[dataPart];\n\t\t} else if (result.items && isObject(result.items)) {\n\t\t\tresult = result.items;\n\t\t} else if (result.items && Array.isArray(result.items)) {\n\t\t\tresult = result.items[parseInt(dataPart, 10)];\n\t\t}\n\n\t\tif (result && dataPart) previousDataPath = dataPart;\n\t}\n\n\treturn result;\n};\n/**\n * Converts a value depending on the format\n * @param value - value to convert\n * @param ethType - The type of the value to be parsed\n * @param format - The format to be converted to\n * @returns - The value converted to the specified format\n */\nexport const convertScalarValue = (value: unknown, ethType: string, format: DataFormat) => {\n\ttry {\n\t\tconst { baseType, baseTypeSize } = parseBaseType(ethType);\n\t\tif (baseType === 'int' || baseType === 'uint') {\n\t\t\tswitch (format.number) {\n\t\t\t\tcase FMT_NUMBER.NUMBER:\n\t\t\t\t\treturn Number(toBigInt(value));\n\t\t\t\tcase FMT_NUMBER.HEX:\n\t\t\t\t\treturn numberToHex(toBigInt(value));\n\t\t\t\tcase FMT_NUMBER.STR:\n\t\t\t\t\treturn toBigInt(value).toString();\n\t\t\t\tcase FMT_NUMBER.BIGINT:\n\t\t\t\t\treturn toBigInt(value);\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new FormatterError(`Invalid format: ${String(format.number)}`);\n\t\t\t}\n\t\t}\n\t\tif (baseType === 'bytes') {\n\t\t\tlet paddedValue;\n\t\t\tif (baseTypeSize) {\n\t\t\t\tif (typeof value === 'string') paddedValue = padLeft(value, baseTypeSize * 2);\n\t\t\t\telse if (isUint8Array(value)) {\n\t\t\t\t\tpaddedValue = uint8ArrayConcat(\n\t\t\t\t\t\tnew Uint8Array(baseTypeSize - value.length),\n\t\t\t\t\t\tvalue,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tpaddedValue = value;\n\t\t\t}\n\t\t\tswitch (format.bytes) {\n\t\t\t\tcase FMT_BYTES.HEX:\n\t\t\t\t\treturn bytesToHex(bytesToUint8Array(paddedValue as Bytes));\n\t\t\t\tcase FMT_BYTES.UINT8ARRAY:\n\t\t\t\t\treturn bytesToUint8Array(paddedValue as Bytes);\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new FormatterError(`Invalid format: ${String(format.bytes)}`);\n\t\t\t}\n\t\t}\n\t} catch (error) {\n\t\t// If someone didn't use `eth` keyword we can return original value\n\t\t// as the scope of this code is formatting not validation\n\t\treturn value;\n\t}\n\n\treturn value;\n};\n/**\n * Converts the data to the specified format\n * @param data - data to convert\n * @param schema - The JSON schema that describes the structure of the data\n * @param dataPath - A string array that specifies the path to the data within the JSON schema\n * @param format  - The format to be converted to\n * @param oneOfPath - An optional array of two-element tuples that specifies the \"oneOf\" option to choose, if the schema has oneOf and the data path can match multiple subschemas\n * @returns - The data converted to the specified format\n */\nexport const convert = (\n\tdata: Record<string, unknown> | unknown[] | unknown,\n\tschema: JsonSchema,\n\tdataPath: string[],\n\tformat: DataFormat,\n\toneOfPath: [string, number][] = [],\n) => {\n\t// If it's a scalar value\n\tif (!isObject(data) && !Array.isArray(data)) {\n\t\treturn convertScalarValue(data, schema?.format as string, format);\n\t}\n\n\tconst object = data as Record<string, unknown>;\n\n\tfor (const [key, value] of Object.entries(object)) {\n\t\tdataPath.push(key);\n\t\tconst schemaProp = findSchemaByDataPath(schema, dataPath, oneOfPath);\n\n\t\t// If value is a scaler value\n\t\tif (isNullish(schemaProp)) {\n\t\t\tdelete object[key];\n\t\t\tdataPath.pop();\n\n\t\t\tcontinue;\n\t\t}\n\n\t\t// If value is an object, recurse into it\n\t\tif (isObject(value)) {\n\t\t\tconvert(value, schema, dataPath, format);\n\t\t\tdataPath.pop();\n\t\t\tcontinue;\n\t\t}\n\n\t\t// If value is an array\n\t\tif (Array.isArray(value)) {\n\t\t\tlet _schemaProp = schemaProp;\n\n\t\t\t// TODO This is a naive approach to solving the issue of\n\t\t\t// a schema using oneOf. This chunk of code was intended to handle\n\t\t\t// BlockSchema.transactions\n\t\t\t// TODO BlockSchema.transactions are not being formatted\n\t\t\tif (schemaProp?.oneOf !== undefined) {\n\t\t\t\t// The following code is basically saying:\n\t\t\t\t// if the schema specifies oneOf, then we are to loop\n\t\t\t\t// over each possible schema and check if they type of the schema\n\t\t\t\t// matches the type of value[0], and if so we use the oneOfSchemaProp\n\t\t\t\t// as the schema for formatting\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n\t\t\t\tschemaProp.oneOf.forEach((oneOfSchemaProp: JsonSchema, index: number) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\t!Array.isArray(schemaProp?.items) &&\n\t\t\t\t\t\t((typeof value[0] === 'object' &&\n\t\t\t\t\t\t\t(oneOfSchemaProp?.items as JsonSchema)?.type === 'object') ||\n\t\t\t\t\t\t\t(typeof value[0] === 'string' &&\n\t\t\t\t\t\t\t\t(oneOfSchemaProp?.items as JsonSchema)?.type !== 'object'))\n\t\t\t\t\t) {\n\t\t\t\t\t\t_schemaProp = oneOfSchemaProp;\n\t\t\t\t\t\toneOfPath.push([key, index]);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (isNullish(_schemaProp?.items)) {\n\t\t\t\t// Can not find schema for array item, delete that item\n\t\t\t\tdelete object[key];\n\t\t\t\tdataPath.pop();\n\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If schema for array items is a single type\n\t\t\tif (isObject(_schemaProp.items) && !isNullish(_schemaProp.items.format)) {\n\t\t\t\tfor (let i = 0; i < value.length; i += 1) {\n\t\t\t\t\t(object[key] as unknown[])[i] = convertScalarValue(\n\t\t\t\t\t\tvalue[i],\n\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n\t\t\t\t\t\t_schemaProp?.items?.format,\n\t\t\t\t\t\tformat,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tdataPath.pop();\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If schema for array items is an object\n\t\t\tif (!Array.isArray(_schemaProp?.items) && _schemaProp?.items?.type === 'object') {\n\t\t\t\tfor (const arrObject of value) {\n\t\t\t\t\tconvert(\n\t\t\t\t\t\tarrObject as Record<string, unknown> | unknown[],\n\t\t\t\t\t\tschema,\n\t\t\t\t\t\tdataPath,\n\t\t\t\t\t\tformat,\n\t\t\t\t\t\toneOfPath,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tdataPath.pop();\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If schema for array is a tuple\n\t\t\tif (Array.isArray(_schemaProp?.items)) {\n\t\t\t\tfor (let i = 0; i < value.length; i += 1) {\n\t\t\t\t\t(object[key] as unknown[])[i] = convertScalarValue(\n\t\t\t\t\t\tvalue[i],\n\t\t\t\t\t\t_schemaProp.items[i].format as string,\n\t\t\t\t\t\tformat,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tdataPath.pop();\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\tobject[key] = convertScalarValue(value, schemaProp.format as string, format);\n\n\t\tdataPath.pop();\n\t}\n\n\treturn object;\n};\n\nexport const format = <\n\tDataType extends Record<string, unknown> | unknown[] | unknown,\n\tReturnType extends DataFormat,\n>(\n\tschema: ValidationSchemaInput | JsonSchema,\n\tdata: DataType,\n\treturnFormat: ReturnType = DEFAULT_RETURN_FORMAT as ReturnType,\n): FormatType<DataType, ReturnType> => {\n\tlet dataToParse: Record<string, unknown> | unknown[] | unknown;\n\n\tif (isObject(data)) {\n\t\tdataToParse = mergeDeep({}, data);\n\t} else if (Array.isArray(data)) {\n\t\tdataToParse = [...data];\n\t} else {\n\t\tdataToParse = data;\n\t}\n\n\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\tconst jsonSchema: JsonSchema = isObject(schema) ? schema : utils.ethAbiToJsonSchema(schema);\n\n\tif (!jsonSchema.properties && !jsonSchema.items && !jsonSchema.format) {\n\t\tthrow new FormatterError('Invalid json schema for formatting');\n\t}\n\n\treturn convert(dataToParse, jsonSchema, [], returnFormat) as FormatType<\n\t\ttypeof data,\n\t\tReturnType\n\t>;\n};\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/src/hash.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/src/index.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/src/json_rpc.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/src/objects.ts",[],["243"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/src/promise_helpers.ts",["244","245","246"],[],"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { isNullish } from 'web3-validator';\n\nexport type Timer = ReturnType<typeof setInterval>;\nexport type Timeout = ReturnType<typeof setTimeout>;\n\n\n/**\n * An alternative to the node function `isPromise` that exists in `util/types` because it is not available on the browser.\n * @param object - to check if it is a `Promise`\n * @returns `true` if it is an `object` or a `function` that has a `then` function. And returns `false` otherwise.\n */\nexport function isPromise(object: unknown): boolean {\n\treturn (\n\t\t(typeof object === 'object' || typeof object === 'function') &&\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\ttypeof (object as { then: unknown }).then === 'function'\n\t);\n}\n\nexport type AsyncFunction<T, K = unknown> = (...args: K[]) => Promise<T>;\n\nexport function waitWithTimeout<T>(\n\tawaitable: Promise<T> | AsyncFunction<T>,\n\ttimeout: number,\n\terror: Error,\n): Promise<T>;\nexport function waitWithTimeout<T>(\n\tawaitable: Promise<T> | AsyncFunction<T>,\n\ttimeout: number,\n): Promise<T | undefined>;\n\n/**\n * Wait for a promise but interrupt it if it did not resolve within a given timeout.\n * If the timeout reached, before the promise code resolve, either throw an error if an error object was provided, or return `undefined`.\n * @param awaitable - The promise or function to wait for.\n * @param timeout - The timeout in milliseconds.\n * @param error - (Optional) The error to throw if the timeout reached.\n */\nexport async function waitWithTimeout<T>(\n\tawaitable: Promise<T> | AsyncFunction<T>,\n\ttimeout: number,\n\terror?: Error,\n): Promise<T | undefined> {\n\tlet timeoutId: Timeout | undefined;\n\tconst result = await Promise.race([\n\t\tawaitable instanceof Promise ? awaitable : awaitable(),\n\t\tnew Promise<undefined | Error>((resolve, reject) => {\n\t\t\ttimeoutId = setTimeout(() => (error ? reject(error) : resolve(undefined)), timeout);\n\t\t}),\n\t]);\n\tif (timeoutId) {\n\t\tclearTimeout(timeoutId);\n\t}\n\tif (result instanceof Error) {\n\t\tthrow result;\n\t}\n\treturn result;\n}\n\n\n/**\n * Repeatedly calls an async function with a given interval until the result of the function is defined (not undefined or null),\n * or until a timeout is reached. It returns promise and intervalId.\n * @param func - The function to call.\n * @param interval - The interval in milliseconds.\n */\nexport function pollTillDefinedAndReturnIntervalId<T>(\n\tfunc: AsyncFunction<T>,\n\tinterval: number,\n): [Promise<Exclude<T, undefined>>, Timer] {\n\n\tlet intervalId: Timer | undefined;\n\tconst polledRes = new Promise<Exclude<T, undefined>>((resolve, reject) => {\n\t\tintervalId = setInterval(function intervalCallbackFunc(){\n\t\t\t(async () => {\n\t\t\t\ttry {\n\t\t\t\t\tconst res = await waitWithTimeout(func, interval);\n\n\t\t\t\t\tif (!isNullish(res)) {\n\t\t\t\t\t\tclearInterval(intervalId);\n\t\t\t\t\t\tresolve(res as unknown as Exclude<T, undefined>);\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tclearInterval(intervalId);\n\t\t\t\t\treject(error);\n\t\t\t\t}\n\t\t\t})() as unknown;\n\t\t\treturn intervalCallbackFunc;}() // this will immediate invoke first call\n\t\t\t, interval);\n\t});\n\n\treturn [polledRes as unknown as Promise<Exclude<T, undefined>>, intervalId!];\n}\n\n/**\n * Repeatedly calls an async function with a given interval until the result of the function is defined (not undefined or null),\n * or until a timeout is reached.\n * pollTillDefinedAndReturnIntervalId() function should be used instead of pollTillDefined if you need IntervalId in result.\n * This function will be deprecated in next major release so use pollTillDefinedAndReturnIntervalId(). \n * @param func - The function to call.\n * @param interval - The interval in milliseconds.\n */\nexport async function pollTillDefined<T>(\n\tfunc: AsyncFunction<T>,\n\tinterval: number,\n): Promise<Exclude<T, undefined>> {\n\treturn pollTillDefinedAndReturnIntervalId(func, interval)[0];\n}\n/**\n * Enforce a timeout on a promise, so that it can be rejected if it takes too long to complete\n * @param timeout - The timeout to enforced in milliseconds.\n * @param error - The error to throw if the timeout is reached.\n * @returns A tuple of the timeout id and the promise that will be rejected if the timeout is reached.\n *\n * @example\n * ```ts\n * const [timerId, promise] = web3.utils.rejectIfTimeout(100, new Error('time out'));\n * ```\n */\nexport function rejectIfTimeout(timeout: number, error: Error): [Timer, Promise<never>] {\n\tlet timeoutId: Timer | undefined;\n\tconst rejectOnTimeout = new Promise<never>((_, reject) => {\n\t\ttimeoutId = setTimeout(() => {\n\t\t\treject(error);\n\t\t}, timeout);\n\t});\n\treturn [timeoutId!, rejectOnTimeout];\n}\n/**\n * Sets an interval that repeatedly executes the given cond function with the specified interval between each call.\n * If the condition is met, the interval is cleared and a Promise that rejects with the returned value is returned.\n * @param cond - The function/confition to call.\n * @param interval - The interval in milliseconds.\n * @returns - an array with the interval ID and the Promise.\n */\nexport function rejectIfConditionAtInterval<T>(\n\tcond: AsyncFunction<T | undefined>,\n\tinterval: number,\n): [Timer, Promise<never>] {\n\tlet intervalId: Timer | undefined;\n\tconst rejectIfCondition = new Promise<never>((_, reject) => {\n\t\tintervalId = setInterval(() => {\n\t\t\t(async () => {\n\t\t\t\tconst error = await cond();\n\t\t\t\tif (error) {\n\t\t\t\t\tclearInterval(intervalId);\n\t\t\t\t\treject(error);\n\t\t\t\t}\n\t\t\t})() as unknown;\n\t\t}, interval);\n\t});\n\treturn [intervalId!, rejectIfCondition];\n}\n\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/src/random.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/src/socket_provider.ts",[],["247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/src/string_manipulation.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/src/uint8array.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/src/uuid.ts",[],["272","273","274","275"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/src/validation.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/src/web3_deferred_promise.ts",[],["276","277"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/src/web3_eip1193_provider.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/test/fixtures/converters.ts",[],["278","279","280","281","282","283","284"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/test/fixtures/formatter.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/test/fixtures/hash.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/test/fixtures/hugeData.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/test/fixtures/json_rpc.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/test/fixtures/objects.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/test/fixtures/random.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/test/fixtures/string_manipulation.ts",[],["285"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/test/fixtures/uint8array.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/test/fixtures/validation.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/test/integration/event_emitter.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/test/unit/chunk_response_parser.test.ts",[],["286"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/test/unit/converters.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/test/unit/converters_dom.test.ts",["287"],["288","289","290"],"﻿/**\n * @jest-environment jsdom\n */\n\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n// this file contains the unit test for the event emitter in the DOM environment\n// it is executed in the jsdom environment (see \"@jest-environment jsdom\" in the top comment of this file)\n\n// ignore the following rule to allow keeping `@jest-environment jsdom` on top:\n// eslint-disable-next-line header/header\nimport { TextDecoder, TextEncoder } from 'util';\n// polyfill for jsdom\n// @ts-expect-error ignore the error 'Type 'typeof TextDecoder' is not assignable to type ...'\nglobal.TextDecoder = TextDecoder;\nglobal.TextEncoder = TextEncoder;\n\n/* eslint-disable import/first */\nimport {\n\tasciiToHex,\n\tbytesToHex,\n\tfromAscii,\n\tfromDecimal,\n\tfromUtf8,\n\tfromWei,\n\thexToAscii,\n\thexToBytes,\n\thexToNumber,\n\thexToNumberString,\n\thexToString,\n\thexToUtf8,\n\tnumberToHex,\n\tstringToHex,\n\ttoAscii,\n\ttoDecimal,\n\ttoHex,\n\ttoNumber,\n\ttoUtf8,\n\ttoWei,\n\tutf8ToHex,\n\ttoChecksumAddress,\n\tbytesToUint8Array,\n\ttoBigInt,\n\ttoBool,\n} from '../../src/converters';\n\nimport {\n\tasciiToHexValidData,\n\tbytesToHexInvalidData,\n\tbytesToHexValidData,\n\tfromWeiInvalidData,\n\tfromWeiValidData,\n\thexToAsciiValidData,\n\thexToBytesInvalidData,\n\thexToBytesValidData,\n\thexToNumberInvalidData,\n\thexToNumberValidData,\n\thexToUtf8InvalidData,\n\thexToUtf8ValidData,\n\ttoUtf8ValidData,\n\tnumberToHexInvalidData,\n\tnumberToHexValidData,\n\ttoHexValidData,\n\ttoHexInvalidData,\n\ttoWeiInvalidData,\n\ttoWeiValidData,\n\tutf8ToHexInvalidData,\n\tutf8ToHexValidData,\n\ttoCheckSumValidData,\n\tbytesToUint8ArrayInvalidData,\n\tbytesToUint8ArrayValidData,\n\ttoBigIntValidData,\n\ttoBigIntInvalidData,\n\ttoCheckSumInvalidData,\n\tnumberToHexstrictValidData,\n\ttoBoolValidData,\n\ttoBoolInvalidData,\n} from '../fixtures/converters';\n\ndescribe('converters', () => {\n\tdescribe('bytesToHex', () => {\n\t\tdescribe('valid cases', () => {\n\t\t\tit.each(bytesToHexValidData)('%s', (input, output) => {\n\t\t\t\texpect(bytesToHex(input)).toEqual(output);\n\t\t\t});\n\t\t});\n\n\t\tdescribe('invalid cases', () => {\n\t\t\tit.each(bytesToHexInvalidData)('%s', (input, output) => {\n\t\t\t\texpect(() => bytesToHex(input)).toThrow(output);\n\t\t\t});\n\t\t});\n\t});\n\n\tdescribe('hexToBytes', () => {\n\t\tdescribe('valid cases', () => {\n\t\t\tit.each(hexToBytesValidData)('%s', (input, output) => {\n\t\t\t\texpect(hexToBytes(input)).toEqual(output);\n\t\t\t});\n\t\t});\n\n\t\tdescribe('invalid cases', () => {\n\t\t\tit.each(hexToBytesInvalidData)('%s', (input, output) => {\n\t\t\t\texpect(() => hexToBytes(input)).toThrow(output);\n\t\t\t});\n\t\t});\n\t});\n\n\tdescribe('numberToHex', () => {\n\t\tdescribe('valid cases', () => {\n\t\t\tit.each(numberToHexValidData)('%s', (input, output) => {\n\t\t\t\texpect(numberToHex(input)).toEqual(output);\n\t\t\t});\n\t\t});\n\n\t\tdescribe('invalid cases', () => {\n\t\t\tit.each(numberToHexInvalidData)('%s', (input, output) => {\n\t\t\t\texpect(() => numberToHex(input)).toThrow(output);\n\t\t\t});\n\t\t});\n\n\t\tdescribe('valid hexstrict cases', () => {\n\t\t\tit.each(numberToHexstrictValidData)('%s', (input, output) => {\n\t\t\t\texpect(numberToHex(input, true)).toEqual(output);\n\t\t\t});\n\t\t});\n\t});\n\n\tdescribe('fromDecimal', () => {\n\t\tdescribe('valid cases', () => {\n\t\t\tit.each(numberToHexValidData)('%s', (input, output) => {\n\t\t\t\texpect(fromDecimal(input)).toEqual(output);\n\t\t\t});\n\t\t});\n\n\t\tdescribe('invalid cases', () => {\n\t\t\tit.each(numberToHexInvalidData)('%s', (input, output) => {\n\t\t\t\texpect(() => fromDecimal(input)).toThrow(output);\n\t\t\t});\n\t\t});\n\t});\n\n\tdescribe('hexToNumber', () => {\n\t\tdescribe('valid cases', () => {\n\t\t\tit.each(hexToNumberValidData)('%s', (input, output) => {\n\t\t\t\texpect(hexToNumber(input)).toEqual(output);\n\t\t\t});\n\t\t});\n\n\t\tdescribe('invalid cases', () => {\n\t\t\tit.each(hexToNumberInvalidData)('%s', (input, output) => {\n\t\t\t\texpect(() => hexToNumber(input)).toThrow(output);\n\t\t\t});\n\t\t});\n\t});\n\n\tdescribe('toDecimal', () => {\n\t\tdescribe('valid cases', () => {\n\t\t\tit.each(hexToNumberValidData)('%s', (input, output) => {\n\t\t\t\texpect(toDecimal(input)).toEqual(output);\n\t\t\t});\n\t\t});\n\n\t\tdescribe('invalid cases', () => {\n\t\t\tit.each(hexToNumberInvalidData)('%s', (input, output) => {\n\t\t\t\texpect(() => toDecimal(input)).toThrow(output);\n\t\t\t});\n\t\t});\n\t});\n\n\tdescribe('hexToNumberString', () => {\n\t\tit.each(hexToNumberValidData)('%s', (input, output) => {\n\t\t\texpect(hexToNumberString(input)).toEqual(output.toString());\n\t\t});\n\t});\n\n\tdescribe('utf8ToHex', () => {\n\t\tdescribe('valid cases', () => {\n\t\t\tit.each(utf8ToHexValidData)('%s', (input, output) => {\n\t\t\t\texpect(utf8ToHex(input)).toEqual(output);\n\t\t\t});\n\t\t});\n\n\t\tdescribe('invalid cases', () => {\n\t\t\tit.each(utf8ToHexInvalidData)('%s', (input, output) => {\n\t\t\t\texpect(() => utf8ToHex(input)).toThrow(output);\n\t\t\t});\n\t\t});\n\t});\n\n\tdescribe('fromUtf8', () => {\n\t\tdescribe('valid cases', () => {\n\t\t\tit.each(utf8ToHexValidData)('%s', (input, output) => {\n\t\t\t\texpect(fromUtf8(input)).toEqual(output);\n\t\t\t});\n\t\t});\n\n\t\tdescribe('invalid cases', () => {\n\t\t\tit.each(utf8ToHexInvalidData)('%s', (input, output) => {\n\t\t\t\texpect(() => fromUtf8(input)).toThrow(output);\n\t\t\t});\n\t\t});\n\t});\n\n\tdescribe('stringToHex', () => {\n\t\tdescribe('valid cases', () => {\n\t\t\tit.each(utf8ToHexValidData)('%s', (input, output) => {\n\t\t\t\texpect(stringToHex(input)).toEqual(output);\n\t\t\t});\n\t\t});\n\n\t\tdescribe('invalid cases', () => {\n\t\t\tit.each(utf8ToHexInvalidData)('%s', (input, output) => {\n\t\t\t\texpect(() => stringToHex(input)).toThrow(output);\n\t\t\t});\n\t\t});\n\t});\n\n\tdescribe('hexToUtf8', () => {\n\t\tdescribe('valid cases', () => {\n\t\t\tit.each(hexToUtf8ValidData)('%s', (input, output) => {\n\t\t\t\texpect(hexToUtf8(input)).toEqual(output);\n\t\t\t});\n\t\t});\n\n\t\tdescribe('invalid cases', () => {\n\t\t\tit.each(hexToUtf8InvalidData)('%s', (input, output) => {\n\t\t\t\texpect(() => hexToUtf8(input)).toThrow(output);\n\t\t\t});\n\t\t});\n\t});\n\n\tdescribe('toUtf8', () => {\n\t\tdescribe('valid cases', () => {\n\t\t\tit.each(toUtf8ValidData)('%s', (input, output) => {\n\t\t\t\texpect(toUtf8(input)).toEqual(output);\n\t\t\t});\n\t\t});\n\n\t\tdescribe('invalid cases', () => {\n\t\t\tit.each(hexToUtf8InvalidData)('%s', (input, output) => {\n\t\t\t\texpect(() => toUtf8(input)).toThrow(output);\n\t\t\t});\n\t\t});\n\t});\n\n\tdescribe('hexToString', () => {\n\t\tdescribe('valid cases', () => {\n\t\t\tit.each(hexToUtf8ValidData)('%s', (input, output) => {\n\t\t\t\texpect(hexToString(input)).toEqual(output);\n\t\t\t});\n\t\t});\n\n\t\tdescribe('invalid cases', () => {\n\t\t\tit.each(hexToUtf8InvalidData)('%s', (input, output) => {\n\t\t\t\texpect(() => hexToString(input)).toThrow(output);\n\t\t\t});\n\t\t});\n\t});\n\n\tdescribe('asciiToHex', () => {\n\t\tdescribe('valid cases', () => {\n\t\t\tit.each(asciiToHexValidData)('%s', (input, output) => {\n\t\t\t\texpect(asciiToHex(input)).toEqual(output);\n\t\t\t});\n\t\t});\n\n\t\tdescribe('invalid cases', () => {\n\t\t\tit.each(utf8ToHexInvalidData)('%s', (input, output) => {\n\t\t\t\texpect(() => asciiToHex(input)).toThrow(output);\n\t\t\t});\n\t\t});\n\t});\n\n\tdescribe('fromAscii', () => {\n\t\tdescribe('valid cases', () => {\n\t\t\tit.each(asciiToHexValidData)('%s', (input, output) => {\n\t\t\t\texpect(fromAscii(input)).toEqual(output);\n\t\t\t});\n\t\t});\n\n\t\tdescribe('invalid cases', () => {\n\t\t\tit.each(utf8ToHexInvalidData)('%s', (input, output) => {\n\t\t\t\texpect(() => fromAscii(input)).toThrow(output);\n\t\t\t});\n\t\t});\n\t});\n\n\tdescribe('hexToAscii', () => {\n\t\tdescribe('valid cases', () => {\n\t\t\tit.each(hexToAsciiValidData)('%s', (input, output) => {\n\t\t\t\texpect(hexToAscii(input)).toEqual(output);\n\t\t\t});\n\t\t});\n\n\t\tdescribe('invalid cases', () => {\n\t\t\tit.each(hexToUtf8InvalidData)('%s', (input, output) => {\n\t\t\t\texpect(() => hexToAscii(input)).toThrow(output);\n\t\t\t});\n\t\t});\n\t});\n\n\tdescribe('toAscii', () => {\n\t\tdescribe('valid cases', () => {\n\t\t\tit.each(hexToAsciiValidData)('%s', (input, output) => {\n\t\t\t\texpect(toAscii(input)).toEqual(output);\n\t\t\t});\n\t\t});\n\n\t\tdescribe('invalid cases', () => {\n\t\t\tit.each(hexToUtf8InvalidData)('%s', (input, output) => {\n\t\t\t\texpect(() => toAscii(input)).toThrow(output);\n\t\t\t});\n\t\t});\n\t});\n\n\tdescribe('toHex', () => {\n\t\tdescribe('return value', () => {\n\t\t\tit.each(toHexValidData)('%s', (input, output) => {\n\t\t\t\texpect(toHex(input)).toEqual(output[0]);\n\t\t\t});\n\t\t});\n\n\t\tdescribe('return type', () => {\n\t\t\tit.each(toHexValidData)('%s', (input, output) => {\n\t\t\t\texpect(toHex(input, true)).toEqual(output[1]);\n\t\t\t});\n\t\t});\n\n\t\tdescribe('invalid cases', () => {\n\t\t\tit.each(toHexInvalidData)('%s', (input, output) => {\n\t\t\t\texpect(() => toHex(input)).toThrow(output);\n\t\t\t});\n\t\t});\n\t});\n\n\tdescribe('toNumber', () => {\n\t\tit.each([...hexToNumberValidData, [123, 123], ['123', 123]])('%s', (input, output) => {\n\t\t\texpect(toNumber(input)).toEqual(output);\n\t\t});\n\t});\n\n\tdescribe('fromWei', () => {\n\t\tdescribe('valid cases', () => {\n\t\t\tit.each(fromWeiValidData)('%s', (input, output) => {\n\t\t\t\texpect(fromWei(input[0], input[1])).toEqual(output);\n\t\t\t});\n\t\t});\n\n\t\tdescribe('invalid cases', () => {\n\t\t\tit.each(fromWeiInvalidData)('%s', (input, output) => {\n\t\t\t\texpect(() => fromWei(input[0], input[1])).toThrow(output);\n\t\t\t});\n\t\t});\n\t});\n\n\tdescribe('toWei', () => {\n\t\tdescribe('valid cases', () => {\n\t\t\tit.each(toWeiValidData)('%s', (input, output) => {\n\t\t\t\texpect(toWei(output, input[1])).toEqual(input[0].toString());\n\t\t\t});\n\t\t});\n\n\t\tdescribe('invalid cases', () => {\n\t\t\tit.each(toWeiInvalidData)('%s', (input, output) => {\n\t\t\t\texpect(() => toWei(input[0], input[1])).toThrow(output);\n\t\t\t});\n\t\t});\n\t});\n\tdescribe('toChecksumAddress', () => {\n\t\tdescribe('valid cases', () => {\n\t\t\tit.each(toCheckSumValidData)('%s', (input, output) => {\n\t\t\t\texpect(toChecksumAddress(input)).toEqual(output);\n\t\t\t});\n\t\t});\n\t\tdescribe('invalid cases', () => {\n\t\t\tit.each(toCheckSumInvalidData)('%s', (input, output) => {\n\t\t\t\texpect(() => toChecksumAddress(input)).toThrow(output);\n\t\t\t});\n\t\t});\n\t});\n\tdescribe('bytesToUint8Array', () => {\n\t\tdescribe('bytesToUint8Array', () => {\n\t\t\tdescribe('valid cases', () => {\n\t\t\t\tit.each(bytesToUint8ArrayValidData)('%s', (input, output) => {\n\t\t\t\t\texpect(bytesToUint8Array(input)).toEqual(output);\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tdescribe('invalid cases', () => {\n\t\t\t\tit.each(bytesToUint8ArrayInvalidData)('%s', (input, output) => {\n\t\t\t\t\texpect(() => bytesToUint8Array(input)).toThrow(output);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t});\n\tdescribe('toBigInt', () => {\n\t\tdescribe('valid cases', () => {\n\t\t\tit.each(toBigIntValidData)('%s', (input, output) => {\n\t\t\t\texpect(toBigInt(input)).toEqual(output);\n\t\t\t});\n\t\t});\n\n\t\tdescribe('invalid cases', () => {\n\t\t\tit.each(toBigIntInvalidData)('%s', (input, output) => {\n\t\t\t\texpect(() => toBigInt(input)).toThrow(output);\n\t\t\t});\n\t\t});\n\t});\n\n\tdescribe('toBool', () => {\n\t\tdescribe('valid cases', () => {\n\t\t\tit.each(toBoolValidData)('%s', (input, output) => {\n\t\t\t\texpect(toBool(input)).toEqual(output);\n\t\t\t});\n\t\t});\n\n\t\tdescribe('invalid cases', () => {\n\t\t\tit.each(toBoolInvalidData)('%s', (input, output) => {\n\t\t\t\texpect(() => toBool(input)).toThrow(output);\n\t\t\t});\n\t\t});\n\t});\n});\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/test/unit/event_emitter_dom.test.ts",["291"],["292"],"/**\n * @jest-environment jsdom\n */\n\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n// this file contains the unit test for the event emitter in the DOM environment\n// it is executed in the jsdom environment (see \"@jest-environment jsdom\" in the top comment of this file)\n\n// ignore the following rule to allow keeping `@jest-environment jsdom` on top:\n// eslint-disable-next-line header/header\nimport { EventEmitter } from '../../src/event_emitter';\n\ndescribe('EventEmitter with DOM', () => {\n\tlet emitter: EventEmitter;\n\n\tbeforeEach(() => {\n\t\temitter = new EventEmitter();\n\t});\n\n\tdescribe('on', () => {\n\t\tit('should add a listener for the specified event', () => {\n\t\t\tconst callback = jest.fn();\n\t\t\temitter.on('test', callback);\n\t\t\temitter.emit('test', 'hello');\n\t\t\texpect(callback).toHaveBeenCalledWith('hello');\n\t\t});\n\t});\n\n\tdescribe('once', () => {\n\t\tit('should add a listener for the specified event that is only called once', () => {\n\t\t\tconst callback = jest.fn();\n\t\t\temitter.once('test', callback);\n\t\t\temitter.emit('test', 'hello');\n\t\t\temitter.emit('test', 'world');\n\t\t\texpect(callback).toHaveBeenCalledTimes(1);\n\t\t\texpect(callback).toHaveBeenCalledWith('hello');\n\t\t});\n\t});\n\n\tdescribe('off', () => {\n\t\tit('should remove a listener for the specified event', () => {\n\t\t\tconst callback = jest.fn();\n\t\t\temitter.on('test', callback);\n\t\t\temitter.off('test', callback);\n\t\t\temitter.emit('test', 'hello');\n\t\t\texpect(callback).not.toHaveBeenCalled();\n\t\t});\n\t});\n\n\tdescribe('emit', () => {\n\t\tit('should call all listeners for the specified event', () => {\n\t\t\tconst callback1 = jest.fn();\n\t\t\tconst callback2 = jest.fn();\n\t\t\temitter.on('test', callback1);\n\t\t\temitter.on('test', callback2);\n\t\t\temitter.emit('test', 'hello');\n\t\t\texpect(callback1).toHaveBeenCalledWith('hello');\n\t\t\texpect(callback2).toHaveBeenCalledWith('hello');\n\t\t});\n\t});\n\n\tdescribe('listenerCount', () => {\n\t\tit('should return the number of listeners for the specified event', () => {\n\t\t\tconst callback1 = jest.fn();\n\t\t\tconst callback2 = jest.fn();\n\t\t\temitter.on('test', callback1);\n\t\t\temitter.on('test', callback2);\n\t\t\texpect(emitter.listenerCount('test')).toBe(2);\n\t\t});\n\t});\n\n\tdescribe('listeners', () => {\n\t\tit('should return an array of listeners for the specified event', () => {\n\t\t\tconst callback1 = jest.fn();\n\t\t\tconst callback2 = jest.fn();\n\t\t\temitter.on('test', callback1);\n\t\t\temitter.on('test', callback2);\n\t\t\texpect(emitter.listeners('test')).toEqual([callback1, callback2]);\n\t\t});\n\t});\n\n\tdescribe('eventNames', () => {\n\t\tit('should return an array of event names that have listeners', () => {\n\t\t\tconst callback1 = jest.fn();\n\t\t\tconst callback2 = jest.fn();\n\t\t\temitter.on('test1', callback1);\n\t\t\temitter.on('test2', callback2);\n\t\t\texpect(emitter.eventNames()).toEqual(['test1', 'test2']);\n\t\t});\n\t});\n\n\tdescribe('removeAllListeners', () => {\n\t\tit('should remove all listeners for all events', () => {\n\t\t\tconst callback1 = jest.fn();\n\t\t\tconst callback2 = jest.fn();\n\t\t\temitter.on('test1', callback1);\n\t\t\temitter.on('test2', callback2);\n\t\t\temitter.removeAllListeners();\n\t\t\temitter.emit('test1', 'hello');\n\t\t\temitter.emit('test2', 'world');\n\t\t\texpect(callback1).not.toHaveBeenCalled();\n\t\t\texpect(callback2).not.toHaveBeenCalled();\n\t\t});\n\t});\n\n\tdescribe('setMaxListeners', () => {\n\t\tit('should set the maximum number of listeners for an event', () => {\n\t\t\temitter.setMaxListeners(2);\n\t\t\texpect(emitter.getMaxListeners()).toBe(2);\n\t\t});\n\t});\n});\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/test/unit/event_emitter_node.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/test/unit/formatter.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/test/unit/hash.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/test/unit/hash_dom.test.ts",["293"],["294","295","296","297"],"﻿/**\n * @jest-environment jsdom\n */\n\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n// this file contains the unit test for the event emitter in the DOM environment\n// it is executed in the jsdom environment (see \"@jest-environment jsdom\" in the top comment of this file)\n\n// ignore the following rule to allow keeping `@jest-environment jsdom` on top:\n// eslint-disable-next-line header/header\nimport { TextEncoder } from 'util';\n// polyfill for jsdom\nglobal.TextEncoder = TextEncoder;\n\n/* eslint-disable import/first */\nimport { keccak256 } from 'js-sha3';\nimport {\n\tsha3,\n\tsha3Raw,\n\tsoliditySha3,\n\tsoliditySha3Raw,\n\tencodePacked,\n\tkeccak256 as web3keccak256,\n} from '../../src/hash';\nimport {\n\tsha3Data,\n\tsha3ValidData,\n\tsoliditySha3RawValidData,\n\tsha3RawValidData,\n\tsoliditySha3ValidData,\n\tsoliditySha3InvalidData,\n\tcompareSha3JSValidData,\n\tcompareSha3JSRawValidData,\n\tencodePackData,\n\tencodePackedInvalidData,\n\tkeccak256ValidData,\n\tsoliditySha3BigIntValidData,\n} from '../fixtures/hash';\n\ndescribe('hash', () => {\n\tdescribe('sha3', () => {\n\t\tdescribe('valid cases', () => {\n\t\t\tit.each(sha3ValidData)('%s', (input, output) => {\n\t\t\t\texpect(sha3(input)).toEqual(output);\n\t\t\t});\n\t\t});\n\n\t\tdescribe('compare with js-sha3 normal cases', () => {\n\t\t\tit.each(sha3Data)('%s', input => {\n\t\t\t\texpect(sha3(input)).toBe(`0x${keccak256(input)}`);\n\t\t\t});\n\t\t});\n\n\t\tdescribe('compare with js-sha3 uint8array cases', () => {\n\t\t\tit.each(compareSha3JSValidData)('%s', (input, output) => {\n\t\t\t\texpect(sha3(input)).toBe(`0x${keccak256(output)}`);\n\t\t\t});\n\t\t});\n\t});\n\n\tdescribe('sha3Raw', () => {\n\t\tdescribe('valid cases', () => {\n\t\t\tit.each(sha3RawValidData)('%s', (input, output) => {\n\t\t\t\texpect(sha3Raw(input)).toEqual(output);\n\t\t\t});\n\t\t});\n\t\tdescribe('comparing with js-sha3 cases', () => {\n\t\t\tit.each(compareSha3JSRawValidData)('%s', (input, output) => {\n\t\t\t\texpect(sha3Raw(input)).toBe(`0x${keccak256(output)}`);\n\t\t\t});\n\t\t});\n\t});\n\n\tdescribe('soliditySha3', () => {\n\t\tdescribe('valid cases', () => {\n\t\t\tit.each(soliditySha3ValidData)('%s', (input, output) => {\n\t\t\t\texpect(soliditySha3(...input)).toEqual(output);\n\t\t\t});\n\t\t});\n\t\tdescribe('invalid cases', () => {\n\t\t\tit.each(soliditySha3InvalidData)('%s', (input, output) => {\n\t\t\t\texpect(() => soliditySha3(input)).toThrow(output);\n\t\t\t});\n\t\t});\n\t});\n\n\tdescribe('soliditySha3Raw', () => {\n\t\tdescribe('valid cases', () => {\n\t\t\tit.each(soliditySha3RawValidData)('%s', (input, output) => {\n\t\t\t\texpect(soliditySha3Raw(...input)).toEqual(output);\n\t\t\t});\n\t\t});\n\t\tdescribe('invalid cases', () => {\n\t\t\tit.each(soliditySha3InvalidData)('%s', (input, output) => {\n\t\t\t\texpect(() => soliditySha3Raw(input)).toThrow(output);\n\t\t\t});\n\t\t});\n\t});\n\n\tdescribe('encodePacked', () => {\n\t\tdescribe('valid cases', () => {\n\t\t\tit.each(encodePackData)('%s', (input, output) => {\n\t\t\t\texpect(encodePacked(...input)).toEqual(output);\n\t\t\t});\n\t\t});\n\t\tdescribe('invalid cases', () => {\n\t\t\tit.each(encodePackedInvalidData)('%s', (input, output) => {\n\t\t\t\texpect(() => encodePacked(input)).toThrow(output);\n\t\t\t});\n\t\t});\n\t});\n\tdescribe('keccak256', () => {\n\t\tdescribe('valid cases', () => {\n\t\t\tit.each(keccak256ValidData)('%s', (input, output) => {\n\t\t\t\texpect(web3keccak256(input)).toEqual(output);\n\t\t\t});\n\t\t});\n\t});\n\n\tdescribe('extra types supporting', () => {\n\t\tit('object', () => {\n\t\t\tconst res = soliditySha3({\n\t\t\t\thistoricBlock: {\n\t\t\t\t\thash: '0xcba0b90a5e65512202091c12a2e3b328f374715b9f1c8f32cb4600c726fe2aa6',\n\t\t\t\t\theight: 1,\n\t\t\t\t},\n\t\t\t\tnetworkId: 5777,\n\t\t\t});\n\t\t\texpect(res).toBe('0x00203462b63e3a8ca15da715e490c676b0e370f47823e31383fe43c25da3b78d');\n\t\t});\n\t\tit('object in string', () => {\n\t\t\tconst res = soliditySha3(\n\t\t\t\t'{\"contents\":\"pragma solidity >=0.4.21 <0.6.0;\\\\n\\\\ncontract Migrations {\\\\n  address public owner;\\\\n  uint public last_completed_migration;\\\\n\\\\n  constructor() public {\\\\n    owner = msg.sender;\\\\n  }\\\\n\\\\n  modifier restricted() {\\\\n    if (msg.sender == owner) _;\\\\n  }\\\\n\\\\n  function setCompleted(uint completed) public restricted {\\\\n    last_completed_migration = completed;\\\\n  }\\\\n\\\\n  function upgrade(address new_address) public restricted {\\\\n    Migrations upgraded = Migrations(new_address);\\\\n    upgraded.setCompleted(last_completed_migration);\\\\n  }\\\\n}\\\\n\",\"sourcePath\":\"/Users/gnidan/src/work/reproduce/2019/01/21/artifacts/contracts/Migrations.sol\"}',\n\t\t\t);\n\t\t\texpect(res).toBe('0xdb092e2751b8dcb7c8509baade3c0ac290414a71685823c3cbeb28667970b0bd');\n\t\t});\n\t\tit('another object in string', () => {\n\t\t\tconst res = soliditySha3(\n\t\t\t\t'{\"bytes\":\"608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610314806100606000396000f3fe608060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630900f01014610067578063445df0ac146100b85780638da5cb5b146100e3578063fdacd5761461013a575b600080fd5b34801561007357600080fd5b506100b66004803603602081101561008a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610175565b005b3480156100c457600080fd5b506100cd61025d565b6040518082815260200191505060405180910390f35b3480156100ef57600080fd5b506100f8610263565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561014657600080fd5b506101736004803603602081101561015d57600080fd5b8101908080359060200190929190505050610288565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561025a5760008190508073ffffffffffffffffffffffffffffffffffffffff1663fdacd5766001546040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b15801561024057600080fd5b505af1158015610254573d6000803e3d6000fd5b50505050505b50565b60015481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156102e557806001819055505b5056fea165627a7a7230582013359aba5684f88626fb6a58a003236e309ef1462172af4afb4afb9bd2532b510029\",\"linkReferences\":[]}',\n\t\t\t);\n\t\t\texpect(res).toBe('0x46e99868594ceb46b7cd37e4b33d635f12a7751671f8c51dd8218fa0dcf82901');\n\t\t});\n\n\t\tdescribe('BigInt soliditySha3', () => {\n\t\t\tit.each(soliditySha3BigIntValidData)('%s', (input, output) => {\n\t\t\t\texpect(soliditySha3(...input)).toEqual(output);\n\t\t\t});\n\t\t});\n\t});\n});\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/test/unit/json_rpc.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/test/unit/objects.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/test/unit/promise_helpers.test.ts",["298","299"],["300","301","302","303"],"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport {\n\twaitWithTimeout,\n\trejectIfTimeout,\n\tisPromise,\n\tpollTillDefined,\n\trejectIfConditionAtInterval,\n\tpollTillDefinedAndReturnIntervalId,\n} from '../../src/promise_helpers';\n\ndescribe('promise helpers', () => {\n\tdescribe('isPromise', () => {\n\t\tit('detect Promise objects', () => {\n\t\t\t// eslint-disable-next-line  @typescript-eslint/no-empty-function\n\t\t\texpect(isPromise(new Promise(() => {}))).toBe(true);\n\t\t});\n\t\tit('detect Promise functions', () => {\n\t\t\t// eslint-disable-next-line  @typescript-eslint/no-empty-function\n\t\t\tconst func = () => {};\n\t\t\t// eslint-disable-next-line  @typescript-eslint/no-empty-function\n\t\t\tfunc.then = () => {};\n\t\t\texpect(isPromise(func)).toBe(true);\n\t\t});\n\t});\n\n\tdescribe('waitWithTimeout', () => {\n\t\tit('resolve', async () => {\n\t\t\tawait waitWithTimeout(\n\t\t\t\tnew Promise(resolve => {\n\t\t\t\t\tresolve('resolved');\n\t\t\t\t}),\n\t\t\t\t1000,\n\t\t\t).then(val => expect(val).toBe('resolved'));\n\t\t});\n\t\tit('timeout', async () => {\n\t\t\tconst asyncHelper = async () => {\n\t\t\t\tawait new Promise(resolve => {\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tresolve('resolved');\n\t\t\t\t\t}, 200);\n\t\t\t\t});\n\t\t\t};\n\t\t\tawait expect(waitWithTimeout(asyncHelper, 100, new Error('time out'))).rejects.toThrow(\n\t\t\t\tnew Error('time out'),\n\t\t\t);\n\t\t});\n\t});\n\tdescribe('rejectIfTimeout', () => {\n\t\tit('%s', async () => {\n\t\t\tconst [timerId, promise] = rejectIfTimeout(100, new Error('value'));\n\t\t\t// eslint-disable-next-line jest/no-conditional-expect\n\t\t\tawait promise.catch(value => expect(value).toEqual(new Error('value')));\n\t\t\tclearTimeout(timerId);\n\t\t});\n\t});\n\n\tdescribe('rejectIfTimeout throw', () => {\n\t\tit('%s', async () => {\n\t\t\tconst dummyError = new Error('error');\n\t\t\tconst asyncHelper = async () => {\n\t\t\t\tawait new Promise((_, reject) => {\n\t\t\t\t\treject(dummyError);\n\t\t\t\t});\n\t\t\t};\n\t\t\tawait expect(waitWithTimeout(asyncHelper, 100, new Error('time out'))).rejects.toThrow(\n\t\t\t\tdummyError,\n\t\t\t);\n\t\t});\n\t});\n\n\tdescribe('pollTillDefined', () => {\n\t\tit('returns when immediately resolved', async () => {\n\t\t\tconst asyncHelper = async () =>\n\t\t\t\tnew Promise(resolve => {\n\t\t\t\t\tresolve('resolved');\n\t\t\t\t});\n\t\t\tawait expect(pollTillDefined(asyncHelper, 100)).resolves.toBe('resolved');\n\t\t});\n\t\tit('returns if later resolved', async () => {\n\t\t\tlet counter = 0;\n\t\t\tconst asyncHelper = async () => {\n\t\t\t\tif (counter === 0) {\n\t\t\t\t\tcounter += 1;\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\treturn new Promise(resolve => {\n\t\t\t\t\tresolve('resolved');\n\t\t\t\t});\n\t\t\t};\n\n\t\t\tawait expect(pollTillDefined(asyncHelper, 100)).resolves.toBe('resolved');\n\t\t});\n\t\tit('throws if later throws', async () => {\n\t\t\tconst dummyError = new Error('error');\n\t\t\tlet counter = 0;\n\t\t\tconst asyncHelper = async () => {\n\t\t\t\tif (counter === 0) {\n\t\t\t\t\tcounter += 1;\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\treturn new Promise((_, reject) => {\n\t\t\t\t\treject(dummyError);\n\t\t\t\t});\n\t\t\t};\n\t\t\tawait expect(pollTillDefined(asyncHelper, 100)).rejects.toThrow(dummyError);\n\t\t});\n\t});\n\n\tdescribe('pollTillDefinedAndReturnIntervalId', () => {\n\t\tit('returns when immediately resolved', async () => {\n\t\t\tconst asyncHelper = async () =>\n\t\t\t\tnew Promise(resolve => {\n\t\t\t\t\tresolve('resolved');\n\t\t\t\t});\n\t\t\tconst [promise] = pollTillDefinedAndReturnIntervalId(asyncHelper, 100);\n\t\t\tawait expect(promise).resolves.toBe('resolved');\n\t\t});\n\t\tit('returns if later resolved', async () => {\n\t\t\tlet counter = 0;\n\t\t\tconst asyncHelper = async () => {\n\t\t\t\tif (counter === 0) {\n\t\t\t\t\tcounter += 1;\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\treturn new Promise(resolve => {\n\t\t\t\t\tresolve('resolved');\n\t\t\t\t});\n\t\t\t};\n\t\t\tconst [promise] = pollTillDefinedAndReturnIntervalId(asyncHelper, 100);\n\t\t\tawait expect(promise).resolves.toBe('resolved');\n\t\t});\n\n\t\tit('should return interval id if not resolved in specific time', async () => {\n\n\t\t\tlet counter = 0;\n\t\t\tconst asyncHelper = async () => {\n\t\t\t\tif (counter <= 3000000) {\n\t\t\t\t\tcounter += 1;\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\treturn \"result\";\n\t\t\t};\n\n\t\t\tconst testError = new Error('Test P2 Error');\n\n\t\t\tconst [neverResolvePromise, intervalId] = pollTillDefinedAndReturnIntervalId(asyncHelper, 100);\n\t\t\tconst promiCheck = Promise.race([neverResolvePromise, rejectIfTimeout(500,testError)[1]]);\n\n\t\t\tawait expect(promiCheck).rejects.toThrow(testError);\n\t\t\texpect(intervalId).toBeDefined();\n\t\t\tclearInterval(intervalId);\n\t\t});\n\n\t\tit('throws if later throws', async () => {\n\t\t\tconst dummyError = new Error('error');\n\t\t\tlet counter = 0;\n\t\t\tconst asyncHelper = async () => {\n\t\t\t\tif (counter === 0) {\n\t\t\t\t\tcounter += 1;\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\treturn new Promise((_, reject) => {\n\t\t\t\t\treject(dummyError);\n\t\t\t\t});\n\t\t\t};\n\t\t\tconst [promise] = pollTillDefinedAndReturnIntervalId(asyncHelper, 100);\n\t\t\tawait expect(promise).rejects.toThrow(dummyError);\n\t\t});\n\t});\n\n\tdescribe('rejectIfConditionAtInterval', () => {\n\t\tit('reject if later throws', async () => {\n\t\t\tconst dummyError = new Error('error');\n\t\t\tlet counter = 0;\n\t\t\tconst asyncHelper = async () => {\n\t\t\t\tif (counter === 0) {\n\t\t\t\t\tcounter += 1;\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\treturn dummyError;\n\t\t\t};\n\t\t\tconst [intervalId, promiseToError] = rejectIfConditionAtInterval(asyncHelper, 100);\n\t\t\tawait expect(promiseToError).rejects.toThrow(dummyError);\n\n\t\t\tclearInterval(intervalId);\n\t\t});\n\t});\n});\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/test/unit/random.test.ts",[],["304"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/test/unit/socket_provider.test.ts",["305","306"],["307","308","309","310","311","312","313","314","315","316","317","318","319","320","321","322","323"],"﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { Web3APIPayload, EthExecutionAPI, JsonRpcResponse, Web3ProviderStatus } from 'web3-types';\nimport { EventEmitter } from '../../src/event_emitter';\n// eslint-disable-next-line import/no-relative-packages\nimport { sleep } from '../../../../fixtures/utils';\nimport { SocketProvider } from '../../src/socket_provider';\n\nconst dummySocketConnection = { dummy: 'dummy' };\n\nclass TestProvider extends SocketProvider<any, any, any> {\n\tprotected _socketConnection?: typeof dummySocketConnection;\n\n\tprotected _openSocketConnection() {\n\t\tthis._socketConnection = dummySocketConnection;\n\t}\n\n\t// Dummy implementation of the abstract base methods\n\t// eslint-disable-next-line\n\tprotected _addSocketListeners(): void {}\n\t// eslint-disable-next-line\n\tprotected _removeSocketListeners(): void {}\n\t// eslint-disable-next-line\n\tprotected _onCloseEvent(_event: any): void {}\n\t// eslint-disable-next-line\n\tprotected _sendToSocket(_payload: Web3APIPayload<EthExecutionAPI, any>): void {}\n\t// eslint-disable-next-line\n\tprotected _parseResponses(_event: any): JsonRpcResponse[] {\n\t\treturn [] as JsonRpcResponse[];\n\t}\n\tpublic message(_event: any): void {\n\t\tthis._onMessage(_event);\n\t}\n\n\t// eslint-disable-next-line\n\tprotected _closeSocketConnection(\n\t\t_code?: number | undefined,\n\t\t_data?: string | undefined,\n\t\t// eslint-disable-next-line\n\t): void {}\n\t// eslint-disable-next-line\n\tgetStatus(): Web3ProviderStatus {\n\t\treturn this._connectionStatus;\n\t}\n\t// eslint-disable-next-line\n\tsetStatus(status: Web3ProviderStatus) {\n\t\tthis._connectionStatus = status;\n\t}\n}\n\ndescribe('SocketProvider', () => {\n\tconst socketPath = `some_path`;\n\tconst socketOption = { dummyOption: true } as const;\n\n\tdescribe('socket_provider unit tests', () => {\n\t\tdescribe('constructor', () => {\n\t\t\tit('should construct the instance of the provider', () => {\n\t\t\t\tconst provider = new TestProvider(socketPath, socketOption);\n\t\t\t\texpect(provider).toBeInstanceOf(SocketProvider);\n\t\t\t\texpect(provider.SocketConnection).toEqual(dummySocketConnection);\n\t\t\t});\n\t\t});\n\t\tdescribe('testing _reconnect() method', () => {\n\t\t\tit('should not be called when { autoReconnect: false }', () => {\n\t\t\t\tconst reconnectOptions = { autoReconnect: false };\n\t\t\t\tconst provider = new TestProvider(socketPath, socketOption, reconnectOptions);\n\t\t\t\t// @ts-expect-error run protected method\n\t\t\t\tjest.spyOn(provider, '_reconnect').mockReturnValue('');\n\t\t\t\tprovider.message('');\n\t\t\t\t// @ts-expect-error run protected method\n\t\t\t\texpect(provider._reconnect).not.toHaveBeenCalled();\n\t\t\t});\n\t\t\tit('should not call _reconnect with empty response when { autoReconnect: true }', () => {\n\t\t\t\tconst reconnectOptions = { autoReconnect: true };\n\t\t\t\tconst provider = new TestProvider(socketPath, socketOption, reconnectOptions);\n\t\t\t\t// @ts-expect-error run protected method\n\t\t\t\tjest.spyOn(provider, '_reconnect').mockReturnValue('');\n\t\t\t\tprovider.message('');\n\t\t\t\t// @ts-expect-error run protected method\n\t\t\t\texpect(provider._reconnect).not.toHaveBeenCalled();\n\t\t\t});\n\t\t});\n\n\t\tdescribe('testing connect() method', () => {\n\t\t\tit('should call method reconnect in case of error at _openSocketConnection', async () => {\n\t\t\t\tconst provider = new TestProvider(socketPath, socketOption);\n\t\t\t\t// @ts-expect-error run protected method\n\t\t\t\tjest.spyOn(provider, '_openSocketConnection').mockImplementation(() => {\n\t\t\t\t\tthrow new Error();\n\t\t\t\t});\n\t\t\t\t// @ts-expect-error run protected method\n\t\t\t\tjest.spyOn(provider, '_reconnect').mockReturnValue('');\n\t\t\t\t// @ts-expect-error run protected method\n\t\t\t\tprovider.isReconnecting = true;\n\t\t\t\tprovider.connect();\n\n\t\t\t\tawait sleep(100);\n\n\t\t\t\t// @ts-expect-error run protected method\n\t\t\t\texpect(provider._reconnect).toHaveBeenCalled();\n\t\t\t});\n\t\t\tit('should call method reconnect in case of error at _addSocketListeners', async () => {\n\t\t\t\tconst provider = new TestProvider(socketPath, socketOption);\n\t\t\t\t// @ts-expect-error run protected method\n\t\t\t\tjest.spyOn(provider, '_addSocketListeners').mockImplementation(() => {\n\t\t\t\t\tthrow new Error();\n\t\t\t\t});\n\t\t\t\t// @ts-expect-error run protected method\n\t\t\t\tjest.spyOn(provider, '_reconnect').mockReturnValue('');\n\t\t\t\t// @ts-expect-error run protected method\n\t\t\t\tprovider.isReconnecting = true;\n\t\t\t\tprovider.connect();\n\n\t\t\t\tawait sleep(100);\n\n\t\t\t\t// @ts-expect-error run protected method\n\t\t\t\texpect(provider._reconnect).toHaveBeenCalled();\n\t\t\t});\n\t\t\tit('should throw \"Error while connecting...\" in case of error inside `connect()`', () => {\n\t\t\t\tconst dummyError = new Error('error');\n\t\t\t\tconst provider = new TestProvider(socketPath, socketOption);\n\t\t\t\t// @ts-expect-error run protected method\n\t\t\t\tjest.spyOn(provider, '_addSocketListeners').mockImplementation(() => {\n\t\t\t\t\tthrow dummyError;\n\t\t\t\t});\n\t\t\t\texpect(() => provider.connect()).toThrow(\n\t\t\t\t\t`Error while connecting to ${socketPath}. Reason: ${dummyError.message}`,\n\t\t\t\t);\n\t\t\t});\n\t\t\tit('should throw \"Client URL ... is invalid\" in case of error with no message inside `connect()`', () => {\n\t\t\t\tconst provider = new TestProvider(socketPath, socketOption);\n\t\t\t\t// @ts-expect-error run protected method\n\t\t\t\tjest.spyOn(provider, '_addSocketListeners').mockImplementation(() => {\n\t\t\t\t\tthrow new Error();\n\t\t\t\t});\n\t\t\t\texpect(() => provider.connect()).toThrow(`Client URL \"${socketPath}\" is invalid.`);\n\t\t\t});\n\t\t});\n\n\t\tdescribe('testing supportsSubscriptions() function', () => {\n\t\t\tit('should returns false when calling `supportsSubscriptions()`', () => {\n\t\t\t\tconst provider = new TestProvider(socketPath, socketOption);\n\t\t\t\texpect(provider.supportsSubscriptions()).toBe(true);\n\t\t\t});\n\t\t});\n\n\t\tdescribe('testing on() method', () => {\n\t\t\tit('should internally call `_eventEmitter.on`', () => {\n\t\t\t\tconst provider = new TestProvider(socketPath, socketOption);\n\n\t\t\t\t// @ts-expect-error run protected method\n\t\t\t\tconst funcBSpy = jest.spyOn(provider._eventEmitter, 'on').mockReturnValue();\n\t\t\t\tconst event = 'message';\n\t\t\t\tconst func = () => {\n\t\t\t\t\t// ...\n\t\t\t\t};\n\t\t\t\tprovider.on(event, func);\n\t\t\t\texpect(funcBSpy).toHaveBeenCalledWith(event, func);\n\t\t\t});\n\t\t});\n\n\t\tdescribe('testing once() method', () => {\n\t\t\tit('should internally call `_eventEmitter.once`', () => {\n\t\t\t\tconst provider = new TestProvider(socketPath, socketOption);\n\n\t\t\t\t// @ts-expect-error run protected method\n\t\t\t\tconst funcBSpy = jest.spyOn(provider._eventEmitter, 'once').mockReturnValue();\n\t\t\t\tconst event = 'message';\n\t\t\t\tconst func = () => {\n\t\t\t\t\t// ...\n\t\t\t\t};\n\t\t\t\tprovider.once(event, func);\n\t\t\t\texpect(funcBSpy).toHaveBeenCalledWith(event, func);\n\t\t\t});\n\t\t});\n\n\t\tdescribe('testing removeListener() method', () => {\n\t\t\tit('should internally call `_eventEmitter.removeListener`', () => {\n\t\t\t\tconst provider = new TestProvider(socketPath, socketOption);\n\n\t\t\t\tconst funcBSpy = jest\n\t\t\t\t\t// @ts-expect-error run protected method\n\t\t\t\t\t.spyOn(provider._eventEmitter, 'removeListener')\n\t\t\t\t\t.mockReturnValue(new EventEmitter());\n\t\t\t\tconst event = 'message';\n\t\t\t\tconst func = () => {\n\t\t\t\t\t// ...\n\t\t\t\t};\n\t\t\t\tprovider.removeListener(event, func);\n\t\t\t\texpect(funcBSpy).toHaveBeenCalledWith(event, func);\n\t\t\t});\n\t\t});\n\n\t\tdescribe('testing disconnect() method', () => {\n\t\t\tit('should internally call `super._onDisconnect` and change the connectionStatus to `disconnected`', () => {\n\t\t\t\tconst provider = new TestProvider(socketPath, socketOption);\n\n\t\t\t\tconst funcBSpy = jest\n\t\t\t\t\t// spy on provider.super._onDisconnect\n\t\t\t\t\t.spyOn(\n\t\t\t\t\t\tObject.getPrototypeOf(\n\t\t\t\t\t\t\tObject.getPrototypeOf(Object.getPrototypeOf(provider)),\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'_onDisconnect',\n\t\t\t\t\t)\n\t\t\t\t\t.mockReturnValue(new EventEmitter());\n\t\t\t\tconst code = 0;\n\t\t\t\tconst data = '0x0';\n\t\t\t\tprovider.disconnect(code, data);\n\t\t\t\t// @ts-expect-error run protected method\n\t\t\t\texpect(provider._connectionStatus).toBe('disconnected');\n\t\t\t\texpect(funcBSpy).toHaveBeenCalledWith(code, data);\n\t\t\t});\n\t\t});\n\n\t\tdescribe('testing reset() method', () => {\n\t\t\tit('should set `_reconnectAttempts` to 0', () => {\n\t\t\t\tconst provider = new TestProvider(socketPath, socketOption);\n\t\t\t\tprovider.reset();\n\t\t\t\t// @ts-expect-error run protected method\n\t\t\t\texpect(provider._reconnectAttempts).toBe(0);\n\t\t\t});\n\t\t});\n\n\t\tdescribe('testing request() method', () => {\n\t\t\tit('should throw if the _socketConnection is null', async () => {\n\t\t\t\tconst provider = new TestProvider(socketPath, socketOption);\n\t\t\t\tconst payload = { method: 'some_rpc_method' };\n\t\t\t\t// @ts-expect-error run protected method\n\t\t\t\tprovider._socketConnection = undefined;\n\t\t\t\tawait expect(provider.request(payload)).rejects.toThrow('Connection is undefined');\n\t\t\t});\n\t\t\tit('should throw if the payload id was not provided', async () => {\n\t\t\t\tconst provider = new TestProvider(socketPath, socketOption);\n\t\t\t\tconst payload = { method: 'some_rpc_method' };\n\t\t\t\tawait expect(provider.request(payload)).rejects.toThrow('Request Id not defined');\n\t\t\t});\n\t\t\tit('should throw if the payload id was provided twice', async () => {\n\t\t\t\tconst provider = new TestProvider(socketPath, socketOption);\n\t\t\t\tconst payload = { id: 1, method: 'some_rpc_method' };\n\t\t\t\tprovider.setStatus('connected');\n\t\t\t\tconst reqPromise = provider.request(payload);\n\t\t\t\texpect(reqPromise).toBeInstanceOf(Promise);\n\t\t\t\tawait expect(provider.request(payload)).rejects.toThrow(\n\t\t\t\t\t'Request already sent with following id: 1',\n\t\t\t\t);\n\t\t\t});\n\n\t\t\tit('should call `connect` when the status is `disconnected`', () => {\n\t\t\t\tconst provider = new TestProvider(socketPath, socketOption);\n\t\t\t\tconst payload = { id: 1, method: 'some_rpc_method' };\n\t\t\t\tprovider.setStatus('disconnected');\n\t\t\t\tjest.spyOn(provider, 'connect').mockReturnValue();\n\t\t\t\t// @ts-expect-error run protected method\n\t\t\t\tjest.spyOn(provider, '_sendToSocket').mockReturnValue();\n\t\t\t\tprovider\n\t\t\t\t\t.request(payload)\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\t// the status of the provider is manipulate manually to be disconnected,\n\t\t\t\t\t\t// \tfor that, this request promise will never resolve\n\t\t\t\t\t})\n\t\t\t\t\t.catch(() => {\n\t\t\t\t\t\t// nothing\n\t\t\t\t\t});\n\t\t\t\texpect(provider.connect).toHaveBeenCalled();\n\t\t\t});\n\t\t\tit('should add request to the `_pendingRequestsQueue` when the status is `connecting`', () => {\n\t\t\t\tconst provider = new TestProvider(socketPath, socketOption);\n\t\t\t\tconst payload = { id: 1, method: 'some_rpc_method' };\n\t\t\t\tprovider.setStatus('connecting');\n\t\t\t\tconst reqPromise = provider.request(payload);\n\t\t\t\texpect(reqPromise).toBeInstanceOf(Promise);\n\t\t\t\t// @ts-expect-error run protected method\n\t\t\t\texpect(provider._pendingRequestsQueue.get(payload.id).payload).toBe(payload);\n\t\t\t});\n\n\t\t\tit('should add request to the `_sentRequestsQueue` when the status is `connected`', () => {\n\t\t\t\tconst provider = new TestProvider(socketPath, socketOption);\n\t\t\t\tconst payload = { id: 1, method: 'some_rpc_method' };\n\t\t\t\tprovider.setStatus('connected');\n\t\t\t\tconst reqPromise = provider.request(payload);\n\t\t\t\texpect(reqPromise).toBeInstanceOf(Promise);\n\t\t\t\t// @ts-expect-error run protected method\n\t\t\t\texpect(provider._sentRequestsQueue.get(payload.id).payload).toBe(payload);\n\t\t\t});\n\t\t});\n\n\t\tdescribe('testing _clearQueues() method', () => {\n\t\t\tit('should clear queues when called', () => {\n\t\t\t\tconst provider = new TestProvider(socketPath, socketOption);\n\t\t\t\tconst payload1 = { id: 1, method: 'some_rpc_method' };\n\t\t\t\tprovider.setStatus('connecting');\n\t\t\t\tconst req1 = provider.request(payload1);\n\t\t\t\t// when the queues will be cleared the promise will reject\n\t\t\t\treq1.catch(() => {\n\t\t\t\t\t// nothing\n\t\t\t\t});\n\t\t\t\t// @ts-expect-error run protected method\n\t\t\t\texpect(provider._pendingRequestsQueue.size).toBe(1);\n\t\t\t\texpect(provider.getPendingRequestQueueSize()).toBe(1);\n\t\t\t\tconst payload2 = { id: 2, method: 'some_rpc_method' };\n\t\t\t\tprovider.setStatus('connected');\n\t\t\t\tconst req2 = provider.request(payload2);\n\t\t\t\t// when the queues will be cleared the promise will reject\n\t\t\t\treq2.catch(() => {\n\t\t\t\t\t// nothing\n\t\t\t\t});\n\n\t\t\t\t// @ts-expect-error run protected method\n\t\t\t\texpect(provider._sentRequestsQueue.size).toBe(1);\n\t\t\t\texpect(provider.getSentRequestsQueueSize()).toBe(1);\n\n\t\t\t\tprovider.on('error', () => {\n\t\t\t\t\t// nothing\n\t\t\t\t});\n\t\t\t\t// @ts-expect-error run protected method\n\t\t\t\tprovider._clearQueues();\n\t\t\t\t// @ts-expect-error run protected method\n\t\t\t\texpect(provider._pendingRequestsQueue.size).toBe(0);\n\t\t\t\texpect(provider.getPendingRequestQueueSize()).toBe(0);\n\t\t\t\t// @ts-expect-error run protected method\n\t\t\t\texpect(provider._sentRequestsQueue.size).toBe(0);\n\t\t\t\texpect(provider.getSentRequestsQueueSize()).toBe(0);\n\t\t\t});\n\t\t});\n\t});\n});\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/test/unit/string_manipulation.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/test/unit/uint8array.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/test/unit/validation.test.ts",[],["324","325"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-utils/test/unit/web3_deferred_promise.test.ts",[],["326","327"],{"ruleId":"328","severity":1,"message":"329","line":123,"column":4,"nodeType":null,"messageId":"330","endLine":123,"endColumn":7},{"ruleId":"328","severity":1,"message":"331","line":125,"column":4,"nodeType":null,"messageId":"332","endLine":125,"endColumn":5},{"ruleId":"333","severity":2,"message":"334","line":235,"column":44,"nodeType":"335","messageId":"336","endLine":235,"endColumn":57,"suppressions":"337"},{"ruleId":"333","severity":2,"message":"334","line":237,"column":60,"nodeType":"335","messageId":"336","endLine":237,"endColumn":73,"suppressions":"338"},{"ruleId":"339","severity":2,"message":"340","line":355,"column":10,"nodeType":"341","messageId":"342","endLine":355,"endColumn":55,"suppressions":"343"},{"ruleId":"339","severity":2,"message":"340","line":360,"column":10,"nodeType":"341","messageId":"342","endLine":360,"endColumn":78,"suppressions":"344"},{"ruleId":"345","severity":1,"message":"346","line":60,"column":32,"nodeType":"347","messageId":"348","endLine":60,"endColumn":41},{"ruleId":"349","severity":2,"message":"350","line":46,"column":3,"nodeType":"351","messageId":"352","endLine":62,"endColumn":4,"suppressions":"353"},{"ruleId":"354","severity":1,"message":"355","line":109,"column":66,"nodeType":"356","messageId":"357","endLine":109,"endColumn":77},{"ruleId":"354","severity":1,"message":"355","line":144,"column":10,"nodeType":"356","messageId":"357","endLine":144,"endColumn":20},{"ruleId":"354","severity":1,"message":"355","line":169,"column":10,"nodeType":"356","messageId":"357","endLine":169,"endColumn":21},{"ruleId":"358","severity":1,"message":"359","line":81,"column":77,"nodeType":"360","messageId":"361","endLine":81,"endColumn":80,"suggestions":"362","suppressions":"363"},{"ruleId":"358","severity":1,"message":"359","line":81,"column":82,"nodeType":"360","messageId":"361","endLine":81,"endColumn":85,"suggestions":"364","suppressions":"365"},{"ruleId":"358","severity":1,"message":"359","line":81,"column":87,"nodeType":"360","messageId":"361","endLine":81,"endColumn":90,"suggestions":"366","suppressions":"367"},{"ruleId":"358","severity":1,"message":"359","line":83,"column":74,"nodeType":"360","messageId":"361","endLine":83,"endColumn":77,"suggestions":"368","suppressions":"369"},{"ruleId":"358","severity":1,"message":"359","line":83,"column":79,"nodeType":"360","messageId":"361","endLine":83,"endColumn":82,"suggestions":"370","suppressions":"371"},{"ruleId":"358","severity":1,"message":"359","line":83,"column":84,"nodeType":"360","messageId":"361","endLine":83,"endColumn":87,"suggestions":"372","suppressions":"373"},{"ruleId":"358","severity":1,"message":"359","line":126,"column":69,"nodeType":"360","messageId":"361","endLine":126,"endColumn":72,"suggestions":"374","suppressions":"375"},{"ruleId":"358","severity":1,"message":"359","line":126,"column":74,"nodeType":"360","messageId":"361","endLine":126,"endColumn":77,"suggestions":"376","suppressions":"377"},{"ruleId":"358","severity":1,"message":"359","line":126,"column":79,"nodeType":"360","messageId":"361","endLine":126,"endColumn":82,"suggestions":"378","suppressions":"379"},{"ruleId":"358","severity":1,"message":"359","line":127,"column":66,"nodeType":"360","messageId":"361","endLine":127,"endColumn":69,"suggestions":"380","suppressions":"381"},{"ruleId":"358","severity":1,"message":"359","line":127,"column":71,"nodeType":"360","messageId":"361","endLine":127,"endColumn":74,"suggestions":"382","suppressions":"383"},{"ruleId":"358","severity":1,"message":"359","line":127,"column":76,"nodeType":"360","messageId":"361","endLine":127,"endColumn":79,"suggestions":"384","suppressions":"385"},{"ruleId":"358","severity":1,"message":"359","line":180,"column":65,"nodeType":"360","messageId":"361","endLine":180,"endColumn":68,"suggestions":"386","suppressions":"387"},{"ruleId":"388","severity":2,"message":"389","line":187,"column":2,"nodeType":"347","messageId":"390","endLine":187,"endColumn":33,"suppressions":"391"},{"ruleId":"388","severity":2,"message":"392","line":214,"column":2,"nodeType":"347","messageId":"390","endLine":214,"endColumn":30,"suppressions":"393"},{"ruleId":"358","severity":1,"message":"359","line":416,"column":33,"nodeType":"360","messageId":"361","endLine":416,"endColumn":36,"suggestions":"394","suppressions":"395"},{"ruleId":"358","severity":1,"message":"359","line":416,"column":38,"nodeType":"360","messageId":"361","endLine":416,"endColumn":41,"suggestions":"396","suppressions":"397"},{"ruleId":"358","severity":1,"message":"359","line":416,"column":43,"nodeType":"360","messageId":"361","endLine":416,"endColumn":46,"suggestions":"398","suppressions":"399"},{"ruleId":"358","severity":1,"message":"359","line":504,"column":60,"nodeType":"360","messageId":"361","endLine":504,"endColumn":63,"suggestions":"400","suppressions":"401"},{"ruleId":"358","severity":1,"message":"359","line":555,"column":33,"nodeType":"360","messageId":"361","endLine":555,"endColumn":36,"suggestions":"402","suppressions":"403"},{"ruleId":"358","severity":1,"message":"359","line":555,"column":38,"nodeType":"360","messageId":"361","endLine":555,"endColumn":41,"suggestions":"404","suppressions":"405"},{"ruleId":"358","severity":1,"message":"359","line":555,"column":43,"nodeType":"360","messageId":"361","endLine":555,"endColumn":46,"suggestions":"406","suppressions":"407"},{"ruleId":"358","severity":1,"message":"359","line":564,"column":33,"nodeType":"360","messageId":"361","endLine":564,"endColumn":36,"suggestions":"408","suppressions":"409"},{"ruleId":"358","severity":1,"message":"359","line":564,"column":38,"nodeType":"360","messageId":"361","endLine":564,"endColumn":41,"suggestions":"410","suppressions":"411"},{"ruleId":"358","severity":1,"message":"359","line":564,"column":43,"nodeType":"360","messageId":"361","endLine":564,"endColumn":46,"suggestions":"412","suppressions":"413"},{"ruleId":"414","severity":2,"message":"415","line":42,"column":13,"nodeType":"416","messageId":"336","endLine":42,"endColumn":37,"suppressions":"417"},{"ruleId":"414","severity":2,"message":"418","line":42,"column":14,"nodeType":"416","messageId":"336","endLine":42,"endColumn":29,"suppressions":"419"},{"ruleId":"414","severity":2,"message":"415","line":48,"column":13,"nodeType":"416","messageId":"336","endLine":48,"endColumn":37,"suppressions":"420"},{"ruleId":"414","severity":2,"message":"418","line":48,"column":14,"nodeType":"416","messageId":"336","endLine":48,"endColumn":29,"suppressions":"421"},{"ruleId":"422","severity":2,"message":"423","line":30,"column":31,"nodeType":"424","messageId":"425","endLine":30,"endColumn":40,"suggestions":"426","suppressions":"427"},{"ruleId":"358","severity":1,"message":"359","line":95,"column":25,"nodeType":"360","messageId":"361","endLine":95,"endColumn":28,"suggestions":"428","suppressions":"429"},{"ruleId":"430","severity":2,"message":"431","line":42,"column":3,"nodeType":"335","endLine":42,"endColumn":7,"suppressions":"432"},{"ruleId":"430","severity":2,"message":"431","line":71,"column":3,"nodeType":"335","endLine":71,"endColumn":7,"suppressions":"433"},{"ruleId":"430","severity":2,"message":"431","line":112,"column":3,"nodeType":"335","endLine":112,"endColumn":7,"suppressions":"434"},{"ruleId":"430","severity":2,"message":"431","line":157,"column":3,"nodeType":"335","endLine":157,"endColumn":7,"suppressions":"435"},{"ruleId":"430","severity":2,"message":"431","line":188,"column":3,"nodeType":"335","endLine":188,"endColumn":7,"suppressions":"436"},{"ruleId":"430","severity":2,"message":"431","line":324,"column":4,"nodeType":"335","endLine":324,"endColumn":8,"suppressions":"437"},{"ruleId":"430","severity":2,"message":"431","line":334,"column":4,"nodeType":"335","endLine":334,"endColumn":8,"suppressions":"438"},{"ruleId":"430","severity":2,"message":"431","line":39,"column":4,"nodeType":"335","endLine":39,"endColumn":8,"suppressions":"439"},{"ruleId":"440","severity":2,"message":"441","line":65,"column":32,"nodeType":"442","messageId":"443","endLine":65,"endColumn":57,"suppressions":"444"},{"ruleId":"328","severity":1,"message":"445","line":2,"column":4,"nodeType":null,"messageId":"446","endLine":2,"endColumn":5},{"ruleId":"447","severity":2,"message":"448","line":27,"column":1,"nodeType":null,"endLine":440,"endColumn":1,"fix":"449","suppressions":"450"},{"ruleId":"451","severity":2,"message":"452","line":34,"column":1,"nodeType":"453","endLine":60,"endColumn":31,"fix":"454","suppressions":"455"},{"ruleId":"451","severity":2,"message":"452","line":62,"column":1,"nodeType":"453","endLine":93,"endColumn":33,"fix":"456","suppressions":"457"},{"ruleId":"328","severity":1,"message":"445","line":2,"column":4,"nodeType":null,"messageId":"446","endLine":2,"endColumn":5},{"ruleId":"447","severity":2,"message":"448","line":27,"column":1,"nodeType":null,"endLine":129,"endColumn":1,"fix":"458","suppressions":"459"},{"ruleId":"328","severity":1,"message":"445","line":2,"column":4,"nodeType":null,"messageId":"446","endLine":2,"endColumn":5},{"ruleId":"447","severity":2,"message":"448","line":27,"column":1,"nodeType":null,"endLine":167,"endColumn":1,"fix":"460","suppressions":"461"},{"ruleId":"451","severity":2,"message":"452","line":32,"column":1,"nodeType":"453","endLine":32,"endColumn":37,"fix":"462","suppressions":"463"},{"ruleId":"451","severity":2,"message":"452","line":33,"column":1,"nodeType":"453","endLine":40,"endColumn":25,"fix":"464","suppressions":"465"},{"ruleId":"451","severity":2,"message":"452","line":41,"column":1,"nodeType":"453","endLine":54,"endColumn":27,"fix":"466","suppressions":"467"},{"ruleId":"468","severity":1,"message":"469","line":152,"column":33,"nodeType":"470","messageId":"471","endLine":152,"endColumn":35},{"ruleId":"468","severity":1,"message":"469","line":191,"column":33,"nodeType":"470","messageId":"471","endLine":191,"endColumn":35},{"ruleId":"472","severity":2,"message":"473","line":31,"column":39,"nodeType":"470","messageId":"336","endLine":31,"endColumn":41,"suppressions":"474"},{"ruleId":"472","severity":2,"message":"473","line":35,"column":23,"nodeType":"470","messageId":"336","endLine":35,"endColumn":25,"suppressions":"475"},{"ruleId":"472","severity":2,"message":"473","line":37,"column":22,"nodeType":"470","messageId":"336","endLine":37,"endColumn":24,"suppressions":"476"},{"ruleId":"477","severity":2,"message":"478","line":68,"column":33,"nodeType":"442","messageId":"479","endLine":68,"endColumn":74,"suppressions":"480"},{"ruleId":"481","severity":2,"message":"482","line":28,"column":12,"nodeType":"483","messageId":"484","endLine":28,"endColumn":23,"suppressions":"485"},{"ruleId":"486","severity":1,"message":"487","line":52,"column":3,"nodeType":"483","messageId":"488","endLine":52,"endColumn":29},{"ruleId":"486","severity":1,"message":"489","line":53,"column":3,"nodeType":"483","messageId":"488","endLine":53,"endColumn":29},{"ruleId":"490","severity":2,"message":"491","line":21,"column":23,"nodeType":"335","endLine":21,"endColumn":51,"fix":"492","suppressions":"493"},{"ruleId":"388","severity":2,"message":"494","line":35,"column":2,"nodeType":"347","messageId":"390","endLine":35,"endColumn":31,"suppressions":"495"},{"ruleId":"472","severity":2,"message":"496","line":35,"column":40,"nodeType":"347","messageId":"336","endLine":35,"endColumn":42,"suppressions":"497"},{"ruleId":"388","severity":2,"message":"498","line":37,"column":2,"nodeType":"347","messageId":"390","endLine":37,"endColumn":34,"suppressions":"499"},{"ruleId":"472","severity":2,"message":"500","line":37,"column":43,"nodeType":"347","messageId":"336","endLine":37,"endColumn":45,"suppressions":"501"},{"ruleId":"388","severity":2,"message":"502","line":39,"column":2,"nodeType":"347","messageId":"390","endLine":39,"endColumn":25,"suppressions":"503"},{"ruleId":"486","severity":1,"message":"504","line":39,"column":26,"nodeType":"483","messageId":"488","endLine":39,"endColumn":37,"suppressions":"505"},{"ruleId":"472","severity":2,"message":"506","line":39,"column":45,"nodeType":"347","messageId":"336","endLine":39,"endColumn":47,"suppressions":"507"},{"ruleId":"388","severity":2,"message":"508","line":41,"column":2,"nodeType":"347","messageId":"390","endLine":41,"endColumn":25,"suppressions":"509"},{"ruleId":"486","severity":1,"message":"510","line":41,"column":26,"nodeType":"483","messageId":"488","endLine":41,"endColumn":72,"suppressions":"511"},{"ruleId":"472","severity":2,"message":"512","line":41,"column":80,"nodeType":"347","messageId":"336","endLine":41,"endColumn":82,"suppressions":"513"},{"ruleId":"388","severity":2,"message":"514","line":43,"column":2,"nodeType":"347","messageId":"390","endLine":43,"endColumn":27,"suppressions":"515"},{"ruleId":"486","severity":1,"message":"504","line":43,"column":28,"nodeType":"483","messageId":"488","endLine":43,"endColumn":39,"suppressions":"516"},{"ruleId":"388","severity":2,"message":"517","line":51,"column":2,"nodeType":"347","messageId":"390","endLine":51,"endColumn":34,"suppressions":"518"},{"ruleId":"472","severity":2,"message":"519","line":55,"column":10,"nodeType":"347","messageId":"336","endLine":55,"endColumn":12,"suppressions":"520"},{"ruleId":"521","severity":2,"message":"522","line":57,"column":2,"nodeType":"523","messageId":"524","endLine":59,"endColumn":3,"suppressions":"525"},{"ruleId":"521","severity":2,"message":"526","line":61,"column":2,"nodeType":"523","messageId":"524","endLine":63,"endColumn":3,"suppressions":"527"},{"ruleId":"477","severity":2,"message":"478","line":35,"column":6,"nodeType":"442","messageId":"479","endLine":35,"endColumn":75,"suppressions":"528"},{"ruleId":"477","severity":2,"message":"478","line":37,"column":6,"nodeType":"442","messageId":"479","endLine":37,"endColumn":69,"suppressions":"529"},{"ruleId":"477","severity":2,"message":"478","line":39,"column":31,"nodeType":"442","messageId":"479","endLine":39,"endColumn":69,"suppressions":"530"},{"ruleId":"477","severity":2,"message":"478","line":52,"column":31,"nodeType":"442","messageId":"479","endLine":52,"endColumn":90,"suppressions":"531"},"tsdoc/syntax","tsdoc-code-fence-missing-delimiter: Error parsing code fence: Missing closing delimiter","tsdoc-code-fence-missing-delimiter","tsdoc-escape-greater-than: The \">\" character should be escaped using a backslash to avoid confusion with an HTML tag","tsdoc-escape-greater-than","no-control-regex","Unexpected control character(s) in regular expression: \\x00.","Literal","unexpected",["532"],["533"],"no-nested-ternary","Do not nest ternary expressions.","ConditionalExpression","noNestedTernary",["534"],["535"],"func-names","Unexpected unnamed function.","FunctionExpression","unnamed","no-restricted-syntax","for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array.","ForInStatement","restrictedSyntax",["536"],"@typescript-eslint/no-non-null-assertion","Forbidden non-null assertion.","TSNonNullExpression","noNonNull","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["537","538"],["539"],["540","541"],["542"],["543","544"],["545"],["546","547"],["548","549"],["550","551"],["552","553"],["554","555"],["556","557"],["558","559"],["560","561"],["562","563"],["564","565"],["566","567"],["568","569"],["570","571"],["572","573"],["574","575"],["576","577"],["578","579"],["580","581"],["582","583"],["584","585"],"class-methods-use-this","Expected 'this' to be used by class method '_validateProviderPath'.","missingThis",["586"],"Expected 'this' to be used by class method 'supportsSubscriptions'.",["587"],["588","589"],["590","591"],["592","593"],["594","595"],["596","597"],["598","599"],["600","601"],["602","603"],["604","605"],["606","607"],["608","609"],["610","611"],["612","613"],["614","615"],["616","617"],["618","619"],["620","621"],["622","623"],["624","625"],["626","627"],"no-bitwise","Unexpected use of '|'.","BinaryExpression",["628"],"Unexpected use of '&'.",["629"],["630"],["631"],"@typescript-eslint/prefer-as-const","Expected a `const` assertion instead of a literal type annotation.","TSLiteralType","variableConstAssertion",["632"],["633"],["634","635"],["636"],"no-null/no-null","Use undefined instead of null",["637"],["638"],["639"],["640"],["641"],["642"],["643"],["644"],"no-promise-executor-return","Return values from promise executor functions cannot be read.","CallExpression","returnsValue",["645"],"tsdoc-characters-after-block-tag: The token \"@jest\" looks like a TSDoc tag but contains an invalid character \"-\"; if it is not a tag, use a backslash to escape the \"@\"","tsdoc-characters-after-block-tag","header/header","incorrect header",{"range":"646","text":"647"},["648"],"import/first","Import in body of module; reorder to top.","ImportDeclaration",{"range":"649","text":"650"},["651"],{"range":"652","text":"653"},["654"],{"range":"655","text":"647"},["656"],{"range":"657","text":"647"},["658"],{"range":"659","text":"650"},["660"],{"range":"661","text":"650"},["662"],{"range":"663","text":"664"},["665"],"@typescript-eslint/require-await","Async arrow function 'asyncHelper' has no 'await' expression.","ArrowFunctionExpression","missingAwait","@typescript-eslint/no-empty-function","Unexpected empty arrow function.",["666"],["667"],["668"],"jest/no-conditional-expect","Avoid calling `expect` conditionally`","conditionalExpect",["669"],"deprecation/deprecation","'isHexStrict' is deprecated. Will be removed in next release. Please use `web3-validator` package instead.","Identifier","deprecated",["670"],"@typescript-eslint/no-unused-vars","'_code' is defined but never used.","unusedVar","'_data' is defined but never used.","import/no-relative-packages","Relative import from another package is not allowed. Use `web3.js/fixtures/utils` instead of `../../../../fixtures/utils`",{"range":"671","text":"672"},["673"],"Expected 'this' to be used by class method '_addSocketListeners'.",["674"],"Unexpected empty method '_addSocketListeners'.",["675"],"Expected 'this' to be used by class method '_removeSocketListeners'.",["676"],"Unexpected empty method '_removeSocketListeners'.",["677"],"Expected 'this' to be used by class method '_onCloseEvent'.",["678"],"'_event' is defined but never used.",["679"],"Unexpected empty method '_onCloseEvent'.",["680"],"Expected 'this' to be used by class method '_sendToSocket'.",["681"],"'_payload' is defined but never used.",["682"],"Unexpected empty method '_sendToSocket'.",["683"],"Expected 'this' to be used by class method '_parseResponses'.",["684"],["685"],"Expected 'this' to be used by class method '_closeSocketConnection'.",["686"],"Unexpected empty method '_closeSocketConnection'.",["687"],"@typescript-eslint/explicit-member-accessibility","Missing accessibility modifier on method definition getStatus.","MethodDefinition","missingAccessibility",["688"],"Missing accessibility modifier on method definition setStatus.",["689"],["690"],["691"],["692"],["693"],{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"messageId":"695","fix":"696","desc":"697"},{"messageId":"698","fix":"699","desc":"700"},{"kind":"694","justification":"650"},{"messageId":"695","fix":"701","desc":"697"},{"messageId":"698","fix":"702","desc":"700"},{"kind":"694","justification":"650"},{"messageId":"695","fix":"703","desc":"697"},{"messageId":"698","fix":"704","desc":"700"},{"kind":"694","justification":"650"},{"messageId":"695","fix":"705","desc":"697"},{"messageId":"698","fix":"706","desc":"700"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"messageId":"695","fix":"707","desc":"697"},{"messageId":"698","fix":"708","desc":"700"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"messageId":"695","fix":"709","desc":"697"},{"messageId":"698","fix":"710","desc":"700"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"messageId":"695","fix":"711","desc":"697"},{"messageId":"698","fix":"712","desc":"700"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"messageId":"695","fix":"713","desc":"697"},{"messageId":"698","fix":"714","desc":"700"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"messageId":"695","fix":"715","desc":"697"},{"messageId":"698","fix":"716","desc":"700"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"messageId":"695","fix":"717","desc":"697"},{"messageId":"698","fix":"718","desc":"700"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"messageId":"695","fix":"719","desc":"697"},{"messageId":"698","fix":"720","desc":"700"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"messageId":"695","fix":"721","desc":"697"},{"messageId":"698","fix":"722","desc":"700"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"messageId":"695","fix":"723","desc":"697"},{"messageId":"698","fix":"724","desc":"700"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"messageId":"695","fix":"725","desc":"697"},{"messageId":"698","fix":"726","desc":"700"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"messageId":"695","fix":"727","desc":"697"},{"messageId":"698","fix":"728","desc":"700"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"messageId":"695","fix":"729","desc":"697"},{"messageId":"698","fix":"730","desc":"700"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"messageId":"695","fix":"731","desc":"697"},{"messageId":"698","fix":"732","desc":"700"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"messageId":"695","fix":"733","desc":"697"},{"messageId":"698","fix":"734","desc":"700"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"messageId":"695","fix":"735","desc":"697"},{"messageId":"698","fix":"736","desc":"700"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"messageId":"695","fix":"737","desc":"697"},{"messageId":"698","fix":"738","desc":"700"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"messageId":"695","fix":"739","desc":"697"},{"messageId":"698","fix":"740","desc":"700"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"messageId":"695","fix":"741","desc":"697"},{"messageId":"698","fix":"742","desc":"700"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"messageId":"695","fix":"743","desc":"697"},{"messageId":"698","fix":"744","desc":"700"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"messageId":"745","fix":"746","desc":"747"},{"kind":"694","justification":"650"},{"messageId":"695","fix":"748","desc":"697"},{"messageId":"698","fix":"749","desc":"700"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},[0,35],"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n",{"kind":"694","justification":"650"},[1628,1628],"",{"kind":"694","justification":"650"},[0,2336],"/**\n * @jest-environment jsdom\n */\n\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n// this file contains the unit test for the event emitter in the DOM environment\n// it is executed in the jsdom environment (see \"@jest-environment jsdom\" in the top comment of this file)\n\n// ignore the following rule to allow keeping `@jest-environment jsdom` on top:\n// eslint-disable-next-line header/header\nimport { TextDecoder, TextEncoder } from 'util';\n\n/* eslint-disable import/first */\nimport {\n\tasciiToHex,\n\tbytesToHex,\n\tfromAscii,\n\tfromDecimal,\n\tfromUtf8,\n\tfromWei,\n\thexToAscii,\n\thexToBytes,\n\thexToNumber,\n\thexToNumberString,\n\thexToString,\n\thexToUtf8,\n\tnumberToHex,\n\tstringToHex,\n\ttoAscii,\n\ttoDecimal,\n\ttoHex,\n\ttoNumber,\n\ttoUtf8,\n\ttoWei,\n\tutf8ToHex,\n\ttoChecksumAddress,\n\tbytesToUint8Array,\n\ttoBigInt,\n\ttoBool,\n} from '../../src/converters';\n\nimport {\n\tasciiToHexValidData,\n\tbytesToHexInvalidData,\n\tbytesToHexValidData,\n\tfromWeiInvalidData,\n\tfromWeiValidData,\n\thexToAsciiValidData,\n\thexToBytesInvalidData,\n\thexToBytesValidData,\n\thexToNumberInvalidData,\n\thexToNumberValidData,\n\thexToUtf8InvalidData,\n\thexToUtf8ValidData,\n\ttoUtf8ValidData,\n\tnumberToHexInvalidData,\n\tnumberToHexValidData,\n\ttoHexValidData,\n\ttoHexInvalidData,\n\ttoWeiInvalidData,\n\ttoWeiValidData,\n\tutf8ToHexInvalidData,\n\tutf8ToHexValidData,\n\ttoCheckSumValidData,\n\tbytesToUint8ArrayInvalidData,\n\tbytesToUint8ArrayValidData,\n\ttoBigIntValidData,\n\ttoBigIntInvalidData,\n\ttoCheckSumInvalidData,\n\tnumberToHexstrictValidData,\n\ttoBoolValidData,\n\ttoBoolInvalidData,\n} from '../fixtures/converters';\n// polyfill for jsdom\n// @ts-expect-error ignore the error 'Type 'typeof TextDecoder' is not assignable to type ...'\nglobal.TextDecoder = TextDecoder;\nglobal.TextEncoder = TextEncoder;",{"kind":"694","justification":"650"},[0,35],{"kind":"694","justification":"650"},[0,35],{"kind":"694","justification":"650"},[1166,1166],{"kind":"694","justification":"650"},[1294,1294],{"kind":"694","justification":"650"},[0,1600],"/**\n * @jest-environment jsdom\n */\n\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n// this file contains the unit test for the event emitter in the DOM environment\n// it is executed in the jsdom environment (see \"@jest-environment jsdom\" in the top comment of this file)\n\n// ignore the following rule to allow keeping `@jest-environment jsdom` on top:\n// eslint-disable-next-line header/header\nimport { TextEncoder } from 'util';\n\n/* eslint-disable import/first */\nimport { keccak256 } from 'js-sha3';\nimport {\n\tsha3,\n\tsha3Raw,\n\tsoliditySha3,\n\tsoliditySha3Raw,\n\tencodePacked,\n\tkeccak256 as web3keccak256,\n} from '../../src/hash';\nimport {\n\tsha3Data,\n\tsha3ValidData,\n\tsoliditySha3RawValidData,\n\tsha3RawValidData,\n\tsoliditySha3ValidData,\n\tsoliditySha3InvalidData,\n\tcompareSha3JSValidData,\n\tcompareSha3JSRawValidData,\n\tencodePackData,\n\tencodePackedInvalidData,\n\tkeccak256ValidData,\n\tsoliditySha3BigIntValidData,\n} from '../fixtures/hash';\n// polyfill for jsdom\nglobal.TextEncoder = TextEncoder;",{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},[889,917],"\"web3.js/fixtures/utils\"",{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},{"kind":"694","justification":"650"},"directive","suggestUnknown",{"range":"750","text":"751"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"750","text":"752"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"753","text":"751"},{"range":"753","text":"752"},{"range":"754","text":"751"},{"range":"754","text":"752"},{"range":"755","text":"751"},{"range":"755","text":"752"},{"range":"756","text":"751"},{"range":"756","text":"752"},{"range":"757","text":"751"},{"range":"757","text":"752"},{"range":"758","text":"751"},{"range":"758","text":"752"},{"range":"759","text":"751"},{"range":"759","text":"752"},{"range":"760","text":"751"},{"range":"760","text":"752"},{"range":"761","text":"751"},{"range":"761","text":"752"},{"range":"762","text":"751"},{"range":"762","text":"752"},{"range":"763","text":"751"},{"range":"763","text":"752"},{"range":"764","text":"751"},{"range":"764","text":"752"},{"range":"765","text":"751"},{"range":"765","text":"752"},{"range":"766","text":"751"},{"range":"766","text":"752"},{"range":"767","text":"751"},{"range":"767","text":"752"},{"range":"768","text":"751"},{"range":"768","text":"752"},{"range":"769","text":"751"},{"range":"769","text":"752"},{"range":"770","text":"751"},{"range":"770","text":"752"},{"range":"771","text":"751"},{"range":"771","text":"752"},{"range":"772","text":"751"},{"range":"772","text":"752"},{"range":"773","text":"751"},{"range":"773","text":"752"},{"range":"774","text":"751"},{"range":"774","text":"752"},"variableSuggest",{"range":"775","text":"776"},"You should use `as const` instead of type annotation.",{"range":"777","text":"751"},{"range":"777","text":"752"},[2390,2393],"unknown","never",[2395,2398],[2400,2403],[2537,2540],[2542,2545],[2547,2550],[4406,4409],[4411,4414],[4416,4419],[4490,4493],[4495,4498],[4500,4503],[5732,5735],[12696,12699],[12701,12704],[12706,12709],[15190,15193],[16563,16566],[16568,16571],[16573,16576],[16845,16848],[16850,16853],[16855,16858],[1233,1256]," = 'Promise' as const",[3269,3272]]