[{"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-core/src/formatters.ts":"1","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-core/src/index.ts":"2","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-core/src/types.ts":"3","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-core/src/utils.ts":"4","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-core/src/web3_batch_request.ts":"5","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-core/src/web3_config.ts":"6","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-core/src/web3_context.ts":"7","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-core/src/web3_event_emitter.ts":"8","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-core/src/web3_promi_event.ts":"9","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-core/src/web3_request_manager.ts":"10","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-core/src/web3_subscription_manager.ts":"11","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-core/src/web3_subscriptions.ts":"12","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-core/test/unit/fixtures/example_subscription.ts":"13","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-core/test/unit/formatters.test.ts":"14","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-core/test/unit/reexported_web3_context.ts":"15","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-core/test/unit/web3_batch_request.test.ts":"16","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-core/test/unit/web3_config.test.ts":"17","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-core/test/unit/web3_context.test.ts":"18","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-core/test/unit/web3_extend.test.ts":"19","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-core/test/unit/web3_middleware_request_manager.test.ts":"20","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-core/test/unit/web3_promi_event.test.ts":"21","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-core/test/unit/web3_request_manager.test.ts":"22","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-core/test/unit/web3_subscription.test.ts":"23","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-core/test/unit/web3_subscription_manager.test.ts":"24","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-core/test/unit/web3_subscription_old_providers.test.ts":"25"},{"size":15507,"mtime":1701208800065,"results":"26","hashOfConfig":"27"},{"size":1164,"mtime":1685575123074,"results":"28","hashOfConfig":"27"},{"size":1508,"mtime":1713450480081,"results":"29","hashOfConfig":"27"},{"size":2887,"mtime":1700492614527,"results":"30","hashOfConfig":"27"},{"size":3898,"mtime":1692381974526,"results":"31","hashOfConfig":"27"},{"size":16615,"mtime":1713877871371,"results":"32","hashOfConfig":"27"},{"size":15401,"mtime":1713877871373,"results":"33","hashOfConfig":"27"},{"size":2685,"mtime":1696949980221,"results":"34","hashOfConfig":"27"},{"size":2369,"mtime":1685575123075,"results":"35","hashOfConfig":"27"},{"size":14826,"mtime":1713877869086,"results":"36","hashOfConfig":"27"},{"size":8177,"mtime":1688764157596,"results":"37","hashOfConfig":"27"},{"size":6915,"mtime":1689879155151,"results":"38","hashOfConfig":"27"},{"size":976,"mtime":1689526747384,"results":"39","hashOfConfig":"40"},{"size":24070,"mtime":1701269843017,"results":"41","hashOfConfig":"40"},{"size":727,"mtime":1690943262288,"results":"42","hashOfConfig":"40"},{"size":6771,"mtime":1701269843018,"results":"43","hashOfConfig":"40"},{"size":4738,"mtime":1713453005519,"results":"44","hashOfConfig":"40"},{"size":8784,"mtime":1713450480082,"results":"45","hashOfConfig":"40"},{"size":2285,"mtime":1690943262288,"results":"46","hashOfConfig":"40"},{"size":5094,"mtime":1713450480083,"results":"47","hashOfConfig":"40"},{"size":4047,"mtime":1701269843018,"results":"48","hashOfConfig":"40"},{"size":45603,"mtime":1701873231361,"results":"49","hashOfConfig":"40"},{"size":5500,"mtime":1689879155151,"results":"50","hashOfConfig":"40"},{"size":7226,"mtime":1688764157596,"results":"51","hashOfConfig":"40"},{"size":3798,"mtime":1689526747384,"results":"52","hashOfConfig":"40"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},"mlitw7",{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1izmsp6",{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112"},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119"},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126"},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130"},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134"},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138"},"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-core/src/formatters.ts",["139","140","141","142","143","144","145"],["146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177"],"ï»¿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { FormatterError } from 'web3-errors';\nimport { Iban } from 'web3-eth-iban';\nimport {\n\tBlockTags,\n\tFilter,\n\tNumbers,\n\tTopic,\n\tBlockInput,\n\tBlockOutput,\n\tLogsInput,\n\tLogsOutput,\n\tMutable,\n\tPostInput,\n\tPostOutput,\n\tProof,\n\tReceiptInput,\n\tReceiptOutput,\n\tSyncInput,\n\tSyncOutput,\n\tTransactionInput,\n\tTransactionOutput,\n} from 'web3-types';\nimport {\n\tfromUtf8,\n\thexToNumber,\n\thexToNumberString,\n\tisAddress,\n\tisHexStrict,\n\tmergeDeep,\n\tnumberToHex,\n\tsha3Raw,\n\ttoChecksumAddress,\n\ttoNumber,\n\ttoUtf8,\n\tutf8ToHex,\n} from 'web3-utils';\nimport { isBlockTag, isHex, isNullish } from 'web3-validator';\n\n/* eslint-disable deprecation/deprecation */\n/**\n * @deprecated Use format function from web3-utils package instead\n * Will format the given storage key array values to hex strings.\n */\nexport const inputStorageKeysFormatter = (keys: Array<string>) => keys.map(num => numberToHex(num));\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Will format the given proof response from the node.\n */\nexport const outputProofFormatter = (proof: Proof): Proof => ({\n\taddress: toChecksumAddress(proof.address),\n\tnonce: hexToNumberString(proof.nonce),\n\tbalance: hexToNumberString(proof.balance),\n});\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Should the format output to a big number\n */\nexport const outputBigIntegerFormatter = (number: Numbers) => toNumber(number);\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Returns the given block number as hex string or the predefined block number 'latest', 'pending', 'earliest', 'genesis'\n */\nexport const inputBlockNumberFormatter = (blockNumber: Numbers | undefined) => {\n\tif (isNullish(blockNumber)) {\n\t\treturn undefined;\n\t}\n\n\tif (typeof blockNumber === 'string' && isBlockTag(blockNumber)) {\n\t\treturn blockNumber;\n\t}\n\n\tif (blockNumber === 'genesis') {\n\t\treturn '0x0';\n\t}\n\n\tif (typeof blockNumber === 'string' && isHexStrict(blockNumber)) {\n\t\treturn blockNumber.toLowerCase();\n\t}\n\n\treturn numberToHex(blockNumber);\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Returns the given block number as hex string or does return the defaultBlock property of the current module\n */\nexport const inputDefaultBlockNumberFormatter = (\n\tblockNumber: Numbers | undefined,\n\tdefaultBlock: Numbers,\n) => {\n\tif (!blockNumber) {\n\t\treturn inputBlockNumberFormatter(defaultBlock);\n\t}\n\n\treturn inputBlockNumberFormatter(blockNumber);\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * @param address\n */\nexport const inputAddressFormatter = (address: string): string | never => {\n\tif (Iban.isValid(address) && Iban.isDirect(address)) {\n\t\tconst iban = new Iban(address);\n\n\t\treturn iban.toAddress().toLowerCase();\n\t}\n\n\tif (isAddress(address)) {\n\t\treturn `0x${address.toLowerCase().replace('0x', '')}`;\n\t}\n\n\tthrow new FormatterError(\n\t\t`Provided address ${address} is invalid, the capitalization checksum test failed, or it's an indirect IBAN address which can't be converted.`,\n\t);\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the input of a transaction and converts all values to HEX\n */\nexport const txInputOptionsFormatter = (options: TransactionInput): Mutable<TransactionOutput> => {\n\tconst modifiedOptions = { ...options } as unknown as Mutable<TransactionOutput>;\n\n\tif (options.to) {\n\t\t// it might be contract creation\n\t\tmodifiedOptions.to = inputAddressFormatter(options.to);\n\t}\n\n\tif (options.data && options.input) {\n\t\tthrow new FormatterError(\n\t\t\t'You can\\'t have \"data\" and \"input\" as properties of transactions at the same time, please use either \"data\" or \"input\" instead.',\n\t\t);\n\t}\n\n\tif (!options.input && options.data) {\n\t\tmodifiedOptions.input = options.data;\n\t\tdelete modifiedOptions.data;\n\t}\n\n\tif (options.input && !options.input.startsWith('0x')) {\n\t\tmodifiedOptions.input = `0x${options.input}`;\n\t}\n\n\tif (modifiedOptions.input && !isHexStrict(modifiedOptions.input)) {\n\t\tthrow new FormatterError('The input field must be HEX encoded data.');\n\t}\n\n\t// allow both\n\tif (options.gas || options.gasLimit) {\n\t\tmodifiedOptions.gas = toNumber(options.gas ?? options.gasLimit);\n\t}\n\n\tif (options.maxPriorityFeePerGas || options.maxFeePerGas) {\n\t\tdelete modifiedOptions.gasPrice;\n\t}\n\n\t['gasPrice', 'gas', 'value', 'maxPriorityFeePerGas', 'maxFeePerGas', 'nonce', 'chainId']\n\t\t.filter(key => !isNullish(modifiedOptions[key]))\n\t\t.forEach(key => {\n\t\t\tmodifiedOptions[key] = numberToHex(modifiedOptions[key] as Numbers);\n\t\t});\n\n\treturn modifiedOptions as TransactionOutput;\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the input of a transaction and converts all values to HEX\n */\nexport const inputCallFormatter = (options: TransactionInput, defaultAccount?: string) => {\n\tconst opts = txInputOptionsFormatter(options);\n\n\tconst from = opts.from ?? defaultAccount;\n\n\tif (from) {\n\t\topts.from = inputAddressFormatter(from);\n\t}\n\n\treturn opts;\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the input of a transaction and converts all values to HEX\n */\nexport const inputTransactionFormatter = (options: TransactionInput, defaultAccount?: string) => {\n\tconst opts = txInputOptionsFormatter(options);\n\n\t// check from, only if not number, or object\n\tif (!(typeof opts.from === 'number') && !(!!opts.from && typeof opts.from === 'object')) {\n\t\topts.from = opts.from ?? defaultAccount;\n\n\t\tif (!options.from && !(typeof options.from === 'number')) {\n\t\t\tthrow new FormatterError('The send transactions \"from\" field must be defined!');\n\t\t}\n\n\t\topts.from = inputAddressFormatter(options.from);\n\t}\n\n\treturn opts;\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Hex encodes the data passed to eth_sign and personal_sign\n */\nexport const inputSignFormatter = (data: string) => (isHexStrict(data) ? data : utf8ToHex(data));\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the output of a transaction to its proper values\n * @function outputTransactionFormatter\n */\nexport const outputTransactionFormatter = (tx: TransactionInput): TransactionOutput => {\n\tconst modifiedTx = { ...tx } as unknown as Mutable<TransactionOutput>;\n\n\tif (tx.blockNumber) {\n\t\tmodifiedTx.blockNumber = hexToNumber(tx.blockNumber);\n\t}\n\n\tif (tx.transactionIndex) {\n\t\tmodifiedTx.transactionIndex = hexToNumber(tx.transactionIndex);\n\t}\n\n\tmodifiedTx.nonce = hexToNumber(tx.nonce);\n\tmodifiedTx.gas = hexToNumber(tx.gas);\n\n\tif (tx.gasPrice) {\n\t\tmodifiedTx.gasPrice = outputBigIntegerFormatter(tx.gasPrice);\n\t}\n\n\tif (tx.maxFeePerGas) {\n\t\tmodifiedTx.maxFeePerGas = outputBigIntegerFormatter(tx.maxFeePerGas);\n\t}\n\n\tif (tx.maxPriorityFeePerGas) {\n\t\tmodifiedTx.maxPriorityFeePerGas = outputBigIntegerFormatter(tx.maxPriorityFeePerGas);\n\t}\n\n\tif (tx.type) {\n\t\tmodifiedTx.type = hexToNumber(tx.type);\n\t}\n\n\tmodifiedTx.value = outputBigIntegerFormatter(tx.value);\n\n\tif (tx.to && isAddress(tx.to)) {\n\t\t// tx.to could be `0x0` or `null` while contract creation\n\t\tmodifiedTx.to = toChecksumAddress(tx.to);\n\t} else {\n\t\tmodifiedTx.to = undefined; // set to `null` if invalid address\n\t}\n\n\tif (tx.from) {\n\t\tmodifiedTx.from = toChecksumAddress(tx.from);\n\t}\n\n\treturn modifiedTx;\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * @param topic\n */\n// To align with specification we use the type \"null\" here\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport const inputTopicFormatter = (topic: Topic): Topic | null => {\n\t// Using \"null\" value intentionally for validation\n\t// eslint-disable-next-line no-null/no-null\n\tif (isNullish(topic)) return null;\n\n\tconst value = String(topic);\n\n\treturn isHex(value) ? value : fromUtf8(value);\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * @param filter\n */\nexport const inputLogFormatter = (filter: Filter) => {\n\tconst val: Mutable<Filter> = isNullish(filter)\n\t\t? {}\n\t\t: mergeDeep({}, filter as Record<string, unknown>);\n\n\t// If options !== undefined, don't blow out existing data\n\tif (isNullish(val.fromBlock)) {\n\t\tval.fromBlock = BlockTags.LATEST;\n\t}\n\n\tval.fromBlock = inputBlockNumberFormatter(val.fromBlock);\n\n\tif (!isNullish(val.toBlock)) {\n\t\tval.toBlock = inputBlockNumberFormatter(val.toBlock);\n\t}\n\n\t// make sure topics, get converted to hex\n\tval.topics = val.topics ?? [];\n\tval.topics = val.topics.map(topic =>\n\t\tArray.isArray(topic)\n\t\t\t? (topic.map(inputTopicFormatter) as Topic[])\n\t\t\t: inputTopicFormatter(topic as Topic),\n\t);\n\n\tif (val.address) {\n\t\tval.address = Array.isArray(val.address)\n\t\t\t? val.address.map(addr => inputAddressFormatter(addr))\n\t\t\t: inputAddressFormatter(val.address);\n\t}\n\n\treturn val as Filter;\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the output of a log\n * @function outputLogFormatter\n */\nexport const outputLogFormatter = (log: Partial<LogsInput>): LogsOutput => {\n\tconst modifiedLog = { ...log } as unknown as Mutable<LogsOutput>;\n\n\tconst logIndex =\n\t\ttypeof log.logIndex === 'string'\n\t\t\t? log.logIndex\n\t\t\t: numberToHex(log.logIndex as unknown as number);\n\n\t// generate a custom log id\n\tif (typeof log.blockHash === 'string' && typeof log.transactionHash === 'string') {\n\t\tconst shaId = sha3Raw(\n\t\t\t`${log.blockHash.replace('0x', '')}${log.transactionHash.replace(\n\t\t\t\t'0x',\n\t\t\t\t'',\n\t\t\t)}${logIndex.replace('0x', '')}`,\n\t\t);\n\t\tmodifiedLog.id = `log_${shaId.replace('0x', '').slice(0, 8)}`;\n\t} else if (!log.id) {\n\t\tmodifiedLog.id = undefined;\n\t}\n\n\tif (log.blockNumber && isHexStrict(log.blockNumber)) {\n\t\tmodifiedLog.blockNumber = hexToNumber(log.blockNumber);\n\t}\n\tif (log.transactionIndex && isHexStrict(log.transactionIndex)) {\n\t\tmodifiedLog.transactionIndex = hexToNumber(log.transactionIndex);\n\t}\n\n\tif (log.logIndex && isHexStrict(log.logIndex)) {\n\t\tmodifiedLog.logIndex = hexToNumber(log.logIndex);\n\t}\n\n\tif (log.address) {\n\t\tmodifiedLog.address = toChecksumAddress(log.address);\n\t}\n\n\treturn modifiedLog;\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the output of a transaction receipt to its proper values\n */\nexport const outputTransactionReceiptFormatter = (receipt: ReceiptInput): ReceiptOutput => {\n\tif (typeof receipt !== 'object') {\n\t\tthrow new FormatterError(`Received receipt is invalid: ${String(receipt)}`);\n\t}\n\tconst modifiedReceipt = { ...receipt } as unknown as Mutable<ReceiptOutput>;\n\n\tif (receipt.blockNumber) {\n\t\tmodifiedReceipt.blockNumber = hexToNumber(receipt.blockNumber);\n\t}\n\n\tif (receipt.transactionIndex) {\n\t\tmodifiedReceipt.transactionIndex = hexToNumber(receipt.transactionIndex);\n\t}\n\n\tmodifiedReceipt.cumulativeGasUsed = hexToNumber(receipt.cumulativeGasUsed);\n\tmodifiedReceipt.gasUsed = hexToNumber(receipt.gasUsed);\n\n\tif (receipt.logs && Array.isArray(receipt.logs)) {\n\t\tmodifiedReceipt.logs = receipt.logs.map(outputLogFormatter);\n\t}\n\n\tif (receipt.effectiveGasPrice) {\n\t\tmodifiedReceipt.effectiveGasPrice = hexToNumber(receipt.effectiveGasPrice);\n\t}\n\n\tif (receipt.contractAddress) {\n\t\tmodifiedReceipt.contractAddress = toChecksumAddress(receipt.contractAddress);\n\t}\n\n\tif (receipt.status) {\n\t\tmodifiedReceipt.status = Boolean(parseInt(receipt.status, 10));\n\t}\n\n\treturn modifiedReceipt;\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the output of a block to its proper values\n * @function outputBlockFormatter\n */\nexport const outputBlockFormatter = (block: BlockInput): BlockOutput => {\n\tconst modifiedBlock = { ...block } as unknown as Mutable<BlockOutput>;\n\n\t// transform to number\n\tmodifiedBlock.gasLimit = hexToNumber(block.gasLimit);\n\tmodifiedBlock.gasUsed = hexToNumber(block.gasUsed);\n\tmodifiedBlock.size = hexToNumber(block.size);\n\tmodifiedBlock.timestamp = hexToNumber(block.timestamp);\n\n\tif (block.number) {\n\t\tmodifiedBlock.number = hexToNumber(block.number);\n\t}\n\n\tif (block.difficulty) {\n\t\tmodifiedBlock.difficulty = outputBigIntegerFormatter(block.difficulty);\n\t}\n\n\tif (block.totalDifficulty) {\n\t\tmodifiedBlock.totalDifficulty = outputBigIntegerFormatter(block.totalDifficulty);\n\t}\n\n\tif (block.transactions && Array.isArray(block.transactions)) {\n\t\tmodifiedBlock.transactions = block.transactions.map(outputTransactionFormatter);\n\t}\n\n\tif (block.miner) {\n\t\tmodifiedBlock.miner = toChecksumAddress(block.miner);\n\t}\n\n\tif (block.baseFeePerGas) {\n\t\tmodifiedBlock.baseFeePerGas = outputBigIntegerFormatter(block.baseFeePerGas);\n\t}\n\n\treturn modifiedBlock;\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the input of a whisper post and converts all values to HEX\n */\nexport const inputPostFormatter = (post: PostOutput): PostInput => {\n\tconst modifiedPost = { ...post } as unknown as Mutable<PostInput>;\n\n\tif (post.ttl) {\n\t\tmodifiedPost.ttl = numberToHex(post.ttl);\n\t}\n\n\tif (post.workToProve) {\n\t\tmodifiedPost.workToProve = numberToHex(post.workToProve);\n\t}\n\n\tif (post.priority) {\n\t\tmodifiedPost.priority = numberToHex(post.priority);\n\t}\n\n\t// fallback\n\tif (post.topics && !Array.isArray(post.topics)) {\n\t\tmodifiedPost.topics = post.topics ? [post.topics] : [];\n\t}\n\n\t// format the following options\n\tmodifiedPost.topics = modifiedPost.topics?.map(topic =>\n\t\ttopic.startsWith('0x') ? topic : fromUtf8(topic),\n\t);\n\n\treturn modifiedPost;\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the output of a received post message\n * @function outputPostFormatter\n */\nexport const outputPostFormatter = (post: PostInput): PostOutput => {\n\tconst modifiedPost = { ...post } as unknown as Mutable<PostOutput>;\n\n\tif (post.expiry) {\n\t\tmodifiedPost.expiry = hexToNumber(post.expiry);\n\t}\n\n\tif (post.sent) {\n\t\tmodifiedPost.sent = hexToNumber(post.sent);\n\t}\n\n\tif (post.ttl) {\n\t\tmodifiedPost.ttl = hexToNumber(post.ttl);\n\t}\n\n\tif (post.workProved) {\n\t\tmodifiedPost.workProved = hexToNumber(post.workProved);\n\t}\n\n\t// post.payloadRaw = post.payload;\n\t// post.payload = utils.hexToAscii(post.payload);\n\n\t// if (utils.isJson(post.payload)) {\n\t//     post.payload = JSON.parse(post.payload);\n\t// }\n\n\t// format the following options\n\tif (!post.topics) {\n\t\tmodifiedPost.topics = [];\n\t}\n\n\tmodifiedPost.topics = modifiedPost.topics?.map(toUtf8);\n\n\treturn modifiedPost;\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n */\nexport const outputSyncingFormatter = (result: SyncInput): SyncOutput => {\n\tconst modifiedResult = { ...result } as unknown as Mutable<SyncOutput>;\n\n\tmodifiedResult.startingBlock = hexToNumber(result.startingBlock);\n\tmodifiedResult.currentBlock = hexToNumber(result.currentBlock);\n\tmodifiedResult.highestBlock = hexToNumber(result.highestBlock);\n\n\tif (result.knownStates) {\n\t\tmodifiedResult.knownStates = hexToNumber(result.knownStates);\n\t}\n\n\tif (result.pulledStates) {\n\t\tmodifiedResult.pulledStates = hexToNumber(result.pulledStates);\n\t}\n\n\treturn modifiedResult;\n};\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-core/src/index.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-core/src/types.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-core/src/utils.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-core/src/web3_batch_request.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-core/src/web3_config.ts",["178"],["179"],"ï»¿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport {\n\tNumbers,\n\tHexString,\n\tBlockNumberOrTag,\n\tCommon,\n\tDEFAULT_RETURN_FORMAT,\n\tDataFormat,\n} from 'web3-types';\nimport { ConfigHardforkMismatchError, ConfigChainMismatchError } from 'web3-errors';\nimport { isNullish, toHex } from 'web3-utils';\nimport { TransactionTypeParser } from './types.js';\n// eslint-disable-next-line import/no-cycle\nimport { TransactionBuilder } from './web3_context.js';\nimport { Web3EventEmitter } from './web3_event_emitter.js';\n\n// To avoid cycle dependency declare this\nexport interface Web3ConfigOptions {\n\thandleRevert: boolean;\n\tdefaultAccount?: HexString;\n\tdefaultBlock: BlockNumberOrTag;\n\ttransactionSendTimeout: number;\n\ttransactionBlockTimeout: number;\n\ttransactionConfirmationBlocks: number;\n\ttransactionPollingInterval: number;\n\ttransactionPollingTimeout: number;\n\ttransactionReceiptPollingInterval?: number;\n\ttransactionConfirmationPollingInterval?: number;\n\tblockHeaderTimeout: number;\n\tmaxListenersWarningThreshold: number;\n\tcontractDataInputFill: 'data' | 'input' | 'both';\n\tdefaultNetworkId?: Numbers;\n\tdefaultChain: string;\n\tdefaultHardfork: string;\n\n\tdefaultCommon?: Common;\n\tdefaultTransactionType: Numbers;\n\tdefaultMaxPriorityFeePerGas: Numbers;\n\tenableExperimentalFeatures: {\n\t\tuseSubscriptionWhenCheckingBlockTimeout: boolean;\n\t\tuseRpcCallSpecification: boolean; // EIP-1474 https://eips.ethereum.org/EIPS/eip-1474\n\t\t// other experimental features...\n\t};\n\ttransactionBuilder?: TransactionBuilder;\n\ttransactionTypeParser?: TransactionTypeParser;\n\tdefaultReturnFormat: DataFormat;\n}\n\ntype ConfigEvent<T, P extends keyof T = keyof T> = P extends unknown\n\t? { name: P; oldValue: T[P]; newValue: T[P] }\n\t: never;\n\nexport enum Web3ConfigEvent {\n\tCONFIG_CHANGE = 'CONFIG_CHANGE',\n}\n\nexport abstract class Web3Config\n\textends Web3EventEmitter<{ [Web3ConfigEvent.CONFIG_CHANGE]: ConfigEvent<Web3ConfigOptions> }>\n\timplements Web3ConfigOptions\n{\n\tpublic config: Web3ConfigOptions = {\n\t\thandleRevert: false,\n\t\tdefaultAccount: undefined,\n\t\tdefaultBlock: 'latest',\n\t\ttransactionBlockTimeout: 50,\n\t\ttransactionConfirmationBlocks: 24,\n\t\ttransactionPollingInterval: 1000,\n\t\ttransactionPollingTimeout: 750 * 1000,\n\t\ttransactionReceiptPollingInterval: undefined,\n\t\ttransactionSendTimeout: 750 * 1000,\n\t\ttransactionConfirmationPollingInterval: undefined,\n\t\tblockHeaderTimeout: 10,\n\t\tmaxListenersWarningThreshold: 100,\n\t\tcontractDataInputFill: 'data',\n\t\tdefaultNetworkId: undefined,\n\t\tdefaultChain: 'mainnet',\n\t\tdefaultHardfork: 'london',\n\t\t// TODO - Check if there is a default Common\n\t\tdefaultCommon: undefined,\n\t\tdefaultTransactionType: '0x2',\n\t\tdefaultMaxPriorityFeePerGas: toHex(2500000000),\n\t\tenableExperimentalFeatures: {\n\t\t\tuseSubscriptionWhenCheckingBlockTimeout: false,\n\t\t\tuseRpcCallSpecification: false,\n\t\t},\n\t\ttransactionBuilder: undefined,\n\t\ttransactionTypeParser: undefined,\n\t\tdefaultReturnFormat: DEFAULT_RETURN_FORMAT,\n\t};\n\n\tpublic constructor(options?: Partial<Web3ConfigOptions>) {\n\t\tsuper();\n\t\tthis.setConfig(options ?? {});\n\t}\n\n\tpublic setConfig(options: Partial<Web3ConfigOptions>) {\n\t\t// TODO: Improve and add key check\n\t\tconst keys = Object.keys(options) as (keyof Web3ConfigOptions)[];\n\t\tfor (const key of keys) {\n\t\t\tthis._triggerConfigChange(key, options[key]);\n\t\t}\n\t\tObject.assign(this.config, options);\n\t}\n\n\t/**\n\t * The `handleRevert` options property returns the revert reason string if enabled for the following methods:\n\t * - web3.eth.sendTransaction()\n\t * - web3.eth.call()\n\t * - myContract.methods.myMethod().call()\n\t * - myContract.methods.myMethod().send()\n\t * Default is `false`.\n\t *\n\t * `Note`: At the moment `handleRevert` is only supported for `sendTransaction` and not for `sendSignedTransaction`\n\t */\n\tpublic get handleRevert() {\n\t\treturn this.config.handleRevert;\n\t}\n\n\t/**\n\t * Will set the handleRevert\n\t */\n\tpublic set handleRevert(val) {\n\t\tthis._triggerConfigChange('handleRevert', val);\n\t\tthis.config.handleRevert = val;\n\t}\n\n\t/**\n\t * The `contractDataInputFill` options property will allow you to set the hash of the method signature and encoded parameters to the property\n\t * either `data`, `input` or both within your contract.\n\t * This will affect the contracts send, call and estimateGas methods\n\t * Default is `input`.\n\t */\n\tpublic get contractDataInputFill() {\n\t\treturn this.config.contractDataInputFill;\n\t}\n\n\t/**\n\t * Will set the contractDataInputFill\n\t */\n\tpublic set contractDataInputFill(val) {\n\t\tthis._triggerConfigChange('contractDataInputFill', val);\n\t\tthis.config.contractDataInputFill = val;\n\t}\n\n\t/**\n\t * This default address is used as the default `from` property, if no `from` property is specified in for the following methods:\n\t * - web3.eth.sendTransaction()\n\t * - web3.eth.call()\n\t * - myContract.methods.myMethod().call()\n\t * - myContract.methods.myMethod().send()\n\t */\n\tpublic get defaultAccount() {\n\t\treturn this.config.defaultAccount;\n\t}\n\t/**\n\t * Will set the default account.\n\t */\n\tpublic set defaultAccount(val) {\n\t\tthis._triggerConfigChange('defaultAccount', val);\n\t\tthis.config.defaultAccount = val;\n\t}\n\n\t/**\n\t * The default block is used for certain methods. You can override it by passing in the defaultBlock as last parameter. The default value is `\"latest\"`.\n\t * - web3.eth.getBalance()\n\t * - web3.eth.getCode()\n\t * - web3.eth.getTransactionCount()\n\t * - web3.eth.getStorageAt()\n\t * - web3.eth.call()\n\t * - myContract.methods.myMethod().call()\n\t */\n\tpublic get defaultBlock() {\n\t\treturn this.config.defaultBlock;\n\t}\n\n\t/**\n\t * Will set the default block.\n\t *\n\t * - A block number\n\t * - `\"earliest\"` - String: The genesis block\n\t * - `\"latest\"` - String: The latest block (current head of the blockchain)\n\t * - `\"pending\"` - String: The currently mined block (including pending transactions)\n\t * - `\"finalized\"` - String: (For POS networks) The finalized block is one which has been accepted as canonical by greater than 2/3 of validators\n\t * - `\"safe\"` - String: (For POS networks) The safe head block is one which under normal network conditions, is expected to be included in the canonical chain. Under normal network conditions the safe head and the actual tip of the chain will be equivalent (with safe head trailing only by a few seconds). Safe heads will be less likely to be reorged than the proof of work network`s latest blocks.\n\t */\n\tpublic set defaultBlock(val) {\n\t\tthis._triggerConfigChange('defaultBlock', val);\n\t\tthis.config.defaultBlock = val;\n\t}\n\n\t/**\n\t * The time used to wait for Ethereum Node to return the sent transaction result.\n\t * Note: If the RPC call stuck at the Node and therefor timed-out, the transaction may still be pending or even mined by the Network. We recommend checking the pending transactions in such a case.\n\t * Default is `750` seconds (12.5 minutes).\n\t */\n\tpublic get transactionSendTimeout() {\n\t\treturn this.config.transactionSendTimeout;\n\t}\n\n\t/**\n\t * Will set the transactionSendTimeout.\n\t */\n\tpublic set transactionSendTimeout(val) {\n\t\tthis._triggerConfigChange('transactionSendTimeout', val);\n\t\tthis.config.transactionSendTimeout = val;\n\t}\n\n\t/**\n\t * The `transactionBlockTimeout` is used over socket-based connections. This option defines the amount of new blocks it should wait until the first confirmation happens, otherwise the PromiEvent rejects with a timeout error.\n\t * Default is `50`.\n\t */\n\tpublic get transactionBlockTimeout() {\n\t\treturn this.config.transactionBlockTimeout;\n\t}\n\n\t/**\n\t * Will set the transactionBlockTimeout.\n\t */\n\tpublic set transactionBlockTimeout(val) {\n\t\tthis._triggerConfigChange('transactionBlockTimeout', val);\n\t\tthis.config.transactionBlockTimeout = val;\n\t}\n\n\t/**\n\t * This defines the number of blocks it requires until a transaction is considered confirmed.\n\t * Default is `24`.\n\t */\n\tpublic get transactionConfirmationBlocks() {\n\t\treturn this.config.transactionConfirmationBlocks;\n\t}\n\n\t/**\n\t * Will set the transactionConfirmationBlocks.\n\t */\n\tpublic set transactionConfirmationBlocks(val) {\n\t\tthis._triggerConfigChange('transactionConfirmationBlocks', val);\n\t\tthis.config.transactionConfirmationBlocks = val;\n\t}\n\n\t/**\n\t * Used over HTTP connections. This option defines the number of seconds between Web3 calls for a receipt which confirms that a transaction was mined by the network.\n\t * Default is `1000` ms.\n\t */\n\tpublic get transactionPollingInterval() {\n\t\treturn this.config.transactionPollingInterval;\n\t}\n\n\t/**\n\t * Will set the transactionPollingInterval.\n\t */\n\tpublic set transactionPollingInterval(val) {\n\t\tthis._triggerConfigChange('transactionPollingInterval', val);\n\t\tthis.config.transactionPollingInterval = val;\n\n\t\tthis.transactionReceiptPollingInterval = val;\n\t\tthis.transactionConfirmationPollingInterval = val;\n\t}\n\t/**\n\t * Used over HTTP connections. This option defines the number of seconds Web3 will wait for a receipt which confirms that a transaction was mined by the network. Note: If this method times out, the transaction may still be pending.\n\t * Default is `750` seconds (12.5 minutes).\n\t */\n\tpublic get transactionPollingTimeout() {\n\t\treturn this.config.transactionPollingTimeout;\n\t}\n\n\t/**\n\t * Will set the transactionPollingTimeout.\n\t */\n\tpublic set transactionPollingTimeout(val) {\n\t\tthis._triggerConfigChange('transactionPollingTimeout', val);\n\n\t\tthis.config.transactionPollingTimeout = val;\n\t}\n\n\t/**\n\t * The `transactionPollingInterval` is used over HTTP connections. This option defines the number of seconds between Web3 calls for a receipt which confirms that a transaction was mined by the network.\n\t * Default is `undefined`\n\t */\n\tpublic get transactionReceiptPollingInterval() {\n\t\treturn this.config.transactionReceiptPollingInterval;\n\t}\n\n\t/**\n\t * Will set the transactionReceiptPollingInterval\n\t */\n\tpublic set transactionReceiptPollingInterval(val) {\n\t\tthis._triggerConfigChange('transactionReceiptPollingInterval', val);\n\t\tthis.config.transactionReceiptPollingInterval = val;\n\t}\n\n\tpublic get transactionConfirmationPollingInterval() {\n\t\treturn this.config.transactionConfirmationPollingInterval;\n\t}\n\n\tpublic set transactionConfirmationPollingInterval(val) {\n\t\tthis._triggerConfigChange('transactionConfirmationPollingInterval', val);\n\t\tthis.config.transactionConfirmationPollingInterval = val;\n\t}\n\n\t/**\n\t * The blockHeaderTimeout is used over socket-based connections. This option defines the amount seconds it should wait for `'newBlockHeaders'` event before falling back to polling to fetch transaction receipt.\n\t * Default is `10` seconds.\n\t */\n\tpublic get blockHeaderTimeout() {\n\t\treturn this.config.blockHeaderTimeout;\n\t}\n\n\t/**\n\t * Will set the blockHeaderTimeout\n\t */\n\tpublic set blockHeaderTimeout(val) {\n\t\tthis._triggerConfigChange('blockHeaderTimeout', val);\n\n\t\tthis.config.blockHeaderTimeout = val;\n\t}\n\n\t/**\n\t * The enableExperimentalFeatures is used to enable trying new experimental features that are still not fully implemented or not fully tested or still have some related issues.\n\t * Default is `false` for every feature.\n\t */\n\tpublic get enableExperimentalFeatures() {\n\t\treturn this.config.enableExperimentalFeatures;\n\t}\n\n\t/**\n\t * Will set the enableExperimentalFeatures\n\t */\n\tpublic set enableExperimentalFeatures(val) {\n\t\tthis._triggerConfigChange('enableExperimentalFeatures', val);\n\n\t\tthis.config.enableExperimentalFeatures = val;\n\t}\n\n\tpublic get maxListenersWarningThreshold() {\n\t\treturn this.config.maxListenersWarningThreshold;\n\t}\n\n\tpublic set maxListenersWarningThreshold(val) {\n\t\tthis._triggerConfigChange('maxListenersWarningThreshold', val);\n\t\tthis.setMaxListenerWarningThreshold(val);\n\t\tthis.config.maxListenersWarningThreshold = val;\n\t}\n\n\tpublic get defaultReturnFormat() {\n\t\treturn this.config.defaultReturnFormat;\n\t}\n\tpublic set defaultReturnFormat(val) {\n\t\tthis._triggerConfigChange('defaultReturnFormat', val);\n\n\t\tthis.config.defaultReturnFormat = val;\n\t}\n\n\tpublic get defaultNetworkId() {\n\t\treturn this.config.defaultNetworkId;\n\t}\n\n\tpublic set defaultNetworkId(val) {\n\t\tthis._triggerConfigChange('defaultNetworkId', val);\n\n\t\tthis.config.defaultNetworkId = val;\n\t}\n\n\tpublic get defaultChain() {\n\t\treturn this.config.defaultChain;\n\t}\n\n\tpublic set defaultChain(val) {\n\t\tif (\n\t\t\t!isNullish(this.config.defaultCommon) &&\n\t\t\t!isNullish(this.config.defaultCommon.baseChain) &&\n\t\t\tval !== this.config.defaultCommon.baseChain\n\t\t)\n\t\t\tthrow new ConfigChainMismatchError(this.config.defaultChain, val);\n\n\t\tthis._triggerConfigChange('defaultChain', val);\n\n\t\tthis.config.defaultChain = val;\n\t}\n\n\t/**\n\t * Will return the default hardfork. Default is `london`\n\t * The default hardfork property can be one of the following:\n\t * - `chainstart`\n\t * - `homestead`\n\t * - `dao`\n\t * - `tangerineWhistle`\n\t * - `spuriousDragon`\n\t * - `byzantium`\n\t * - `constantinople`\n\t * - `petersburg`\n\t * - `istanbul`\n\t * - `berlin`\n\t * - `london`\n\t * - 'arrowGlacier',\n\t * - 'tangerineWhistle',\n\t * - 'muirGlacier'\n\t *\n\t */\n\tpublic get defaultHardfork() {\n\t\treturn this.config.defaultHardfork;\n\t}\n\n\t/**\n\t * Will set the default hardfork.\n\t *\n\t */\n\tpublic set defaultHardfork(val) {\n\t\tif (\n\t\t\t!isNullish(this.config.defaultCommon) &&\n\t\t\t!isNullish(this.config.defaultCommon.hardfork) &&\n\t\t\tval !== this.config.defaultCommon.hardfork\n\t\t)\n\t\t\tthrow new ConfigHardforkMismatchError(this.config.defaultCommon.hardfork, val);\n\t\tthis._triggerConfigChange('defaultHardfork', val);\n\n\t\tthis.config.defaultHardfork = val;\n\t}\n\n\t/**\n\t *\n\t * Will get the default common property\n\t * The default common property does contain the following Common object:\n\t * - `customChain` - `Object`: The custom chain properties\n\t * \t- `name` - `string`: (optional) The name of the chain\n\t * \t- `networkId` - `number`: Network ID of the custom chain\n\t * \t- `chainId` - `number`: Chain ID of the custom chain\n\t * - `baseChain` - `string`: (optional) mainnet, goerli, kovan, rinkeby, or ropsten\n\t * - `hardfork` - `string`: (optional) chainstart, homestead, dao, tangerineWhistle, spuriousDragon, byzantium, constantinople, petersburg, istanbul, berlin, or london\n\t * Default is `undefined`.\n\t *\n\t */\n\tpublic get defaultCommon() {\n\t\treturn this.config.defaultCommon;\n\t}\n\n\t/**\n\t * Will set the default common property\n\t *\n\t */\n\tpublic set defaultCommon(val: Common | undefined) {\n\t\t// validation check if default hardfork is set and matches defaultCommon hardfork\n\t\tif (\n\t\t\t!isNullish(this.config.defaultHardfork) &&\n\t\t\t!isNullish(val) &&\n\t\t\t!isNullish(val.hardfork) &&\n\t\t\tthis.config.defaultHardfork !== val.hardfork\n\t\t)\n\t\t\tthrow new ConfigHardforkMismatchError(this.config.defaultHardfork, val.hardfork);\n\t\tif (\n\t\t\t!isNullish(this.config.defaultChain) &&\n\t\t\t!isNullish(val) &&\n\t\t\t!isNullish(val.baseChain) &&\n\t\t\tthis.config.defaultChain !== val.baseChain\n\t\t)\n\t\t\tthrow new ConfigChainMismatchError(this.config.defaultChain, val.baseChain);\n\t\tthis._triggerConfigChange('defaultCommon', val);\n\n\t\tthis.config.defaultCommon = val;\n\t}\n\n\tpublic get defaultTransactionType() {\n\t\treturn this.config.defaultTransactionType;\n\t}\n\n\tpublic set defaultTransactionType(val) {\n\t\tthis._triggerConfigChange('defaultTransactionType', val);\n\n\t\tthis.config.defaultTransactionType = val;\n\t}\n\n\tpublic get defaultMaxPriorityFeePerGas() {\n\t\treturn this.config.defaultMaxPriorityFeePerGas;\n\t}\n\n\tpublic set defaultMaxPriorityFeePerGas(val) {\n\t\tthis._triggerConfigChange('defaultMaxPriorityFeePerGas', val);\n\t\tthis.config.defaultMaxPriorityFeePerGas = val;\n\t}\n\n\tpublic get transactionBuilder() {\n\t\treturn this.config.transactionBuilder;\n\t}\n\n\tpublic set transactionBuilder(val) {\n\t\tthis._triggerConfigChange('transactionBuilder', val);\n\t\tthis.config.transactionBuilder = val;\n\t}\n\n\tpublic get transactionTypeParser() {\n\t\treturn this.config.transactionTypeParser;\n\t}\n\n\tpublic set transactionTypeParser(val) {\n\t\tthis._triggerConfigChange('transactionTypeParser', val);\n\t\tthis.config.transactionTypeParser = val;\n\t}\n\n\tprivate _triggerConfigChange<K extends keyof Web3ConfigOptions>(\n\t\tconfig: K,\n\t\tnewValue: Web3ConfigOptions[K],\n\t) {\n\t\tthis.emit(Web3ConfigEvent.CONFIG_CHANGE, {\n\t\t\tname: config,\n\t\t\toldValue: this.config[config],\n\t\t\tnewValue,\n\t\t} as ConfigEvent<Web3ConfigOptions>);\n\t}\n}\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-core/src/web3_context.ts",[],["180","181","182","183","184","185","186","187","188","189","190","191"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-core/src/web3_event_emitter.ts",[],["192","193","194"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-core/src/web3_promi_event.ts",[],["195"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-core/src/web3_request_manager.ts",["196","197"],["198","199","200","201","202","203"],"ï»¿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport {\n\tContractExecutionError,\n\tInvalidResponseError,\n\tProviderError,\n\tResponseError,\n\trpcErrorsMap,\n\tRpcError,\n} from 'web3-errors';\nimport HttpProvider from 'web3-providers-http';\nimport WSProvider from 'web3-providers-ws';\nimport {\n\tEthExecutionAPI,\n\tJsonRpcBatchRequest,\n\tJsonRpcBatchResponse,\n\tJsonRpcPayload,\n\tJsonRpcResponse,\n\tJsonRpcError,\n\tJsonRpcResponseWithResult,\n\tJsonRpcResponseWithError,\n\tSupportedProviders,\n\tWeb3APIMethod,\n\tWeb3APIPayload,\n\tWeb3APIRequest,\n\tWeb3APIReturnType,\n\tWeb3APISpec,\n\tWeb3BaseProvider,\n\tWeb3BaseProviderConstructor,\n} from 'web3-types';\nimport { isNullish, isPromise, jsonRpc, isResponseRpcError } from 'web3-utils';\nimport {\n\tisEIP1193Provider,\n\tisLegacyRequestProvider,\n\tisLegacySendAsyncProvider,\n\tisLegacySendProvider,\n\tisWeb3Provider,\n} from './utils.js';\nimport { Web3EventEmitter } from './web3_event_emitter.js';\nimport { RequestManagerMiddleware } from './types.js';\n\nexport enum Web3RequestManagerEvent {\n\tPROVIDER_CHANGED = 'PROVIDER_CHANGED',\n\tBEFORE_PROVIDER_CHANGE = 'BEFORE_PROVIDER_CHANGE',\n}\n\nconst availableProviders: {\n\tHttpProvider: Web3BaseProviderConstructor;\n\tWebsocketProvider: Web3BaseProviderConstructor;\n} = {\n\tHttpProvider: HttpProvider as Web3BaseProviderConstructor,\n\tWebsocketProvider: WSProvider as Web3BaseProviderConstructor,\n};\n\nexport class Web3RequestManager<\n\tAPI extends Web3APISpec = EthExecutionAPI,\n> extends Web3EventEmitter<{\n\t[key in Web3RequestManagerEvent]: SupportedProviders<API> | undefined;\n}> {\n\tprivate _provider?: SupportedProviders<API>;\n\tprivate readonly useRpcCallSpecification?: boolean;\n\tpublic middleware?: RequestManagerMiddleware<API>;\n\n\tpublic constructor(\n\t\tprovider?: SupportedProviders<API> | string,\n\t\tuseRpcCallSpecification?: boolean,\n\t\trequestManagerMiddleware?: RequestManagerMiddleware<API>\n\t) {\n\t\tsuper();\n\n\t\tif (!isNullish(provider)) {\n\t\t\tthis.setProvider(provider);\n\t\t}\n\t\tthis.useRpcCallSpecification = useRpcCallSpecification;\n\n\t\tif (!isNullish(requestManagerMiddleware))\n\t\t\tthis.middleware = requestManagerMiddleware;\n\n\t}\n\t\n\t/**\n\t * Will return all available providers\n\t */\n\tpublic static get providers() {\n\t\treturn availableProviders;\n\t}\n\n\t/**\n\t * Will return the current provider.\n\t *\n\t * @returns Returns the current provider\n\t */\n\tpublic get provider() {\n\t\treturn this._provider;\n\t}\n\n\t/**\n\t * Will return all available providers\n\t */\n\t// eslint-disable-next-line class-methods-use-this\n\tpublic get providers() {\n\t\treturn availableProviders;\n\t}\n\n\t/**\n\t * Use to set provider. Provider can be a provider instance or a string.\n\t *\n\t * @param provider - The provider to set\n\t */\n\tpublic setProvider(provider?: SupportedProviders<API> | string): boolean {\n\t\tlet newProvider: SupportedProviders<API> | undefined;\n\n\t\t// autodetect provider\n\t\tif (provider && typeof provider === 'string' && this.providers) {\n\t\t\t// HTTP\n\t\t\tif (/^http(s)?:\\/\\//i.test(provider)) {\n\t\t\t\tnewProvider = new this.providers.HttpProvider<API>(provider);\n\n\t\t\t\t// WS\n\t\t\t} else if (/^ws(s)?:\\/\\//i.test(provider)) {\n\t\t\t\tnewProvider = new this.providers.WebsocketProvider<API>(provider);\n\t\t\t} else {\n\t\t\t\tthrow new ProviderError(`Can't autodetect provider for \"${provider}\"`);\n\t\t\t}\n\t\t} else if (isNullish(provider)) {\n\t\t\t// In case want to unset the provider\n\t\t\tnewProvider = undefined;\n\t\t} else {\n\t\t\tnewProvider = provider as SupportedProviders<API>;\n\t\t}\n\n\t\tthis.emit(Web3RequestManagerEvent.BEFORE_PROVIDER_CHANGE, this._provider);\n\t\tthis._provider = newProvider;\n\t\tthis.emit(Web3RequestManagerEvent.PROVIDER_CHANGED, this._provider);\n\t\treturn true;\n\t}\n\n\tpublic setMiddleware(requestManagerMiddleware: RequestManagerMiddleware<API>){\n\t\tthis.middleware = requestManagerMiddleware;\n\t}\n\n\t/**\n\t *\n\t * Will execute a request\n\t *\n\t * @param request - {@link Web3APIRequest} The request to send\n\t *\n\t * @returns The response of the request {@link ResponseType}. If there is error\n\t * in the response, will throw an error\n\t */\n\tpublic async send<\n\t\tMethod extends Web3APIMethod<API>,\n\t\tResponseType = Web3APIReturnType<API, Method>,\n\t>(request: Web3APIRequest<API, Method>): Promise<ResponseType> {\n\n\t\tlet requestObj = {...request};\n\n\t\tif (!isNullish(this.middleware))\n\t\trequestObj = await this.middleware.processRequest(requestObj);\n\n\t\tlet response = await this._sendRequest<Method, ResponseType>(requestObj);\n\n\t\tif (!isNullish(this.middleware))\n\t\t\tresponse = await this.middleware.processResponse(response);\n\n\t\tif (jsonRpc.isResponseWithResult(response)) {\n\t\t\treturn response.result;\n\t\t}\n\n\t\tthrow new ResponseError(response);\n\t}\n\n\t/**\n\t * Same as send, but, will execute a batch of requests\n\t *\n\t * @param request {@link JsonRpcBatchRequest} The batch request to send\n\t */\n\tpublic async sendBatch(request: JsonRpcBatchRequest): Promise<JsonRpcBatchResponse<unknown>> {\n\t\tconst response = await this._sendRequest<never, never>(request);\n\n\t\treturn response as JsonRpcBatchResponse<unknown>;\n\t}\n\n\tprivate async _sendRequest<\n\t\tMethod extends Web3APIMethod<API>,\n\t\tResponseType = Web3APIReturnType<API, Method>,\n\t>(\n\t\trequest: Web3APIRequest<API, Method> | JsonRpcBatchRequest,\n\t): Promise<JsonRpcResponse<ResponseType>> {\n\t\tconst { provider } = this;\n\n\t\tif (isNullish(provider)) {\n\t\t\tthrow new ProviderError(\n\t\t\t\t'Provider not available. Use `.setProvider` or `.provider=` to initialize the provider.',\n\t\t\t);\n\t\t}\n\n\t\tconst payload = jsonRpc.isBatchRequest(request)\n\t\t\t? jsonRpc.toBatchPayload(request)\n\t\t\t: jsonRpc.toPayload(request);\n\n\t\tif (isWeb3Provider(provider)) {\n\t\t\tlet response;\n\n\t\t\ttry {\n\t\t\t\tresponse = await provider.request<Method, ResponseType>(\n\t\t\t\t\tpayload as Web3APIPayload<API, Method>,\n\t\t\t\t);\n\t\t\t} catch (error) {\n\t\t\t\t// Check if the provider throw an error instead of reject with error\n\t\t\t\tresponse = error as JsonRpcResponse<ResponseType>;\n\t\t\t}\n\t\t\treturn this._processJsonRpcResponse(payload, response, { legacy: false, error: false });\n\t\t}\n\n\t\tif (isEIP1193Provider(provider)) {\n\t\t\treturn (provider as Web3BaseProvider<API>)\n\t\t\t\t.request<Method, ResponseType>(payload as Web3APIPayload<API, Method>)\n\t\t\t\t.then(\n\t\t\t\t\tres =>\n\t\t\t\t\t\tthis._processJsonRpcResponse(payload, res, {\n\t\t\t\t\t\t\tlegacy: true,\n\t\t\t\t\t\t\terror: false,\n\t\t\t\t\t\t}) as JsonRpcResponseWithResult<ResponseType>,\n\t\t\t\t)\n\t\t\t\t.catch(error =>\n\t\t\t\t\tthis._processJsonRpcResponse(\n\t\t\t\t\t\tpayload,\n\t\t\t\t\t\terror as JsonRpcResponse<ResponseType, unknown>,\n\t\t\t\t\t\t{ legacy: true, error: true },\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t}\n\n\t\t// TODO: This could be deprecated and removed.\n\t\tif (isLegacyRequestProvider(provider)) {\n\t\t\treturn new Promise<JsonRpcResponse<ResponseType>>((resolve, reject) => {\n\t\t\t\tconst rejectWithError = (err: unknown) =>\n\t\t\t\t\treject(\n\t\t\t\t\t\tthis._processJsonRpcResponse(\n\t\t\t\t\t\t\tpayload,\n\t\t\t\t\t\t\terr as JsonRpcResponse<ResponseType>,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlegacy: true,\n\t\t\t\t\t\t\t\terror: true,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\tconst resolveWithResponse = (response: JsonRpcResponse<ResponseType>) =>\n\t\t\t\t\tresolve(\n\t\t\t\t\t\tthis._processJsonRpcResponse(payload, response, {\n\t\t\t\t\t\t\tlegacy: true,\n\t\t\t\t\t\t\terror: false,\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\t\t\t\tconst result = provider.request<ResponseType>(\n\t\t\t\t\tpayload,\n\t\t\t\t\t// a callback that is expected to be called after getting the response:\n\t\t\t\t\t(err, response) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\treturn rejectWithError(err);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn resolveWithResponse(response);\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t\t// Some providers, that follow a previous drafted version of EIP1193, has a `request` function\n\t\t\t\t//\tthat is not defined as `async`, but it returns a promise.\n\t\t\t\t// Such providers would not be picked with if(isEIP1193Provider(provider)) above\n\t\t\t\t//\tbecause the `request` function was not defined with `async` and so the function definition is not `AsyncFunction`.\n\t\t\t\t// Like this provider: https://github.dev/NomicFoundation/hardhat/blob/62bea2600785595ba36f2105564076cf5cdf0fd8/packages/hardhat-core/src/internal/core/providers/backwards-compatibility.ts#L19\n\t\t\t\t// So check if the returned result is a Promise, and resolve with it accordingly.\n\t\t\t\t// Note: in this case we expect the callback provided above to never be called.\n\t\t\t\tif (isPromise(result)) {\n\t\t\t\t\tconst responsePromise = result as unknown as Promise<\n\t\t\t\t\t\tJsonRpcResponse<ResponseType>\n\t\t\t\t\t>;\n\t\t\t\t\tresponsePromise.then(resolveWithResponse).catch(rejectWithError);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// TODO: This could be deprecated and removed.\n\t\tif (isLegacySendProvider(provider)) {\n\t\t\treturn new Promise<JsonRpcResponse<ResponseType>>((resolve, reject): void => {\n\t\t\t\tprovider.send<ResponseType>(payload, (err, response) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treturn reject(\n\t\t\t\t\t\t\tthis._processJsonRpcResponse(\n\t\t\t\t\t\t\t\tpayload,\n\t\t\t\t\t\t\t\terr as unknown as JsonRpcResponse<ResponseType>,\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tlegacy: true,\n\t\t\t\t\t\t\t\t\terror: true,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (isNullish(response)) {\n\t\t\t\t\t\tthrow new ResponseError(\n\t\t\t\t\t\t\t{} as never,\n\t\t\t\t\t\t\t'Got a \"nullish\" response from provider.',\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn resolve(\n\t\t\t\t\t\tthis._processJsonRpcResponse(payload, response, {\n\t\t\t\t\t\t\tlegacy: true,\n\t\t\t\t\t\t\terror: false,\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\t// TODO: This could be deprecated and removed.\n\t\tif (isLegacySendAsyncProvider(provider)) {\n\t\t\treturn provider\n\t\t\t\t.sendAsync<ResponseType>(payload)\n\t\t\t\t.then(response =>\n\t\t\t\t\tthis._processJsonRpcResponse(payload, response, { legacy: true, error: false }),\n\t\t\t\t)\n\t\t\t\t.catch(error =>\n\t\t\t\t\tthis._processJsonRpcResponse(payload, error as JsonRpcResponse<ResponseType>, {\n\t\t\t\t\t\tlegacy: true,\n\t\t\t\t\t\terror: true,\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t}\n\n\t\tthrow new ProviderError('Provider does not have a request or send method to use.');\n\t}\n\n\t// eslint-disable-next-line class-methods-use-this\n\tprivate _processJsonRpcResponse<ResultType, ErrorType, RequestType>(\n\t\tpayload: JsonRpcPayload<RequestType>,\n\t\tresponse: JsonRpcResponse<ResultType, ErrorType>,\n\t\t{ legacy, error }: { legacy: boolean; error: boolean },\n\t): JsonRpcResponse<ResultType> | never {\n\t\tif (isNullish(response)) {\n\t\t\treturn this._buildResponse(\n\t\t\t\tpayload,\n\t\t\t\t// Some providers uses \"null\" as valid empty response\n\t\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\t\tnull as unknown as JsonRpcResponse<ResultType, ErrorType>,\n\t\t\t\terror,\n\t\t\t);\n\t\t}\n\n\t\t// This is the majority of the cases so check these first\n\t\t// A valid JSON-RPC response with error object\n\t\tif (jsonRpc.isResponseWithError<ErrorType>(response)) {\n\t\t\t// check if its an rpc error\n\t\t\tif (\n\t\t\t\tthis.useRpcCallSpecification &&\n\t\t\t\tisResponseRpcError(response as JsonRpcResponseWithError)\n\t\t\t) {\n\t\t\t\tconst rpcErrorResponse = response as JsonRpcResponseWithError;\n\t\t\t\t// check if rpc error flag is on and response error code match an EIP-1474 or a standard rpc error code\n\t\t\t\tif (rpcErrorsMap.get(rpcErrorResponse.error.code)) {\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\t\t\t\t\tconst Err = rpcErrorsMap.get(rpcErrorResponse.error.code)!.error;\n\t\t\t\t\tthrow new Err(rpcErrorResponse);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new RpcError(rpcErrorResponse);\n\t\t\t\t}\n\t\t\t} else if (!Web3RequestManager._isReverted(response)) {\n\t\t\t\tthrow new InvalidResponseError<ErrorType, RequestType>(response, payload);\n\t\t\t}\n\t\t}\n\n\t\t// This is the majority of the cases so check these first\n\t\t// A valid JSON-RPC response with result object\n\t\tif (jsonRpc.isResponseWithResult<ResultType>(response)) {\n\t\t\treturn response;\n\t\t}\n\n\t\tif ((response as unknown) instanceof Error) {\n\t\t\tWeb3RequestManager._isReverted(response);\n\t\t\tthrow response;\n\t\t}\n\n\t\tif (!legacy && jsonRpc.isBatchRequest(payload) && jsonRpc.isBatchResponse(response)) {\n\t\t\treturn response as JsonRpcBatchResponse<ResultType>;\n\t\t}\n\n\t\tif (legacy && !error && jsonRpc.isBatchRequest(payload)) {\n\t\t\treturn response as JsonRpcBatchResponse<ResultType>;\n\t\t}\n\n\t\tif (legacy && error && jsonRpc.isBatchRequest(payload)) {\n\t\t\t// In case of error batch response we don't want to throw Invalid response\n\t\t\tthrow response;\n\t\t}\n\n\t\tif (\n\t\t\tlegacy &&\n\t\t\t!jsonRpc.isResponseWithError(response) &&\n\t\t\t!jsonRpc.isResponseWithResult(response)\n\t\t) {\n\t\t\treturn this._buildResponse(payload, response, error);\n\t\t}\n\n\t\tif (jsonRpc.isBatchRequest(payload) && !Array.isArray(response)) {\n\t\t\tthrow new ResponseError(response, 'Got normal response for a batch request.');\n\t\t}\n\n\t\tif (!jsonRpc.isBatchRequest(payload) && Array.isArray(response)) {\n\t\t\tthrow new ResponseError(response, 'Got batch response for a normal request.');\n\t\t}\n\n\t\tif (\n\t\t\t(jsonRpc.isResponseWithError(response) || jsonRpc.isResponseWithResult(response)) &&\n\t\t\t!jsonRpc.isBatchRequest(payload)\n\t\t) {\n\t\t\tif (response.id && payload.id !== response.id) {\n\t\t\t\tthrow new InvalidResponseError<ErrorType>(response);\n\t\t\t}\n\t\t}\n\n\t\tthrow new ResponseError(response, 'Invalid response');\n\t}\n\n\tprivate static _isReverted<ResultType, ErrorType>(\n\t\tresponse: JsonRpcResponse<ResultType, ErrorType>,\n\t): boolean {\n\t\tlet error: JsonRpcError | undefined;\n\n\t\tif (jsonRpc.isResponseWithError<ErrorType>(response)) {\n\t\t\terror = (response as JsonRpcResponseWithError).error;\n\t\t} else if ((response as unknown) instanceof Error) {\n\t\t\terror = response as unknown as JsonRpcError;\n\t\t}\n\t\t\n\t\t// This message means that there was an error while executing the code of the smart contract\n\t\t// However, more processing will happen at a higher level to decode the error data,\n\t\t//\taccording to the Error ABI, if it was available as of EIP-838. \n\t\tif (error?.message.includes('revert')) throw new ContractExecutionError(error);\n\n\t\treturn false;\n\t}\n\t// Need to use same types as _processJsonRpcResponse so have to declare as instance method\n\t// eslint-disable-next-line class-methods-use-this\n\tprivate _buildResponse<ResultType, ErrorType, RequestType>(\n\t\tpayload: JsonRpcPayload<RequestType>,\n\t\tresponse: JsonRpcResponse<ResultType, ErrorType>,\n\t\terror: boolean,\n\t): JsonRpcResponse<ResultType> {\n\t\tconst res = {\n\t\t\tjsonrpc: '2.0',\n\t\t\t// eslint-disable-next-line no-nested-ternary\n\t\t\tid: jsonRpc.isBatchRequest(payload)\n\t\t\t\t? payload[0].id\n\t\t\t\t: 'id' in payload\n\t\t\t\t? payload.id\n\t\t\t\t: // Have to use the null here explicitly\n\t\t\t\t  // eslint-disable-next-line no-null/no-null\n\t\t\t\t  null,\n\t\t};\n\n\t\tif (error) {\n\t\t\treturn {\n\t\t\t\t...res,\n\t\t\t\terror: response as unknown,\n\t\t\t} as JsonRpcResponse<ResultType>;\n\t\t}\n\n\t\treturn {\n\t\t\t...res,\n\t\t\tresult: response as unknown,\n\t\t} as JsonRpcResponse<ResultType>;\n\t}\n}\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-core/src/web3_subscription_manager.ts",["204","205","206"],["207","208","209","210","211","212"],"ï»¿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport {\n\tDataFormat,\n\tDEFAULT_RETURN_FORMAT,\n\tEIP1193Provider,\n\tJsonRpcNotification,\n\tJsonRpcSubscriptionResult,\n\tJsonRpcSubscriptionResultOld,\n\tLog,\n\tWeb3APISpec,\n\tWeb3BaseProvider,\n} from 'web3-types';\nimport { ProviderError, SubscriptionError } from 'web3-errors';\nimport { isNullish } from 'web3-utils';\nimport { isSupportSubscriptions } from './utils.js';\nimport { Web3RequestManager, Web3RequestManagerEvent } from './web3_request_manager.js';\n// eslint-disable-next-line import/no-cycle\nimport { Web3SubscriptionConstructor } from './web3_subscriptions.js';\n\ntype ShouldUnsubscribeCondition = ({\n\tid,\n\tsub,\n}: {\n\tid: string;\n\tsub: unknown;\n}) => boolean | undefined;\n\nexport class Web3SubscriptionManager<\n\tAPI extends Web3APISpec = Web3APISpec,\n\tRegisteredSubs extends { [key: string]: Web3SubscriptionConstructor<API> } = {\n\t\t[key: string]: Web3SubscriptionConstructor<API>;\n\t},\n> {\n\tprivate readonly _subscriptions: Map<\n\t\tstring,\n\t\tInstanceType<RegisteredSubs[keyof RegisteredSubs]>\n\t> = new Map();\n\n\t/**\n\t *\n\t * @param - requestManager\n\t * @param - registeredSubscriptions\n\t *\n\t * @example\n\t * ```ts\n\t * const requestManager = new Web3RequestManager(\"ws://localhost:8545\");\n\t * const subscriptionManager = new Web3SubscriptionManager(requestManager, {});\n\t * ```\n\t */\n\tpublic constructor(\n\t\trequestManager: Web3RequestManager<API>,\n\t\tregisteredSubscriptions: RegisteredSubs,\n\t);\n\t/**\n\t * @deprecated This constructor overloading should not be used\n\t */\n\tpublic constructor(\n\t\trequestManager: Web3RequestManager<API>,\n\t\tregisteredSubscriptions: RegisteredSubs,\n\t\ttolerateUnlinkedSubscription: boolean,\n\t);\n\tpublic constructor(\n\t\tpublic readonly requestManager: Web3RequestManager<API>,\n\t\tpublic readonly registeredSubscriptions: RegisteredSubs,\n\t\tprivate readonly tolerateUnlinkedSubscription: boolean = false,\n\t) {\n\t\tthis.requestManager.on(Web3RequestManagerEvent.BEFORE_PROVIDER_CHANGE, async () => {\n\t\t\tawait this.unsubscribe();\n\t\t});\n\n\t\tthis.requestManager.on(Web3RequestManagerEvent.PROVIDER_CHANGED, () => {\n\t\t\tthis.clear();\n\t\t\tthis.listenToProviderEvents();\n\t\t});\n\n\t\tthis.listenToProviderEvents();\n\t}\n\n\tprivate listenToProviderEvents() {\n\t\tconst providerAsWebProvider = this.requestManager.provider as Web3BaseProvider;\n\t\tif (\n\t\t\t!this.requestManager.provider ||\n\t\t\t(typeof providerAsWebProvider?.supportsSubscriptions === 'function' &&\n\t\t\t\t!providerAsWebProvider?.supportsSubscriptions())\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (typeof (this.requestManager.provider as EIP1193Provider<API>).on === 'function') {\n\t\t\tif (\n\t\t\t\ttypeof (this.requestManager.provider as EIP1193Provider<API>).request === 'function'\n\t\t\t) {\n\t\t\t\t// Listen to provider messages and data\n\t\t\t\t(this.requestManager.provider as EIP1193Provider<API>).on(\n\t\t\t\t\t'message',\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-argument\n\t\t\t\t\t(message: any) => this.messageListener(message),\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-argument\n\t\t\t\tproviderAsWebProvider.on<Log>('data', (data: any) => this.messageListener(data));\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected messageListener(\n\t\tdata?:\n\t\t\t| JsonRpcSubscriptionResult\n\t\t\t| JsonRpcSubscriptionResultOld<Log>\n\t\t\t| JsonRpcNotification<Log>,\n\t) {\n\t\tif (!data) {\n\t\t\tthrow new SubscriptionError('Should not call messageListener with no data. Type was');\n\t\t}\n\t\tconst subscriptionId =\n\t\t\t(data as JsonRpcNotification).params?.subscription ||\n\t\t\t(data as JsonRpcSubscriptionResultOld).data?.subscription ||\n\t\t\t(data as JsonRpcSubscriptionResult).id?.toString(16);\n\n\t\t// Process if the received data is related to a subscription\n\t\tif (subscriptionId) {\n\t\t\tconst sub = this._subscriptions.get(subscriptionId);\n\t\t\tsub?.processSubscriptionData(data);\n\t\t}\n\t}\n\t/**\n\t * Will create a new subscription\n\t *\n\t * @param name - The subscription you want to subscribe to\n\t * @param args - Optional additional parameters, depending on the subscription type\n\t * @param returnFormat- ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.\n\t *\n\t * Will subscribe to a specific topic (note: name)\n\t * @returns The subscription object\n\t */\n\tpublic async subscribe<T extends keyof RegisteredSubs>(\n\t\tname: T,\n\t\targs?: ConstructorParameters<RegisteredSubs[T]>[0],\n\t\treturnFormat: DataFormat = DEFAULT_RETURN_FORMAT,\n\t): Promise<InstanceType<RegisteredSubs[T]>> {\n\t\tconst Klass: RegisteredSubs[T] = this.registeredSubscriptions[name];\n\t\tif (!Klass) {\n\t\t\tthrow new SubscriptionError('Invalid subscription type');\n\t\t}\n\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n\t\tconst subscription = new Klass(args ?? undefined, {\n\t\t\tsubscriptionManager: this as Web3SubscriptionManager<API, RegisteredSubs>,\n\t\t\treturnFormat,\n\t\t} as any) as InstanceType<RegisteredSubs[T]>;\n\n\t\tawait this.addSubscription(subscription);\n\n\t\treturn subscription;\n\t}\n\n\t/**\n\t * Will returns all subscriptions.\n\t */\n\tpublic get subscriptions() {\n\t\treturn this._subscriptions;\n\t}\n\n\t/**\n\t *\n\t * Adds an instance of {@link Web3Subscription} and subscribes to it\n\t *\n\t * @param sub - A {@link Web3Subscription} object\n\t */\n\tpublic async addSubscription(sub: InstanceType<RegisteredSubs[keyof RegisteredSubs]>) {\n\t\tif (!this.requestManager.provider) {\n\t\t\tthrow new ProviderError('Provider not available');\n\t\t}\n\n\t\tif (!this.supportsSubscriptions()) {\n\t\t\tthrow new SubscriptionError('The current provider does not support subscriptions');\n\t\t}\n\n\t\tif (sub.id && this._subscriptions.has(sub.id)) {\n\t\t\tthrow new SubscriptionError(`Subscription with id \"${sub.id}\" already exists`);\n\t\t}\n\n\t\tawait sub.sendSubscriptionRequest();\n\n\t\tif (isNullish(sub.id)) {\n\t\t\tthrow new SubscriptionError('Subscription is not subscribed yet.');\n\t\t}\n\n\t\tthis._subscriptions.set(sub.id, sub);\n\n\t\treturn sub.id;\n\t}\n\n\t/**\n\t * Will clear a subscription\n\t *\n\t * @param id - The subscription of type {@link Web3Subscription}  to remove\n\t */\n\tpublic async removeSubscription(sub: InstanceType<RegisteredSubs[keyof RegisteredSubs]>) {\n\t\tconst { id } = sub;\n\n\t\tif (isNullish(id)) {\n\t\t\tthrow new SubscriptionError(\n\t\t\t\t'Subscription is not subscribed yet. Or, had already been unsubscribed but not through the Subscription Manager.',\n\t\t\t);\n\t\t}\n\n\t\tif (!this._subscriptions.has(id) && !this.tolerateUnlinkedSubscription) {\n\t\t\tthrow new SubscriptionError(`Subscription with id \"${id.toString()}\" does not exists`);\n\t\t}\n\n\t\tawait sub.sendUnsubscribeRequest();\n\t\tthis._subscriptions.delete(id);\n\t\treturn id;\n\t}\n\t/**\n\t * Will unsubscribe all subscriptions that fulfill the condition\n\t *\n\t * @param condition - A function that access and `id` and a `subscription` and return `true` or `false`\n\t * @returns An array of all the un-subscribed subscriptions\n\t */\n\tpublic async unsubscribe(condition?: ShouldUnsubscribeCondition) {\n\t\tconst result = [];\n\t\tfor (const [id, sub] of this.subscriptions.entries()) {\n\t\t\tif (!condition || (typeof condition === 'function' && condition({ id, sub }))) {\n\t\t\t\tresult.push(this.removeSubscription(sub));\n\t\t\t}\n\t\t}\n\n\t\treturn Promise.all(result);\n\t}\n\n\t/**\n\t * Clears all subscriptions\n\t */\n\tpublic clear() {\n\t\tthis._subscriptions.clear();\n\t}\n\n\t/**\n\t * Check whether the current provider supports subscriptions.\n\t *\n\t * @returns `true` or `false` depending on if the current provider supports subscriptions\n\t */\n\tpublic supportsSubscriptions(): boolean {\n\t\treturn isNullish(this.requestManager.provider)\n\t\t\t? false\n\t\t\t: isSupportSubscriptions(this.requestManager.provider);\n\t}\n}\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-core/src/web3_subscriptions.ts",["213","214"],["215","216","217","218","219","220","221","222","223","224"],"ï»¿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n// eslint-disable-next-line max-classes-per-file\nimport {\n\tBlockOutput,\n\tDEFAULT_RETURN_FORMAT,\n\tDataFormat,\n\tEthExecutionAPI,\n\tJsonRpcSubscriptionResult,\n\tJsonRpcSubscriptionResultOld,\n\tJsonRpcNotification,\n\tLog,\n\tHexString,\n\tWeb3APIParams,\n\tWeb3APISpec,\n} from 'web3-types';\nimport { jsonRpc } from 'web3-utils';\nimport { SubscriptionError } from 'web3-errors';\n\n// eslint-disable-next-line import/no-cycle\nimport { Web3SubscriptionManager } from './web3_subscription_manager.js';\nimport { Web3EventEmitter, Web3EventMap } from './web3_event_emitter.js';\nimport { Web3RequestManager } from './web3_request_manager.js';\n\ntype CommonSubscriptionEvents = {\n\tdata: unknown; // Fires on each incoming block header.\n\terror: Error; // Fires when an error in the subscription occurs.\n\tconnected: string; // Fires once after the subscription successfully connected. Returns the subscription id.\n};\n\nexport abstract class Web3Subscription<\n\tEventMap extends Web3EventMap,\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tArgsType = any,\n\tAPI extends Web3APISpec = EthExecutionAPI,\n\t// The following generic type is just to define the type `CombinedEventMap` and use it inside the class\n\t// \tit combines the user passed `EventMap` with the `CommonSubscriptionEvents`\n\t//\tHowever, this type definition could be refactored depending on the closure of\n\t//\t[Permit type alias declarations inside a class](https://github.com/microsoft/TypeScript/issues/7061)\n\tCombinedEventMap extends CommonSubscriptionEvents = EventMap & CommonSubscriptionEvents,\n> extends Web3EventEmitter<CombinedEventMap> {\n\tprivate readonly _subscriptionManager: Web3SubscriptionManager<API>;\n\tprivate readonly _lastBlock?: BlockOutput;\n\tprivate readonly _returnFormat: DataFormat;\n\tprotected _id?: HexString;\n\n\tpublic constructor(\n\t\targs: ArgsType,\n\t\toptions: { subscriptionManager: Web3SubscriptionManager; returnFormat?: DataFormat },\n\t);\n\t/**\n\t * @deprecated This constructor overloading should not be used\n\t */\n\tpublic constructor(\n\t\targs: ArgsType,\n\t\toptions: { requestManager: Web3RequestManager<API>; returnFormat?: DataFormat },\n\t);\n\tpublic constructor(\n\t\tpublic readonly args: ArgsType,\n\t\toptions: (\n\t\t\t| { subscriptionManager: Web3SubscriptionManager }\n\t\t\t| { requestManager: Web3RequestManager<API> }\n\t\t) & {\n\t\t\treturnFormat?: DataFormat;\n\t\t},\n\t) {\n\t\tsuper();\n\t\tconst { requestManager } = options as { requestManager: Web3RequestManager<API> };\n\t\tconst { subscriptionManager } = options as { subscriptionManager: Web3SubscriptionManager };\n\t\tif (requestManager && subscriptionManager) {\n\t\t\tthrow new SubscriptionError(\n\t\t\t\t'Only requestManager or subscriptionManager should be provided at Subscription constructor',\n\t\t\t);\n\t\t}\n\t\tif (!requestManager && !subscriptionManager) {\n\t\t\tthrow new SubscriptionError(\n\t\t\t\t'Either requestManager or subscriptionManager should be provided at Subscription constructor',\n\t\t\t);\n\t\t}\n\t\tif (requestManager) {\n\t\t\t// eslint-disable-next-line deprecation/deprecation\n\t\t\tthis._subscriptionManager = new Web3SubscriptionManager(requestManager, {}, true);\n\t\t} else {\n\t\t\tthis._subscriptionManager = subscriptionManager;\n\t\t}\n\n\t\tthis._returnFormat = options?.returnFormat ?? (DEFAULT_RETURN_FORMAT as DataFormat);\n\t}\n\n\tpublic get id() {\n\t\treturn this._id;\n\t}\n\n\tpublic get lastBlock() {\n\t\treturn this._lastBlock;\n\t}\n\n\tpublic async subscribe(): Promise<string> {\n\t\treturn this._subscriptionManager.addSubscription(this);\n\t}\n\n\tpublic processSubscriptionData(\n\t\tdata:\n\t\t\t| JsonRpcSubscriptionResult\n\t\t\t| JsonRpcSubscriptionResultOld<Log>\n\t\t\t| JsonRpcNotification<Log>,\n\t) {\n\t\tif (data?.data) {\n\t\t\t// for EIP-1193 provider\n\t\t\tthis._processSubscriptionResult(data?.data?.result ?? data?.data);\n\t\t} else if (\n\t\t\tdata &&\n\t\t\tjsonRpc.isResponseWithNotification(\n\t\t\t\tdata as unknown as JsonRpcSubscriptionResult | JsonRpcNotification<Log>,\n\t\t\t)\n\t\t) {\n\t\t\tthis._processSubscriptionResult(data?.params.result);\n\t\t}\n\t}\n\n\tpublic async sendSubscriptionRequest(): Promise<string> {\n\t\tthis._id = await this._subscriptionManager.requestManager.send({\n\t\t\tmethod: 'eth_subscribe',\n\t\t\tparams: this._buildSubscriptionParams(),\n\t\t});\n\n\t\tthis.emit('connected', this._id);\n\t\treturn this._id;\n\t}\n\n\tprotected get returnFormat() {\n\t\treturn this._returnFormat;\n\t}\n\n\tprotected get subscriptionManager() {\n\t\treturn this._subscriptionManager;\n\t}\n\n\tpublic async resubscribe() {\n\t\tawait this.unsubscribe();\n\t\tawait this.subscribe();\n\t}\n\n\tpublic async unsubscribe() {\n\t\tif (!this.id) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this._subscriptionManager.removeSubscription(this);\n\t}\n\n\tpublic async sendUnsubscribeRequest() {\n\t\tawait this._subscriptionManager.requestManager.send({\n\t\t\tmethod: 'eth_unsubscribe',\n\t\t\tparams: [this.id] as Web3APIParams<API, 'eth_unsubscribe'>,\n\t\t});\n\t\tthis._id = undefined;\n\t}\n\n\t// eslint-disable-next-line class-methods-use-this\n\tprotected formatSubscriptionResult(data: CombinedEventMap['data']) {\n\t\treturn data;\n\t}\n\n\tpublic _processSubscriptionResult(data: CombinedEventMap['data'] | unknown) {\n\t\tthis.emit('data', this.formatSubscriptionResult(data));\n\t}\n\n\tpublic _processSubscriptionError(error: Error) {\n\t\tthis.emit('error', error);\n\t}\n\n\t// eslint-disable-next-line class-methods-use-this\n\tprotected _buildSubscriptionParams(): Web3APIParams<API, 'eth_subscribe'> {\n\t\t// This should be overridden in the subclass\n\t\tthrow new Error('Implement in the child class');\n\t}\n}\n\nexport type Web3SubscriptionConstructor<\n\tAPI extends Web3APISpec,\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tSubscriptionType extends Web3Subscription<any, any, API> = Web3Subscription<any, any, API>,\n> =\n\t| (new (\n\t\t\t// We accept any type of arguments here and don't deal with this type internally\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\targs: any,\n\t\t\toptions:\n\t\t\t\t| { subscriptionManager: Web3SubscriptionManager<API>; returnFormat?: DataFormat }\n\t\t\t\t| { requestManager: Web3RequestManager<API>; returnFormat?: DataFormat },\n\t  ) => SubscriptionType)\n\t| (new (\n\t\t\targs: any,\n\t\t\toptions: {\n\t\t\t\tsubscriptionManager: Web3SubscriptionManager<API>;\n\t\t\t\treturnFormat?: DataFormat;\n\t\t\t},\n\t  ) => SubscriptionType)\n\t| (new (\n\t\t\targs: any,\n\t\t\toptions: { requestManager: Web3RequestManager<API>; returnFormat?: DataFormat },\n\t  ) => SubscriptionType);\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-core/test/unit/fixtures/example_subscription.ts",[],["225"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-core/test/unit/formatters.test.ts",[],["226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290","291","292","293","294","295","296","297","298","299","300","301","302","303","304"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-core/test/unit/reexported_web3_context.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-core/test/unit/web3_batch_request.test.ts",[],["305"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-core/test/unit/web3_config.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-core/test/unit/web3_context.test.ts",["306","307"],["308","309","310"],"ï»¿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n// eslint-disable-next-line max-classes-per-file\nimport { ExistingPluginNamespaceError } from 'web3-errors';\nimport HttpProvider from 'web3-providers-http';\nimport { EthExecutionAPI, JsonRpcResponse, Web3APIMethod, Web3APIRequest, Web3APIReturnType } from 'web3-types';\nimport { Web3Context, Web3PluginBase } from '../../src/web3_context';\nimport { Web3RequestManager } from '../../src/web3_request_manager';\nimport { RequestManagerMiddleware } from '../../src/types';\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nclass Context1 extends Web3Context<{}> {}\n// eslint-disable-next-line @typescript-eslint/ban-types\nclass Context2 extends Web3Context<{}> {}\n\ndescribe('Web3Context', () => {\n\tdescribe('constructor()', () => {\n\t\tit('should return providers on class level', () => {\n\t\t\texpect(Web3Context.providers).toBeDefined();\n\t\t});\n\n\t\tit('should return providers on instance level', () => {\n\t\t\tconst context = new Web3Context('http://test.com');\n\t\t\texpect(context.providers).toBeDefined();\n\t\t\texpect(context.providers).toEqual(Web3Context.providers);\n\t\t});\n\n\t\tit('should create instance of request manager', () => {\n\t\t\tconst context = new Web3Context('http://test.com');\n\n\t\t\texpect(context.requestManager).toBeInstanceOf(Web3RequestManager);\n\t\t});\n\n\t\tit('should return current provider from request manager', () => {\n\t\t\tconst context = new Web3Context('http://test.com');\n\n\t\t\texpect(context.currentProvider).toBe(context.requestManager.provider);\n\t\t});\n\n\t\tit('should initialize the provider from options', () => {\n\t\t\tconst context = new Web3Context({ provider: 'http://test.com' });\n\n\t\t\texpect(context.currentProvider).toBeInstanceOf(HttpProvider);\n\t\t});\n\n\t\tit('should set return current provider for the request manager', () => {\n\t\t\tconst context = new Web3Context('http://test.com');\n\n\t\t\tcontext.currentProvider = 'http://test/abc';\n\n\t\t\texpect(context.currentProvider).toBeInstanceOf(HttpProvider);\n\t\t});\n\n\t\tit('should set middleware for the request manager', () => {\n\t\t\tconst context = new Web3Context('http://test.com');\n\n\t\t\tconst middleware: RequestManagerMiddleware<EthExecutionAPI>\n\t\t\t  = {\n\t\t\t\tprocessRequest: jest.fn(async <Method extends Web3APIMethod<EthExecutionAPI>>(request: Web3APIRequest<EthExecutionAPI, Method>) => request),\n\t\t\t\tprocessResponse: jest.fn(async <Method extends Web3APIMethod<EthExecutionAPI>, ResponseType = Web3APIReturnType<EthExecutionAPI, Method>>(response: JsonRpcResponse<ResponseType>) => response),\n\t\t\t  };\n\n\t\t\tcontext.setRequestManagerMiddleware(middleware);\n\t\t\texpect(context.requestManager.middleware).toEqual(middleware);\n\t\t});\n\t});\n\n\tdescribe('getContextObject', () => {\n\t\tit('should return correct context object', () => {\n\t\t\tconst context = new Context1('http://test/abc');\n\n\t\t\t// The following is because a specific property is different in node 18 than it is in node 20 and 21\n\t\t\t// So the problematic property is removed from the object and then added to ensure its presence and its location\n\t\t\t// And the snapshot is updated to reflect the change.\n\t\t\t// Once node 18 is no longer supported, this can be removed. And the snapshot need to be updated then.\n\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\tconst symbolForShapeMode = Object.getOwnPropertySymbols(\n\t\t\t\t(context.getContextObject().requestManager as any)._emitter,\n\t\t\t).find(s => s.description === 'shapeMode');\n\t\t\tif (symbolForShapeMode) {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\t\tdelete (context.getContextObject().requestManager as any)._emitter[symbolForShapeMode];\n\t\t\t}\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\t(context.getContextObject().requestManager as any)._emitter = {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\t\t...(context.getContextObject().requestManager as any)._emitter,\n\t\t\t\t[Symbol.for('shapeMode')]: false,\n\t\t\t};\n\n\t\t\texpect(context.getContextObject()).toMatchSnapshot();\n\t\t});\n\t});\n\n\tdescribe('use', () => {\n\t\tit('should init child context with correct type', () => {\n\t\t\tconst parent = new Context1('http://test/abc');\n\t\t\tconst child = parent.use(Context2);\n\n\t\t\texpect(child).toBeInstanceOf(Context2);\n\t\t});\n\n\t\tit('should init context with correct configuration', () => {\n\t\t\tconst parent = new Context1({\n\t\t\t\tprovider: 'http://test/abc',\n\t\t\t\tconfig: { defaultNetworkId: 'my-network-id', defaultHardfork: 'my-fork' },\n\t\t\t});\n\t\t\tconst child = parent.use(Context2);\n\n\t\t\texpect(child.defaultNetworkId).toBe('my-network-id');\n\t\t\texpect(child.defaultHardfork).toBe('my-fork');\n\t\t});\n\n\t\tit('should change config of child context', () => {\n\t\t\tconst parent = new Context1('http://test/abc');\n\t\t\tconst child = parent.use(Context2);\n\n\t\t\tparent.defaultNetworkId = 'my-network-id';\n\n\t\t\texpect(child.defaultNetworkId).toBe('my-network-id');\n\t\t});\n\n\t\tit('should use same instance of request manager', () => {\n\t\t\tconst parent = new Context1('http://test/abc');\n\t\t\tconst child = parent.use(Context2);\n\n\t\t\texpect(child.requestManager).toBe(parent.requestManager);\n\t\t});\n\n\t\tit('should use same instance of subscription manager', () => {\n\t\t\tconst parent = new Context1({\n\t\t\t\tprovider: 'http://test/abc',\n\t\t\t\tsubscriptionManager: {} as any,\n\t\t\t});\n\t\t\tconst child = parent.use(Context2);\n\n\t\t\texpect(child.subscriptionManager).toBe(parent.subscriptionManager);\n\t\t});\n\n\t\tit('should use same instance of provider', () => {\n\t\t\tconst parent = new Context1('http://test/abc');\n\t\t\tconst child = parent.use(Context2);\n\n\t\t\texpect(child.provider).toBe(parent.provider);\n\t\t});\n\n\t\tit('context should be using the default common', () => {\n\t\t\tconst parent = new Context1({\n\t\t\t\tprovider: 'http://test/abc',\n\t\t\t\tconfig: {\n\t\t\t\t\tdefaultCommon: {\n\t\t\t\t\t\tcustomChain: {\n\t\t\t\t\t\t\tname: 'foo',\n\t\t\t\t\t\t\tnetworkId: 'my-network-id',\n\t\t\t\t\t\t\tchainId: 1337,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tbaseChain: 'mainnet',\n\t\t\t\t\t\thardfork: 'berlin',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t});\n\t\t\tconst child = parent.use(Context2);\n\n\t\t\texpect(child.defaultCommon?.customChain.networkId).toBe('my-network-id');\n\t\t\texpect(child.defaultCommon?.customChain.chainId).toBe(1337);\n\t\t});\n\t});\n\n\tdescribe('link', () => {\n\t\tit('should link context with correct configuration', () => {\n\t\t\tconst parent = new Context1({\n\t\t\t\tprovider: 'http://test/abc',\n\t\t\t\tconfig: { defaultNetworkId: 'my-network-id', defaultHardfork: 'my-fork' },\n\t\t\t});\n\t\t\tconst child = new Context2('http://test/abc');\n\n\t\t\tchild.link(parent);\n\n\t\t\texpect(child.defaultNetworkId).toBe('my-network-id');\n\t\t\texpect(child.defaultHardfork).toBe('my-fork');\n\t\t});\n\n\t\tit('should change config of child context', () => {\n\t\t\tconst parent = new Context1('http://test/abc');\n\t\t\tconst child = new Context2('http://test/abc');\n\n\t\t\tchild.link(parent);\n\n\t\t\tparent.defaultNetworkId = 'my-network-id';\n\n\t\t\texpect(child.defaultNetworkId).toBe('my-network-id');\n\t\t});\n\n\t\tit('should use same instance of request manager', () => {\n\t\t\tconst parent = new Context1('http://test/abc');\n\t\t\tconst child = new Context2('http://test/abc');\n\n\t\t\tchild.link(parent);\n\n\t\t\texpect(child.requestManager).toBe(parent.requestManager);\n\t\t});\n\n\t\tit('should use same instance of subscription manager', () => {\n\t\t\tconst parent = new Context1({\n\t\t\t\tprovider: 'http://test/abc',\n\t\t\t\tsubscriptionManager: {} as any,\n\t\t\t});\n\t\t\tconst child = new Context2('http://test/abc');\n\n\t\t\tchild.link(parent);\n\n\t\t\texpect(child.subscriptionManager).toBe(parent.subscriptionManager);\n\t\t});\n\n\t\tit('should use same instance of provider', () => {\n\t\t\tconst parent = new Context1('http://test/abc');\n\t\t\tconst child = new Context2('http://test/abc');\n\n\t\t\tchild.link(parent);\n\n\t\t\texpect(child.provider).toBe(parent.provider);\n\t\t});\n\t});\n\n\tdescribe('registerPlugin', () => {\n\t\tit('should throw ExistingPluginNamespaceError', () => {\n\t\t\tconst context = new Context1('http://test/abc');\n\t\t\tconst pluginNamespace = 'plugin';\n\n\t\t\tclass Plugin extends Web3PluginBase {\n\t\t\t\tpublic pluginNamespace = pluginNamespace;\n\t\t\t}\n\t\t\tclass Plugin2 extends Web3PluginBase {\n\t\t\t\tpublic pluginNamespace = pluginNamespace;\n\t\t\t}\n\n\t\t\tcontext.registerPlugin(new Plugin());\n\t\t\texpect(() => context.registerPlugin(new Plugin2())).toThrow(\n\t\t\t\tnew ExistingPluginNamespaceError(pluginNamespace),\n\t\t\t);\n\t\t});\n\t});\n});\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-core/test/unit/web3_extend.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-core/test/unit/web3_middleware_request_manager.test.ts",["311","312"],["313","314"],"ï»¿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { EthExecutionAPI, JsonRpcResponse, Web3APIMethod, Web3APIRequest, Web3APIReturnType } from 'web3-types';\nimport { jsonRpc } from 'web3-utils';\nimport { RequestManagerMiddleware } from '../../src/types';\nimport { Web3RequestManager } from '../../src/web3_request_manager';\n\nclass Web3Middleware<API> implements RequestManagerMiddleware<API> {\n\n  // eslint-disable-next-line class-methods-use-this\n  public async processRequest<Method extends Web3APIMethod<API>>(\n    request: Web3APIRequest<API, Method>\n  ): Promise<Web3APIRequest<API, Method>> {\n    // Implement the processRequest logic here\n\n    let requestObj = {...request};\n    if (request.method === 'eth_call' && Array.isArray(request.params)) {\n      requestObj = {\n        ...requestObj,\n        params: [...request.params, '0x0', '0x1'],\n      };\n    }\n\n    return Promise.resolve(requestObj);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  public async processResponse<\n    Method extends Web3APIMethod<API>,\n    ResponseType = Web3APIReturnType<API, Method>\n  >(\n    response: JsonRpcResponse<ResponseType>\n  ): Promise<JsonRpcResponse<ResponseType>> {\n   \n    let responseObj = {...response};\n    if (!jsonRpc.isBatchResponse(responseObj) && responseObj.id === 1) {\n      responseObj = {\n        ...responseObj,\n        result: '0x6a756e616964' as any,\n      };\n    }\n\n    return Promise.resolve(responseObj);\n  }\n}\n\ndescribe('Request Manager Middleware', () => {\n  let requestManagerMiddleware: RequestManagerMiddleware<EthExecutionAPI>;\n\n  beforeAll(() => { \n    requestManagerMiddleware = {\n      processRequest: jest.fn(async <Method extends Web3APIMethod<EthExecutionAPI>>(request: Web3APIRequest<EthExecutionAPI, Method>) => request),\n      processResponse: jest.fn(async <Method extends Web3APIMethod<EthExecutionAPI>, ResponseType = Web3APIReturnType<EthExecutionAPI, Method>>(response: JsonRpcResponse<ResponseType>) => response),\n    };\n\n  });\n\n  it('should set requestManagerMiddleware via constructor', () => {\n    const web3RequestManager1: Web3RequestManager = new Web3RequestManager<EthExecutionAPI>(undefined, true, requestManagerMiddleware);\n\n    expect(web3RequestManager1.middleware).toBeDefined();\n    expect(web3RequestManager1.middleware).toEqual(requestManagerMiddleware);\n  });\n\n  it('should set requestManagerMiddleware via set method', () => {\n\n    const middleware2: RequestManagerMiddleware<EthExecutionAPI> = new Web3Middleware<EthExecutionAPI>();\n    const web3RequestManager2: Web3RequestManager = new Web3RequestManager<EthExecutionAPI>('http://localhost:8181');\n    web3RequestManager2.setMiddleware(middleware2);\n\n    expect(web3RequestManager2.middleware).toBeDefined();\n    expect(web3RequestManager2.middleware).toEqual(middleware2);\n  });\n\n  it('should call processRequest and processResponse functions of requestManagerMiddleware', async () => {\n\n    const web3RequestManager3 = new Web3RequestManager<EthExecutionAPI>('http://localhost:8080', true, requestManagerMiddleware );\n    \n    const expectedResponse: JsonRpcResponse<string> = {\n        jsonrpc: '2.0',\n        id: 1,\n        result: '0x0',\n      };\n\n    jest.spyOn(web3RequestManager3 as any, '_sendRequest').mockResolvedValue(expectedResponse);\n\n    const request = {\n      id: 1,\n      method: 'eth_call',\n      params: [],\n    };\n\n    await web3RequestManager3.send(request);\n\n    expect(requestManagerMiddleware.processRequest).toHaveBeenCalledWith(request);\n    expect(requestManagerMiddleware.processResponse).toHaveBeenCalled();\n  });\n\n  it('should allow modification of request and response', async () => {\n\n    const middleware3: RequestManagerMiddleware<EthExecutionAPI> = new Web3Middleware<EthExecutionAPI>();\n  \n    const web3RequestManager3 = new Web3RequestManager<EthExecutionAPI>('http://localhost:8080', true, middleware3);\n\n    const expectedResponse: JsonRpcResponse<string> = {\n        jsonrpc: '2.0',\n        id: 1,\n        result: '0x0',\n      };\n\n    const mockSendRequest = jest.spyOn(web3RequestManager3 as any, '_sendRequest');\n    mockSendRequest.mockResolvedValue(expectedResponse);\n\n    const request = {\n      id: 1,\n      method: 'eth_call',\n      params: ['0x3'],\n    };\n\n    const response = await web3RequestManager3.send(request);\n    expect(response).toBe('0x6a756e616964');\n\n    expect(mockSendRequest).toHaveBeenCalledWith({\n      ...request,\n      params: [...request.params, '0x0', '0x1'],\n    });\n\n  });\n});\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-core/test/unit/web3_promi_event.test.ts",[],["315","316"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-core/test/unit/web3_request_manager.test.ts",["317","318","319","320","321","322","323","324","325"],["326","327"],"ï»¿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport {\n\tWeb3BaseProvider,\n\tJsonRpcPayload,\n\tJsonRpcBatchRequest,\n\tJsonRpcBatchResponse,\n\tJsonRpcResponseWithError,\n\tJsonRpcResponseWithResult,\n\tJsonRpcIdentifier,\n} from 'web3-types';\nimport { jsonRpc } from 'web3-utils';\nimport {\n\tInvalidResponseError,\n\tParseError,\n\tInvalidRequestError,\n\tMethodNotFoundError,\n\tInvalidParamsError,\n\tInternalError,\n\tInvalidInputError,\n\tResourcesNotFoundError,\n\tTransactionRejectedError,\n\tMethodNotSupported,\n\tLimitExceededError,\n\tVersionNotSupportedError,\n\tRpcError,\n\tResourceUnavailableError,\n\tResponseError,\n} from 'web3-errors';\nimport HttpProvider from 'web3-providers-http';\nimport WSProvider from 'web3-providers-ws';\nimport { Web3RequestManager, Web3RequestManagerEvent } from '../../src/web3_request_manager';\nimport * as utils from '../../src/utils';\n\ndescribe('Web3RequestManager', () => {\n\tdescribe('constructor', () => {\n\t\tit('should create instance of request manager without any params', () => {\n\t\t\tconst manager = new Web3RequestManager();\n\n\t\t\texpect(manager).toBeInstanceOf(Web3RequestManager);\n\t\t});\n\n\t\tit('should create instance of request manager without given provider', () => {\n\t\t\tconst provider = 'http://mydomain.com';\n\t\t\tjest.spyOn(Web3RequestManager.prototype, 'setProvider').mockReturnValue(true);\n\n\t\t\tconst manager = new Web3RequestManager(provider);\n\n\t\t\texpect(manager.setProvider).toHaveBeenCalledTimes(1);\n\t\t\texpect(manager.setProvider).toHaveBeenCalledWith(provider);\n\t\t\texpect(manager).toBeInstanceOf(Web3RequestManager);\n\t\t});\n\t});\n\tdescribe('isMetaMaskProvider', () => {\n\t\tit('check params', () => {\n\t\t\tconst request = {\n\t\t\t\tconstructor: {\n\t\t\t\t\tname: 'AsyncFunction',\n\t\t\t\t},\n\t\t\t};\n\n\t\t\texpect(\n\t\t\t\tutils.isMetaMaskProvider({\n\t\t\t\t\t// @ts-expect-error incorrect param\n\t\t\t\t\trequest,\n\t\t\t\t\tisMetaMask: true,\n\t\t\t\t}),\n\t\t\t).toBe(true);\n\t\t});\n\t});\n\tdescribe('isSupportSubscriptions', () => {\n\t\tit('check params', () => {\n\t\t\t// @ts-expect-error incorrect param\n\t\t\texpect(utils.isSupportSubscriptions({ supportsSubscriptions: () => true })).toBe(true);\n\t\t\t// @ts-expect-error incorrect param\n\t\t\texpect(utils.isSupportSubscriptions({})).toBe(false);\n\t\t});\n\t});\n\tdescribe('providers', () => {\n\t\tit('should return providers on instance', () => {\n\t\t\tconst manager = new Web3RequestManager();\n\n\t\t\texpect(Object.keys(manager.providers)).toEqual(['HttpProvider', 'WebsocketProvider']);\n\t\t});\n\n\t\tit('should return providers of particular instances', () => {\n\t\t\texpect(Web3RequestManager.providers.HttpProvider).toBe(HttpProvider);\n\t\t\texpect(Web3RequestManager.providers.WebsocketProvider).toBe(WSProvider);\n\t\t});\n\t});\n\n\tdescribe('setProvider()', () => {\n\t\tlet myProvider: Web3BaseProvider;\n\t\tlet emitSpy: jest.Mock;\n\n\t\tbeforeEach(() => {\n\t\t\tmyProvider = { request: jest.fn() } as any;\n\t\t\temitSpy = jest.spyOn(Web3RequestManager.prototype, 'emit') as jest.Mock;\n\t\t});\n\n\t\tdescribe('http provider', () => {\n\t\t\tbeforeEach(() => {\n\t\t\t\tjest.spyOn(Web3RequestManager.prototype, 'providers', 'get').mockReturnValue({\n\t\t\t\t\t...Web3RequestManager.prototype.providers,\n\t\t\t\t\tHttpProvider: jest.fn().mockImplementation(() => myProvider) as any,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tit('should unset provider', () => {\n\t\t\t\tconst manager = new Web3RequestManager();\n\t\t\t\tmanager.setProvider(undefined);\n\t\t\t\texpect(manager.provider).toBeUndefined();\n\t\t\t});\n\t\t\tit('should detect and set http provider', () => {\n\t\t\t\tconst providerString = 'http://mydomain.com';\n\n\t\t\t\tconst manager = new Web3RequestManager();\n\t\t\t\tmanager.setProvider(providerString);\n\n\t\t\t\texpect(manager.providers.HttpProvider).toHaveBeenCalledTimes(1);\n\t\t\t\texpect(manager.providers.HttpProvider).toHaveBeenCalledWith(providerString);\n\t\t\t\texpect(manager.provider).toEqual(myProvider);\n\t\t\t});\n\n\t\t\tit('should emit events before changing the provider', () => {\n\t\t\t\tconst providerString = 'http://mydomain.com';\n\n\t\t\t\tconst manager = new Web3RequestManager();\n\t\t\t\tmanager.setProvider(providerString);\n\n\t\t\t\texpect(emitSpy).toHaveBeenCalledTimes(2);\n\t\t\t\texpect(emitSpy).toHaveBeenCalledWith(\n\t\t\t\t\tWeb3RequestManagerEvent.BEFORE_PROVIDER_CHANGE,\n\t\t\t\t\tundefined,\n\t\t\t\t);\n\t\t\t\texpect(emitSpy).toHaveBeenCalledWith(\n\t\t\t\t\tWeb3RequestManagerEvent.PROVIDER_CHANGED,\n\t\t\t\t\tmyProvider,\n\t\t\t\t);\n\t\t\t});\n\t\t});\n\n\t\tdescribe('https provider', () => {\n\t\t\tbeforeEach(() => {\n\t\t\t\tjest.spyOn(Web3RequestManager.prototype, 'providers', 'get').mockReturnValue({\n\t\t\t\t\t...Web3RequestManager.prototype.providers,\n\t\t\t\t\tHttpProvider: jest.fn().mockImplementation(() => myProvider) as any,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tit('should detect and set http provider', () => {\n\t\t\t\tconst providerString = 'https://mydomain.com';\n\n\t\t\t\tconst manager = new Web3RequestManager();\n\t\t\t\tmanager.setProvider(providerString);\n\n\t\t\t\texpect(manager.providers.HttpProvider).toHaveBeenCalledTimes(1);\n\t\t\t\texpect(manager.providers.HttpProvider).toHaveBeenCalledWith(providerString);\n\t\t\t\texpect(manager.provider).toEqual(myProvider);\n\t\t\t});\n\n\t\t\tit('should emit events before changing the provider', () => {\n\t\t\t\tconst providerString = 'https://mydomain.com';\n\n\t\t\t\tconst manager = new Web3RequestManager();\n\t\t\t\tmanager.setProvider(providerString);\n\n\t\t\t\texpect(emitSpy).toHaveBeenCalledTimes(2);\n\t\t\t\texpect(emitSpy).toHaveBeenCalledWith(\n\t\t\t\t\tWeb3RequestManagerEvent.BEFORE_PROVIDER_CHANGE,\n\t\t\t\t\tundefined,\n\t\t\t\t);\n\t\t\t\texpect(emitSpy).toHaveBeenCalledWith(\n\t\t\t\t\tWeb3RequestManagerEvent.PROVIDER_CHANGED,\n\t\t\t\t\tmyProvider,\n\t\t\t\t);\n\t\t\t});\n\t\t});\n\n\t\tdescribe('ws provider', () => {\n\t\t\tbeforeEach(() => {\n\t\t\t\tjest.spyOn(Web3RequestManager.prototype, 'providers', 'get').mockReturnValue({\n\t\t\t\t\t...Web3RequestManager.prototype.providers,\n\t\t\t\t\tWebsocketProvider: jest.fn().mockImplementation(() => myProvider),\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tit('should detect and set ws provider', () => {\n\t\t\t\tconst providerString = 'ws://mydomain.com';\n\n\t\t\t\tconst manager = new Web3RequestManager();\n\t\t\t\tmanager.setProvider(providerString);\n\n\t\t\t\texpect(manager.providers.WebsocketProvider).toHaveBeenCalledTimes(1);\n\t\t\t\texpect(manager.providers.WebsocketProvider).toHaveBeenCalledWith(providerString);\n\t\t\t\texpect(manager.provider).toEqual(myProvider);\n\t\t\t});\n\n\t\t\tit('should emit events before changing the provider', () => {\n\t\t\t\tconst providerString = 'ws://mydomain.com';\n\n\t\t\t\tconst manager = new Web3RequestManager();\n\t\t\t\tmanager.setProvider(providerString);\n\n\t\t\t\texpect(emitSpy).toHaveBeenCalledTimes(2);\n\t\t\t\texpect(emitSpy).toHaveBeenCalledWith(\n\t\t\t\t\tWeb3RequestManagerEvent.BEFORE_PROVIDER_CHANGE,\n\t\t\t\t\tundefined,\n\t\t\t\t);\n\t\t\t\texpect(emitSpy).toHaveBeenCalledWith(\n\t\t\t\t\tWeb3RequestManagerEvent.PROVIDER_CHANGED,\n\t\t\t\t\tmyProvider,\n\t\t\t\t);\n\t\t\t});\n\t\t});\n\n\t\tit('should throw error if can not detect the provider', () => {\n\t\t\tconst providerString = 'pc://mydomain.com';\n\t\t\tconst manager = new Web3RequestManager();\n\n\t\t\texpect(() => manager.setProvider(providerString)).toThrow(\n\t\t\t\t`Can't autodetect provider for \"pc://mydomain.com\"`,\n\t\t\t);\n\t\t});\n\t});\n\n\tdescribe('send()', () => {\n\t\tlet request: any;\n\t\tlet payload: JsonRpcPayload;\n\t\tlet errorResponse!: JsonRpcResponseWithError;\n\t\tlet successResponse!: JsonRpcResponseWithResult;\n\n\t\tbeforeEach(() => {\n\t\t\trequest = { method: 'my_method', params: [] };\n\t\t\tpayload = { method: 'my_method', params: [], id: 1, jsonrpc: '2.0' };\n\t\t\terrorResponse = {\n\t\t\t\tid: 1,\n\t\t\t\tjsonrpc: '2.0',\n\t\t\t\terror: { code: 123, message: 'my-rejected-value' },\n\t\t\t};\n\t\t\tsuccessResponse = {\n\t\t\t\tid: 1,\n\t\t\t\tjsonrpc: '2.0',\n\t\t\t\tresult: 'my-resolved-value',\n\t\t\t};\n\n\t\t\tjest.spyOn(jsonRpc, 'toPayload').mockReturnValue(payload);\n\t\t});\n\n\t\tit('should throw error if no provider is set', async () => {\n\t\t\tconst manager = new Web3RequestManager();\n\t\t\tawait expect(manager.send(request)).rejects.toThrow('Provider not available');\n\t\t});\n\n\t\tit('promise of legacy provider should be resolved', async () => {\n\t\t\tconst manager = new Web3RequestManager(undefined, undefined);\n\t\t\tconst pr = new Promise(resolve => {\n\t\t\t\tresolve('test');\n\t\t\t});\n\t\t\tconst myProvider = {\n\t\t\t\trequest: jest.fn().mockImplementation(async () => pr),\n\t\t\t} as any;\n\t\t\tmanager.setProvider(myProvider);\n\t\t\tawait manager.send(request);\n\t\t\texpect(myProvider.request).toHaveBeenCalledTimes(1);\n\t\t\texpect(await pr).toBe('test');\n\t\t});\n\t\tit('Got a \"nullish\" response from provider', async () => {\n\t\t\tconst manager = new Web3RequestManager(undefined, undefined);\n\t\t\tconst myProvider = {\n\t\t\t\tsend: jest.fn().mockImplementation((_, cb: (error?: any, data?: any) => void) => {\n\t\t\t\t\tcb(undefined, undefined);\n\t\t\t\t}),\n\t\t\t} as any;\n\t\t\tmanager.setProvider(myProvider);\n\n\t\t\tawait expect(async () => manager.send(request)).rejects.toThrow(\n\t\t\t\t'Got a \"nullish\" response from provider',\n\t\t\t);\n\t\t});\n\t\tit('Provider does not have a request or send method to use', async () => {\n\t\t\tconst manager = new Web3RequestManager(undefined, undefined);\n\t\t\tconst myProvider = {} as any;\n\t\t\tmanager.setProvider(myProvider);\n\n\t\t\tawait expect(async () => manager.send(request)).rejects.toThrow(\n\t\t\t\t'Provider does not have a request or send method to use.',\n\t\t\t);\n\t\t});\n\t\tdescribe('test rpc errors', () => {\n\t\t\tit('should pass request to provider and reject with a generic rpc error when rpc call specification flag is undefined', async () => {\n\t\t\t\tconst parseErrorResponse = {\n\t\t\t\t\tid: 1,\n\t\t\t\t\tjsonrpc: '2.0' as JsonRpcIdentifier,\n\t\t\t\t\terror: { code: -32700, message: 'Parse error' },\n\t\t\t\t};\n\t\t\t\tconst manager = new Web3RequestManager(undefined, undefined);\n\t\t\t\tconst myProvider = {\n\t\t\t\t\trequest: jest\n\t\t\t\t\t\t.fn()\n\t\t\t\t\t\t.mockImplementation((_, cb: (error?: any, data?: any) => void) => {\n\t\t\t\t\t\t\tcb(parseErrorResponse);\n\t\t\t\t\t\t}),\n\t\t\t\t} as any;\n\n\t\t\t\tjest.spyOn(manager, 'provider', 'get').mockReturnValue(myProvider);\n\n\t\t\t\tawait expect(manager.send(request)).rejects.toThrow(\n\t\t\t\t\tnew InvalidResponseError(parseErrorResponse),\n\t\t\t\t);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledTimes(1);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledWith(payload, expect.any(Function));\n\t\t\t});\n\n\t\t\tit('should pass request to provider and reject with a generic rpc error when rpc call specification flag is false', async () => {\n\t\t\t\tconst parseErrorResponse = {\n\t\t\t\t\tid: 1,\n\t\t\t\t\tjsonrpc: '2.0' as JsonRpcIdentifier,\n\t\t\t\t\terror: { code: -32700, message: 'Parse error' },\n\t\t\t\t};\n\t\t\t\tconst manager = new Web3RequestManager(undefined, false);\n\t\t\t\tconst myProvider = {\n\t\t\t\t\trequest: jest\n\t\t\t\t\t\t.fn()\n\t\t\t\t\t\t.mockImplementation((_, cb: (error?: any, data?: any) => void) => {\n\t\t\t\t\t\t\tcb(parseErrorResponse);\n\t\t\t\t\t\t}),\n\t\t\t\t} as any;\n\n\t\t\t\tjest.spyOn(manager, 'provider', 'get').mockReturnValue(myProvider);\n\n\t\t\t\tawait expect(manager.send(request)).rejects.toThrow(\n\t\t\t\t\tnew InvalidResponseError(parseErrorResponse),\n\t\t\t\t);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledTimes(1);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledWith(payload, expect.any(Function));\n\t\t\t});\n\n\t\t\tit('should pass request to provider and reject with a parse rpc error when rpc call specification flag is true', async () => {\n\t\t\t\tconst parseErrorResponse = {\n\t\t\t\t\tid: 1,\n\t\t\t\t\tjsonrpc: '2.0' as JsonRpcIdentifier,\n\t\t\t\t\terror: { code: -32700, message: 'Parse error' },\n\t\t\t\t};\n\t\t\t\tconst manager = new Web3RequestManager(undefined, true);\n\t\t\t\tconst myProvider = {\n\t\t\t\t\trequest: jest\n\t\t\t\t\t\t.fn()\n\t\t\t\t\t\t.mockImplementation((_, cb: (error?: any, data?: any) => void) => {\n\t\t\t\t\t\t\tcb(parseErrorResponse);\n\t\t\t\t\t\t}),\n\t\t\t\t} as any;\n\n\t\t\t\tjest.spyOn(manager, 'provider', 'get').mockReturnValue(myProvider);\n\n\t\t\t\tawait expect(manager.send(request)).rejects.toThrow(\n\t\t\t\t\tnew ParseError(parseErrorResponse),\n\t\t\t\t);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledTimes(1);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledWith(payload, expect.any(Function));\n\t\t\t});\n\n\t\t\tit('should pass request to provider and reject with an invalid request rpc error  when rpc call specification flag is true', async () => {\n\t\t\t\tconst rpcErrorResponse = {\n\t\t\t\t\tid: 1,\n\t\t\t\t\tjsonrpc: '2.0' as JsonRpcIdentifier,\n\t\t\t\t\terror: { code: -32600, message: 'Invalid request' },\n\t\t\t\t};\n\t\t\t\tconst manager = new Web3RequestManager(undefined, true);\n\t\t\t\tconst myProvider = {\n\t\t\t\t\trequest: jest\n\t\t\t\t\t\t.fn()\n\t\t\t\t\t\t.mockImplementation((_, cb: (error?: any, data?: any) => void) => {\n\t\t\t\t\t\t\tcb(rpcErrorResponse);\n\t\t\t\t\t\t}),\n\t\t\t\t} as any;\n\n\t\t\t\tjest.spyOn(manager, 'provider', 'get').mockReturnValue(myProvider);\n\n\t\t\t\tawait expect(manager.send(request)).rejects.toThrow(\n\t\t\t\t\tnew InvalidRequestError(rpcErrorResponse),\n\t\t\t\t);\n\t\t\t\t// await expect(manager.send(request)).rejects.toThrow(parseErrorResponse.error.message);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledTimes(1);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledWith(payload, expect.any(Function));\n\t\t\t});\n\n\t\t\tit('should pass request to provider and reject with an invalid Method error when rpc call specification flag is true', async () => {\n\t\t\t\tconst rpcErrorResponse = {\n\t\t\t\t\tid: 1,\n\t\t\t\t\tjsonrpc: '2.0' as JsonRpcIdentifier,\n\t\t\t\t\terror: { code: -32601, message: 'Method not found' },\n\t\t\t\t};\n\t\t\t\tconst manager = new Web3RequestManager(undefined, true);\n\t\t\t\tconst myProvider = {\n\t\t\t\t\trequest: jest\n\t\t\t\t\t\t.fn()\n\t\t\t\t\t\t.mockImplementation((_, cb: (error?: any, data?: any) => void) => {\n\t\t\t\t\t\t\tcb(rpcErrorResponse);\n\t\t\t\t\t\t}),\n\t\t\t\t} as any;\n\n\t\t\t\tjest.spyOn(manager, 'provider', 'get').mockReturnValue(myProvider);\n\n\t\t\t\tawait expect(manager.send(request)).rejects.toThrow(\n\t\t\t\t\tnew MethodNotFoundError(rpcErrorResponse),\n\t\t\t\t);\n\t\t\t\t// await expect(manager.send(request)).rejects.toThrow(parseErrorResponse.error.message);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledTimes(1);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledWith(payload, expect.any(Function));\n\t\t\t});\n\n\t\t\tit('should pass request to provider and reject with an invalid method rpc error when rpc call specification flag is true', async () => {\n\t\t\t\tconst rpcErrorResponse = {\n\t\t\t\t\tid: 1,\n\t\t\t\t\tjsonrpc: '2.0' as JsonRpcIdentifier,\n\t\t\t\t\terror: { code: -32602, message: 'Invalid params' },\n\t\t\t\t};\n\t\t\t\tconst manager = new Web3RequestManager(undefined, true);\n\t\t\t\tconst myProvider = {\n\t\t\t\t\trequest: jest\n\t\t\t\t\t\t.fn()\n\t\t\t\t\t\t.mockImplementation((_, cb: (error?: any, data?: any) => void) => {\n\t\t\t\t\t\t\tcb(rpcErrorResponse);\n\t\t\t\t\t\t}),\n\t\t\t\t} as any;\n\n\t\t\t\tjest.spyOn(manager, 'provider', 'get').mockReturnValue(myProvider);\n\n\t\t\t\tawait expect(manager.send(request)).rejects.toThrow(\n\t\t\t\t\tnew InvalidParamsError(rpcErrorResponse),\n\t\t\t\t);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledTimes(1);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledWith(payload, expect.any(Function));\n\t\t\t});\n\n\t\t\tit('should pass request to provider and reject with an internal rpc error when rpc call specification flag is true', async () => {\n\t\t\t\tconst rpcErrorResponse = {\n\t\t\t\t\tid: 1,\n\t\t\t\t\tjsonrpc: '2.0' as JsonRpcIdentifier,\n\t\t\t\t\terror: { code: -32603, message: 'Internal error' },\n\t\t\t\t};\n\t\t\t\tconst manager = new Web3RequestManager(undefined, true);\n\t\t\t\tconst myProvider = {\n\t\t\t\t\trequest: jest\n\t\t\t\t\t\t.fn()\n\t\t\t\t\t\t.mockImplementation((_, cb: (error?: any, data?: any) => void) => {\n\t\t\t\t\t\t\tcb(rpcErrorResponse);\n\t\t\t\t\t\t}),\n\t\t\t\t} as any;\n\n\t\t\t\tjest.spyOn(manager, 'provider', 'get').mockReturnValue(myProvider);\n\n\t\t\t\tawait expect(manager.send(request)).rejects.toThrow(\n\t\t\t\t\tnew InternalError(rpcErrorResponse),\n\t\t\t\t);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledTimes(1);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledWith(payload, expect.any(Function));\n\t\t\t});\n\n\t\t\tit('should pass request to provider and reject with an invalid input rpc error when rpc call specification flag is true', async () => {\n\t\t\t\tconst rpcErrorResponse = {\n\t\t\t\t\tid: 1,\n\t\t\t\t\tjsonrpc: '2.0' as JsonRpcIdentifier,\n\t\t\t\t\terror: { code: -32000, message: 'Invalid input' },\n\t\t\t\t};\n\t\t\t\tconst manager = new Web3RequestManager(undefined, true);\n\t\t\t\tconst myProvider = {\n\t\t\t\t\trequest: jest\n\t\t\t\t\t\t.fn()\n\t\t\t\t\t\t.mockImplementation((_, cb: (error?: any, data?: any) => void) => {\n\t\t\t\t\t\t\tcb(rpcErrorResponse);\n\t\t\t\t\t\t}),\n\t\t\t\t} as any;\n\n\t\t\t\tjest.spyOn(manager, 'provider', 'get').mockReturnValue(myProvider);\n\n\t\t\t\tawait expect(manager.send(request)).rejects.toThrow(\n\t\t\t\t\tnew InvalidInputError(rpcErrorResponse),\n\t\t\t\t);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledTimes(1);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledWith(payload, expect.any(Function));\n\t\t\t});\n\n\t\t\tit('should pass request to provider and reject with a resource not found rpc error when rpc call specification flag is true', async () => {\n\t\t\t\tconst rpcErrorResponse = {\n\t\t\t\t\tid: 1,\n\t\t\t\t\tjsonrpc: '2.0' as JsonRpcIdentifier,\n\t\t\t\t\terror: { code: -32001, message: 'Resource not found' },\n\t\t\t\t};\n\t\t\t\tconst manager = new Web3RequestManager(undefined, true);\n\t\t\t\tconst myProvider = {\n\t\t\t\t\trequest: jest\n\t\t\t\t\t\t.fn()\n\t\t\t\t\t\t.mockImplementation((_, cb: (error?: any, data?: any) => void) => {\n\t\t\t\t\t\t\tcb(rpcErrorResponse);\n\t\t\t\t\t\t}),\n\t\t\t\t} as any;\n\n\t\t\t\tjest.spyOn(manager, 'provider', 'get').mockReturnValue(myProvider);\n\n\t\t\t\tawait expect(manager.send(request)).rejects.toThrow(\n\t\t\t\t\tnew ResourcesNotFoundError(rpcErrorResponse),\n\t\t\t\t);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledTimes(1);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledWith(payload, expect.any(Function));\n\t\t\t});\n\n\t\t\tit('should pass request to provider and reject with a resource unavailable rpc error when rpc call specification flag is true', async () => {\n\t\t\t\tconst rpcErrorResponse = {\n\t\t\t\t\tid: 1,\n\t\t\t\t\tjsonrpc: '2.0' as JsonRpcIdentifier,\n\t\t\t\t\terror: { code: -32002, message: 'Resource unavailable' },\n\t\t\t\t};\n\t\t\t\tconst manager = new Web3RequestManager(undefined, true);\n\t\t\t\tconst myProvider = {\n\t\t\t\t\trequest: jest\n\t\t\t\t\t\t.fn()\n\t\t\t\t\t\t.mockImplementation((_, cb: (error?: any, data?: any) => void) => {\n\t\t\t\t\t\t\tcb(rpcErrorResponse);\n\t\t\t\t\t\t}),\n\t\t\t\t} as any;\n\n\t\t\t\tjest.spyOn(manager, 'provider', 'get').mockReturnValue(myProvider);\n\n\t\t\t\tawait expect(manager.send(request)).rejects.toThrow(\n\t\t\t\t\tnew ResourceUnavailableError(rpcErrorResponse),\n\t\t\t\t);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledTimes(1);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledWith(payload, expect.any(Function));\n\t\t\t});\n\n\t\t\tit('should pass request to provider and reject with a transaction rejected rpc error when rpc call specification flag is true', async () => {\n\t\t\t\tconst rpcErrorResponse = {\n\t\t\t\t\tid: 1,\n\t\t\t\t\tjsonrpc: '2.0' as JsonRpcIdentifier,\n\t\t\t\t\terror: { code: -32003, message: 'Transaction rejected' },\n\t\t\t\t};\n\t\t\t\tconst manager = new Web3RequestManager(undefined, true);\n\t\t\t\tconst myProvider = {\n\t\t\t\t\trequest: jest\n\t\t\t\t\t\t.fn()\n\t\t\t\t\t\t.mockImplementation((_, cb: (error?: any, data?: any) => void) => {\n\t\t\t\t\t\t\tcb(rpcErrorResponse);\n\t\t\t\t\t\t}),\n\t\t\t\t} as any;\n\n\t\t\t\tjest.spyOn(manager, 'provider', 'get').mockReturnValue(myProvider);\n\n\t\t\t\tawait expect(manager.send(request)).rejects.toThrow(\n\t\t\t\t\tnew TransactionRejectedError(rpcErrorResponse),\n\t\t\t\t);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledTimes(1);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledWith(payload, expect.any(Function));\n\t\t\t});\n\n\t\t\tit('should pass request to provider and reject with a method not supported rpc error when rpc call specification flag is true', async () => {\n\t\t\t\tconst rpcErrorResponse = {\n\t\t\t\t\tid: 1,\n\t\t\t\t\tjsonrpc: '2.0' as JsonRpcIdentifier,\n\t\t\t\t\terror: { code: -32004, message: 'Method not supported' },\n\t\t\t\t};\n\t\t\t\tconst manager = new Web3RequestManager(undefined, true);\n\t\t\t\tconst myProvider = {\n\t\t\t\t\trequest: jest\n\t\t\t\t\t\t.fn()\n\t\t\t\t\t\t.mockImplementation((_, cb: (error?: any, data?: any) => void) => {\n\t\t\t\t\t\t\tcb(rpcErrorResponse);\n\t\t\t\t\t\t}),\n\t\t\t\t} as any;\n\n\t\t\t\tjest.spyOn(manager, 'provider', 'get').mockReturnValue(myProvider);\n\n\t\t\t\tawait expect(manager.send(request)).rejects.toThrow(\n\t\t\t\t\tnew MethodNotSupported(rpcErrorResponse),\n\t\t\t\t);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledTimes(1);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledWith(payload, expect.any(Function));\n\t\t\t});\n\n\t\t\tit('should pass request to provider and reject with a limited exceeded rpc error when rpc call specification flag is true', async () => {\n\t\t\t\tconst rpcErrorResponse = {\n\t\t\t\t\tid: 1,\n\t\t\t\t\tjsonrpc: '2.0' as JsonRpcIdentifier,\n\t\t\t\t\terror: { code: -32005, message: 'Limit exceeded' },\n\t\t\t\t};\n\t\t\t\tconst manager = new Web3RequestManager(undefined, true);\n\t\t\t\tconst myProvider = {\n\t\t\t\t\trequest: jest\n\t\t\t\t\t\t.fn()\n\t\t\t\t\t\t.mockImplementation((_, cb: (error?: any, data?: any) => void) => {\n\t\t\t\t\t\t\tcb(rpcErrorResponse);\n\t\t\t\t\t\t}),\n\t\t\t\t} as any;\n\n\t\t\t\tjest.spyOn(manager, 'provider', 'get').mockReturnValue(myProvider);\n\n\t\t\t\tawait expect(manager.send(request)).rejects.toThrow(\n\t\t\t\t\tnew LimitExceededError(rpcErrorResponse),\n\t\t\t\t);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledTimes(1);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledWith(payload, expect.any(Function));\n\t\t\t});\n\n\t\t\tit('should pass request to provider and reject with a JSON-RPC version not supported rpc error when rpc call specification flag is true', async () => {\n\t\t\t\tconst rpcErrorResponse = {\n\t\t\t\t\tid: 1,\n\t\t\t\t\tjsonrpc: '2.0' as JsonRpcIdentifier,\n\t\t\t\t\terror: { code: -32006, message: 'JSON-RPC version not supported' },\n\t\t\t\t};\n\t\t\t\tconst manager = new Web3RequestManager(undefined, true);\n\t\t\t\tconst myProvider = {\n\t\t\t\t\trequest: jest\n\t\t\t\t\t\t.fn()\n\t\t\t\t\t\t.mockImplementation((_, cb: (error?: any, data?: any) => void) => {\n\t\t\t\t\t\t\tcb(rpcErrorResponse);\n\t\t\t\t\t\t}),\n\t\t\t\t} as any;\n\n\t\t\t\tjest.spyOn(manager, 'provider', 'get').mockReturnValue(myProvider);\n\n\t\t\t\tawait expect(manager.send(request)).rejects.toThrow(\n\t\t\t\t\tnew VersionNotSupportedError(rpcErrorResponse),\n\t\t\t\t);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledTimes(1);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledWith(payload, expect.any(Function));\n\t\t\t});\n\n\t\t\tit('should pass request to provider and reject with a generic rpc error when rpc call specification flag is true', async () => {\n\t\t\t\tconst rpcErrorResponse = {\n\t\t\t\t\tid: 1,\n\t\t\t\t\tjsonrpc: '2.0' as JsonRpcIdentifier,\n\t\t\t\t\terror: { code: -32015, message: 'Custom rpc error' },\n\t\t\t\t};\n\t\t\t\tconst manager = new Web3RequestManager(undefined, true);\n\t\t\t\tconst myProvider = {\n\t\t\t\t\trequest: jest\n\t\t\t\t\t\t.fn()\n\t\t\t\t\t\t.mockImplementation((_, cb: (error?: any, data?: any) => void) => {\n\t\t\t\t\t\t\tcb(rpcErrorResponse);\n\t\t\t\t\t\t}),\n\t\t\t\t} as any;\n\n\t\t\t\tjest.spyOn(manager, 'provider', 'get').mockReturnValue(myProvider);\n\n\t\t\t\tawait expect(manager.send(request)).rejects.toThrow(new RpcError(rpcErrorResponse));\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledTimes(1);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledWith(payload, expect.any(Function));\n\t\t\t});\n\t\t\tit('should reject and include inner error when send method errors with an error property', async () => {\n\t\t\t\tconst rpcErrorResponse = {\n\t\t\t\t\tid: 1,\n\t\t\t\t\tjsonrpc: '2.0' as JsonRpcIdentifier,\n\t\t\t\t\terror: {\n\t\t\t\t\t\tcode: 4001,\n\t\t\t\t\t\tmessage: 'MetaMask Tx Signature: User denied transaction signature.',\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t\tconst manager = new Web3RequestManager(undefined, true);\n\t\t\t\tconst myProvider = {\n\t\t\t\t\trequest: jest.fn().mockImplementation(async () => {\n\t\t\t\t\t\treturn Promise.resolve(successResponse.result);\n\t\t\t\t\t}),\n\t\t\t\t} as any;\n\n\t\t\t\tjest.spyOn(manager, 'provider', 'get').mockReturnValue(myProvider);\n\t\t\t\t// use any as a way to test private method '_sendRequest'\n\t\t\t\tjest.spyOn(manager as any, '_sendRequest').mockReturnValue(rpcErrorResponse);\n\t\t\t\tlet err;\n\t\t\t\ttry {\n\t\t\t\t\tawait manager.send(request);\n\t\t\t\t} catch (error: any) {\n\t\t\t\t\terr = error;\n\t\t\t\t} finally {\n\t\t\t\t\texpect(err).toBeInstanceOf(ResponseError);\n\t\t\t\t\texpect(err.cause).toEqual(rpcErrorResponse.error);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tdescribe('web3-provider', () => {\n\t\t\tbeforeEach(() => {\n\t\t\t\t// isWeb3Provider uses instanceof to check if the provider is a Web3Provider\n\t\t\t\t// So we have to mock the response\n\t\t\t\tjest.spyOn(utils, 'isWeb3Provider').mockReturnValue(true);\n\t\t\t});\n\n\t\t\tit('should pass request to provider and resolve if provider resolves it', async () => {\n\t\t\t\tconst manager = new Web3RequestManager();\n\t\t\t\tconst myProvider = {\n\t\t\t\t\trequest: jest\n\t\t\t\t\t\t.fn()\n\t\t\t\t\t\t.mockImplementation(async () => Promise.resolve(successResponse)),\n\t\t\t\t} as any;\n\n\t\t\t\tjest.spyOn(manager, 'provider', 'get').mockReturnValue(myProvider);\n\n\t\t\t\tawait expect(manager.send(request)).resolves.toEqual(successResponse.result);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledTimes(1);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledWith(payload);\n\t\t\t});\n\n\t\t\tit('should pass request to provider and reject if provider rejects it', async () => {\n\t\t\t\tconst manager = new Web3RequestManager();\n\t\t\t\tconst myProvider = {\n\t\t\t\t\trequest: jest\n\t\t\t\t\t\t.fn()\n\t\t\t\t\t\t.mockImplementation(async () => Promise.reject(new Error('my-error'))),\n\t\t\t\t} as any;\n\n\t\t\t\tjest.spyOn(manager, 'provider', 'get').mockReturnValue(myProvider);\n\n\t\t\t\tawait expect(manager.send(request)).rejects.toThrow('my-error');\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledTimes(1);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledWith(payload);\n\t\t\t});\n\t\t});\n\n\t\tdescribe('legacy-request-provider', () => {\n\t\t\tit('should pass request to provider and resolve if provider resolves it', async () => {\n\t\t\t\tconst manager = new Web3RequestManager();\n\t\t\t\tconst myProvider = {\n\t\t\t\t\trequest: jest\n\t\t\t\t\t\t.fn()\n\t\t\t\t\t\t.mockImplementation((_, cb: (error?: any, data?: any) => void) => {\n\t\t\t\t\t\t\tcb(undefined, successResponse);\n\t\t\t\t\t\t}),\n\t\t\t\t} as any;\n\n\t\t\t\tjest.spyOn(manager, 'provider', 'get').mockReturnValue(myProvider);\n\n\t\t\t\tawait expect(manager.send(request)).resolves.toEqual(successResponse.result);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledTimes(1);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledWith(payload, expect.any(Function));\n\t\t\t});\n\n\t\t\tit('should pass request to provider and reject if provider throws error', async () => {\n\t\t\t\tconst manager = new Web3RequestManager();\n\t\t\t\tconst myProvider = {\n\t\t\t\t\trequest: jest\n\t\t\t\t\t\t.fn()\n\t\t\t\t\t\t.mockImplementation((_, cb: (error?: any, data?: any) => void) => {\n\t\t\t\t\t\t\tcb(errorResponse);\n\t\t\t\t\t\t}),\n\t\t\t\t} as any;\n\n\t\t\t\tjest.spyOn(manager, 'provider', 'get').mockReturnValue(myProvider);\n\n\t\t\t\tawait expect(manager.send(request)).rejects.toThrow(errorResponse.error.message);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledTimes(1);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledWith(payload, expect.any(Function));\n\t\t\t});\n\n\t\t\tit('should pass request to provider and reject if provider returns error', async () => {\n\t\t\t\tconst manager = new Web3RequestManager();\n\t\t\t\tconst myProvider = {\n\t\t\t\t\trequest: jest\n\t\t\t\t\t\t.fn()\n\t\t\t\t\t\t.mockImplementation((_, cb: (error?: any, data?: any) => void) => {\n\t\t\t\t\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\t\t\t\t\tcb(null, errorResponse);\n\t\t\t\t\t\t}),\n\t\t\t\t} as any;\n\n\t\t\t\tjest.spyOn(manager, 'provider', 'get').mockReturnValue(myProvider);\n\n\t\t\t\tawait expect(manager.send(request)).rejects.toThrow(\n\t\t\t\t\tnew InvalidResponseError(errorResponse),\n\t\t\t\t);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledTimes(1);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledWith(payload, expect.any(Function));\n\t\t\t});\n\t\t});\n\n\t\tdescribe('eip1193-provider', () => {\n\t\t\tbeforeEach(() => {\n\t\t\t\t// isEIP1193Provider uses typeof to check if the provider is a EIP1193Provider\n\t\t\t\t// So we have to mock the response\n\t\t\t\tjest.spyOn(utils, 'isEIP1193Provider').mockReturnValue(true);\n\t\t\t});\n\n\t\t\tit('should pass request to provider and resolve if provider resolves it', async () => {\n\t\t\t\tconst manager = new Web3RequestManager();\n\t\t\t\tconst myProvider = {\n\t\t\t\t\trequest: jest.fn().mockImplementation(async () => {\n\t\t\t\t\t\treturn Promise.resolve(successResponse);\n\t\t\t\t\t}),\n\t\t\t\t} as any;\n\n\t\t\t\tjest.spyOn(manager, 'provider', 'get').mockReturnValue(myProvider);\n\n\t\t\t\tawait expect(manager.send(request)).resolves.toEqual(successResponse.result);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledTimes(1);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledWith(payload);\n\t\t\t});\n\n\t\t\tit('should pass request to provider and reject if provider throws error', async () => {\n\t\t\t\tconst manager = new Web3RequestManager();\n\t\t\t\tconst myProvider = {\n\t\t\t\t\trequest: jest.fn().mockImplementation(async () => {\n\t\t\t\t\t\treturn Promise.reject(errorResponse);\n\t\t\t\t\t}),\n\t\t\t\t} as any;\n\n\t\t\t\tjest.spyOn(manager, 'provider', 'get').mockReturnValue(myProvider);\n\n\t\t\t\tawait expect(manager.send(request)).rejects.toThrow(errorResponse.error.message);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledTimes(1);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledWith(payload);\n\t\t\t});\n\n\t\t\tit('should pass request to provider and reject if provider returns error', async () => {\n\t\t\t\tconst manager = new Web3RequestManager();\n\t\t\t\tconst myProvider = {\n\t\t\t\t\trequest: jest.fn().mockImplementation(async () => {\n\t\t\t\t\t\treturn Promise.resolve(errorResponse);\n\t\t\t\t\t}),\n\t\t\t\t} as any;\n\n\t\t\t\tjest.spyOn(manager, 'provider', 'get').mockReturnValue(myProvider);\n\n\t\t\t\tawait expect(manager.send(request)).rejects.toThrow(\n\t\t\t\t\tnew InvalidResponseError(errorResponse),\n\t\t\t\t);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledTimes(1);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledWith(payload);\n\t\t\t});\n\t\t});\n\n\t\tdescribe('eip1193-provider - return non json-rpc compliance response', () => {\n\t\t\tbeforeEach(() => {\n\t\t\t\t// isEIP1193Provider uses typeof to check if the provider is a EIP1193Provider\n\t\t\t\t// So we have to mock the response\n\t\t\t\tjest.spyOn(utils, 'isEIP1193Provider').mockReturnValue(true);\n\t\t\t});\n\n\t\t\tit('should pass request to provider and resolve if provider resolves it', async () => {\n\t\t\t\tconst manager = new Web3RequestManager();\n\t\t\t\tconst myProvider = {\n\t\t\t\t\trequest: jest.fn().mockImplementation(async () => {\n\t\t\t\t\t\treturn Promise.resolve(successResponse.result);\n\t\t\t\t\t}),\n\t\t\t\t} as any;\n\n\t\t\t\tjest.spyOn(manager, 'provider', 'get').mockReturnValue(myProvider);\n\n\t\t\t\tawait expect(manager.send(request)).resolves.toEqual(successResponse.result);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledTimes(1);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledWith(payload);\n\t\t\t});\n\n\t\t\tit('should pass request to provider and reject if provider throws error', async () => {\n\t\t\t\tconst manager = new Web3RequestManager();\n\t\t\t\tconst myProvider = {\n\t\t\t\t\trequest: jest.fn().mockImplementation(async _ => {\n\t\t\t\t\t\treturn Promise.reject(errorResponse.error);\n\t\t\t\t\t}),\n\t\t\t\t} as any;\n\n\t\t\t\tjest.spyOn(manager, 'provider', 'get').mockReturnValue(myProvider);\n\n\t\t\t\tawait expect(manager.send(request)).rejects.toThrow(errorResponse.error.message);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledTimes(1);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledWith(payload);\n\t\t\t});\n\n\t\t\tit('should pass request to provider and pass if provider returns \"null', async () => {\n\t\t\t\tconst manager = new Web3RequestManager();\n\t\t\t\tconst myProvider = {\n\t\t\t\t\trequest: jest.fn().mockImplementation(async _ => {\n\t\t\t\t\t\t// Explicitly used for test case\n\t\t\t\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}),\n\t\t\t\t} as any;\n\n\t\t\t\tjest.spyOn(manager, 'provider', 'get').mockReturnValue(myProvider);\n\n\t\t\t\tawait expect(manager.send(request)).resolves.toBeNull();\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledTimes(1);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledWith(payload);\n\t\t\t});\n\n\t\t\tit('should pass request to provider and pass if provider returns \"undefined', async () => {\n\t\t\t\tconst manager = new Web3RequestManager();\n\t\t\t\tconst myProvider = {\n\t\t\t\t\trequest: jest.fn().mockImplementation(async _ => {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}),\n\t\t\t\t} as any;\n\n\t\t\t\tjest.spyOn(manager, 'provider', 'get').mockReturnValue(myProvider);\n\n\t\t\t\tawait expect(manager.send(request)).resolves.toBeNull();\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledTimes(1);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledWith(payload);\n\t\t\t});\n\t\t});\n\n\t\tdescribe('legacy-send-provider', () => {\n\t\t\tit('should pass request to provider and resolve if provider resolves it', async () => {\n\t\t\t\tconst manager = new Web3RequestManager();\n\t\t\t\tconst myProvider = {\n\t\t\t\t\tsend: jest\n\t\t\t\t\t\t.fn()\n\t\t\t\t\t\t.mockImplementation((_, cb: (error?: any, data?: any) => void) => {\n\t\t\t\t\t\t\tcb(undefined, successResponse);\n\t\t\t\t\t\t}),\n\t\t\t\t} as any;\n\n\t\t\t\tjest.spyOn(manager, 'provider', 'get').mockReturnValue(myProvider);\n\n\t\t\t\tawait expect(manager.send(request)).resolves.toEqual(successResponse.result);\n\t\t\t\texpect(myProvider.send).toHaveBeenCalledTimes(1);\n\t\t\t\texpect(myProvider.send).toHaveBeenCalledWith(payload, expect.any(Function));\n\t\t\t});\n\n\t\t\tit('should pass request to provider and reject if provider throws error', async () => {\n\t\t\t\tconst manager = new Web3RequestManager();\n\t\t\t\tconst myProvider = {\n\t\t\t\t\tsend: jest\n\t\t\t\t\t\t.fn()\n\t\t\t\t\t\t.mockImplementation((_, cb: (error?: any, data?: any) => void) => {\n\t\t\t\t\t\t\tcb(errorResponse);\n\t\t\t\t\t\t}),\n\t\t\t\t} as any;\n\n\t\t\t\tjest.spyOn(manager, 'provider', 'get').mockReturnValue(myProvider);\n\n\t\t\t\tawait expect(manager.send(request)).rejects.toThrow(errorResponse.error.message);\n\t\t\t\texpect(myProvider.send).toHaveBeenCalledTimes(1);\n\t\t\t\texpect(myProvider.send).toHaveBeenCalledWith(payload, expect.any(Function));\n\t\t\t});\n\n\t\t\tit('should pass request to provider and reject if provider returns error', async () => {\n\t\t\t\tconst manager = new Web3RequestManager();\n\t\t\t\tconst myProvider = {\n\t\t\t\t\tsend: jest\n\t\t\t\t\t\t.fn()\n\t\t\t\t\t\t.mockImplementation((_, cb: (error?: any, data?: any) => void) => {\n\t\t\t\t\t\t\tcb(undefined, errorResponse);\n\t\t\t\t\t\t}),\n\t\t\t\t} as any;\n\n\t\t\t\tjest.spyOn(manager, 'provider', 'get').mockReturnValue(myProvider);\n\n\t\t\t\tawait expect(manager.send(request)).rejects.toThrow(\n\t\t\t\t\tnew InvalidResponseError(errorResponse),\n\t\t\t\t);\n\t\t\t\texpect(myProvider.send).toHaveBeenCalledTimes(1);\n\t\t\t\texpect(myProvider.send).toHaveBeenCalledWith(payload, expect.any(Function));\n\t\t\t});\n\t\t});\n\n\t\tdescribe('legacy-send-async-provider', () => {\n\t\t\tit('should pass request to provider and resolve if provider resolves it', async () => {\n\t\t\t\tconst manager = new Web3RequestManager();\n\t\t\t\tconst myProvider = {\n\t\t\t\t\tsendAsync: jest\n\t\t\t\t\t\t.fn()\n\t\t\t\t\t\t.mockImplementation(async () => Promise.resolve(successResponse)),\n\t\t\t\t} as any;\n\n\t\t\t\tjest.spyOn(manager, 'provider', 'get').mockReturnValue(myProvider);\n\n\t\t\t\tawait expect(manager.send(request)).resolves.toEqual(successResponse.result);\n\t\t\t\texpect(myProvider.sendAsync).toHaveBeenCalledTimes(1);\n\t\t\t\texpect(myProvider.sendAsync).toHaveBeenCalledWith(payload);\n\t\t\t});\n\n\t\t\tit('should pass request to provider and reject if provider rejects it', async () => {\n\t\t\t\tconst manager = new Web3RequestManager();\n\t\t\t\tconst myProvider = {\n\t\t\t\t\tsendAsync: jest\n\t\t\t\t\t\t.fn()\n\t\t\t\t\t\t.mockImplementation(async () => Promise.reject(new Error('my-error'))),\n\t\t\t\t} as any;\n\n\t\t\t\tjest.spyOn(manager, 'provider', 'get').mockReturnValue(myProvider);\n\n\t\t\t\tawait expect(manager.send(request)).rejects.toThrow('my-error');\n\t\t\t\texpect(myProvider.sendAsync).toHaveBeenCalledTimes(1);\n\t\t\t\texpect(myProvider.sendAsync).toHaveBeenCalledWith(payload);\n\t\t\t});\n\t\t});\n\t});\n\n\tdescribe('sendBatch()', () => {\n\t\tlet request: JsonRpcBatchRequest;\n\t\tlet payload: JsonRpcPayload;\n\t\tlet errorResponse!: JsonRpcBatchResponse;\n\t\tlet successResponse!: JsonRpcBatchResponse;\n\n\t\tbeforeEach(() => {\n\t\t\trequest = [\n\t\t\t\t{ id: 1, jsonrpc: '2.0', method: 'my_method', params: [] },\n\t\t\t\t{ id: 2, jsonrpc: '2.0', method: 'my_method', params: [] },\n\t\t\t];\n\t\t\tpayload = [...request];\n\t\t\terrorResponse = [\n\t\t\t\t{\n\t\t\t\t\tid: 1,\n\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\terror: { code: 123, message: 'my-rejected-value-1' },\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: 2,\n\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\terror: { code: 123, message: 'my-rejected-value-2' },\n\t\t\t\t},\n\t\t\t];\n\t\t\tsuccessResponse = [\n\t\t\t\t{\n\t\t\t\t\tid: 1,\n\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\tresult: 'my-resolved-value1',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: 1,\n\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\tresult: 'my-resolved-value1',\n\t\t\t\t},\n\t\t\t];\n\n\t\t\tjest.spyOn(jsonRpc, 'toBatchPayload').mockReturnValue(payload);\n\t\t});\n\n\t\tit('should throw error if no provider is set', async () => {\n\t\t\tconst manager = new Web3RequestManager();\n\n\t\t\tawait expect(manager.sendBatch(request)).rejects.toThrow('Provider not available');\n\t\t});\n\n\t\tdescribe('web3-provider', () => {\n\t\t\tbeforeEach(() => {\n\t\t\t\t// isWeb3Provider is using `Symbol` to identify which get change with the\n\t\t\t\t// mock implementation of the provider, so we have to mock it's response.\n\t\t\t\tjest.spyOn(utils, 'isWeb3Provider').mockReturnValue(true);\n\t\t\t});\n\n\t\t\tit('should pass request to provider and resolve if provider resolves it', async () => {\n\t\t\t\tconst manager = new Web3RequestManager();\n\t\t\t\tconst myProvider = {\n\t\t\t\t\trequest: jest\n\t\t\t\t\t\t.fn()\n\t\t\t\t\t\t.mockImplementation(async () => Promise.resolve(successResponse)),\n\t\t\t\t} as any;\n\n\t\t\t\tjest.spyOn(manager, 'provider', 'get').mockReturnValue(myProvider);\n\n\t\t\t\tawait expect(manager.sendBatch(request)).resolves.toEqual(successResponse);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledTimes(1);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledWith(payload);\n\t\t\t});\n\n\t\t\tit('should pass request to provider and reject if provider rejects it', async () => {\n\t\t\t\tconst manager = new Web3RequestManager();\n\t\t\t\tconst myProvider = {\n\t\t\t\t\trequest: jest\n\t\t\t\t\t\t.fn()\n\t\t\t\t\t\t.mockImplementation(async () => Promise.reject(new Error('my-error'))),\n\t\t\t\t} as any;\n\n\t\t\t\tjest.spyOn(manager, 'provider', 'get').mockReturnValue(myProvider);\n\n\t\t\t\tawait expect(manager.sendBatch(request)).rejects.toThrow('my-error');\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledTimes(1);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledWith(payload);\n\t\t\t});\n\n\t\t\tit('should pass request to provider and return response if provider returns error', async () => {\n\t\t\t\tconst manager = new Web3RequestManager();\n\t\t\t\tconst myProvider = {\n\t\t\t\t\trequest: jest\n\t\t\t\t\t\t.fn()\n\t\t\t\t\t\t.mockImplementation(async () => Promise.resolve(errorResponse)),\n\t\t\t\t} as any;\n\n\t\t\t\tjest.spyOn(manager, 'provider', 'get').mockReturnValue(myProvider);\n\n\t\t\t\tawait expect(manager.sendBatch(request)).resolves.toEqual(errorResponse);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledTimes(1);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledWith(payload);\n\t\t\t});\n\t\t});\n\n\t\tdescribe('legacy-request-provider', () => {\n\t\t\tit('should pass request to provider and resolve if provider resolves it', async () => {\n\t\t\t\tconst manager = new Web3RequestManager();\n\t\t\t\tconst myProvider = {\n\t\t\t\t\trequest: jest\n\t\t\t\t\t\t.fn()\n\t\t\t\t\t\t.mockImplementation((_, cb: (error?: any, data?: any) => void) => {\n\t\t\t\t\t\t\tcb(undefined, successResponse);\n\t\t\t\t\t\t}),\n\t\t\t\t} as any;\n\n\t\t\t\tjest.spyOn(manager, 'provider', 'get').mockReturnValue(myProvider);\n\n\t\t\t\tawait expect(manager.sendBatch(request)).resolves.toEqual(successResponse);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledTimes(1);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledWith(payload, expect.any(Function));\n\t\t\t});\n\n\t\t\tit('should pass request to provider and reject if provider throws error', async () => {\n\t\t\t\tconst manager = new Web3RequestManager();\n\t\t\t\tconst myProvider = {\n\t\t\t\t\trequest: jest\n\t\t\t\t\t\t.fn()\n\t\t\t\t\t\t.mockImplementation((_, cb: (error?: any, data?: any) => void) => {\n\t\t\t\t\t\t\tcb(errorResponse);\n\t\t\t\t\t\t}),\n\t\t\t\t} as any;\n\n\t\t\t\tjest.spyOn(manager, 'provider', 'get').mockReturnValue(myProvider);\n\n\t\t\t\tawait expect(manager.sendBatch(request)).rejects.toEqual(errorResponse);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledTimes(1);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledWith(payload, expect.any(Function));\n\t\t\t});\n\n\t\t\tit('should pass request to provider and reject if provider returns error', async () => {\n\t\t\t\tconst manager = new Web3RequestManager();\n\t\t\t\tconst myProvider = {\n\t\t\t\t\trequest: jest\n\t\t\t\t\t\t.fn()\n\t\t\t\t\t\t.mockImplementation((_, cb: (error?: any, data?: any) => void) => {\n\t\t\t\t\t\t\tcb(undefined, errorResponse);\n\t\t\t\t\t\t}),\n\t\t\t\t} as any;\n\n\t\t\t\tjest.spyOn(manager, 'provider', 'get').mockReturnValue(myProvider);\n\n\t\t\t\tawait expect(manager.sendBatch(request)).resolves.toEqual(errorResponse);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledTimes(1);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledWith(payload, expect.any(Function));\n\t\t\t});\n\t\t});\n\n\t\tdescribe('eip1193-provider', () => {\n\t\t\tbeforeEach(() => {\n\t\t\t\t// isEIP1193Provider is using `Symbol.toStringTag` which get change with the\n\t\t\t\t// mock implementation of the provider, so we have to mock it's response.\n\t\t\t\tjest.spyOn(utils, 'isEIP1193Provider').mockReturnValue(true);\n\t\t\t});\n\n\t\t\tit('should pass request to provider and resolve if provider resolves it', async () => {\n\t\t\t\tconst manager = new Web3RequestManager();\n\t\t\t\tconst myProvider = {\n\t\t\t\t\trequest: jest.fn().mockImplementation(async _ => {\n\t\t\t\t\t\treturn Promise.resolve(successResponse);\n\t\t\t\t\t}),\n\t\t\t\t} as any;\n\n\t\t\t\tjest.spyOn(manager, 'provider', 'get').mockReturnValue(myProvider);\n\n\t\t\t\tawait expect(manager.sendBatch(request)).resolves.toEqual(successResponse);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledTimes(1);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledWith(payload);\n\t\t\t});\n\n\t\t\tit('should pass request to provider and reject if provider throws error', async () => {\n\t\t\t\tconst manager = new Web3RequestManager();\n\t\t\t\tconst myProvider = {\n\t\t\t\t\trequest: jest.fn().mockImplementation(async _ => {\n\t\t\t\t\t\tthrow errorResponse;\n\t\t\t\t\t}),\n\t\t\t\t} as any;\n\n\t\t\t\tjest.spyOn(manager, 'provider', 'get').mockReturnValue(myProvider);\n\n\t\t\t\tawait expect(manager.sendBatch(request)).rejects.toEqual(errorResponse);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledTimes(1);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledWith(payload);\n\t\t\t});\n\n\t\t\tit('should pass request to provider and reject if provider returns error', async () => {\n\t\t\t\tconst manager = new Web3RequestManager();\n\t\t\t\tconst myProvider = {\n\t\t\t\t\trequest: jest.fn().mockImplementation(async _ => {\n\t\t\t\t\t\treturn Promise.resolve(errorResponse);\n\t\t\t\t\t}),\n\t\t\t\t} as any;\n\n\t\t\t\tjest.spyOn(manager, 'provider', 'get').mockReturnValue(myProvider);\n\n\t\t\t\tawait expect(manager.sendBatch(request)).resolves.toEqual(errorResponse);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledTimes(1);\n\t\t\t\texpect(myProvider.request).toHaveBeenCalledWith(payload);\n\t\t\t});\n\t\t});\n\n\t\tdescribe('legacy-send-provider', () => {\n\t\t\tit('should pass request to provider and resolve if provider resolves it', async () => {\n\t\t\t\tconst manager = new Web3RequestManager();\n\t\t\t\tconst myProvider = {\n\t\t\t\t\tsend: jest\n\t\t\t\t\t\t.fn()\n\t\t\t\t\t\t.mockImplementation((_, cb: (error?: any, data?: any) => void) => {\n\t\t\t\t\t\t\tcb(undefined, successResponse);\n\t\t\t\t\t\t}),\n\t\t\t\t} as any;\n\n\t\t\t\tjest.spyOn(manager, 'provider', 'get').mockReturnValue(myProvider);\n\n\t\t\t\tawait expect(manager.sendBatch(request)).resolves.toEqual(successResponse);\n\t\t\t\texpect(myProvider.send).toHaveBeenCalledTimes(1);\n\t\t\t\texpect(myProvider.send).toHaveBeenCalledWith(payload, expect.any(Function));\n\t\t\t});\n\n\t\t\tit('should pass request to provider and reject if provider throws error', async () => {\n\t\t\t\tconst manager = new Web3RequestManager();\n\t\t\t\tconst myProvider = {\n\t\t\t\t\tsend: jest\n\t\t\t\t\t\t.fn()\n\t\t\t\t\t\t.mockImplementation((_, cb: (error?: any, data?: any) => void) => {\n\t\t\t\t\t\t\tcb(errorResponse);\n\t\t\t\t\t\t}),\n\t\t\t\t} as any;\n\n\t\t\t\tjest.spyOn(manager, 'provider', 'get').mockReturnValue(myProvider);\n\n\t\t\t\tawait expect(manager.sendBatch(request)).rejects.toEqual(errorResponse);\n\t\t\t\texpect(myProvider.send).toHaveBeenCalledTimes(1);\n\t\t\t\texpect(myProvider.send).toHaveBeenCalledWith(payload, expect.any(Function));\n\t\t\t});\n\n\t\t\tit('should pass request to provider and return response if provider returns error', async () => {\n\t\t\t\tconst manager = new Web3RequestManager();\n\t\t\t\tconst myProvider = {\n\t\t\t\t\tsend: jest\n\t\t\t\t\t\t.fn()\n\t\t\t\t\t\t.mockImplementation((_, cb: (error?: any, data?: any) => void) => {\n\t\t\t\t\t\t\tcb(undefined, errorResponse);\n\t\t\t\t\t\t}),\n\t\t\t\t} as any;\n\n\t\t\t\tjest.spyOn(manager, 'provider', 'get').mockReturnValue(myProvider);\n\n\t\t\t\tawait expect(manager.sendBatch(request)).resolves.toEqual(errorResponse);\n\t\t\t\texpect(myProvider.send).toHaveBeenCalledTimes(1);\n\t\t\t\texpect(myProvider.send).toHaveBeenCalledWith(payload, expect.any(Function));\n\t\t\t});\n\t\t});\n\n\t\tdescribe('legacy-send-async-provider', () => {\n\t\t\tit('should pass request to provider and resolve if provider resolves it', async () => {\n\t\t\t\tconst manager = new Web3RequestManager();\n\t\t\t\tconst myProvider = {\n\t\t\t\t\tsendAsync: jest\n\t\t\t\t\t\t.fn()\n\t\t\t\t\t\t.mockImplementation(async () => Promise.resolve(successResponse)),\n\t\t\t\t} as any;\n\n\t\t\t\tjest.spyOn(manager, 'provider', 'get').mockReturnValue(myProvider);\n\n\t\t\t\tawait expect(manager.sendBatch(request)).resolves.toEqual(successResponse);\n\t\t\t\texpect(myProvider.sendAsync).toHaveBeenCalledTimes(1);\n\t\t\t\texpect(myProvider.sendAsync).toHaveBeenCalledWith(payload);\n\t\t\t});\n\n\t\t\tit('should pass request to provider and reject if provider rejects it', async () => {\n\t\t\t\tconst manager = new Web3RequestManager();\n\t\t\t\tconst myProvider = {\n\t\t\t\t\tsendAsync: jest\n\t\t\t\t\t\t.fn()\n\t\t\t\t\t\t.mockImplementation(async () => Promise.reject(new Error('my-error'))),\n\t\t\t\t} as any;\n\n\t\t\t\tjest.spyOn(manager, 'provider', 'get').mockReturnValue(myProvider);\n\n\t\t\t\tawait expect(manager.sendBatch(request)).rejects.toThrow('my-error');\n\t\t\t\texpect(myProvider.sendAsync).toHaveBeenCalledTimes(1);\n\t\t\t\texpect(myProvider.sendAsync).toHaveBeenCalledWith(payload);\n\t\t\t});\n\n\t\t\tit('should pass request to provider and return response if provider returns error', async () => {\n\t\t\t\tconst manager = new Web3RequestManager();\n\t\t\t\tconst myProvider = {\n\t\t\t\t\tsendAsync: jest\n\t\t\t\t\t\t.fn()\n\t\t\t\t\t\t.mockImplementation(async () => Promise.resolve(errorResponse)),\n\t\t\t\t} as any;\n\n\t\t\t\tjest.spyOn(manager, 'provider', 'get').mockReturnValue(myProvider);\n\n\t\t\t\tawait expect(manager.sendBatch(request)).resolves.toEqual(errorResponse);\n\t\t\t\texpect(myProvider.sendAsync).toHaveBeenCalledTimes(1);\n\t\t\t\texpect(myProvider.sendAsync).toHaveBeenCalledWith(payload);\n\t\t\t});\n\t\t});\n\t});\n});\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-core/test/unit/web3_subscription.test.ts",["328","329","330"],["331","332"],"ï»¿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { Web3SubscriptionManager } from '../../src';\nimport { ExampleSubscription } from './fixtures/example_subscription';\n\nconst subscriptions = { example: ExampleSubscription as never };\n\ndescribe('Web3Subscription', () => {\n\tlet requestManager: any;\n\tlet subscriptionManager: Web3SubscriptionManager<any, any>;\n\tlet sub: ExampleSubscription;\n\n\tbeforeEach(() => {\n\t\trequestManager = {\n\t\t\tsend: jest.fn().mockImplementation(async () => {\n\t\t\t\treturn 'sub-id';\n\t\t\t}),\n\t\t\ton: jest.fn(),\n\t\t\tprovider: { on: jest.fn(), removeListener: jest.fn(), request: jest.fn() },\n\t\t};\n\t\tsubscriptionManager = new Web3SubscriptionManager(requestManager, subscriptions);\n\t});\n\n\tdescribe('subscriptionManager', () => {\n\t\tit('subscriptionManager is accessible in inherited subscription', async () => {\n\t\t\tclass InheritedExampleSubscription extends ExampleSubscription {\n\t\t\t\tpublic verifyAccessToSubscriptionManager(\n\t\t\t\t\toriginalSubscriptionManager: Web3SubscriptionManager,\n\t\t\t\t) {\n\t\t\t\t\texpect(this.subscriptionManager).toBe(originalSubscriptionManager);\n\t\t\t\t}\n\t\t\t}\n\t\t\tnew InheritedExampleSubscription(\n\t\t\t\t{ param1: 'value' },\n\t\t\t\t{ subscriptionManager },\n\t\t\t).verifyAccessToSubscriptionManager(subscriptionManager);\n\t\t});\n\t});\n\n\tdescribe('subscribe', () => {\n\t\tbeforeEach(() => {\n\t\t\tsub = new ExampleSubscription({ param1: 'value' }, { subscriptionManager });\n\t\t});\n\t\tit('should invoke request manager for subscription', async () => {\n\t\t\tawait sub.subscribe();\n\n\t\t\texpect(requestManager.send).toHaveBeenCalledTimes(1);\n\t\t\texpect(requestManager.send).toHaveBeenCalledWith({\n\t\t\t\tmethod: 'eth_subscribe',\n\t\t\t\tparams: ['newHeads'],\n\t\t\t});\n\t\t});\n\n\t\tit('should set correct subscription id', async () => {\n\t\t\texpect(sub.id).toBeUndefined();\n\t\t\tawait sub.subscribe();\n\t\t\texpect(sub.id).toBe('sub-id');\n\t\t});\n\n\t\tit('should start listening to the \"message\" event', async () => {\n\t\t\tawait sub.subscribe();\n\n\t\t\texpect(requestManager.provider.on).toHaveBeenCalledTimes(1);\n\t\t\texpect(requestManager.provider.on).toHaveBeenCalledWith(\n\t\t\t\t'message',\n\t\t\t\texpect.any(Function),\n\t\t\t);\n\t\t});\n\t});\n\n\tdescribe('unsubscribe', () => {\n\t\tbeforeEach(() => {\n\t\t\tsub = new ExampleSubscription({ param1: 'value' }, { subscriptionManager });\n\t\t\tsub['_id'] = 'sub-id';\n\t\t\tsubscriptionManager.subscriptions.set('sub-id', sub);\n\t\t});\n\n\t\tit('should invoke request manager to unsubscribe', async () => {\n\t\t\tawait sub.unsubscribe();\n\n\t\t\texpect(requestManager.send).toHaveBeenCalledTimes(1);\n\t\t\texpect(requestManager.send).toHaveBeenCalledWith({\n\t\t\t\tmethod: 'eth_unsubscribe',\n\t\t\t\tparams: ['sub-id'],\n\t\t\t});\n\t\t});\n\n\t\tit('should remove the subscription id', async () => {\n\t\t\texpect(sub.id).toBe('sub-id');\n\t\t\tawait sub.unsubscribe();\n\t\t\texpect(sub.id).toBeUndefined();\n\t\t});\n\t});\n});\n\ndescribe('Web3Subscription without subscription manager - (deprecated)', () => {\n\tlet requestManager: any;\n\tlet sub: ExampleSubscription;\n\n\tbeforeEach(() => {\n\t\trequestManager = {\n\t\t\tsend: jest.fn().mockImplementation(async () => {\n\t\t\t\treturn 'sub-id';\n\t\t\t}),\n\t\t\ton: jest.fn(),\n\t\t\tprovider: { on: jest.fn(), removeListener: jest.fn(), request: jest.fn() },\n\t\t};\n\t});\n\tdescribe('subscribe', () => {\n\t\tbeforeEach(() => {\n\t\t\t// eslint-disable-next-line deprecation/deprecation\n\t\t\tsub = new ExampleSubscription({ param1: 'value' }, { requestManager });\n\t\t});\n\n\t\tit('should invoke request manager for subscription', async () => {\n\t\t\t(requestManager.send as jest.Mock).mockResolvedValue('sub-id');\n\t\t\tawait sub.subscribe();\n\n\t\t\texpect(requestManager.send).toHaveBeenCalledTimes(1);\n\t\t\texpect(requestManager.send).toHaveBeenCalledWith({\n\t\t\t\tmethod: 'eth_subscribe',\n\t\t\t\tparams: ['newHeads'],\n\t\t\t});\n\t\t});\n\n\t\tit('should set correct subscription id', async () => {\n\t\t\t(requestManager.send as jest.Mock).mockResolvedValue('sub-id');\n\n\t\t\texpect(sub.id).toBeUndefined();\n\t\t\tawait sub.subscribe();\n\t\t\texpect(sub.id).toBe('sub-id');\n\t\t});\n\n\t\tit('should start listening to the \"message\" event', async () => {\n\t\t\t// requestManager.provider.on.mockClear();\n\t\t\tawait sub.subscribe();\n\n\t\t\texpect(requestManager.provider.on).toHaveBeenCalledTimes(1);\n\t\t\texpect(requestManager.provider.on).toHaveBeenCalledWith(\n\t\t\t\t'message',\n\t\t\t\texpect.any(Function),\n\t\t\t);\n\t\t});\n\t});\n\n\tdescribe('unsubscribe', () => {\n\t\tbeforeEach(() => {\n\t\t\t// eslint-disable-next-line deprecation/deprecation\n\t\t\tsub = new ExampleSubscription({ param1: 'value' }, { requestManager });\n\t\t\tsub['_id'] = 'sub-id';\n\t\t});\n\n\t\tit('should invoke request manager to unsubscribe', async () => {\n\t\t\tawait sub.unsubscribe();\n\n\t\t\texpect(requestManager.provider.on).toHaveBeenCalledTimes(1);\n\t\t\texpect(requestManager.provider.on).toHaveBeenCalledWith(\n\t\t\t\t'message',\n\t\t\t\texpect.any(Function),\n\t\t\t);\n\t\t});\n\n\t\tit('should remove the subscription id', async () => {\n\t\t\texpect(sub.id).toBe('sub-id');\n\t\t\tawait sub.unsubscribe();\n\t\t\texpect(sub.id).toBeUndefined();\n\t\t});\n\t});\n});\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-core/test/unit/web3_subscription_manager.test.ts",["333"],[],"ï»¿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { DEFAULT_RETURN_FORMAT } from 'web3-types';\nimport { Web3RequestManagerEvent } from '../../src/web3_request_manager';\nimport { Web3SubscriptionManager } from '../../src/web3_subscription_manager';\nimport { ExampleSubscription } from './fixtures/example_subscription';\n\njest.mock('./fixtures/example_subscription');\n\nconst subscriptions = { example: ExampleSubscription as never };\n\ndescribe('Web3SubscriptionManager', () => {\n\tlet requestManager: any;\n\tlet subManager: Web3SubscriptionManager<any, any>;\n\n\tbeforeEach(() => {\n\t\trequestManager = {\n\t\t\tsend: jest.fn().mockImplementation(async () => {\n\t\t\t\treturn 'sub-id';\n\t\t\t}),\n\t\t\ton: jest.fn(),\n\t\t\tprovider: { on: jest.fn() },\n\t\t};\n\t\tsubManager = new Web3SubscriptionManager(requestManager, subscriptions);\n\t\t(ExampleSubscription as jest.Mock).mockClear();\n\t});\n\n\tdescribe('constructor', () => {\n\t\tit('should create subscription manager object', () => {\n\t\t\tsubManager = new Web3SubscriptionManager(requestManager, {});\n\t\t\texpect(subManager).toBeInstanceOf(Web3SubscriptionManager);\n\t\t});\n\n\t\tit('should create register events for request manager', () => {\n\t\t\tconst requestMan: any = {\n\t\t\t\tsend: jest.fn(),\n\t\t\t\ton: jest.fn(),\n\t\t\t\tprovider: {\n\t\t\t\t\ton: jest\n\t\t\t\t\t\t.fn()\n\t\t\t\t\t\t.mockImplementation((_: string, callback: (a: string) => unknown) =>\n\t\t\t\t\t\t\tcallback('something'),\n\t\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t};\n\t\t\tconst subscriptionMan = new Web3SubscriptionManager(requestMan, {});\n\n\t\t\texpect(subscriptionMan).toBeDefined();\n\t\t\texpect(requestMan.on).toHaveBeenCalledTimes(2);\n\t\t\texpect(requestMan.on).toHaveBeenCalledWith(\n\t\t\t\tWeb3RequestManagerEvent.BEFORE_PROVIDER_CHANGE,\n\t\t\t\texpect.any(Function),\n\t\t\t);\n\t\t\texpect(requestMan.on).toHaveBeenCalledWith(\n\t\t\t\tWeb3RequestManagerEvent.PROVIDER_CHANGED,\n\t\t\t\texpect.any(Function),\n\t\t\t);\n\t\t});\n\n\t\tit('should register the subscription types', () => {\n\t\t\tsubManager = new Web3SubscriptionManager(requestManager, {\n\t\t\t\texample: ExampleSubscription as never,\n\t\t\t});\n\n\t\t\texpect(subManager.registeredSubscriptions).toEqual(subscriptions);\n\t\t});\n\t});\n\n\tdescribe('subscribe', () => {\n\t\tbeforeEach(() => {\n\t\t\tsubManager = new Web3SubscriptionManager(requestManager, subscriptions);\n\n\t\t\tjest.spyOn(subManager, 'supportsSubscriptions').mockReturnValue(true);\n\t\t});\n\n\t\tit('should throw error if current provider not available', async () => {\n\t\t\tdelete requestManager.provider;\n\t\t\tjest.spyOn(subManager, 'supportsSubscriptions').mockReturnValue(false);\n\n\t\t\tawait expect(subManager.subscribe('example')).rejects.toThrow('Provider not available');\n\t\t});\n\n\t\tit('should throw error if subscription is not supported', async () => {\n\t\t\tjest.spyOn(subManager, 'supportsSubscriptions').mockReturnValue(false);\n\n\t\t\tawait expect(subManager.subscribe('example')).rejects.toThrow(\n\t\t\t\t'The current provider does not support subscriptions',\n\t\t\t);\n\t\t});\n\n\t\tit('should throw error if invalid subscription type is called', async () => {\n\t\t\tawait expect(subManager.subscribe('example2')).rejects.toThrow(\n\t\t\t\t'Invalid subscription type',\n\t\t\t);\n\t\t});\n\n\t\tit('should return valid subscription type if subscribed', async () => {\n\t\t\tjest.spyOn(subManager, 'addSubscription').mockResolvedValue('123');\n\t\t\tconst result = await subManager.subscribe('example');\n\n\t\t\texpect(result).toBeInstanceOf(ExampleSubscription);\n\t\t});\n\n\t\tit('should initialize subscription with valid args', async () => {\n\t\t\tjest.spyOn(subManager, 'addSubscription').mockResolvedValue('456');\n\t\t\tconst result = await subManager.subscribe('example', { test1: 'test1' });\n\n\t\t\texpect(result).toBeInstanceOf(ExampleSubscription);\n\t\t\texpect(ExampleSubscription).toHaveBeenCalledTimes(1);\n\t\t\texpect(ExampleSubscription).toHaveBeenCalledWith(\n\t\t\t\t{ test1: 'test1' },\n\t\t\t\t{ subscriptionManager: subManager, returnFormat: DEFAULT_RETURN_FORMAT },\n\t\t\t);\n\t\t});\n\t});\n\n\tdescribe('addSubscription', () => {\n\t\tlet sub: ExampleSubscription;\n\n\t\tbeforeEach(() => {\n\t\t\tsubManager = new Web3SubscriptionManager(requestManager, subscriptions);\n\t\t\tjest.spyOn(subManager, 'supportsSubscriptions').mockReturnValue(true);\n\t\t\tsub = new ExampleSubscription(\n\t\t\t\t{ param1: 'param1' },\n\t\t\t\t{ subscriptionManager: subManager },\n\t\t\t);\n\n\t\t\t(sub as any).id = '123';\n\t\t});\n\n\t\tit('should throw error if a subscription already exists with same id', async () => {\n\t\t\tawait subManager.addSubscription(sub);\n\n\t\t\tawait expect(subManager.addSubscription(sub)).rejects.toThrow(\n\t\t\t\t'Subscription with id \"123\" already exists',\n\t\t\t);\n\t\t});\n\n\t\tit('should try to subscribe the subscription', async () => {\n\t\t\tsub = new ExampleSubscription(\n\t\t\t\t{ param1: 'param1' },\n\t\t\t\t{ subscriptionManager: subManager },\n\t\t\t);\n\t\t\tjest.spyOn(sub, 'sendSubscriptionRequest').mockImplementation(async () => {\n\t\t\t\t(sub as any).id = 'value';\n\t\t\t\treturn Promise.resolve(sub.id as string);\n\t\t\t});\n\t\t\tawait subManager.addSubscription(sub);\n\n\t\t\texpect(sub.sendSubscriptionRequest).toHaveBeenCalledTimes(1);\n\t\t\texpect(sub.sendSubscriptionRequest).toHaveBeenCalledWith();\n\t\t});\n\n\t\tit('should set the subscription to the map', async () => {\n\t\t\texpect(subManager.subscriptions).toEqual(new Map());\n\n\t\t\tawait subManager.addSubscription(sub);\n\n\t\t\texpect(subManager.subscriptions).toEqual(new Map([['123', sub]]));\n\t\t});\n\t});\n\n\tdescribe('removeSubscription', () => {\n\t\tlet sub: ExampleSubscription;\n\n\t\tbeforeEach(async () => {\n\t\t\tsubManager = new Web3SubscriptionManager(requestManager, subscriptions);\n\t\t\tjest.spyOn(subManager, 'supportsSubscriptions').mockReturnValue(true);\n\t\t\tsub = new ExampleSubscription(\n\t\t\t\t{ param1: 'param1' },\n\t\t\t\t{ subscriptionManager: subManager },\n\t\t\t);\n\n\t\t\t(sub as any).id = '123';\n\t\t\tawait subManager.addSubscription(sub);\n\t\t});\n\n\t\tit('should throw error if a subscription id does not exists', async () => {\n\t\t\tdelete (sub as any).id;\n\n\t\t\tawait expect(subManager.removeSubscription(sub)).rejects.toThrow(\n\t\t\t\t'Subscription is not subscribed yet.',\n\t\t\t);\n\t\t});\n\n\t\tit('should throw error if a subscription does not exists', async () => {\n\t\t\t(sub as any).id = '456';\n\n\t\t\tawait expect(subManager.removeSubscription(sub)).rejects.toThrow(\n\t\t\t\t'Subscription with id \"456\" does not exists',\n\t\t\t);\n\t\t});\n\n\t\tit('should try to unsubscribe the subscription', async () => {\n\t\t\tawait subManager.removeSubscription(sub);\n\n\t\t\texpect(sub.sendUnsubscribeRequest).toHaveBeenCalledTimes(1);\n\t\t\texpect(sub.sendUnsubscribeRequest).toHaveBeenCalledWith();\n\t\t});\n\n\t\tit('should remove the subscription to the map', async () => {\n\t\t\texpect(subManager.subscriptions).toEqual(new Map([['123', sub]]));\n\n\t\t\tawait subManager.removeSubscription(sub);\n\n\t\t\texpect(subManager.subscriptions).toEqual(new Map());\n\t\t});\n\t});\n});\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-core/test/unit/web3_subscription_old_providers.test.ts",["334","335"],[],"ï»¿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { ExampleSubscription } from './fixtures/example_subscription';\nimport { Web3EventEmitter } from '../../src/web3_event_emitter';\nimport { Web3SubscriptionManager } from '../../src';\n\ndescribe('Web3Subscription', () => {\n\tlet requestManager: any;\n\tlet subscriptionManager: Web3SubscriptionManager<any, any>;\n\tlet eipRequestManager: any;\n\tlet subscriptionManagerWithEipReqMan: Web3SubscriptionManager<any, any>;\n\tlet provider: Web3EventEmitter<any>;\n\tlet eipProvider: Web3EventEmitter<any>;\n\n\tbeforeEach(() => {\n\t\tprovider = new Web3EventEmitter();\n\t\teipProvider = new Web3EventEmitter();\n\t\t// @ts-expect-error add to test eip providers\n\t\teipProvider.request = jest.fn();\n\t\trequestManager = {\n\t\t\tsend: jest.fn().mockImplementation(async () => {\n\t\t\t\treturn 'sub-id';\n\t\t\t}),\n\t\t\ton: jest.fn(),\n\t\t\tprovider,\n\t\t};\n\t\tsubscriptionManager = new Web3SubscriptionManager(requestManager, {});\n\n\t\teipRequestManager = {\n\t\t\tsend: jest.fn().mockImplementation(async () => {\n\t\t\t\treturn 'sub-id';\n\t\t\t}),\n\t\t\ton: jest.fn(),\n\t\t\tprovider: eipProvider,\n\t\t};\n\t\tsubscriptionManagerWithEipReqMan = new Web3SubscriptionManager(eipRequestManager, {});\n\t});\n\n\tdescribe('providers response for old provider', () => {\n\t\tit('data with result', async () => {\n\t\t\tconst sub = new ExampleSubscription({ param1: 'param1' }, { subscriptionManager });\n\t\t\tawait sub.subscribe();\n\t\t\tconst testData = {\n\t\t\t\tdata: {\n\t\t\t\t\tsubscription: sub.id,\n\t\t\t\t\tresult: {\n\t\t\t\t\t\tsome: 1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t};\n\t\t\tconst processResult = jest.spyOn(sub, '_processSubscriptionResult');\n\t\t\tprovider.emit('data', testData);\n\t\t\texpect(processResult).toHaveBeenCalledWith(testData.data.result);\n\t\t});\n\n\t\tit('data without result for old provider', async () => {\n\t\t\tconst sub = new ExampleSubscription({ param1: 'param1' }, { subscriptionManager });\n\t\t\tawait sub.subscribe();\n\t\t\tconst testData = {\n\t\t\t\tdata: {\n\t\t\t\t\tsubscription: sub.id,\n\t\t\t\t\tother: {\n\t\t\t\t\t\tsome: 1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t};\n\t\t\tconst processResult = jest.spyOn(sub, '_processSubscriptionResult');\n\t\t\tprovider.emit('data', testData);\n\t\t\texpect(processResult).toHaveBeenCalledWith(testData.data);\n\t\t});\n\t\tit('data with result for eipProvider', async () => {\n\t\t\tconst sub = new ExampleSubscription(\n\t\t\t\t{ param1: 'param1' },\n\t\t\t\t{ subscriptionManager: subscriptionManagerWithEipReqMan },\n\t\t\t);\n\t\t\tawait sub.subscribe();\n\t\t\tconst testData = {\n\t\t\t\tdata: {\n\t\t\t\t\tsubscription: sub.id,\n\t\t\t\t\tresult: {\n\t\t\t\t\t\tsome: 1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t};\n\t\t\tconst processResult = jest.spyOn(sub, '_processSubscriptionResult');\n\t\t\teipProvider.emit('message', testData);\n\t\t\texpect(processResult).toHaveBeenCalledWith(testData.data.result);\n\t\t});\n\n\t\tit('data without result for eipProvider', async () => {\n\t\t\tconst sub = new ExampleSubscription(\n\t\t\t\t{ param1: 'param1' },\n\t\t\t\t{ subscriptionManager: subscriptionManagerWithEipReqMan },\n\t\t\t);\n\t\t\tawait sub.subscribe();\n\t\t\tconst testData = {\n\t\t\t\tdata: {\n\t\t\t\t\tsubscription: sub.id,\n\t\t\t\t\tother: {\n\t\t\t\t\t\tsome: 1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t};\n\t\t\tconst processResult = jest.spyOn(sub, '_processSubscriptionResult');\n\t\t\teipProvider.emit('message', testData);\n\t\t\texpect(processResult).toHaveBeenCalledWith(testData.data);\n\t\t});\n\t});\n});\n",{"ruleId":"336","severity":1,"message":"337","line":120,"column":4,"nodeType":null,"messageId":"338","endLine":120,"endColumn":10},{"ruleId":"336","severity":1,"message":"339","line":233,"column":4,"nodeType":null,"messageId":"340","endLine":233,"endColumn":13},{"ruleId":"336","severity":1,"message":"337","line":283,"column":4,"nodeType":null,"messageId":"338","endLine":283,"endColumn":10},{"ruleId":"336","severity":1,"message":"337","line":299,"column":4,"nodeType":null,"messageId":"338","endLine":299,"endColumn":10},{"ruleId":"336","severity":1,"message":"339","line":337,"column":4,"nodeType":null,"messageId":"340","endLine":337,"endColumn":13},{"ruleId":"336","severity":1,"message":"339","line":421,"column":4,"nodeType":null,"messageId":"340","endLine":421,"endColumn":13},{"ruleId":"336","severity":1,"message":"339","line":494,"column":4,"nodeType":null,"messageId":"340","endLine":494,"endColumn":13},{"ruleId":"341","severity":2,"message":"342","line":96,"column":41,"nodeType":"343","messageId":"344","endLine":96,"endColumn":52,"suppressions":"345"},{"ruleId":"341","severity":2,"message":"346","line":112,"column":10,"nodeType":"343","messageId":"344","endLine":112,"endColumn":35,"suppressions":"347"},{"ruleId":"341","severity":2,"message":"346","line":115,"column":9,"nodeType":"343","messageId":"344","endLine":115,"endColumn":34,"suppressions":"348"},{"ruleId":"341","severity":2,"message":"349","line":129,"column":6,"nodeType":"343","messageId":"344","endLine":129,"endColumn":15,"suppressions":"350"},{"ruleId":"341","severity":2,"message":"351","line":147,"column":24,"nodeType":"343","messageId":"344","endLine":147,"endColumn":45,"suppressions":"352"},{"ruleId":"341","severity":2,"message":"342","line":165,"column":32,"nodeType":"343","messageId":"344","endLine":165,"endColumn":43,"suppressions":"353"},{"ruleId":"341","severity":2,"message":"354","line":192,"column":15,"nodeType":"343","messageId":"344","endLine":192,"endColumn":38,"suppressions":"355"},{"ruleId":"341","severity":2,"message":"351","line":197,"column":15,"nodeType":"343","messageId":"344","endLine":197,"endColumn":36,"suppressions":"356"},{"ruleId":"341","severity":2,"message":"354","line":208,"column":15,"nodeType":"343","messageId":"344","endLine":208,"endColumn":38,"suppressions":"357"},{"ruleId":"341","severity":2,"message":"351","line":218,"column":15,"nodeType":"343","messageId":"344","endLine":218,"endColumn":36,"suppressions":"358"},{"ruleId":"341","severity":2,"message":"342","line":228,"column":54,"nodeType":"343","messageId":"344","endLine":228,"endColumn":65,"suppressions":"359"},{"ruleId":"341","severity":2,"message":"360","line":250,"column":25,"nodeType":"343","messageId":"344","endLine":250,"endColumn":50,"suppressions":"361"},{"ruleId":"341","severity":2,"message":"360","line":254,"column":29,"nodeType":"343","messageId":"344","endLine":254,"endColumn":54,"suppressions":"362"},{"ruleId":"341","severity":2,"message":"360","line":258,"column":37,"nodeType":"343","messageId":"344","endLine":258,"endColumn":62,"suppressions":"363"},{"ruleId":"341","severity":2,"message":"360","line":265,"column":21,"nodeType":"343","messageId":"344","endLine":265,"endColumn":46,"suppressions":"364"},{"ruleId":"341","severity":2,"message":"349","line":267,"column":15,"nodeType":"343","messageId":"344","endLine":267,"endColumn":24,"suppressions":"365"},{"ruleId":"366","severity":2,"message":"367","line":287,"column":60,"nodeType":"368","messageId":"369","endLine":287,"endColumn":64,"suppressions":"370"},{"ruleId":"371","severity":2,"message":"372","line":290,"column":31,"nodeType":"373","endLine":290,"endColumn":35,"suppressions":"374"},{"ruleId":"341","severity":2,"message":"346","line":311,"column":18,"nodeType":"343","messageId":"344","endLine":311,"endColumn":43,"suppressions":"375"},{"ruleId":"341","severity":2,"message":"346","line":314,"column":17,"nodeType":"343","messageId":"344","endLine":314,"endColumn":42,"suppressions":"376"},{"ruleId":"341","severity":2,"message":"377","line":321,"column":17,"nodeType":"343","messageId":"344","endLine":321,"endColumn":36,"suppressions":"378"},{"ruleId":"341","severity":2,"message":"377","line":322,"column":6,"nodeType":"343","messageId":"344","endLine":322,"endColumn":25,"suppressions":"379"},{"ruleId":"341","severity":2,"message":"351","line":327,"column":30,"nodeType":"343","messageId":"344","endLine":327,"endColumn":51,"suppressions":"380"},{"ruleId":"341","severity":2,"message":"351","line":328,"column":6,"nodeType":"343","messageId":"344","endLine":328,"endColumn":27,"suppressions":"381"},{"ruleId":"341","severity":2,"message":"342","line":360,"column":25,"nodeType":"343","messageId":"344","endLine":360,"endColumn":36,"suppressions":"382"},{"ruleId":"341","severity":2,"message":"342","line":363,"column":30,"nodeType":"343","messageId":"344","endLine":363,"endColumn":41,"suppressions":"383"},{"ruleId":"341","severity":2,"message":"342","line":367,"column":22,"nodeType":"343","messageId":"344","endLine":367,"endColumn":33,"suppressions":"384"},{"ruleId":"341","severity":2,"message":"385","line":400,"column":43,"nodeType":"343","messageId":"344","endLine":400,"endColumn":61,"suppressions":"386"},{"ruleId":"341","severity":2,"message":"360","line":437,"column":30,"nodeType":"343","messageId":"344","endLine":437,"endColumn":55,"suppressions":"387"},{"ruleId":"341","severity":2,"message":"360","line":441,"column":35,"nodeType":"343","messageId":"344","endLine":441,"endColumn":60,"suppressions":"388"},{"ruleId":"341","severity":2,"message":"389","line":445,"column":55,"nodeType":"343","messageId":"344","endLine":445,"endColumn":81,"suppressions":"390"},{"ruleId":"341","severity":2,"message":"360","line":453,"column":33,"nodeType":"343","messageId":"344","endLine":453,"endColumn":58,"suppressions":"391"},{"ruleId":"336","severity":1,"message":"392","line":200,"column":383,"nodeType":null,"messageId":"393","endLine":200,"endColumn":384},{"ruleId":"394","severity":2,"message":"395","line":30,"column":1,"nodeType":"396","endLine":30,"endColumn":56,"suppressions":"397"},{"ruleId":"398","severity":2,"message":"399","line":18,"column":1,"nodeType":"400","messageId":"401","endLine":462,"endColumn":1,"suppressions":"402"},{"ruleId":"394","severity":2,"message":"395","line":31,"column":1,"nodeType":"396","endLine":31,"endColumn":83,"suppressions":"403"},{"ruleId":"404","severity":1,"message":"405","line":42,"column":6,"nodeType":"406","messageId":"407","endLine":42,"endColumn":9,"suggestions":"408","suppressions":"409"},{"ruleId":"404","severity":1,"message":"405","line":59,"column":6,"nodeType":"406","messageId":"407","endLine":59,"endColumn":9,"suggestions":"410","suppressions":"411"},{"ruleId":"412","severity":2,"message":"413","line":72,"column":46,"nodeType":"343","messageId":"414","endLine":72,"endColumn":57,"suppressions":"415"},{"ruleId":"412","severity":2,"message":"413","line":79,"column":12,"nodeType":"343","messageId":"414","endLine":79,"endColumn":23,"suppressions":"416"},{"ruleId":"404","severity":1,"message":"405","line":90,"column":6,"nodeType":"406","messageId":"407","endLine":90,"endColumn":9,"suggestions":"417","suppressions":"418"},{"ruleId":"419","severity":2,"message":"420","line":233,"column":3,"nodeType":"421","messageId":"422","endLine":233,"endColumn":64,"suppressions":"423"},{"ruleId":"412","severity":2,"message":"424","line":244,"column":32,"nodeType":"343","messageId":"414","endLine":244,"endColumn":46,"suppressions":"425"},{"ruleId":"426","severity":2,"message":"427","line":345,"column":2,"nodeType":"428","messageId":"429","endLine":345,"endColumn":26,"suppressions":"430"},{"ruleId":"431","severity":2,"message":"432","line":393,"column":5,"nodeType":"433","messageId":"434","endLine":393,"endColumn":43,"suppressions":"435"},{"ruleId":"426","severity":2,"message":"436","line":424,"column":2,"nodeType":"428","messageId":"429","endLine":424,"endColumn":94,"suppressions":"437"},{"ruleId":"438","severity":2,"message":"439","line":35,"column":31,"nodeType":"343","messageId":"440","endLine":35,"endColumn":33,"suppressions":"441"},{"ruleId":"438","severity":2,"message":"439","line":40,"column":33,"nodeType":"343","messageId":"440","endLine":40,"endColumn":35,"suppressions":"442"},{"ruleId":"438","severity":2,"message":"439","line":45,"column":32,"nodeType":"343","messageId":"440","endLine":45,"endColumn":34,"suppressions":"443"},{"ruleId":"444","severity":2,"message":"445","line":43,"column":31,"nodeType":"446","messageId":"447","endLine":43,"endColumn":40,"suggestions":"448","suppressions":"449"},{"ruleId":"450","severity":1,"message":"451","line":26,"column":8,"nodeType":"452","endLine":26,"endColumn":20},{"ruleId":"336","severity":1,"message":"337","line":191,"column":5,"nodeType":null,"messageId":"338","endLine":191,"endColumn":11},{"ruleId":"426","severity":2,"message":"453","line":116,"column":2,"nodeType":"428","messageId":"429","endLine":116,"endColumn":22,"suppressions":"454"},{"ruleId":"371","severity":2,"message":"372","line":361,"column":5,"nodeType":"373","endLine":361,"endColumn":9,"suppressions":"455"},{"ruleId":"456","severity":1,"message":"457","line":378,"column":18,"nodeType":"458","messageId":"459","endLine":378,"endColumn":64,"suggestions":"460","suppressions":"461"},{"ruleId":"426","severity":2,"message":"462","line":460,"column":2,"nodeType":"428","messageId":"429","endLine":460,"endColumn":60,"suppressions":"463"},{"ruleId":"464","severity":2,"message":"465","line":468,"column":8,"nodeType":"466","messageId":"467","endLine":474,"endColumn":11,"suppressions":"468"},{"ruleId":"371","severity":2,"message":"372","line":474,"column":7,"nodeType":"373","endLine":474,"endColumn":11,"suppressions":"469"},{"ruleId":"336","severity":1,"message":"470","line":57,"column":5,"nodeType":null,"messageId":"471","endLine":57,"endColumn":11},{"ruleId":"336","severity":1,"message":"470","line":58,"column":5,"nodeType":null,"messageId":"471","endLine":58,"endColumn":11},{"ruleId":"404","severity":1,"message":"405","line":166,"column":8,"nodeType":"406","messageId":"407","endLine":166,"endColumn":11,"suggestions":"472"},{"ruleId":"394","severity":2,"message":"395","line":34,"column":1,"nodeType":"396","endLine":34,"endColumn":71,"suppressions":"473"},{"ruleId":"404","severity":1,"message":"405","line":113,"column":16,"nodeType":"406","messageId":"407","endLine":113,"endColumn":19,"suggestions":"474","suppressions":"475"},{"ruleId":"476","severity":2,"message":"477","line":113,"column":45,"nodeType":"343","messageId":"478","endLine":113,"endColumn":52,"suppressions":"479"},{"ruleId":"404","severity":1,"message":"405","line":117,"column":50,"nodeType":"406","messageId":"407","endLine":117,"endColumn":53,"suggestions":"480","suppressions":"481"},{"ruleId":"476","severity":2,"message":"477","line":117,"column":79,"nodeType":"343","messageId":"478","endLine":117,"endColumn":83,"suppressions":"482"},{"ruleId":"476","severity":2,"message":"483","line":163,"column":53,"nodeType":"484","messageId":"478","endLine":166,"endColumn":11,"suppressions":"485"},{"ruleId":"404","severity":1,"message":"405","line":209,"column":10,"nodeType":"406","messageId":"407","endLine":209,"endColumn":13,"suggestions":"486"},{"ruleId":"404","severity":1,"message":"405","line":216,"column":10,"nodeType":"406","messageId":"407","endLine":216,"endColumn":13,"suggestions":"487"},{"ruleId":"394","severity":2,"message":"395","line":36,"column":1,"nodeType":"396","endLine":36,"endColumn":74,"suppressions":"488"},{"ruleId":"404","severity":1,"message":"405","line":49,"column":13,"nodeType":"406","messageId":"407","endLine":49,"endColumn":16,"suggestions":"489","suppressions":"490"},{"ruleId":"341","severity":2,"message":"491","line":97,"column":36,"nodeType":"343","messageId":"344","endLine":97,"endColumn":59,"suppressions":"492"},{"ruleId":"426","severity":2,"message":"493","line":176,"column":2,"nodeType":"428","messageId":"429","endLine":176,"endColumn":36,"suppressions":"494"},{"ruleId":"426","severity":2,"message":"495","line":189,"column":2,"nodeType":"428","messageId":"429","endLine":189,"endColumn":36,"suppressions":"496"},{"ruleId":"404","severity":1,"message":"405","line":198,"column":44,"nodeType":"406","messageId":"407","endLine":198,"endColumn":47,"suggestions":"497","suppressions":"498"},{"ruleId":"404","severity":1,"message":"405","line":198,"column":49,"nodeType":"406","messageId":"407","endLine":198,"endColumn":52,"suggestions":"499","suppressions":"500"},{"ruleId":"404","severity":1,"message":"405","line":198,"column":78,"nodeType":"406","messageId":"407","endLine":198,"endColumn":81,"suggestions":"501","suppressions":"502"},{"ruleId":"404","severity":1,"message":"405","line":198,"column":83,"nodeType":"406","messageId":"407","endLine":198,"endColumn":86,"suggestions":"503","suppressions":"504"},{"ruleId":"404","severity":1,"message":"405","line":203,"column":10,"nodeType":"406","messageId":"407","endLine":203,"endColumn":13,"suggestions":"505","suppressions":"506"},{"ruleId":"426","severity":2,"message":"495","line":26,"column":2,"nodeType":"428","messageId":"429","endLine":26,"endColumn":36,"suppressions":"507"},{"ruleId":"341","severity":2,"message":"508","line":66,"column":19,"nodeType":"343","messageId":"344","endLine":66,"endColumn":39,"suppressions":"509"},{"ruleId":"341","severity":2,"message":"377","line":88,"column":11,"nodeType":"343","messageId":"344","endLine":88,"endColumn":30,"suppressions":"510"},{"ruleId":"341","severity":2,"message":"377","line":93,"column":11,"nodeType":"343","messageId":"344","endLine":93,"endColumn":30,"suppressions":"511"},{"ruleId":"371","severity":2,"message":"372","line":93,"column":31,"nodeType":"373","endLine":93,"endColumn":35,"suppressions":"512"},{"ruleId":"341","severity":2,"message":"360","line":99,"column":19,"nodeType":"343","messageId":"344","endLine":99,"endColumn":44,"suppressions":"513"},{"ruleId":"341","severity":2,"message":"346","line":108,"column":11,"nodeType":"343","messageId":"344","endLine":108,"endColumn":36,"suppressions":"514"},{"ruleId":"341","severity":2,"message":"346","line":114,"column":12,"nodeType":"343","messageId":"344","endLine":114,"endColumn":37,"suppressions":"515"},{"ruleId":"341","severity":2,"message":"346","line":119,"column":11,"nodeType":"343","messageId":"344","endLine":119,"endColumn":36,"suppressions":"516"},{"ruleId":"341","severity":2,"message":"346","line":124,"column":19,"nodeType":"343","messageId":"344","endLine":124,"endColumn":44,"suppressions":"517"},{"ruleId":"341","severity":2,"message":"342","line":126,"column":17,"nodeType":"343","messageId":"344","endLine":126,"endColumn":28,"suppressions":"518"},{"ruleId":"341","severity":2,"message":"346","line":133,"column":19,"nodeType":"343","messageId":"344","endLine":133,"endColumn":44,"suppressions":"519"},{"ruleId":"341","severity":2,"message":"342","line":135,"column":17,"nodeType":"343","messageId":"344","endLine":135,"endColumn":28,"suppressions":"520"},{"ruleId":"341","severity":2,"message":"521","line":143,"column":11,"nodeType":"343","messageId":"344","endLine":143,"endColumn":43,"suppressions":"522"},{"ruleId":"341","severity":2,"message":"521","line":147,"column":11,"nodeType":"343","messageId":"344","endLine":147,"endColumn":43,"suppressions":"523"},{"ruleId":"341","severity":2,"message":"351","line":161,"column":11,"nodeType":"343","messageId":"344","endLine":161,"endColumn":32,"suppressions":"524"},{"ruleId":"341","severity":2,"message":"351","line":168,"column":11,"nodeType":"343","messageId":"344","endLine":168,"endColumn":32,"suppressions":"525"},{"ruleId":"341","severity":2,"message":"351","line":174,"column":17,"nodeType":"343","messageId":"344","endLine":174,"endColumn":38,"suppressions":"526"},{"ruleId":"341","severity":2,"message":"354","line":191,"column":11,"nodeType":"343","messageId":"344","endLine":191,"endColumn":34,"suppressions":"527"},{"ruleId":"341","severity":2,"message":"354","line":198,"column":5,"nodeType":"343","messageId":"344","endLine":198,"endColumn":28,"suppressions":"528"},{"ruleId":"341","severity":2,"message":"354","line":205,"column":19,"nodeType":"343","messageId":"344","endLine":205,"endColumn":42,"suppressions":"529"},{"ruleId":"341","severity":2,"message":"354","line":212,"column":11,"nodeType":"343","messageId":"344","endLine":212,"endColumn":34,"suppressions":"530"},{"ruleId":"341","severity":2,"message":"354","line":220,"column":17,"nodeType":"343","messageId":"344","endLine":220,"endColumn":40,"suppressions":"531"},{"ruleId":"341","severity":2,"message":"342","line":223,"column":17,"nodeType":"343","messageId":"344","endLine":223,"endColumn":28,"suppressions":"532"},{"ruleId":"341","severity":2,"message":"354","line":226,"column":11,"nodeType":"343","messageId":"344","endLine":226,"endColumn":34,"suppressions":"533"},{"ruleId":"341","severity":2,"message":"354","line":234,"column":5,"nodeType":"343","messageId":"344","endLine":234,"endColumn":28,"suppressions":"534"},{"ruleId":"341","severity":2,"message":"354","line":240,"column":19,"nodeType":"343","messageId":"344","endLine":240,"endColumn":42,"suppressions":"535"},{"ruleId":"341","severity":2,"message":"354","line":248,"column":20,"nodeType":"343","messageId":"344","endLine":248,"endColumn":43,"suppressions":"536"},{"ruleId":"341","severity":2,"message":"354","line":263,"column":6,"nodeType":"343","messageId":"344","endLine":263,"endColumn":29,"suppressions":"537"},{"ruleId":"341","severity":2,"message":"385","line":273,"column":19,"nodeType":"343","messageId":"344","endLine":273,"endColumn":37,"suppressions":"538"},{"ruleId":"341","severity":2,"message":"385","line":285,"column":19,"nodeType":"343","messageId":"344","endLine":285,"endColumn":37,"suppressions":"539"},{"ruleId":"341","severity":2,"message":"385","line":297,"column":19,"nodeType":"343","messageId":"344","endLine":297,"endColumn":37,"suppressions":"540"},{"ruleId":"341","severity":2,"message":"385","line":309,"column":19,"nodeType":"343","messageId":"344","endLine":309,"endColumn":37,"suppressions":"541"},{"ruleId":"341","severity":2,"message":"385","line":320,"column":19,"nodeType":"343","messageId":"344","endLine":320,"endColumn":37,"suppressions":"542"},{"ruleId":"341","severity":2,"message":"543","line":337,"column":17,"nodeType":"343","messageId":"344","endLine":337,"endColumn":50,"suppressions":"544"},{"ruleId":"341","severity":2,"message":"543","line":342,"column":19,"nodeType":"343","messageId":"344","endLine":342,"endColumn":52,"suppressions":"545"},{"ruleId":"341","severity":2,"message":"543","line":352,"column":19,"nodeType":"343","messageId":"344","endLine":352,"endColumn":52,"suppressions":"546"},{"ruleId":"341","severity":2,"message":"543","line":364,"column":19,"nodeType":"343","messageId":"344","endLine":364,"endColumn":52,"suppressions":"547"},{"ruleId":"341","severity":2,"message":"543","line":375,"column":19,"nodeType":"343","messageId":"344","endLine":375,"endColumn":52,"suppressions":"548"},{"ruleId":"341","severity":2,"message":"543","line":389,"column":19,"nodeType":"343","messageId":"344","endLine":389,"endColumn":52,"suppressions":"549"},{"ruleId":"341","severity":2,"message":"385","line":394,"column":22,"nodeType":"343","messageId":"344","endLine":394,"endColumn":40,"suppressions":"550"},{"ruleId":"341","severity":2,"message":"385","line":396,"column":22,"nodeType":"343","messageId":"344","endLine":396,"endColumn":40,"suppressions":"551"},{"ruleId":"341","severity":2,"message":"385","line":398,"column":22,"nodeType":"343","messageId":"344","endLine":398,"endColumn":40,"suppressions":"552"},{"ruleId":"341","severity":2,"message":"385","line":403,"column":27,"nodeType":"343","messageId":"344","endLine":403,"endColumn":45,"suppressions":"553"},{"ruleId":"341","severity":2,"message":"543","line":408,"column":19,"nodeType":"343","messageId":"344","endLine":408,"endColumn":52,"suppressions":"554"},{"ruleId":"341","severity":2,"message":"543","line":420,"column":19,"nodeType":"343","messageId":"344","endLine":420,"endColumn":52,"suppressions":"555"},{"ruleId":"341","severity":2,"message":"543","line":429,"column":19,"nodeType":"343","messageId":"344","endLine":429,"endColumn":52,"suppressions":"556"},{"ruleId":"341","severity":2,"message":"543","line":440,"column":19,"nodeType":"343","messageId":"344","endLine":440,"endColumn":52,"suppressions":"557"},{"ruleId":"341","severity":2,"message":"558","line":461,"column":19,"nodeType":"343","messageId":"344","endLine":461,"endColumn":39,"suppressions":"559"},{"ruleId":"341","severity":2,"message":"558","line":468,"column":19,"nodeType":"343","messageId":"344","endLine":468,"endColumn":39,"suppressions":"560"},{"ruleId":"341","severity":2,"message":"558","line":475,"column":19,"nodeType":"343","messageId":"344","endLine":475,"endColumn":39,"suppressions":"561"},{"ruleId":"341","severity":2,"message":"558","line":482,"column":19,"nodeType":"343","messageId":"344","endLine":482,"endColumn":39,"suppressions":"562"},{"ruleId":"341","severity":2,"message":"558","line":489,"column":19,"nodeType":"343","messageId":"344","endLine":489,"endColumn":39,"suppressions":"563"},{"ruleId":"341","severity":2,"message":"558","line":499,"column":19,"nodeType":"343","messageId":"344","endLine":499,"endColumn":39,"suppressions":"564"},{"ruleId":"341","severity":2,"message":"360","line":501,"column":22,"nodeType":"343","messageId":"344","endLine":501,"endColumn":47,"suppressions":"565"},{"ruleId":"341","severity":2,"message":"558","line":511,"column":19,"nodeType":"343","messageId":"344","endLine":511,"endColumn":39,"suppressions":"566"},{"ruleId":"341","severity":2,"message":"360","line":516,"column":22,"nodeType":"343","messageId":"344","endLine":516,"endColumn":47,"suppressions":"567"},{"ruleId":"341","severity":2,"message":"558","line":528,"column":19,"nodeType":"343","messageId":"344","endLine":528,"endColumn":39,"suppressions":"568"},{"ruleId":"341","severity":2,"message":"389","line":530,"column":22,"nodeType":"343","messageId":"344","endLine":530,"endColumn":48,"suppressions":"569"},{"ruleId":"341","severity":2,"message":"389","line":533,"column":22,"nodeType":"343","messageId":"344","endLine":533,"endColumn":48,"suppressions":"570"},{"ruleId":"341","severity":2,"message":"389","line":539,"column":22,"nodeType":"343","messageId":"344","endLine":539,"endColumn":48,"suppressions":"571"},{"ruleId":"341","severity":2,"message":"558","line":556,"column":19,"nodeType":"343","messageId":"344","endLine":556,"endColumn":39,"suppressions":"572"},{"ruleId":"341","severity":2,"message":"558","line":564,"column":19,"nodeType":"343","messageId":"344","endLine":564,"endColumn":39,"suppressions":"573"},{"ruleId":"341","severity":2,"message":"360","line":569,"column":11,"nodeType":"343","messageId":"344","endLine":569,"endColumn":36,"suppressions":"574"},{"ruleId":"341","severity":2,"message":"575","line":576,"column":19,"nodeType":"343","messageId":"344","endLine":576,"endColumn":37,"suppressions":"576"},{"ruleId":"341","severity":2,"message":"575","line":583,"column":19,"nodeType":"343","messageId":"344","endLine":583,"endColumn":37,"suppressions":"577"},{"ruleId":"341","severity":2,"message":"575","line":590,"column":19,"nodeType":"343","messageId":"344","endLine":590,"endColumn":37,"suppressions":"578"},{"ruleId":"341","severity":2,"message":"575","line":597,"column":19,"nodeType":"343","messageId":"344","endLine":597,"endColumn":37,"suppressions":"579"},{"ruleId":"341","severity":2,"message":"575","line":604,"column":19,"nodeType":"343","messageId":"344","endLine":604,"endColumn":37,"suppressions":"580"},{"ruleId":"341","severity":2,"message":"581","line":616,"column":19,"nodeType":"343","messageId":"344","endLine":616,"endColumn":38,"suppressions":"582"},{"ruleId":"341","severity":2,"message":"581","line":623,"column":19,"nodeType":"343","messageId":"344","endLine":623,"endColumn":38,"suppressions":"583"},{"ruleId":"341","severity":2,"message":"581","line":630,"column":19,"nodeType":"343","messageId":"344","endLine":630,"endColumn":38,"suppressions":"584"},{"ruleId":"341","severity":2,"message":"581","line":637,"column":19,"nodeType":"343","messageId":"344","endLine":637,"endColumn":38,"suppressions":"585"},{"ruleId":"341","severity":2,"message":"581","line":644,"column":19,"nodeType":"343","messageId":"344","endLine":644,"endColumn":38,"suppressions":"586"},{"ruleId":"341","severity":2,"message":"581","line":653,"column":19,"nodeType":"343","messageId":"344","endLine":653,"endColumn":38,"suppressions":"587"},{"ruleId":"341","severity":2,"message":"588","line":674,"column":19,"nodeType":"343","messageId":"344","endLine":674,"endColumn":41,"suppressions":"589"},{"ruleId":"341","severity":2,"message":"588","line":681,"column":19,"nodeType":"343","messageId":"344","endLine":681,"endColumn":41,"suppressions":"590"},{"ruleId":"341","severity":2,"message":"588","line":688,"column":19,"nodeType":"343","messageId":"344","endLine":688,"endColumn":41,"suppressions":"591"},{"ruleId":"341","severity":2,"message":"588","line":695,"column":19,"nodeType":"343","messageId":"344","endLine":695,"endColumn":41,"suppressions":"592"},{"ruleId":"341","severity":2,"message":"588","line":702,"column":19,"nodeType":"343","messageId":"344","endLine":702,"endColumn":41,"suppressions":"593"},{"ruleId":"594","severity":2,"message":"595","line":37,"column":43,"nodeType":"596","messageId":"597","endLine":37,"endColumn":54,"suppressions":"598"},{"ruleId":"599","severity":1,"message":"600","line":74,"column":133,"nodeType":"601","messageId":"602","endLine":74,"endColumn":135},{"ruleId":"599","severity":1,"message":"600","line":75,"column":184,"nodeType":"601","messageId":"602","endLine":75,"endColumn":186},{"ruleId":"398","severity":2,"message":"603","line":19,"column":1,"nodeType":"400","messageId":"401","endLine":260,"endColumn":1,"suppressions":"604"},{"ruleId":"366","severity":2,"message":"605","line":27,"column":36,"nodeType":"606","messageId":"369","endLine":27,"endColumn":38,"suppressions":"607"},{"ruleId":"366","severity":2,"message":"605","line":29,"column":36,"nodeType":"606","messageId":"369","endLine":29,"endColumn":38,"suppressions":"608"},{"ruleId":"599","severity":1,"message":"600","line":67,"column":135,"nodeType":"601","messageId":"602","endLine":67,"endColumn":137},{"ruleId":"599","severity":1,"message":"600","line":68,"column":186,"nodeType":"601","messageId":"602","endLine":68,"endColumn":188},{"ruleId":"426","severity":2,"message":"609","line":26,"column":3,"nodeType":"428","messageId":"429","endLine":26,"endColumn":65,"suppressions":"610"},{"ruleId":"426","severity":2,"message":"611","line":43,"column":3,"nodeType":"428","messageId":"429","endLine":46,"endColumn":4,"suppressions":"612"},{"ruleId":"613","severity":2,"message":"614","line":46,"column":5,"nodeType":"615","messageId":"616","endLine":46,"endColumn":40,"suppressions":"617"},{"ruleId":"618","severity":2,"message":"619","line":79,"column":4,"nodeType":"620","messageId":"621","endLine":79,"endColumn":32,"suppressions":"622"},{"ruleId":"623","severity":1,"message":"624","line":870,"column":50,"nodeType":"343","messageId":"625","endLine":870,"endColumn":51},{"ruleId":"623","severity":1,"message":"624","line":885,"column":50,"nodeType":"343","messageId":"625","endLine":885,"endColumn":51},{"ruleId":"599","severity":1,"message":"600","line":885,"column":52,"nodeType":"601","messageId":"602","endLine":885,"endColumn":54},{"ruleId":"623","severity":1,"message":"624","line":902,"column":50,"nodeType":"343","messageId":"625","endLine":902,"endColumn":51},{"ruleId":"599","severity":1,"message":"600","line":902,"column":52,"nodeType":"601","messageId":"602","endLine":902,"endColumn":54},{"ruleId":"623","severity":1,"message":"624","line":1165,"column":50,"nodeType":"343","messageId":"625","endLine":1165,"endColumn":51},{"ruleId":"623","severity":1,"message":"624","line":1180,"column":50,"nodeType":"343","messageId":"625","endLine":1180,"endColumn":51},{"ruleId":"599","severity":1,"message":"600","line":1180,"column":52,"nodeType":"601","messageId":"602","endLine":1180,"endColumn":54},{"ruleId":"623","severity":1,"message":"624","line":1195,"column":50,"nodeType":"343","messageId":"625","endLine":1195,"endColumn":51},{"ruleId":"371","severity":2,"message":"372","line":776,"column":11,"nodeType":"373","endLine":776,"endColumn":15,"suppressions":"626"},{"ruleId":"371","severity":2,"message":"372","line":888,"column":14,"nodeType":"373","endLine":888,"endColumn":18,"suppressions":"627"},{"ruleId":"599","severity":1,"message":"600","line":30,"column":48,"nodeType":"601","messageId":"602","endLine":30,"endColumn":50},{"ruleId":"599","severity":1,"message":"600","line":40,"column":78,"nodeType":"601","messageId":"602","endLine":40,"endColumn":80},{"ruleId":"599","severity":1,"message":"600","line":117,"column":48,"nodeType":"601","messageId":"602","endLine":117,"endColumn":50},{"ruleId":"341","severity":2,"message":"628","line":127,"column":14,"nodeType":"343","messageId":"344","endLine":127,"endColumn":33,"suppressions":"629"},{"ruleId":"341","severity":2,"message":"628","line":164,"column":14,"nodeType":"343","messageId":"344","endLine":164,"endColumn":33,"suppressions":"630"},{"ruleId":"599","severity":1,"message":"600","line":33,"column":48,"nodeType":"601","messageId":"602","endLine":33,"endColumn":50},{"ruleId":"599","severity":1,"message":"600","line":36,"column":48,"nodeType":"601","messageId":"602","endLine":36,"endColumn":50},{"ruleId":"599","severity":1,"message":"600","line":45,"column":48,"nodeType":"601","messageId":"602","endLine":45,"endColumn":50},"tsdoc/syntax","tsdoc-param-tag-missing-hyphen: The @param block should be followed by a parameter name and then a hyphen","tsdoc-param-tag-missing-hyphen","tsdoc-inline-tag-missing-braces: The TSDoc tag \"@function\" is an inline tag; it must be enclosed in \"{ }\" braces","tsdoc-inline-tag-missing-braces","deprecation/deprecation","'isHexStrict' is deprecated. Will be removed in next release. Please use `web3-validator` package instead.","Identifier","deprecated",["631"],"'inputBlockNumberFormatter' is deprecated. Use format function from web3-utils package instead\nReturns the given block number as hex string or the predefined block number 'latest', 'pending', 'earliest', 'genesis'",["632"],["633"],"'isAddress' is deprecated. Will be removed in next release. Please use `web3-validator` package instead.",["634"],"'inputAddressFormatter' is deprecated. Use format function from web3-utils package instead",["635"],["636"],"'txInputOptionsFormatter' is deprecated. Use format function from web3-utils package instead\nFormats the input of a transaction and converts all values to HEX",["637"],["638"],["639"],["640"],["641"],"'outputBigIntegerFormatter' is deprecated. Use format function from web3-utils package instead\nShould the format output to a big number",["642"],["643"],["644"],["645"],["646"],"@typescript-eslint/ban-types","Don't use `null` as a type. Use 'undefined' instead of 'null'","TSNullKeyword","bannedTypeMessage",["647"],"no-null/no-null","Use undefined instead of null","Literal",["648"],["649"],["650"],"'inputTopicFormatter' is deprecated. Use format function from web3-utils package instead",["651"],["652"],["653"],["654"],["655"],["656"],["657"],"'outputLogFormatter' is deprecated. Use format function from web3-utils package instead\nFormats the output of a log",["658"],["659"],["660"],"'outputTransactionFormatter' is deprecated. Use format function from web3-utils package instead\nFormats the output of a transaction to its proper values",["661"],["662"],"tsdoc-code-span-missing-delimiter: The code span is missing its closing backtick","tsdoc-code-span-missing-delimiter","import/no-cycle","Dependency cycle detected.","ImportDeclaration",["663"],"max-classes-per-file","File has too many classes (3). Maximum allowed is 1.","Program","maximumExceeded",["664"],["665"],"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["666","667"],["668"],["669","670"],["671"],"no-use-before-define","'Web3Context' was used before it was defined.","usedBeforeDefined",["672"],["673"],["674","675"],["676"],"@typescript-eslint/no-unsafe-assignment","Unsafe assignment of type Web3SubscriptionManager<unknown, any> to a variable of type Web3SubscriptionManager<API, RegisteredSubs>.","AssignmentExpression","unsafeAssignment",["677"],"'Web3PluginBase' was used before it was defined.",["678"],"class-methods-use-this","Expected 'this' to be used by class getter 'givenProvider'.","FunctionExpression","missingThis",["679"],"@typescript-eslint/no-unsafe-member-access","Unsafe member access [element.name] on an `any` value.","MemberExpression","unsafeMemberExpression",["680"],"Expected 'this' to be used by class method 'registerNewTransactionType'.",["681"],"@typescript-eslint/no-misused-promises","Promise returned in function argument where a void return was expected.","voidReturnArgument",["682"],["683"],["684"],"@typescript-eslint/prefer-as-const","Expected a `const` assertion instead of a literal type annotation.","TSLiteralType","variableConstAssertion",["685"],["686"],"import/no-named-as-default","Using exported name 'HttpProvider' as identifier for default export.","ImportDefaultSpecifier","Expected 'this' to be used by class getter 'providers'.",["687"],["688"],"@typescript-eslint/no-non-null-assertion","Forbidden non-null assertion.","TSNonNullExpression","noNonNull",["689"],["690"],"Expected 'this' to be used by class method '_buildResponse'.",["691"],"no-nested-ternary","Do not nest ternary expressions.","ConditionalExpression","noNestedTernary",["692"],["693"],"tsdoc-param-tag-with-invalid-name: The @param block should be followed by a parameter name","tsdoc-param-tag-with-invalid-name",["694","695"],["696"],["697","698"],["699"],"@typescript-eslint/no-unsafe-argument","Unsafe argument of type `any` assigned to a parameter of type `JsonRpcSubscriptionResult | JsonRpcSubscriptionResultOld<Log> | JsonRpcNotification<Log> | undefined`.","unsafeArgument",["700"],["701","702"],["703"],["704"],"Unsafe argument of type `any` assigned to a parameter of type `(({ subscriptionManager: Web3SubscriptionManager<API, { [key: string]: Web3SubscriptionConstructor<API, Web3Subscription<any, any, API, any>>; }>; returnFormat?: DataFormat | undefined; } | { ...; }) & { ...; }) & { ...; }`.","TSAsExpression",["705"],["706","707"],["708","709"],["710"],["711","712"],["713"],"'Web3SubscriptionManager' is deprecated. This constructor overloading should not be used",["714"],"Expected 'this' to be used by class method 'formatSubscriptionResult'.",["715"],"Expected 'this' to be used by class method '_buildSubscriptionParams'.",["716"],["717","718"],["719"],["720","721"],["722"],["723","724"],["725"],["726","727"],["728"],["729","730"],["731"],["732"],"'outputProofFormatter' is deprecated. Use format function from web3-utils package instead\nWill format the given proof response from the node.",["733"],["734"],["735"],["736"],["737"],["738"],["739"],["740"],["741"],["742"],["743"],["744"],"'inputDefaultBlockNumberFormatter' is deprecated. Use format function from web3-utils package instead\nReturns the given block number as hex string or does return the defaultBlock property of the current module",["745"],["746"],["747"],["748"],["749"],["750"],["751"],["752"],["753"],["754"],["755"],["756"],["757"],["758"],["759"],["760"],["761"],["762"],["763"],["764"],["765"],"'outputTransactionReceiptFormatter' is deprecated. Use format function from web3-utils package instead\nFormats the output of a transaction receipt to its proper values",["766"],["767"],["768"],["769"],["770"],["771"],["772"],["773"],["774"],["775"],["776"],["777"],["778"],["779"],"'outputBlockFormatter' is deprecated. Use format function from web3-utils package instead\nFormats the output of a block to its proper values",["780"],["781"],["782"],["783"],["784"],["785"],["786"],["787"],["788"],["789"],["790"],["791"],["792"],["793"],["794"],["795"],"'inputPostFormatter' is deprecated. Use format function from web3-utils package instead\nFormats the input of a whisper post and converts all values to HEX",["796"],["797"],["798"],["799"],["800"],"'outputPostFormatter' is deprecated. Use format function from web3-utils package instead\nFormats the output of a received post message",["801"],["802"],["803"],["804"],["805"],["806"],"'outputSyncingFormatter' is deprecated. Use format function from web3-utils package instead",["807"],["808"],["809"],["810"],["811"],"no-plusplus","Unary operator '++' used.","UpdateExpression","unexpectedUnaryOp",["812"],"@typescript-eslint/require-await","Async arrow function has no 'await' expression.","ArrowFunctionExpression","missingAwait","File has too many classes (4). Maximum allowed is 1.",["813"],"Don't use `{}` as a type. `{}` actually means \"any non-nullish value\".\n- If you want a type meaning \"any object\", you probably want `Record<string, unknown>` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.\n- If you want a type meaning \"empty object\", you probably want `Record<string, never>` instead.","TSTypeLiteral",["814"],["815"],"Expected 'this' to be used by class async method 'processRequest'.",["816"],"Expected 'this' to be used by class async method 'processResponse'.",["817"],"jest/no-conditional-expect","Avoid calling `expect` conditionally`","CallExpression","conditionalExpect",["818"],"no-void","Expected 'undefined' and instead saw 'void'.","UnaryExpression","noVoid",["819"],"@typescript-eslint/no-unused-vars","'_' is defined but never used.","unusedVar",["820"],["821"],"'ExampleSubscription' is deprecated. This constructor overloading should not be used",["822"],["823"],{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"messageId":"826","fix":"827","desc":"828"},{"messageId":"829","fix":"830","desc":"831"},{"kind":"824","justification":"825"},{"messageId":"826","fix":"832","desc":"828"},{"messageId":"829","fix":"833","desc":"831"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"messageId":"826","fix":"834","desc":"828"},{"messageId":"829","fix":"835","desc":"831"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"messageId":"836","fix":"837","desc":"838"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"messageId":"839","fix":"840","desc":"841"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"messageId":"826","fix":"842","desc":"828"},{"messageId":"829","fix":"843","desc":"831"},{"kind":"824","justification":"825"},{"messageId":"826","fix":"844","desc":"828"},{"messageId":"829","fix":"845","desc":"831"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"messageId":"826","fix":"846","desc":"828"},{"messageId":"829","fix":"847","desc":"831"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"messageId":"826","fix":"848","desc":"828"},{"messageId":"829","fix":"849","desc":"831"},{"messageId":"826","fix":"850","desc":"828"},{"messageId":"829","fix":"851","desc":"831"},{"kind":"824","justification":"825"},{"messageId":"826","fix":"852","desc":"828"},{"messageId":"829","fix":"853","desc":"831"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"messageId":"826","fix":"854","desc":"828"},{"messageId":"829","fix":"855","desc":"831"},{"kind":"824","justification":"825"},{"messageId":"826","fix":"856","desc":"828"},{"messageId":"829","fix":"857","desc":"831"},{"kind":"824","justification":"825"},{"messageId":"826","fix":"858","desc":"828"},{"messageId":"829","fix":"859","desc":"831"},{"kind":"824","justification":"825"},{"messageId":"826","fix":"860","desc":"828"},{"messageId":"829","fix":"861","desc":"831"},{"kind":"824","justification":"825"},{"messageId":"826","fix":"862","desc":"828"},{"messageId":"829","fix":"863","desc":"831"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},{"kind":"824","justification":"825"},"directive","","suggestUnknown",{"range":"864","text":"865"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"864","text":"866"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"867","text":"865"},{"range":"867","text":"866"},{"range":"868","text":"865"},{"range":"868","text":"866"},"variableSuggest",{"range":"869","text":"870"},"You should use `as const` instead of type annotation.","suggestOptionalChain",{"range":"871","text":"872"},"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.",{"range":"873","text":"865"},{"range":"873","text":"866"},{"range":"874","text":"865"},{"range":"874","text":"866"},{"range":"875","text":"865"},{"range":"875","text":"866"},{"range":"876","text":"865"},{"range":"876","text":"866"},{"range":"877","text":"865"},{"range":"877","text":"866"},{"range":"878","text":"865"},{"range":"878","text":"866"},{"range":"879","text":"865"},{"range":"879","text":"866"},{"range":"880","text":"865"},{"range":"880","text":"866"},{"range":"881","text":"865"},{"range":"881","text":"866"},{"range":"882","text":"865"},{"range":"882","text":"866"},{"range":"883","text":"865"},{"range":"883","text":"866"},[1916,1919],"unknown","never",[2551,2554],[3731,3734],[1358,1381]," = 'Promise' as const",[11427,11428],"?",[5473,5476],[3525,3528],[3738,3741],[6640,6643],[6796,6799],[1696,1699],[6190,6193],[6195,6198],[6224,6227],[6229,6232],[6413,6416]]