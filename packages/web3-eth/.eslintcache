[{"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/src/constants.ts":"1","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/src/index.ts":"2","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/src/rpc_method_wrappers.ts":"3","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/src/schemas.ts":"4","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/src/types.ts":"5","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/src/utils/decode_signed_transaction.ts":"6","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/src/utils/decoding.ts":"7","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/src/utils/detect_transaction_type.ts":"8","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/src/utils/format_transaction.ts":"9","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/src/utils/get_revert_reason.ts":"10","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/src/utils/get_transaction_error.ts":"11","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/src/utils/get_transaction_gas_pricing.ts":"12","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/src/utils/index.ts":"13","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/src/utils/prepare_transaction_for_signing.ts":"14","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/src/utils/reject_if_block_timeout.ts":"15","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/src/utils/send_tx_helper.ts":"16","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/src/utils/transaction_builder.ts":"17","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/src/utils/try_send_transaction.ts":"18","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/src/utils/wait_for_transaction_receipt.ts":"19","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/src/utils/watch_transaction_by_polling.ts":"20","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/src/utils/watch_transaction_by_subscription.ts":"21","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/src/utils/watch_transaction_for_confirmations.ts":"22","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/src/validation.ts":"23","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/src/web3_eth.ts":"24","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/src/web3_subscriptions.ts":"25","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/e2e/e2e_utils.ts":"26","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/e2e/subscription_new_heads.test.ts":"27","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/fixtures/decoding.ts":"28","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/fixtures/detect_transaction_type.ts":"29","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/fixtures/erc20.ts":"30","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/fixtures/errors.ts":"31","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/fixtures/example_subscription.ts":"32","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/fixtures/format_transaction.ts":"33","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/fixtures/prepare_transaction_for_signing.ts":"34","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/fixtures/rpc_methods_wrappers.ts":"35","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/fixtures/simple_revert.ts":"36","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/fixtures/system_test_utils.ts":"37","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/fixtures/validate_transaction_for_signing.ts":"38","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/fixtures/validation.ts":"39","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/fixtures/web3_eth_methods_with_parameters.ts":"40","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/batch.test.ts":"41","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/block/rpc.getBlock.test.ts":"42","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/block/rpc.getBlockTransactionCount.test.ts":"43","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/block/rpc.getBlockUncleCount.test.ts":"44","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/block/rpc.getTransactionCount.test.ts":"45","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/block/rpc.getTransactionFromBlock.test.ts":"46","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/block/rpc.getUncle.test.ts":"47","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/defaults.test.ts":"48","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/defaults.transactionBlockTimeout.test.ts":"49","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/eth.test.ts":"50","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/format.test.ts":"51","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/get_revert_reason.test.ts":"52","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/helper.ts":"53","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/nonce.test.ts":"54","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/rpc.test.ts":"55","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/subscribe.test.ts":"56","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/subscription_heads.test.ts":"57","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/subscription_logs.test.ts":"58","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/subscription_logs_block.test.ts":"59","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/subscription_logs_clear.test.ts":"60","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/subscription_new_pending_tx.test.ts":"61","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/subscription_on_2_events.test.ts":"62","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/unsubscribe.test.ts":"63","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/watch_transaction.test.ts":"64","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/watch_transaction_polling.test.ts":"65","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/web3_eth/call.test.ts":"66","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/web3_eth/createAccessList.test.ts":"67","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/web3_eth/estimate_gas.test.ts":"68","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/web3_eth/getFeeHistory.test.ts":"69","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/web3_eth/send_signed_transaction.test.ts":"70","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/web3_eth/send_transaction.test.ts":"71","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/web3_eth/sign.test.ts":"72","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/web3_eth/sign_transaction.test.ts":"73","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/web3_eth/sign_typed_data.test.ts":"74","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/web3_eth/submit_work.test.ts":"75","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/shared_fixtures/build/Basic.ts":"76","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/shared_fixtures/build/DeployRevert.ts":"77","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/shared_fixtures/build/ERC20Token.ts":"78","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/shared_fixtures/build/ERC721Token.ts":"79","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/shared_fixtures/build/ErrorsContract.ts":"80","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/shared_fixtures/build/Greeter.ts":"81","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/shared_fixtures/build/GreeterWithOverloading.ts":"82","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/shared_fixtures/build/MsgSender.ts":"83","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/shared_fixtures/build/MyContract.ts":"84","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/shared_fixtures/build/NegativeNumbers.ts":"85","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/shared_fixtures/utils.ts":"86","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/constructor.test.ts":"87","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/decoding.test.ts":"88","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/default_transaction_builder.test.ts":"89","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/detect_transaction_type.test.ts":"90","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/errors.test.ts":"91","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/format_rpc_methods.test.ts":"92","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/format_transaction.test.ts":"93","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/prepare_transaction_for_signing.test.ts":"94","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/call.test.ts":"95","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/createAccessList.test.ts":"96","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/estimate_gas.test.ts":"97","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/fixtures/call.ts":"98","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/fixtures/createAccessList.ts":"99","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/fixtures/estimate_gas.ts":"100","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/fixtures/get_balance.ts":"101","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/fixtures/get_block.ts":"102","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/fixtures/get_block_transaction_count.ts":"103","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/fixtures/get_block_uncle_count.ts":"104","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/fixtures/get_code.ts":"105","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/fixtures/get_fee_history.ts":"106","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/fixtures/get_logs.ts":"107","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/fixtures/get_pending_transactions.ts":"108","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/fixtures/get_proof.ts":"109","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/fixtures/get_storage_at.ts":"110","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/fixtures/get_transaction.ts":"111","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/fixtures/get_transaction_count.ts":"112","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/fixtures/get_transaction_from_block.ts":"113","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/fixtures/get_transaction_receipt.ts":"114","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/fixtures/get_uncle.ts":"115","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/fixtures/return_formats.ts":"116","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/fixtures/send_signed_transaction.ts":"117","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/fixtures/send_transaction.ts":"118","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/fixtures/sign.ts":"119","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/fixtures/sign_transaction.ts":"120","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/fixtures/sign_typed_data.ts":"121","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/get_balance.test.ts":"122","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/get_block.test.ts":"123","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/get_block_number.test.ts":"124","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/get_block_transaction_count.test.ts":"125","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/get_block_uncle_count.test.ts":"126","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/get_chain_id.test.ts":"127","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/get_code.test.ts":"128","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/get_coinbase.test.ts":"129","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/get_fee_history.test.ts":"130","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/get_gas_price.test.ts":"131","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/get_hash_rate.test.ts":"132","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/get_logs.test.ts":"133","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/get_pending_transactions.test.ts":"134","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/get_proof.test.ts":"135","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/get_protocol_version.test.ts":"136","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/get_storage_at.test.ts":"137","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/get_transaction.test.ts":"138","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/get_transaction_count.test.ts":"139","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/get_transaction_from_block.test.ts":"140","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/get_transaction_receipt.test.ts":"141","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/get_uncle.test.ts":"142","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/is_mining.test.ts":"143","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/is_syncing.test.ts":"144","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/send_signed_transaction.test.ts":"145","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/send_transaction.test.ts":"146","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/sign.test.ts":"147","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/sign_transaction.test.ts":"148","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/sign_typed_data.test.ts":"149","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/send_tx_helper.test.ts":"150","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/utils/getTransactionFromOrToAttr.test.ts":"151","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/utils/get_revert_reason.test.ts":"152","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/utils/get_transaction_error.test.ts":"153","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/utils/get_transaction_type.test.ts":"154","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/utils/parse_transaction_error.test.ts":"155","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/utils/wait_for_transaction_receipt.test.ts":"156","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/utils/watch_transaction_by_polling.test.ts":"157","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/utils/watch_transaction_by_subscription.test.ts":"158","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/utils/watch_transaction_for_confirmations.test.ts":"159","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/validate_transaction_for_signing.test.ts":"160","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/validation.test.ts":"161","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/web3_eth_calculate_fee_data.test.ts":"162","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/web3_eth_methods_no_parameters.test.ts":"163","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/web3_eth_methods_with_parameters.test.ts":"164","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/web3_eth_subscription.test.ts":"165"},{"size":1005,"mtime":1695221293914,"results":"166","hashOfConfig":"167"},{"size":2376,"mtime":1714409353397,"results":"168","hashOfConfig":"167"},{"size":35732,"mtime":1714058233486,"results":"169","hashOfConfig":"167"},{"size":9557,"mtime":1713221660647,"results":"170","hashOfConfig":"167"},{"size":2976,"mtime":1701699994709,"results":"171","hashOfConfig":"167"},{"size":2244,"mtime":1695995183854,"results":"172","hashOfConfig":"167"},{"size":2785,"mtime":1695221293915,"results":"173","hashOfConfig":"167"},{"size":4081,"mtime":1713452988002,"results":"174","hashOfConfig":"167"},{"size":2939,"mtime":1698097586325,"results":"175","hashOfConfig":"167"},{"size":3434,"mtime":1713453005523,"results":"176","hashOfConfig":"167"},{"size":3470,"mtime":1685575123095,"results":"177","hashOfConfig":"167"},{"size":3651,"mtime":1713452988002,"results":"178","hashOfConfig":"167"},{"size":842,"mtime":1685575123095,"results":"179","hashOfConfig":"167"},{"size":4812,"mtime":1713877871379,"results":"180","hashOfConfig":"167"},{"size":6191,"mtime":1700492614535,"results":"181","hashOfConfig":"167"},{"size":8438,"mtime":1714409353398,"results":"182","hashOfConfig":"167"},{"size":8604,"mtime":1713877871379,"results":"183","hashOfConfig":"167"},{"size":2496,"mtime":1685575123096,"results":"184","hashOfConfig":"167"},{"size":2727,"mtime":1714409353399,"results":"185","hashOfConfig":"167"},{"size":3078,"mtime":1714409353400,"results":"186","hashOfConfig":"167"},{"size":3784,"mtime":1714409353400,"results":"187","hashOfConfig":"167"},{"size":3074,"mtime":1714409353401,"results":"188","hashOfConfig":"167"},{"size":10468,"mtime":1701204044189,"results":"189","hashOfConfig":"167"},{"size":87612,"mtime":1714144267492,"results":"190","hashOfConfig":"167"},{"size":6068,"mtime":1692381979610,"results":"191","hashOfConfig":"167"},{"size":3536,"mtime":1710201498814,"results":"192","hashOfConfig":"193"},{"size":2783,"mtime":1689806205628,"results":"194","hashOfConfig":"193"},{"size":13642,"mtime":1695221293916,"results":"195","hashOfConfig":"193"},{"size":9175,"mtime":1695832978356,"results":"196","hashOfConfig":"193"},{"size":5031,"mtime":1695221293917,"results":"197","hashOfConfig":"193"},{"size":1551,"mtime":1679963937237,"results":"198","hashOfConfig":"193"},{"size":973,"mtime":1689526747385,"results":"199","hashOfConfig":"193"},{"size":8080,"mtime":1683162042534,"results":"200","hashOfConfig":"193"},{"size":37724,"mtime":1684961961645,"results":"201","hashOfConfig":"193"},{"size":2829,"mtime":1698334699827,"results":"202","hashOfConfig":"193"},{"size":15867,"mtime":1679686929283,"results":"203","hashOfConfig":"193"},{"size":15907,"mtime":1713826363670,"results":"204","hashOfConfig":"193"},{"size":23380,"mtime":1681401076221,"results":"205","hashOfConfig":"193"},{"size":4412,"mtime":1698336511036,"results":"206","hashOfConfig":"193"},{"size":69538,"mtime":1712054028387,"results":"207","hashOfConfig":"193"},{"size":3351,"mtime":1688764157599,"results":"208","hashOfConfig":"193"},{"size":4418,"mtime":1707238177041,"results":"209","hashOfConfig":"193"},{"size":3212,"mtime":1707238177041,"results":"210","hashOfConfig":"193"},{"size":3254,"mtime":1707238177041,"results":"211","hashOfConfig":"193"},{"size":4530,"mtime":1709599061806,"results":"212","hashOfConfig":"193"},{"size":3074,"mtime":1681824985798,"results":"213","hashOfConfig":"193"},{"size":3243,"mtime":1707238177042,"results":"214","hashOfConfig":"193"},{"size":31019,"mtime":1705362487877,"results":"215","hashOfConfig":"193"},{"size":5501,"mtime":1707238177043,"results":"216","hashOfConfig":"193"},{"size":3093,"mtime":1690943262295,"results":"217","hashOfConfig":"193"},{"size":4028,"mtime":1713453005524,"results":"218","hashOfConfig":"193"},{"size":8882,"mtime":1707238177043,"results":"219","hashOfConfig":"193"},{"size":4276,"mtime":1713453005524,"results":"220","hashOfConfig":"193"},{"size":3478,"mtime":1707238177043,"results":"221","hashOfConfig":"193"},{"size":16781,"mtime":1713453005525,"results":"222","hashOfConfig":"193"},{"size":2973,"mtime":1700777616750,"results":"223","hashOfConfig":"193"},{"size":3966,"mtime":1689806205629,"results":"224","hashOfConfig":"193"},{"size":3724,"mtime":1705453104096,"results":"225","hashOfConfig":"193"},{"size":3766,"mtime":1685553797011,"results":"226","hashOfConfig":"193"},{"size":1329,"mtime":1679686929285,"results":"227","hashOfConfig":"193"},{"size":3143,"mtime":1679686929285,"results":"228","hashOfConfig":"193"},{"size":3346,"mtime":1688764157600,"results":"229","hashOfConfig":"193"},{"size":2834,"mtime":1685553797011,"results":"230","hashOfConfig":"193"},{"size":2960,"mtime":1681401076223,"results":"231","hashOfConfig":"193"},{"size":2915,"mtime":1681401076223,"results":"232","hashOfConfig":"193"},{"size":10385,"mtime":1681824985799,"results":"233","hashOfConfig":"193"},{"size":7788,"mtime":1707238177045,"results":"234","hashOfConfig":"193"},{"size":7656,"mtime":1707238177045,"results":"235","hashOfConfig":"193"},{"size":1846,"mtime":1707238177046,"results":"236","hashOfConfig":"193"},{"size":26978,"mtime":1707238177046,"results":"237","hashOfConfig":"193"},{"size":33333,"mtime":1708468160968,"results":"238","hashOfConfig":"193"},{"size":1856,"mtime":1707238177047,"results":"239","hashOfConfig":"193"},{"size":8954,"mtime":1709764624543,"results":"240","hashOfConfig":"193"},{"size":3252,"mtime":1707238177048,"results":"241","hashOfConfig":"193"},{"size":1539,"mtime":1707238177048,"results":"242","hashOfConfig":"193"},{"size":13544,"mtime":1700492614523,"results":"243","hashOfConfig":"193"},{"size":1016,"mtime":1700492614523,"results":"244","hashOfConfig":"193"},{"size":17276,"mtime":1700492614524,"results":"245","hashOfConfig":"193"},{"size":28948,"mtime":1700492614524,"results":"246","hashOfConfig":"193"},{"size":2740,"mtime":1700492614524,"results":"247","hashOfConfig":"193"},{"size":9395,"mtime":1700492614525,"results":"248","hashOfConfig":"193"},{"size":10792,"mtime":1702486194986,"results":"249","hashOfConfig":"193"},{"size":8367,"mtime":1700492614525,"results":"250","hashOfConfig":"193"},{"size":2061,"mtime":1700492614525,"results":"251","hashOfConfig":"193"},{"size":6610,"mtime":1700492614526,"results":"252","hashOfConfig":"193"},{"size":1920,"mtime":1678154646075,"results":"253","hashOfConfig":"193"},{"size":1250,"mtime":1678154646142,"results":"254","hashOfConfig":"193"},{"size":1278,"mtime":1695221293917,"results":"255","hashOfConfig":"193"},{"size":22871,"mtime":1700492614536,"results":"256","hashOfConfig":"193"},{"size":3012,"mtime":1700492614536,"results":"257","hashOfConfig":"193"},{"size":1188,"mtime":1678154646143,"results":"258","hashOfConfig":"193"},{"size":2026,"mtime":1688764157600,"results":"259","hashOfConfig":"193"},{"size":4360,"mtime":1709764617083,"results":"260","hashOfConfig":"193"},{"size":10773,"mtime":1704729545390,"results":"261","hashOfConfig":"193"},{"size":2709,"mtime":1683236089979,"results":"262","hashOfConfig":"193"},{"size":2795,"mtime":1683236089979,"results":"263","hashOfConfig":"193"},{"size":2758,"mtime":1683236089980,"results":"264","hashOfConfig":"193"},{"size":2706,"mtime":1679686929286,"results":"265","hashOfConfig":"193"},{"size":2887,"mtime":1681401076224,"results":"266","hashOfConfig":"193"},{"size":2634,"mtime":1679686929287,"results":"267","hashOfConfig":"193"},{"size":1639,"mtime":1679686929287,"results":"268","hashOfConfig":"193"},{"size":6471,"mtime":1683162042535,"results":"269","hashOfConfig":"193"},{"size":2085,"mtime":1683162042535,"results":"270","hashOfConfig":"193"},{"size":2085,"mtime":1683162042535,"results":"271","hashOfConfig":"193"},{"size":1760,"mtime":1679686929287,"results":"272","hashOfConfig":"193"},{"size":3312,"mtime":1679686929287,"results":"273","hashOfConfig":"193"},{"size":1857,"mtime":1678154646144,"results":"274","hashOfConfig":"193"},{"size":1356,"mtime":1692381974535,"results":"275","hashOfConfig":"193"},{"size":6623,"mtime":1683162042535,"results":"276","hashOfConfig":"193"},{"size":2486,"mtime":1679686929288,"results":"277","hashOfConfig":"193"},{"size":3359,"mtime":1692381974535,"results":"278","hashOfConfig":"193"},{"size":1639,"mtime":1679686929288,"results":"279","hashOfConfig":"193"},{"size":8103,"mtime":1692381974535,"results":"280","hashOfConfig":"193"},{"size":2231,"mtime":1683162042536,"results":"281","hashOfConfig":"193"},{"size":9031,"mtime":1683162042536,"results":"282","hashOfConfig":"193"},{"size":1456,"mtime":1683162042536,"results":"283","hashOfConfig":"193"},{"size":2131,"mtime":1683162042536,"results":"284","hashOfConfig":"193"},{"size":3976,"mtime":1678154646145,"results":"285","hashOfConfig":"193"},{"size":2034,"mtime":1684618137114,"results":"286","hashOfConfig":"193"},{"size":6254,"mtime":1692381974535,"results":"287","hashOfConfig":"193"},{"size":2187,"mtime":1689879155154,"results":"288","hashOfConfig":"193"},{"size":2590,"mtime":1683236089980,"results":"289","hashOfConfig":"193"},{"size":3131,"mtime":1684618137114,"results":"290","hashOfConfig":"193"},{"size":1926,"mtime":1683236089980,"results":"291","hashOfConfig":"193"},{"size":3085,"mtime":1683236089981,"results":"292","hashOfConfig":"193"},{"size":3015,"mtime":1683236089981,"results":"293","hashOfConfig":"193"},{"size":1902,"mtime":1683236089982,"results":"294","hashOfConfig":"193"},{"size":2576,"mtime":1683236089982,"results":"295","hashOfConfig":"193"},{"size":1272,"mtime":1678154646146,"results":"296","hashOfConfig":"193"},{"size":3131,"mtime":1683236089982,"results":"297","hashOfConfig":"193"},{"size":1911,"mtime":1709133555152,"results":"298","hashOfConfig":"193"},{"size":1902,"mtime":1683236089983,"results":"299","hashOfConfig":"193"},{"size":2352,"mtime":1683162042538,"results":"300","hashOfConfig":"193"},{"size":2155,"mtime":1683162042538,"results":"301","hashOfConfig":"193"},{"size":2799,"mtime":1683236089983,"results":"302","hashOfConfig":"193"},{"size":1307,"mtime":1678154646146,"results":"303","hashOfConfig":"193"},{"size":2825,"mtime":1683236089983,"results":"304","hashOfConfig":"193"},{"size":2582,"mtime":1683236089983,"results":"305","hashOfConfig":"193"},{"size":2672,"mtime":1683236089983,"results":"306","hashOfConfig":"193"},{"size":3426,"mtime":1683236089984,"results":"307","hashOfConfig":"193"},{"size":2558,"mtime":1683236089984,"results":"308","hashOfConfig":"193"},{"size":3226,"mtime":1683236089984,"results":"309","hashOfConfig":"193"},{"size":1259,"mtime":1678154646147,"results":"310","hashOfConfig":"193"},{"size":1264,"mtime":1678154646147,"results":"311","hashOfConfig":"193"},{"size":9562,"mtime":1714409353402,"results":"312","hashOfConfig":"193"},{"size":9618,"mtime":1714409353402,"results":"313","hashOfConfig":"193"},{"size":3288,"mtime":1684618137114,"results":"314","hashOfConfig":"193"},{"size":2689,"mtime":1681401076226,"results":"315","hashOfConfig":"193"},{"size":2223,"mtime":1689879155154,"results":"316","hashOfConfig":"193"},{"size":9288,"mtime":1695221293918,"results":"317","hashOfConfig":"193"},{"size":2360,"mtime":1679963937238,"results":"318","hashOfConfig":"193"},{"size":4102,"mtime":1681401076226,"results":"319","hashOfConfig":"193"},{"size":17345,"mtime":1679686929289,"results":"320","hashOfConfig":"193"},{"size":1947,"mtime":1700492614537,"results":"321","hashOfConfig":"193"},{"size":3640,"mtime":1679686929289,"results":"322","hashOfConfig":"193"},{"size":5055,"mtime":1704729545391,"results":"323","hashOfConfig":"193"},{"size":3210,"mtime":1701873231382,"results":"324","hashOfConfig":"193"},{"size":4445,"mtime":1704729545391,"results":"325","hashOfConfig":"193"},{"size":7254,"mtime":1701873231382,"results":"326","hashOfConfig":"193"},{"size":3024,"mtime":1678154646147,"results":"327","hashOfConfig":"193"},{"size":3725,"mtime":1678154646147,"results":"328","hashOfConfig":"193"},{"size":3059,"mtime":1708468160968,"results":"329","hashOfConfig":"193"},{"size":2749,"mtime":1707957620454,"results":"330","hashOfConfig":"193"},{"size":11207,"mtime":1698334271915,"results":"331","hashOfConfig":"193"},{"size":3965,"mtime":1688764157600,"results":"332","hashOfConfig":"193"},{"filePath":"333","messages":"334","suppressedMessages":"335","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"14oykqi",{"filePath":"336","messages":"337","suppressedMessages":"338","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"339","messages":"340","suppressedMessages":"341","errorCount":0,"fatalErrorCount":0,"warningCount":35,"fixableErrorCount":0,"fixableWarningCount":0,"source":"342"},{"filePath":"343","messages":"344","suppressedMessages":"345","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"346","messages":"347","suppressedMessages":"348","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"349","messages":"350","suppressedMessages":"351","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"352"},{"filePath":"353","messages":"354","suppressedMessages":"355","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"356","messages":"357","suppressedMessages":"358","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"359","messages":"360","suppressedMessages":"361","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"362","messages":"363","suppressedMessages":"364","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"365","messages":"366","suppressedMessages":"367","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"368","messages":"369","suppressedMessages":"370","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"371","messages":"372","suppressedMessages":"373","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"374","messages":"375","suppressedMessages":"376","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"377","messages":"378","suppressedMessages":"379","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"380","messages":"381","suppressedMessages":"382","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"383","messages":"384","suppressedMessages":"385","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"386","messages":"387","suppressedMessages":"388","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"389","messages":"390","suppressedMessages":"391","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"392","messages":"393","suppressedMessages":"394","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"395"},{"filePath":"396","messages":"397","suppressedMessages":"398","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"399"},{"filePath":"400","messages":"401","suppressedMessages":"402","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"403"},{"filePath":"404","messages":"405","suppressedMessages":"406","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"407","messages":"408","suppressedMessages":"409","errorCount":0,"fatalErrorCount":0,"warningCount":79,"fixableErrorCount":0,"fixableWarningCount":0,"source":"410"},{"filePath":"411","messages":"412","suppressedMessages":"413","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"414","messages":"415","suppressedMessages":"416","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"417"},"nwkfch",{"filePath":"418","messages":"419","suppressedMessages":"420","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"421","messages":"422","suppressedMessages":"423","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"424","messages":"425","suppressedMessages":"426","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"427","messages":"428","suppressedMessages":"429","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"430","messages":"431","suppressedMessages":"432","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"433","messages":"434","suppressedMessages":"435","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"436","messages":"437","suppressedMessages":"438","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"439","messages":"440","suppressedMessages":"441","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"442","messages":"443","suppressedMessages":"444","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"445","messages":"446","suppressedMessages":"447","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"448","messages":"449","suppressedMessages":"450","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"451","messages":"452","suppressedMessages":"453","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"454","messages":"455","suppressedMessages":"456","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"457","messages":"458","suppressedMessages":"459","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"460","messages":"461","suppressedMessages":"462","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"463","messages":"464","suppressedMessages":"465","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"466","messages":"467","suppressedMessages":"468","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"469","messages":"470","suppressedMessages":"471","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"472","messages":"473","suppressedMessages":"474","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"475","messages":"476","suppressedMessages":"477","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"478","messages":"479","suppressedMessages":"480","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"481","messages":"482","suppressedMessages":"483","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"484"},{"filePath":"485","messages":"486","suppressedMessages":"487","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"488"},{"filePath":"489","messages":"490","suppressedMessages":"491","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"492","messages":"493","suppressedMessages":"494","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"495","messages":"496","suppressedMessages":"497","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"498"},{"filePath":"499","messages":"500","suppressedMessages":"501","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"502","messages":"503","suppressedMessages":"504","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"505","messages":"506","suppressedMessages":"507","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"508","messages":"509","suppressedMessages":"510","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"511","messages":"512","suppressedMessages":"513","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"514","messages":"515","suppressedMessages":"516","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"517","messages":"518","suppressedMessages":"519","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"520","messages":"521","suppressedMessages":"522","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"523","messages":"524","suppressedMessages":"525","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"526","messages":"527","suppressedMessages":"528","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"529","messages":"530","suppressedMessages":"531","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"532"},{"filePath":"533","messages":"534","suppressedMessages":"535","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"536","messages":"537","suppressedMessages":"538","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"539"},{"filePath":"540","messages":"541","suppressedMessages":"542","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"543","messages":"544","suppressedMessages":"545","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"546","messages":"547","suppressedMessages":"548","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"549","messages":"550","suppressedMessages":"551","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"552"},{"filePath":"553","messages":"554","suppressedMessages":"555","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"556","messages":"557","suppressedMessages":"558","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"559"},{"filePath":"560","messages":"561","suppressedMessages":"562","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"563","messages":"564","suppressedMessages":"565","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"566","messages":"567","suppressedMessages":"568","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"569"},{"filePath":"570","messages":"571","suppressedMessages":"572","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"573","messages":"574","suppressedMessages":"575","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"576","messages":"577","suppressedMessages":"578","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"579","messages":"580","suppressedMessages":"581","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"582","messages":"583","suppressedMessages":"584","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"585","messages":"586","suppressedMessages":"587","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"588","messages":"589","suppressedMessages":"590","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"591","messages":"592","suppressedMessages":"593","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"594","messages":"595","suppressedMessages":"596","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"597","messages":"598","suppressedMessages":"599","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"600","messages":"601","suppressedMessages":"602","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"603","messages":"604","suppressedMessages":"605","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"606","messages":"607","suppressedMessages":"608","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"609","messages":"610","suppressedMessages":"611","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"612","messages":"613","suppressedMessages":"614","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"615"},{"filePath":"616","messages":"617","suppressedMessages":"618","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"619"},{"filePath":"620","messages":"621","suppressedMessages":"622","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"623","messages":"624","suppressedMessages":"625","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"626"},{"filePath":"627","messages":"628","suppressedMessages":"629","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"630"},{"filePath":"631","messages":"632","suppressedMessages":"633","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"634"},{"filePath":"635","messages":"636","suppressedMessages":"637","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"638","messages":"639","suppressedMessages":"640","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"641","messages":"642","suppressedMessages":"643","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"644","messages":"645","suppressedMessages":"646","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"647","messages":"648","suppressedMessages":"649","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"650","messages":"651","suppressedMessages":"652","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"653","messages":"654","suppressedMessages":"655","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"656","messages":"657","suppressedMessages":"658","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"659","messages":"660","suppressedMessages":"661","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"662","messages":"663","suppressedMessages":"664","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"665","messages":"666","suppressedMessages":"667","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"668","messages":"669","suppressedMessages":"670","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"671","messages":"672","suppressedMessages":"673","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"674","messages":"675","suppressedMessages":"676","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"677","messages":"678","suppressedMessages":"679","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"680","messages":"681","suppressedMessages":"682","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"683","messages":"684","suppressedMessages":"685","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"686","messages":"687","suppressedMessages":"688","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"689","messages":"690","suppressedMessages":"691","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"692","messages":"693","suppressedMessages":"694","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"695","messages":"696","suppressedMessages":"697","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"698","messages":"699","suppressedMessages":"700","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"701","messages":"702","suppressedMessages":"703","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"704","messages":"705","suppressedMessages":"706","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"707","messages":"708","suppressedMessages":"709","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"710","messages":"711","suppressedMessages":"712","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"713","messages":"714","suppressedMessages":"715","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"716","messages":"717","suppressedMessages":"718","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"719","messages":"720","suppressedMessages":"721","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"722","messages":"723","suppressedMessages":"724","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"725","messages":"726","suppressedMessages":"727","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"728","messages":"729","suppressedMessages":"730","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"731","messages":"732","suppressedMessages":"733","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"734","messages":"735","suppressedMessages":"736","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"737","messages":"738","suppressedMessages":"739","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"740","messages":"741","suppressedMessages":"742","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"743","messages":"744","suppressedMessages":"745","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"746","messages":"747","suppressedMessages":"748","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"749","messages":"750","suppressedMessages":"751","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"752","messages":"753","suppressedMessages":"754","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"755","messages":"756","suppressedMessages":"757","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"758","messages":"759","suppressedMessages":"760","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"761","messages":"762","suppressedMessages":"763","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"764","messages":"765","suppressedMessages":"766","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"767","messages":"768","suppressedMessages":"769","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"770","messages":"771","suppressedMessages":"772","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"773","messages":"774","suppressedMessages":"775","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"776","messages":"777","suppressedMessages":"778","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"779","messages":"780","suppressedMessages":"781","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"782","messages":"783","suppressedMessages":"784","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"785","messages":"786","suppressedMessages":"787","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"788","messages":"789","suppressedMessages":"790","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"791","messages":"792","suppressedMessages":"793","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"794","messages":"795","suppressedMessages":"796","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"797","messages":"798","suppressedMessages":"799","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"800","messages":"801","suppressedMessages":"802","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"803","messages":"804","suppressedMessages":"805","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"806"},{"filePath":"807","messages":"808","suppressedMessages":"809","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"810","messages":"811","suppressedMessages":"812","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"813","messages":"814","suppressedMessages":"815","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"816"},{"filePath":"817","messages":"818","suppressedMessages":"819","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"820","messages":"821","suppressedMessages":"822","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"823"},{"filePath":"824","messages":"825","suppressedMessages":"826","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"827","messages":"828","suppressedMessages":"829","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"830"},{"filePath":"831","messages":"832","suppressedMessages":"833","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"834","messages":"835","suppressedMessages":"836","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"837","messages":"838","suppressedMessages":"839","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"840","messages":"841","suppressedMessages":"842","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"843"},{"filePath":"844","messages":"845","suppressedMessages":"846","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"847"},{"filePath":"848","messages":"849","suppressedMessages":"850","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"851"},{"filePath":"852","messages":"853","suppressedMessages":"854","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/src/constants.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/src/index.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/src/rpc_method_wrappers.ts",["855","856","857","858","859","860","861","862","863","864","865","866","867","868","869","870","871","872","873","874","875","876","877","878","879","880","881","882","883","884","885","886","887","888","889"],["890","891","892","893","894","895","896","897","898","899","900","901","902","903","904","905","906","907"],"﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n// Disabling because returnTypes must be last param to match 1.x params\n/* eslint-disable default-param-last */\nimport {\n\tETH_DATA_FORMAT,\n\tFormatType,\n\tDataFormat,\n\tDEFAULT_RETURN_FORMAT,\n\tEthExecutionAPI,\n\tSignedTransactionInfoAPI,\n\tWeb3BaseWalletAccount,\n\tAddress,\n\tBlockTag,\n\tBlockNumberOrTag,\n\tBytes,\n\tFilter,\n\tHexString,\n\tNumbers,\n\tHexStringBytes,\n\tAccountObject,\n\tBlock,\n\tFeeHistory,\n\tLog,\n\tTransactionReceipt,\n\tTransaction,\n\tTransactionCall,\n\tWeb3EthExecutionAPI,\n\tTransactionWithFromLocalWalletIndex,\n\tTransactionWithToLocalWalletIndex,\n\tTransactionWithFromAndToLocalWalletIndex,\n\tTransactionForAccessList,\n\tAccessListResult,\n\tEip712TypedData,\n} from 'web3-types';\nimport { Web3Context, Web3PromiEvent } from 'web3-core';\nimport { format, hexToBytes, bytesToUint8Array, numberToHex } from 'web3-utils';\nimport { TransactionFactory } from 'web3-eth-accounts';\nimport { isBlockTag, isBytes, isNullish, isString } from 'web3-validator';\nimport { SignatureError } from 'web3-errors';\nimport { ethRpcMethods } from 'web3-rpc-methods';\n\nimport { decodeSignedTransaction } from './utils/decode_signed_transaction.js';\nimport {\n\taccountSchema,\n\tblockSchema,\n\tfeeHistorySchema,\n\tlogSchema,\n\ttransactionReceiptSchema,\n\taccessListResultSchema,\n\tSignatureObjectSchema,\n} from './schemas.js';\nimport {\n\tSendSignedTransactionEvents,\n\tSendSignedTransactionOptions,\n\tSendTransactionEvents,\n\tSendTransactionOptions,\n} from './types.js';\n// eslint-disable-next-line import/no-cycle\nimport { getTransactionFromOrToAttr } from './utils/transaction_builder.js';\nimport { formatTransaction } from './utils/format_transaction.js';\n// eslint-disable-next-line import/no-cycle\nimport { trySendTransaction } from './utils/try_send_transaction.js';\n// eslint-disable-next-line import/no-cycle\nimport { waitForTransactionReceipt } from './utils/wait_for_transaction_receipt.js';\nimport { NUMBER_DATA_FORMAT } from './constants.js';\n// eslint-disable-next-line import/no-cycle\nimport { SendTxHelper } from './utils/send_tx_helper.js';\n\n/**\n * View additional documentations here: {@link Web3Eth.getProtocolVersion}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const getProtocolVersion = async (web3Context: Web3Context<EthExecutionAPI>) =>\n\tethRpcMethods.getProtocolVersion(web3Context.requestManager);\n\n// TODO Add returnFormat parameter\n/**\n * View additional documentations here: {@link Web3Eth.isSyncing}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const isSyncing = async (web3Context: Web3Context<EthExecutionAPI>) =>\n\tethRpcMethods.getSyncing(web3Context.requestManager);\n\n// TODO consider adding returnFormat parameter (to format address as bytes)\n/**\n * View additional documentations here: {@link Web3Eth.getCoinbase}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const getCoinbase = async (web3Context: Web3Context<EthExecutionAPI>) =>\n\tethRpcMethods.getCoinbase(web3Context.requestManager);\n\n/**\n * View additional documentations here: {@link Web3Eth.isMining}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const isMining = async (web3Context: Web3Context<EthExecutionAPI>) =>\n\tethRpcMethods.getMining(web3Context.requestManager);\n\n/**\n * View additional documentations here: {@link Web3Eth.getHashRate}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getHashRate<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getHashRate(web3Context.requestManager);\n\n\treturn format(\n\t\t{ format: 'uint' },\n\t\tresponse as Numbers,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getGasPrice}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getGasPrice<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getGasPrice(web3Context.requestManager);\n\n\treturn format(\n\t\t{ format: 'uint' },\n\t\tresponse as Numbers,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getMaxPriorityFeePerGas}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getMaxPriorityFeePerGas<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getMaxPriorityFeePerGas(web3Context.requestManager);\n\n\treturn format(\n\t\t{ format: 'uint' },\n\t\tresponse as Numbers,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n/**\n * View additional documentations here: {@link Web3Eth.getBlockNumber}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getBlockNumber<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getBlockNumber(web3Context.requestManager);\n\n\treturn format(\n\t\t{ format: 'uint' },\n\t\tresponse as Numbers,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getBalance}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getBalance<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress: Address,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\tconst response = await ethRpcMethods.getBalance(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\tblockNumberFormatted,\n\t);\n\treturn format(\n\t\t{ format: 'uint' },\n\t\tresponse as Numbers,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getStorageAt}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getStorageAt<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress: Address,\n\tstorageSlot: Numbers,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst storageSlotFormatted = format({ format: 'uint' }, storageSlot, ETH_DATA_FORMAT);\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\tconst response = await ethRpcMethods.getStorageAt(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\tstorageSlotFormatted,\n\t\tblockNumberFormatted,\n\t);\n\treturn format(\n\t\t{ format: 'bytes' },\n\t\tresponse as Bytes,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getCode}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getCode<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress: Address,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\tconst response = await ethRpcMethods.getCode(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\tblockNumberFormatted,\n\t);\n\treturn format(\n\t\t{ format: 'bytes' },\n\t\tresponse as Bytes,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getBlock}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getBlock<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblock: Bytes | BlockNumberOrTag = web3Context.defaultBlock,\n\thydrated = false,\n\treturnFormat: ReturnFormat,\n) {\n\tlet response;\n\tif (isBytes(block)) {\n\t\tconst blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getBlockByHash(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockHashFormatted as HexString,\n\t\t\thydrated,\n\t\t);\n\t} else {\n\t\tconst blockNumberFormatted = isBlockTag(block as string)\n\t\t\t? (block as BlockTag)\n\t\t\t: format({ format: 'uint' }, block as Numbers, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getBlockByNumber(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockNumberFormatted,\n\t\t\thydrated,\n\t\t);\n\t}\n\treturn format(\n\t\tblockSchema,\n\t\tresponse as unknown as Block,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getBlockTransactionCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getBlockTransactionCount<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblock: Bytes | BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tlet response;\n\tif (isBytes(block)) {\n\t\tconst blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getBlockTransactionCountByHash(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockHashFormatted as HexString,\n\t\t);\n\t} else {\n\t\tconst blockNumberFormatted = isBlockTag(block as string)\n\t\t\t? (block as BlockTag)\n\t\t\t: format({ format: 'uint' }, block as Numbers, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getBlockTransactionCountByNumber(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockNumberFormatted,\n\t\t);\n\t}\n\n\treturn format(\n\t\t{ format: 'uint' },\n\t\tresponse as Numbers,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getBlockUncleCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getBlockUncleCount<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblock: Bytes | BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tlet response;\n\tif (isBytes(block)) {\n\t\tconst blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getUncleCountByBlockHash(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockHashFormatted as HexString,\n\t\t);\n\t} else {\n\t\tconst blockNumberFormatted = isBlockTag(block as string)\n\t\t\t? (block as BlockTag)\n\t\t\t: format({ format: 'uint' }, block as Numbers, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getUncleCountByBlockNumber(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockNumberFormatted,\n\t\t);\n\t}\n\n\treturn format(\n\t\t{ format: 'uint' },\n\t\tresponse as Numbers,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getUncle}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getUncle<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblock: Bytes | BlockNumberOrTag = web3Context.defaultBlock,\n\tuncleIndex: Numbers,\n\treturnFormat: ReturnFormat,\n) {\n\tconst uncleIndexFormatted = format({ format: 'uint' }, uncleIndex, ETH_DATA_FORMAT);\n\n\tlet response;\n\tif (isBytes(block)) {\n\t\tconst blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getUncleByBlockHashAndIndex(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockHashFormatted as HexString,\n\t\t\tuncleIndexFormatted,\n\t\t);\n\t} else {\n\t\tconst blockNumberFormatted = isBlockTag(block as string)\n\t\t\t? (block as BlockTag)\n\t\t\t: format({ format: 'uint' }, block as Numbers, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getUncleByBlockNumberAndIndex(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockNumberFormatted,\n\t\t\tuncleIndexFormatted,\n\t\t);\n\t}\n\n\treturn format(\n\t\tblockSchema,\n\t\tresponse as unknown as Block,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getTransaction<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransactionHash: Bytes,\n\treturnFormat: ReturnFormat = web3Context.defaultReturnFormat as ReturnFormat,\n) {\n\tconst transactionHashFormatted = format(\n\t\t{ format: 'bytes32' },\n\t\ttransactionHash,\n\t\tDEFAULT_RETURN_FORMAT,\n\t);\n\tconst response = await ethRpcMethods.getTransactionByHash(\n\t\tweb3Context.requestManager,\n\t\ttransactionHashFormatted,\n\t);\n\n\treturn isNullish(response)\n\t\t? response\n\t\t: formatTransaction(response, returnFormat, {\n\t\t\t\tfillInputAndData: true,\n\t\t  });\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getPendingTransactions}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getPendingTransactions<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getPendingTransactions(web3Context.requestManager);\n\n\treturn response.map(transaction =>\n\t\tformatTransaction(\n\t\t\ttransaction as unknown as Transaction,\n\t\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t\t\t{\n\t\t\t\tfillInputAndData: true,\n\t\t\t},\n\t\t),\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionFromBlock}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getTransactionFromBlock<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblock: Bytes | BlockNumberOrTag = web3Context.defaultBlock,\n\ttransactionIndex: Numbers,\n\treturnFormat: ReturnFormat,\n) {\n\tconst transactionIndexFormatted = format({ format: 'uint' }, transactionIndex, ETH_DATA_FORMAT);\n\n\tlet response;\n\tif (isBytes(block)) {\n\t\tconst blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getTransactionByBlockHashAndIndex(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockHashFormatted as HexString,\n\t\t\ttransactionIndexFormatted,\n\t\t);\n\t} else {\n\t\tconst blockNumberFormatted = isBlockTag(block as string)\n\t\t\t? (block as BlockTag)\n\t\t\t: format({ format: 'uint' }, block as Numbers, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getTransactionByBlockNumberAndIndex(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockNumberFormatted,\n\t\t\ttransactionIndexFormatted,\n\t\t);\n\t}\n\n\treturn isNullish(response)\n\t\t? response\n\t\t: formatTransaction(response, returnFormat ?? web3Context.defaultReturnFormat, {\n\t\t\t\tfillInputAndData: true,\n\t\t  });\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionReceipt}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getTransactionReceipt<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransactionHash: Bytes,\n\treturnFormat: ReturnFormat,\n) {\n\tconst transactionHashFormatted = format(\n\t\t{ format: 'bytes32' },\n\t\ttransactionHash,\n\t\tDEFAULT_RETURN_FORMAT,\n\t);\n\tconst response = await ethRpcMethods.getTransactionReceipt(\n\t\tweb3Context.requestManager,\n\t\ttransactionHashFormatted,\n\t);\n\n\treturn isNullish(response)\n\t\t? response\n\t\t: (format(\n\t\t\t\ttransactionReceiptSchema,\n\t\t\t\tresponse as unknown as TransactionReceipt,\n\t\t\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t\t  ) as TransactionReceipt);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getTransactionCount<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress: Address,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\tconst response = await ethRpcMethods.getTransactionCount(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\tblockNumberFormatted,\n\t);\n\n\treturn format(\n\t\t{ format: 'uint' },\n\t\tresponse as Numbers,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.sendTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function sendTransaction<\n\tReturnFormat extends DataFormat,\n\tResolveType = FormatType<TransactionReceipt, ReturnFormat>,\n>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction:\n\t\t| Transaction\n\t\t| TransactionWithFromLocalWalletIndex\n\t\t| TransactionWithToLocalWalletIndex\n\t\t| TransactionWithFromAndToLocalWalletIndex,\n\treturnFormat: ReturnFormat,\n\toptions: SendTransactionOptions<ResolveType> = { checkRevertBeforeSending: true },\n): Web3PromiEvent<ResolveType, SendTransactionEvents<ReturnFormat>> {\n\tconst promiEvent = new Web3PromiEvent<ResolveType, SendTransactionEvents<ReturnFormat>>(\n\t\t(resolve, reject) => {\n\t\t\tsetImmediate(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tconst sendTxHelper = new SendTxHelper<ReturnFormat, ResolveType>({\n\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\tpromiEvent,\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t});\n\n\t\t\t\t\tlet transactionFormatted:\n\t\t\t\t\t\t| Transaction\n\t\t\t\t\t\t| TransactionWithFromLocalWalletIndex\n\t\t\t\t\t\t| TransactionWithToLocalWalletIndex\n\t\t\t\t\t\t| TransactionWithFromAndToLocalWalletIndex = formatTransaction(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t...transaction,\n\t\t\t\t\t\t\tfrom: getTransactionFromOrToAttr('from', web3Context, transaction),\n\t\t\t\t\t\t\tto: getTransactionFromOrToAttr('to', web3Context, transaction),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tETH_DATA_FORMAT,\n\t\t\t\t\t);\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\ttransactionFormatted = await sendTxHelper.populateGasPrice({\n\t\t\t\t\t\t\ttransaction,\n\t\t\t\t\t\t\ttransactionFormatted,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tawait sendTxHelper.checkRevertBeforeSending(\n\t\t\t\t\t\t\ttransactionFormatted as TransactionCall,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitSending(transactionFormatted);\n\n\t\t\t\t\t\tlet wallet: Web3BaseWalletAccount | undefined;\n\n\t\t\t\t\t\tif (web3Context.wallet && !isNullish(transactionFormatted.from)) {\n\t\t\t\t\t\t\twallet = web3Context.wallet.get(\n\t\t\t\t\t\t\t\t(transactionFormatted as Transaction).from as string,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst transactionHash: HexString = await sendTxHelper.signAndSend({\n\t\t\t\t\t\t\twallet,\n\t\t\t\t\t\t\ttx: transactionFormatted,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tconst transactionHashFormatted = format(\n\t\t\t\t\t\t\t{ format: 'bytes32' },\n\t\t\t\t\t\t\ttransactionHash as Bytes,\n\t\t\t\t\t\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tsendTxHelper.emitSent(transactionFormatted);\n\t\t\t\t\t\tsendTxHelper.emitTransactionHash(\n\t\t\t\t\t\t\ttransactionHashFormatted as string & Uint8Array,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst transactionReceipt = await waitForTransactionReceipt(\n\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\ttransactionHash,\n\t\t\t\t\t\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst transactionReceiptFormatted = sendTxHelper.getReceiptWithEvents(\n\t\t\t\t\t\t\tformat(\n\t\t\t\t\t\t\t\ttransactionReceiptSchema,\n\t\t\t\t\t\t\t\ttransactionReceipt,\n\t\t\t\t\t\t\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitReceipt(transactionReceiptFormatted);\n\n\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\tawait sendTxHelper.handleResolve({\n\t\t\t\t\t\t\t\treceipt: transactionReceiptFormatted,\n\t\t\t\t\t\t\t\ttx: transactionFormatted as TransactionCall,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitConfirmation({\n\t\t\t\t\t\t\treceipt: transactionReceiptFormatted,\n\t\t\t\t\t\t\ttransactionHash,\n\t\t\t\t\t\t});\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\treject(\n\t\t\t\t\t\t\tawait sendTxHelper.handleError({\n\t\t\t\t\t\t\t\terror,\n\t\t\t\t\t\t\t\ttx: transactionFormatted as TransactionCall,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t})() as unknown;\n\t\t\t});\n\t\t},\n\t);\n\n\treturn promiEvent;\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.sendSignedTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function sendSignedTransaction<\n\tReturnFormat extends DataFormat,\n\tResolveType = FormatType<TransactionReceipt, ReturnFormat>,\n>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tsignedTransaction: Bytes,\n\treturnFormat: ReturnFormat,\n\toptions: SendSignedTransactionOptions<ResolveType> = { checkRevertBeforeSending: true },\n): Web3PromiEvent<ResolveType, SendSignedTransactionEvents<ReturnFormat>> {\n\t// TODO - Promise returned in function argument where a void return was expected\n\t// eslint-disable-next-line @typescript-eslint/no-misused-promises\n\tconst promiEvent = new Web3PromiEvent<ResolveType, SendSignedTransactionEvents<ReturnFormat>>(\n\t\t(resolve, reject) => {\n\t\t\tsetImmediate(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tconst sendTxHelper = new SendTxHelper<ReturnFormat, ResolveType>({\n\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\tpromiEvent,\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t});\n\t\t\t\t\t// Formatting signedTransaction to be send to RPC endpoint\n\t\t\t\t\tconst signedTransactionFormattedHex = format(\n\t\t\t\t\t\t{ format: 'bytes' },\n\t\t\t\t\t\tsignedTransaction,\n\t\t\t\t\t\tETH_DATA_FORMAT,\n\t\t\t\t\t);\n\t\t\t\t\tconst unSerializedTransaction = TransactionFactory.fromSerializedData(\n\t\t\t\t\t\tbytesToUint8Array(hexToBytes(signedTransactionFormattedHex)),\n\t\t\t\t\t);\n\t\t\t\t\tconst unSerializedTransactionWithFrom = {\n\t\t\t\t\t\t...unSerializedTransaction.toJSON(),\n\t\t\t\t\t\t// Some providers will default `from` to address(0) causing the error\n\t\t\t\t\t\t// reported from `eth_call` to not be the reason the user's tx failed\n\t\t\t\t\t\t// e.g. `eth_call` will return an Out of Gas error for a failed\n\t\t\t\t\t\t// smart contract execution contract, because the sender, address(0),\n\t\t\t\t\t\t// has no balance to pay for the gas of the transaction execution\n\t\t\t\t\t\tfrom: unSerializedTransaction.getSenderAddress().toString(),\n\t\t\t\t\t};\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst { v, r, s, ...txWithoutSigParams } = unSerializedTransactionWithFrom;\n\n\t\t\t\t\t\tawait sendTxHelper.checkRevertBeforeSending(\n\t\t\t\t\t\t\ttxWithoutSigParams as TransactionCall,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitSending(signedTransactionFormattedHex);\n\n\t\t\t\t\t\tconst transactionHash = await trySendTransaction(\n\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\tasync (): Promise<string> =>\n\t\t\t\t\t\t\t\tethRpcMethods.sendRawTransaction(\n\t\t\t\t\t\t\t\t\tweb3Context.requestManager,\n\t\t\t\t\t\t\t\t\tsignedTransactionFormattedHex,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitSent(signedTransactionFormattedHex);\n\n\t\t\t\t\t\tconst transactionHashFormatted = format(\n\t\t\t\t\t\t\t{ format: 'bytes32' },\n\t\t\t\t\t\t\ttransactionHash as Bytes,\n\t\t\t\t\t\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitTransactionHash(\n\t\t\t\t\t\t\ttransactionHashFormatted as string & Uint8Array,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst transactionReceipt = await waitForTransactionReceipt(\n\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\ttransactionHash,\n\t\t\t\t\t\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst transactionReceiptFormatted = sendTxHelper.getReceiptWithEvents(\n\t\t\t\t\t\t\tformat(\n\t\t\t\t\t\t\t\ttransactionReceiptSchema,\n\t\t\t\t\t\t\t\ttransactionReceipt,\n\t\t\t\t\t\t\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitReceipt(transactionReceiptFormatted);\n\n\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\tawait sendTxHelper.handleResolve({\n\t\t\t\t\t\t\t\treceipt: transactionReceiptFormatted,\n\t\t\t\t\t\t\t\ttx: unSerializedTransactionWithFrom as TransactionCall,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitConfirmation({\n\t\t\t\t\t\t\treceipt: transactionReceiptFormatted,\n\t\t\t\t\t\t\ttransactionHash,\n\t\t\t\t\t\t});\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\treject(\n\t\t\t\t\t\t\tawait sendTxHelper.handleError({\n\t\t\t\t\t\t\t\terror,\n\t\t\t\t\t\t\t\ttx: unSerializedTransactionWithFrom as TransactionCall,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t})() as unknown;\n\t\t\t});\n\t\t},\n\t);\n\n\treturn promiEvent;\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.sign}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function sign<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tmessage: Bytes,\n\taddressOrIndex: Address | number,\n\treturnFormat: ReturnFormat = web3Context.defaultReturnFormat as ReturnFormat,\n) {\n\tconst messageFormatted = format({ format: 'bytes' }, message, DEFAULT_RETURN_FORMAT);\n\tif (web3Context.wallet?.get(addressOrIndex)) {\n\t\tconst wallet = web3Context.wallet.get(addressOrIndex) as Web3BaseWalletAccount;\n\t\tconst signed = wallet.sign(messageFormatted);\n\t\treturn format(SignatureObjectSchema, signed, returnFormat);\n\t}\n\n\tif (typeof addressOrIndex === 'number') {\n\t\tthrow new SignatureError(\n\t\t\tmessage,\n\t\t\t'RPC method \"eth_sign\" does not support index signatures',\n\t\t);\n\t}\n\n\tconst response = await ethRpcMethods.sign(\n\t\tweb3Context.requestManager,\n\t\taddressOrIndex,\n\t\tmessageFormatted,\n\t);\n\n\treturn format({ format: 'bytes' }, response as Bytes, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.signTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function signTransaction<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction: Transaction,\n\treturnFormat: ReturnFormat = web3Context.defaultReturnFormat as ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.signTransaction(\n\t\tweb3Context.requestManager,\n\t\tformatTransaction(transaction, ETH_DATA_FORMAT),\n\t);\n\t// Some clients only return the encoded signed transaction (e.g. Ganache)\n\t// while clients such as Geth return the desired SignedTransactionInfoAPI object\n\treturn isString(response as HexStringBytes)\n\t\t? decodeSignedTransaction(response as HexStringBytes, returnFormat, {\n\t\t\t\tfillInputAndData: true,\n\t\t  })\n\t\t: {\n\t\t\t\traw: format(\n\t\t\t\t\t{ format: 'bytes' },\n\t\t\t\t\t(response as SignedTransactionInfoAPI).raw,\n\t\t\t\t\treturnFormat,\n\t\t\t\t),\n\t\t\t\ttx: formatTransaction((response as SignedTransactionInfoAPI).tx, returnFormat, {\n\t\t\t\t\tfillInputAndData: true,\n\t\t\t\t}),\n\t\t  };\n}\n\n// TODO Decide what to do with transaction.to\n// https://github.com/ChainSafe/web3.js/pull/4525#issuecomment-982330076\n/**\n * View additional documentations here: {@link Web3Eth.call}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function call<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction: TransactionCall,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat = web3Context.defaultReturnFormat as ReturnFormat,\n) {\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\n\tconst response = await ethRpcMethods.call(\n\t\tweb3Context.requestManager,\n\t\tformatTransaction(transaction, ETH_DATA_FORMAT),\n\t\tblockNumberFormatted,\n\t);\n\n\treturn format({ format: 'bytes' }, response as Bytes, returnFormat);\n}\n\n// TODO - Investigate whether response is padded as 1.x docs suggest\n/**\n * View additional documentations here: {@link Web3Eth.estimateGas}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function estimateGas<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction: Transaction,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst transactionFormatted = formatTransaction(transaction, ETH_DATA_FORMAT);\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\n\tconst response = await ethRpcMethods.estimateGas(\n\t\tweb3Context.requestManager,\n\t\ttransactionFormatted,\n\t\tblockNumberFormatted,\n\t);\n\n\treturn format(\n\t\t{ format: 'uint' },\n\t\tresponse as Numbers,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n// TODO - Add input formatting to filter\n/**\n * View additional documentations here: {@link Web3Eth.getPastLogs}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getLogs<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<Web3EthExecutionAPI>,\n\tfilter: Filter,\n\treturnFormat: ReturnFormat,\n) {\n\t// format type bigint or number toBlock and fromBlock to hexstring.\n\tlet { toBlock, fromBlock } = filter;\n\tif (!isNullish(toBlock)) {\n\t\tif (typeof toBlock === 'number' || typeof toBlock === 'bigint') {\n\t\t\ttoBlock = numberToHex(toBlock);\n\t\t}\n\t}\n\tif (!isNullish(fromBlock)) {\n\t\tif (typeof fromBlock === 'number' || typeof fromBlock === 'bigint') {\n\t\t\tfromBlock = numberToHex(fromBlock);\n\t\t}\n\t}\n\n\tconst formattedFilter = { ...filter, fromBlock, toBlock };\n\n\tconst response = await ethRpcMethods.getLogs(web3Context.requestManager, formattedFilter);\n\n\tconst result = response.map(res => {\n\t\tif (typeof res === 'string') {\n\t\t\treturn res;\n\t\t}\n\n\t\treturn format(\n\t\t\tlogSchema,\n\t\t\tres as unknown as Log,\n\t\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t\t);\n\t});\n\n\treturn result;\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getChainId}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getChainId<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getChainId(web3Context.requestManager);\n\n\treturn format(\n\t\t{ format: 'uint' },\n\t\t// Response is number in hex formatted string\n\t\tresponse as unknown as number,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getProof}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getProof<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<Web3EthExecutionAPI>,\n\taddress: Address,\n\tstorageKeys: Bytes[],\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst storageKeysFormatted = storageKeys.map(storageKey =>\n\t\tformat({ format: 'bytes' }, storageKey, ETH_DATA_FORMAT),\n\t);\n\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\n\tconst response = await ethRpcMethods.getProof(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\tstorageKeysFormatted,\n\t\tblockNumberFormatted,\n\t);\n\n\treturn format(\n\t\taccountSchema,\n\t\tresponse as unknown as AccountObject,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n// TODO Throwing an error with Geth, but not Infura\n// TODO gasUsedRatio and reward not formatting\n/**\n * View additional documentations here: {@link Web3Eth.getFeeHistory}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getFeeHistory<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblockCount: Numbers,\n\tnewestBlock: BlockNumberOrTag = web3Context.defaultBlock,\n\trewardPercentiles: Numbers[],\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockCountFormatted = format({ format: 'uint' }, blockCount, ETH_DATA_FORMAT);\n\n\tconst newestBlockFormatted = isBlockTag(newestBlock as string)\n\t\t? (newestBlock as BlockTag)\n\t\t: format({ format: 'uint' }, newestBlock as Numbers, ETH_DATA_FORMAT);\n\n\tconst rewardPercentilesFormatted = format(\n\t\t{\n\t\t\ttype: 'array',\n\t\t\titems: {\n\t\t\t\tformat: 'uint',\n\t\t\t},\n\t\t},\n\t\trewardPercentiles,\n\t\tNUMBER_DATA_FORMAT,\n\t);\n\n\tconst response = await ethRpcMethods.getFeeHistory(\n\t\tweb3Context.requestManager,\n\t\tblockCountFormatted,\n\t\tnewestBlockFormatted,\n\t\trewardPercentilesFormatted,\n\t);\n\n\treturn format(\n\t\tfeeHistorySchema,\n\t\tresponse as unknown as FeeHistory,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.createAccessList}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function createAccessList<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction: TransactionForAccessList,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\n\tconst response = (await ethRpcMethods.createAccessList(\n\t\tweb3Context.requestManager,\n\t\tformatTransaction(transaction, ETH_DATA_FORMAT),\n\t\tblockNumberFormatted,\n\t)) as unknown as AccessListResult;\n\n\treturn format(\n\t\taccessListResultSchema,\n\t\tresponse,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.signTypedData}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function signTypedData<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress: Address,\n\ttypedData: Eip712TypedData,\n\tuseLegacy: boolean,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.signTypedData(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\ttypedData,\n\t\tuseLegacy,\n\t);\n\n\treturn format({ format: 'bytes' }, response, returnFormat ?? web3Context.defaultReturnFormat);\n}\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/src/schemas.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/src/types.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/src/utils/decode_signed_transaction.ts",["908","909"],[],"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport {\n\tDataFormat,\n\tHexStringBytes,\n\tSignedTransactionInfoAPI,\n\tTransactionSignedAPI,\n} from 'web3-types';\nimport { bytesToHex, format, hexToBytes, keccak256 } from 'web3-utils';\nimport { TransactionFactory } from 'web3-eth-accounts';\nimport { detectRawTransactionType } from './detect_transaction_type.js';\nimport { formatTransaction } from './format_transaction.js';\n\n/**\n * Decodes an [RLP](https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/#top) encoded transaction.\n *\n * @param encodedSignedTransaction The RLP encoded transaction.\n * @param returnFormat ({@link DataFormat} Specifies how the return data should be formatted.\n * @returns {@link SignedTransactionInfoAPI}, an object containing the RLP encoded signed transaction (accessed via the `raw` property) and the signed transaction object (accessed via the `tx` property).\n */\nexport function decodeSignedTransaction<ReturnFormat extends DataFormat>(\n\tencodedSignedTransaction: HexStringBytes,\n\treturnFormat: ReturnFormat,\n\toptions: { fillInputAndData?: boolean } = { fillInputAndData: false },\n): SignedTransactionInfoAPI {\n\treturn {\n\t\traw: format({ format: 'bytes' }, encodedSignedTransaction, returnFormat),\n\t\ttx: formatTransaction(\n\t\t\t{\n\t\t\t\t...TransactionFactory.fromSerializedData(\n\t\t\t\t\thexToBytes(encodedSignedTransaction),\n\t\t\t\t).toJSON(),\n\t\t\t\thash: bytesToHex(keccak256(hexToBytes(encodedSignedTransaction))),\n\t\t\t\ttype: detectRawTransactionType(hexToBytes(encodedSignedTransaction)),\n\t\t\t} as TransactionSignedAPI,\n\t\t\treturnFormat,\n\t\t\t{ fillInputAndData: options.fillInputAndData },\n\t\t),\n\t};\n}\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/src/utils/decoding.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/src/utils/detect_transaction_type.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/src/utils/format_transaction.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/src/utils/get_revert_reason.ts",[],["910"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/src/utils/get_transaction_error.ts",[],["911"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/src/utils/get_transaction_gas_pricing.ts",[],["912","913"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/src/utils/index.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/src/utils/prepare_transaction_for_signing.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/src/utils/reject_if_block_timeout.ts",[],["914"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/src/utils/send_tx_helper.ts",[],["915","916","917","918"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/src/utils/transaction_builder.ts",[],["919","920","921"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/src/utils/try_send_transaction.ts",[],["922"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/src/utils/wait_for_transaction_receipt.ts",[],["923","924"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/src/utils/watch_transaction_by_polling.ts",["925","926"],[],"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { Bytes, EthExecutionAPI, TransactionReceipt } from 'web3-types';\nimport { Web3Context, Web3PromiEvent } from 'web3-core';\nimport { format, numberToHex } from 'web3-utils';\nimport { ethRpcMethods } from 'web3-rpc-methods';\n\nimport { DataFormat } from 'web3-types';\nimport { SendSignedTransactionEvents, SendTransactionEvents } from '../types.js';\nimport { transactionReceiptSchema } from '../schemas.js';\n\nexport type Web3PromiEventEventTypeBase<ReturnFormat extends DataFormat> =\n\t| SendTransactionEvents<ReturnFormat>\n\t| SendSignedTransactionEvents<ReturnFormat>;\n\nexport type WaitProps<ReturnFormat extends DataFormat, ResolveType = TransactionReceipt> = {\n\tweb3Context: Web3Context<EthExecutionAPI>;\n\ttransactionReceipt: TransactionReceipt;\n\ttransactionPromiEvent: Web3PromiEvent<ResolveType, Web3PromiEventEventTypeBase<ReturnFormat>>;\n\treturnFormat: ReturnFormat;\n};\n\n/**\n * This function watches a Transaction by subscribing to new heads.\n * It is used by `watchTransactionForConfirmations`, in case the provider does not support subscription.\n * And it is also used by `watchTransactionBySubscription`, as a fallback, if the subscription failed for any reason.\n */\nexport const watchTransactionByPolling = <\n\tReturnFormat extends DataFormat,\n\tResolveType = TransactionReceipt,\n>({\n\tweb3Context,\n\ttransactionReceipt,\n\ttransactionPromiEvent,\n\treturnFormat,\n}: WaitProps<ReturnFormat, ResolveType>) => {\n\t// Having a transactionReceipt means that the transaction has already been included\n\t// in at least one block, so we start with 1\n\tlet confirmations = 1;\n\tconst intervalId = setInterval(() => {\n\t\t(async () => {\n\t\t\tif (confirmations >= web3Context.transactionConfirmationBlocks)\n\t\t\t\tclearInterval(intervalId);\n\n\t\t\tconst nextBlock = await ethRpcMethods.getBlockByNumber(\n\t\t\t\tweb3Context.requestManager,\n\t\t\t\tnumberToHex(BigInt(transactionReceipt.blockNumber) + BigInt(confirmations)),\n\t\t\t\tfalse,\n\t\t\t);\n\n\t\t\tif (nextBlock?.hash) {\n\t\t\t\tconfirmations += 1;\n\n\t\t\t\ttransactionPromiEvent.emit('confirmation', {\n\t\t\t\t\tconfirmations: format({ format: 'uint' }, confirmations, returnFormat),\n\t\t\t\t\treceipt: format(transactionReceiptSchema, transactionReceipt, returnFormat),\n\t\t\t\t\tlatestBlockHash: format(\n\t\t\t\t\t\t{ format: 'bytes32' },\n\t\t\t\t\t\tnextBlock.hash as Bytes,\n\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t),\n\t\t\t\t});\n\t\t\t}\n\t\t})() as unknown;\n\t}, web3Context.transactionReceiptPollingInterval ?? web3Context.transactionPollingInterval);\n};\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/src/utils/watch_transaction_by_subscription.ts",["927","928"],[],"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { Bytes, Numbers, BlockHeaderOutput, TransactionReceipt } from 'web3-types';\nimport { format } from 'web3-utils';\n\nimport { DataFormat } from 'web3-types';\nimport { NewHeadsSubscription } from '../web3_subscriptions.js';\nimport { transactionReceiptSchema } from '../schemas.js';\nimport { WaitProps, watchTransactionByPolling } from './watch_transaction_by_polling.js';\n\n/**\n * This function watches a Transaction by subscribing to new heads.\n * It is used by `watchTransactionForConfirmations`, in case the provider supports subscription.\n */\nexport const watchTransactionBySubscription = <\n\tReturnFormat extends DataFormat,\n\tResolveType = TransactionReceipt,\n>({\n\tweb3Context,\n\ttransactionReceipt,\n\ttransactionPromiEvent,\n\treturnFormat,\n}: WaitProps<ReturnFormat, ResolveType>) => {\n\t// The following variable will stay true except if the data arrived,\n\t//\tor if watching started after an error had occurred.\n\tlet needToWatchLater = true;\n\tlet lastCaughtBlockHash: string;\n\tsetImmediate(() => {\n\t\tweb3Context.subscriptionManager\n\t\t\t?.subscribe('newHeads')\n\t\t\t.then((subscription: NewHeadsSubscription) => {\n\t\t\t\tsubscription.on('data', async (newBlockHeader: BlockHeaderOutput) => {\n\t\t\t\t\tneedToWatchLater = false;\n\t\t\t\t\tif (\n\t\t\t\t\t\t!newBlockHeader?.number ||\n\t\t\t\t\t\t// For some cases, the on-data event is fired couple times for the same block!\n\t\t\t\t\t\t// This needs investigation but seems to be because of multiple `subscription.on('data'...)` even this should not cause that.\n\t\t\t\t\t\tlastCaughtBlockHash === newBlockHeader?.parentHash\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tlastCaughtBlockHash = newBlockHeader?.parentHash as string;\n\n\t\t\t\t\tconst confirmations =\n\t\t\t\t\t\tBigInt(newBlockHeader.number) -\n\t\t\t\t\t\tBigInt(transactionReceipt.blockNumber) +\n\t\t\t\t\t\tBigInt(1);\n\n\t\t\t\t\ttransactionPromiEvent.emit('confirmation', {\n\t\t\t\t\t\tconfirmations: format(\n\t\t\t\t\t\t\t{ format: 'uint' },\n\t\t\t\t\t\t\tconfirmations as Numbers,\n\t\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t\t),\n\t\t\t\t\t\treceipt: format(transactionReceiptSchema, transactionReceipt, returnFormat),\n\t\t\t\t\t\tlatestBlockHash: format(\n\t\t\t\t\t\t\t{ format: 'bytes32' },\n\t\t\t\t\t\t\tnewBlockHeader.parentHash as Bytes,\n\t\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t\t),\n\t\t\t\t\t});\n\t\t\t\t\tif (confirmations >= web3Context.transactionConfirmationBlocks) {\n\t\t\t\t\t\tawait web3Context.subscriptionManager?.removeSubscription(subscription);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tsubscription.on('error', async () => {\n\t\t\t\t\tawait web3Context.subscriptionManager?.removeSubscription(subscription);\n\n\t\t\t\t\tneedToWatchLater = false;\n\t\t\t\t\twatchTransactionByPolling({\n\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\ttransactionReceipt,\n\t\t\t\t\t\ttransactionPromiEvent,\n\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch(() => {\n\t\t\t\tneedToWatchLater = false;\n\t\t\t\twatchTransactionByPolling({\n\t\t\t\t\tweb3Context,\n\t\t\t\t\ttransactionReceipt,\n\t\t\t\t\ttransactionPromiEvent,\n\t\t\t\t\treturnFormat,\n\t\t\t\t});\n\t\t\t});\n\t});\n\n\t// Fallback to polling if tx receipt didn't arrived in \"blockHeaderTimeout\" [10 seconds]\n\tsetTimeout(() => {\n\t\tif (needToWatchLater) {\n\t\t\twatchTransactionByPolling({\n\t\t\t\tweb3Context,\n\t\t\t\ttransactionReceipt,\n\t\t\t\ttransactionPromiEvent,\n\t\t\t\treturnFormat,\n\t\t\t});\n\t\t}\n\t}, web3Context.blockHeaderTimeout * 1000);\n};\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/src/utils/watch_transaction_for_confirmations.ts",["929","930"],[],"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { Bytes, EthExecutionAPI, Web3BaseProvider, TransactionReceipt } from 'web3-types';\nimport { Web3Context, Web3PromiEvent } from 'web3-core';\nimport { format } from 'web3-utils';\nimport { isNullish } from 'web3-validator';\n\nimport {\n\tTransactionMissingReceiptOrBlockHashError,\n\tTransactionReceiptMissingBlockNumberError,\n} from 'web3-errors';\nimport { DataFormat } from 'web3-types';\nimport { transactionReceiptSchema } from '../schemas.js';\nimport {\n\twatchTransactionByPolling,\n\tWeb3PromiEventEventTypeBase,\n} from './watch_transaction_by_polling.js';\nimport { watchTransactionBySubscription } from './watch_transaction_by_subscription.js';\n\nexport function watchTransactionForConfirmations<\n\tReturnFormat extends DataFormat,\n\tWeb3PromiEventEventType extends Web3PromiEventEventTypeBase<ReturnFormat>,\n\tResolveType = TransactionReceipt,\n>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransactionPromiEvent: Web3PromiEvent<ResolveType, Web3PromiEventEventType>,\n\ttransactionReceipt: TransactionReceipt,\n\ttransactionHash: Bytes,\n\treturnFormat: ReturnFormat,\n) {\n\tif (isNullish(transactionReceipt) || isNullish(transactionReceipt.blockHash))\n\t\tthrow new TransactionMissingReceiptOrBlockHashError({\n\t\t\treceipt: transactionReceipt,\n\t\t\tblockHash: format({ format: 'bytes32' }, transactionReceipt?.blockHash, returnFormat),\n\t\t\ttransactionHash: format({ format: 'bytes32' }, transactionHash, returnFormat),\n\t\t});\n\n\tif (!transactionReceipt.blockNumber)\n\t\tthrow new TransactionReceiptMissingBlockNumberError({ receipt: transactionReceipt });\n\n\t// As we have the receipt, it's the first confirmation that tx is accepted.\n\ttransactionPromiEvent.emit('confirmation', {\n\t\tconfirmations: format({ format: 'uint' }, 1, returnFormat),\n\t\treceipt: format(transactionReceiptSchema, transactionReceipt, returnFormat),\n\t\tlatestBlockHash: format({ format: 'bytes32' }, transactionReceipt.blockHash, returnFormat),\n\t});\n\n\t// so a subscription for newBlockHeaders can be made instead of polling\n\tconst provider: Web3BaseProvider = web3Context.requestManager.provider as Web3BaseProvider;\n\tif (provider && 'supportsSubscriptions' in provider && provider.supportsSubscriptions()) {\n\t\twatchTransactionBySubscription({\n\t\t\tweb3Context,\n\t\t\ttransactionReceipt,\n\t\t\ttransactionPromiEvent,\n\t\t\treturnFormat,\n\t\t});\n\t} else {\n\t\twatchTransactionByPolling({\n\t\t\tweb3Context,\n\t\t\ttransactionReceipt,\n\t\t\ttransactionPromiEvent,\n\t\t\treturnFormat,\n\t\t});\n\t}\n}\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/src/validation.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/src/web3_eth.ts",["931","932","933","934","935","936","937","938","939","940","941","942","943","944","945","946","947","948","949","950","951","952","953","954","955","956","957","958","959","960","961","962","963","964","965","966","967","968","969","970","971","972","973","974","975","976","977","978","979","980","981","982","983","984","985","986","987","988","989","990","991","992","993","994","995","996","997","998","999","1000","1001","1002","1003","1004","1005","1006","1007","1008","1009"],["1010","1011","1012","1013","1014","1015","1016"],"﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n// Disabling because returnTypes must be last param to match 1.x params\n/* eslint-disable default-param-last */\n\nimport {\n\tSupportedProviders,\n\tAddress,\n\tBytes,\n\tFeeData,\n\tFilter,\n\tHexString32Bytes,\n\tHexString8Bytes,\n\tNumbers,\n\tBlockNumberOrTag,\n\tLogsOutput,\n\tTransaction,\n\tTransactionCall,\n\tWeb3EthExecutionAPI,\n\tTransactionWithFromLocalWalletIndex,\n\tTransactionWithToLocalWalletIndex,\n\tTransactionWithFromAndToLocalWalletIndex,\n\tTransactionForAccessList,\n\tDataFormat,\n\tDEFAULT_RETURN_FORMAT,\n\tEip712TypedData,\n\tFMT_BYTES,\n\tFMT_NUMBER,\n} from 'web3-types';\nimport { isSupportedProvider, Web3Context, Web3ContextInitOptions } from 'web3-core';\nimport { TransactionNotFound } from 'web3-errors';\nimport { toChecksumAddress, isNullish, ethUnitMap } from 'web3-utils';\nimport { ethRpcMethods } from 'web3-rpc-methods';\n\nimport * as rpcMethodsWrappers from './rpc_method_wrappers.js';\nimport { SendTransactionOptions } from './types.js';\nimport {\n\tLogsSubscription,\n\tNewPendingTransactionsSubscription,\n\tNewHeadsSubscription,\n\tSyncingSubscription,\n} from './web3_subscriptions.js';\n\nexport type RegisteredSubscription = {\n\tlogs: typeof LogsSubscription;\n\tnewPendingTransactions: typeof NewPendingTransactionsSubscription;\n\tpendingTransactions: typeof NewPendingTransactionsSubscription;\n\tnewHeads: typeof NewHeadsSubscription;\n\tnewBlockHeaders: typeof NewHeadsSubscription;\n\tsyncing: typeof SyncingSubscription;\n};\n\nexport const registeredSubscriptions = {\n\tlogs: LogsSubscription,\n\tnewPendingTransactions: NewPendingTransactionsSubscription,\n\tnewHeads: NewHeadsSubscription,\n\tsyncing: SyncingSubscription,\n\tpendingTransactions: NewPendingTransactionsSubscription, // the same as newPendingTransactions. just for support API like in version 1.x\n\tnewBlockHeaders: NewHeadsSubscription, // the same as newHeads. just for support API like in version 1.x\n};\n\n/**\n *\n * The Web3Eth allows you to interact with an Ethereum blockchain.\n *\n * For using Web3 Eth functions, first install Web3 package using `npm i web3` or `yarn add web3` based on your package manager usage.\n * After that, Web3 Eth functions will be available as mentioned in following snippet.\n * ```ts\n * import { Web3 } from 'web3';\n * const web3 = new Web3('https://mainnet.infura.io/v3/<YOURPROJID>');\n *\n * const block = await web3.eth.getBlock(0);\n *\n * ```\n *\n * For using individual package install `web3-eth` package using `npm i web3-eth` or `yarn add web3-eth` and only import required functions.\n * This is more efficient approach for building lightweight applications.\n * ```ts\n * import { Web3Eth } from 'web3-eth';\n *\n * const eth = new Web3Eth('https://mainnet.infura.io/v3/<YOURPROJID>');\n * const block = await eth.getBlock(0);\n *\n * ```\n */\nexport class Web3Eth extends Web3Context<Web3EthExecutionAPI, RegisteredSubscription> {\n\tpublic constructor(\n\t\tproviderOrContext?: SupportedProviders<any> | Web3ContextInitOptions | string,\n\t) {\n\t\tif (\n\t\t\ttypeof providerOrContext === 'string' ||\n\t\t\tisSupportedProvider(providerOrContext as SupportedProviders<any>)\n\t\t) {\n\t\t\t// @ts-expect-error disable the error: \"A 'super' call must be a root-level statement within a constructor of a derived class that contains initialized properties, parameter properties, or private identifiers.\"\n\t\t\tsuper({\n\t\t\t\tprovider: providerOrContext as SupportedProviders<any>,\n\t\t\t\tregisteredSubscriptions,\n\t\t\t});\n\n\t\t\treturn;\n\t\t}\n\n\t\tif ((providerOrContext as Web3ContextInitOptions).registeredSubscriptions) {\n\t\t\tsuper(providerOrContext as Web3ContextInitOptions);\n\t\t\treturn;\n\t\t}\n\n\t\tsuper({\n\t\t\t...(providerOrContext as Web3ContextInitOptions),\n\t\t\tregisteredSubscriptions,\n\t\t});\n\t}\n\n\t/**\n\t * @returns Returns the ethereum protocol version of the node.\n\t *\n\t * ```ts\n\t * web3.eth.getProtocolVersion().then(console.log);\n\t * > \"63\"\n\t * ```\n\t */\n\tpublic async getProtocolVersion() {\n\t\treturn ethRpcMethods.getProtocolVersion(this.requestManager);\n\t}\n\n\t// TODO Add returnFormat parameter\n\t/**\n\t * Checks if the node is currently syncing.\n\t *\n\t * @returns Either a {@link SyncingStatusAPI}, or `false`.\n\t *\n\t * ```ts\n\t * web3.eth.isSyncing().then(console.log);\n\t * > {\n\t *     startingBlock: 100,\n\t *     currentBlock: 312,\n\t *     highestBlock: 512,\n\t *     knownStates: 234566,\n\t *     pulledStates: 123455\n\t * }\n\t * ```\n\t */\n\tpublic async isSyncing() {\n\t\treturn ethRpcMethods.getSyncing(this.requestManager);\n\t}\n\n\t// TODO consider adding returnFormat parameter (to format address as bytes)\n\t/**\n\t * @returns Returns the coinbase address to which mining rewards will go.\n\t *\n\t * ```ts\n\t * web3.eth.getCoinbase().then(console.log);\n\t * > \"0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe\"\n\t * ```\n\t */\n\tpublic async getCoinbase() {\n\t\treturn ethRpcMethods.getCoinbase(this.requestManager);\n\t}\n\n\t/**\n\t * Checks whether the node is mining or not.\n\t *\n\t * @returns `true` if the node is mining, otherwise `false`.\n\t *\n\t * ```ts\n\t * web3.eth.isMining().then(console.log);\n\t * > true\n\t * ```\n\t */\n\tpublic async isMining() {\n\t\treturn ethRpcMethods.getMining(this.requestManager);\n\t}\n\n\t/**\n\t * @deprecated Will be removed in the future, please use {@link Web3Eth.getHashRate} method instead.\n\t *\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @returns The number of hashes per second that the node is mining with.\n\t *\n\t * ```ts\n\t * web3.eth.getHashrate().then(console.log);\n\t * > 493736n\n\t *\n\t * web3.eth.getHashrate({ number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);\n\t * > \"0x788a8\"\n\t * ```\n\t */\n\tpublic async getHashrate<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\treturnFormat: ReturnFormat = (this.defaultReturnFormat ??\n\t\t\tDEFAULT_RETURN_FORMAT) as ReturnFormat,\n\t) {\n\t\treturn this.getHashRate(returnFormat);\n\t}\n\n\t/**\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @returns The number of hashes per second that the node is mining with.\n\t *\n\t * ```ts\n\t * web3.eth.getHashRate().then(console.log);\n\t * > 493736n\n\t *\n\t * web3.eth.getHashRate({ number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);\n\t * > \"0x788a8\"\n\t * ```\n\t */\n\tpublic async getHashRate<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\treturnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.getHashRate(this, returnFormat);\n\t}\n\n\t/**\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @returns The gas price determined by the last few blocks median gas price.\n\t *\n\t * ```ts\n\t * web3.eth.getGasPrice().then(console.log);\n\t * > 20000000000n\n\t *\n\t * web3.eth.getGasPrice({ number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);\n\t * > \"0x4a817c800\"\n\t * ```\n\t */\n\tpublic async getGasPrice<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\treturnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.getGasPrice(this, returnFormat);\n\t}\n\n\t/**\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @returns the current maxPriorityFeePerGas per gas in wei.\n\t *\n\t * ```ts\n\t * web3.eth.getMaxPriorityFeePerGas().then(console.log);\n\t * > 20000000000n\n\t *\n\t * web3.eth.getMaxPriorityFeePerGas({ number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);\n\t * > \"0x4a817c800\"\n\t * ```\n\t */\n\tpublic async getMaxPriorityFeePerGas<\n\t\tReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT,\n\t>(returnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat) {\n\t\treturn rpcMethodsWrappers.getMaxPriorityFeePerGas(this, returnFormat);\n\t}\n\n\t/**\n\t * Calculates the current Fee Data.\n\t * If the node supports EIP-1559, then the `maxFeePerGas` and `maxPriorityFeePerGas` will be calculated.\n\t * If the node does not support EIP-1559, then the `gasPrice` will be returned and the rest are `null`s.\n\t *\n\t * @param baseFeePerGasFactor The factor to multiply the baseFeePerGas with, if the node supports EIP-1559.\n\t * @param alternativeMaxPriorityFeePerGas The alternative maxPriorityFeePerGas to use, if the node supports EIP-1559, but does not support the method `eth_maxPriorityFeePerGas`.\n\t * @returns The current fee data.\n\t *\n\t * ```ts\n\t * web3.eth.calculateFeeData().then(console.log);\n\t * > {\n\t *     gasPrice: 20000000000n,\n\t *     maxFeePerGas: 20000000000n,\n\t *     maxPriorityFeePerGas: 20000000000n,\n\t * \t   baseFeePerGas: 20000000000n\n\t * }\n\t *\n\t * web3.eth.calculateFeeData(ethUnitMap.Gwei, 2n).then(console.log);\n\t * > {\n\t *     gasPrice: 20000000000n,\n\t *     maxFeePerGas: 40000000000n,\n\t *     maxPriorityFeePerGas: 20000000000n,\n\t * \t   baseFeePerGas: 20000000000n\n\t * }\n\t * ```\n\t */\n\tpublic async calculateFeeData(\n\t\tbaseFeePerGasFactor = BigInt(2),\n\t\talternativeMaxPriorityFeePerGas = ethUnitMap.Gwei,\n\t): Promise<FeeData> {\n\t\tconst block = await this.getBlock<{ number: FMT_NUMBER.BIGINT; bytes: FMT_BYTES.HEX }>(\n\t\t\tundefined,\n\t\t\tfalse,\n\t\t);\n\n\t\tconst baseFeePerGas: bigint | undefined = block?.baseFeePerGas ?? undefined; // use undefined if it was null\n\n\t\tlet gasPrice: bigint | undefined;\n\t\ttry {\n\t\t\tgasPrice = await this.getGasPrice<{\n\t\t\t\tnumber: FMT_NUMBER.BIGINT;\n\t\t\t\tbytes: FMT_BYTES.HEX;\n\t\t\t}>();\n\t\t} catch (error) {\n\t\t\t// do nothing\n\t\t}\n\n\t\tlet maxPriorityFeePerGas: bigint | undefined;\n\t\ttry {\n\t\t\tmaxPriorityFeePerGas = await this.getMaxPriorityFeePerGas<{\n\t\t\t\tnumber: FMT_NUMBER.BIGINT;\n\t\t\t\tbytes: FMT_BYTES.HEX;\n\t\t\t}>();\n\t\t} catch (error) {\n\t\t\t// do nothing\n\t\t}\n\n\t\tlet maxFeePerGas: bigint | undefined;\n\t\t// if the `block.baseFeePerGas` is available, then EIP-1559 is supported\n\t\t// and we can calculate the `maxFeePerGas` from the `block.baseFeePerGas`\n\t\tif (baseFeePerGas) {\n\t\t\t// tip the miner with alternativeMaxPriorityFeePerGas, if no value available from getMaxPriorityFeePerGas\n\t\t\tmaxPriorityFeePerGas = maxPriorityFeePerGas ?? alternativeMaxPriorityFeePerGas;\n\t\t\t// basically maxFeePerGas = (baseFeePerGas +- 12.5%) + maxPriorityFeePerGas\n\t\t\t// and we multiply the `baseFeePerGas` by `baseFeePerGasFactor`, to allow\n\t\t\t// trying to include the transaction in the next few blocks even if the\n\t\t\t// baseFeePerGas is increasing fast\n\t\t\tmaxFeePerGas = baseFeePerGas * baseFeePerGasFactor + maxPriorityFeePerGas;\n\t\t}\n\n\t\treturn { gasPrice, maxFeePerGas, maxPriorityFeePerGas, baseFeePerGas };\n\t}\n\n\t// an alias for calculateFeeData\n\t// eslint-disable-next-line\n\tpublic getFeeData = this.calculateFeeData;\n\n\t/**\n\t * @returns A list of accounts the node controls (addresses are checksummed).\n\t *\n\t * ```ts\n\t * web3.eth.getAccounts().then(console.log);\n\t * > [\"0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe\", \"0xDCc6960376d6C6dEa93647383FfB245CfCed97Cf\"]\n\t * ```\n\t */\n\tpublic async getAccounts() {\n\t\tconst hexAddresses = (await ethRpcMethods.getAccounts(this.requestManager)) ?? [];\n\t\treturn hexAddresses.map(address => toChecksumAddress(address));\n\t}\n\n\t/**\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @returns The current block number.\n\t *\n\t * ```ts\n\t * web3.eth.getBlockNumber().then(console.log);\n\t * > 2744n\n\t *\n\t * web3.eth.getBlockNumber({ number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);\n\t * > \"0xab8\"\n\t * ```\n\t */\n\tpublic async getBlockNumber<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\treturnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.getBlockNumber(this, returnFormat);\n\t}\n\n\t/**\n\t * Get the balance of an address at a given block.\n\t *\n\t * @param address The address to get the balance of.\n\t * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) Specifies what block to use as the current state for the balance query.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @returns The current balance for the given address in `wei`.\n\t *\n\t * ```ts\n\t * web3.eth.getBalance(\"0x407d73d8a49eeb85d32cf465507dd71d507100c1\").then(console.log);\n\t * > 1000000000000n\n\t *\n\t * web3.eth.getBalance(\"0x407d73d8a49eeb85d32cf465507dd71d507100c1\").then(console.log);\n\t * > \"0xe8d4a51000\"\n\t * ```\n\t */\n\tpublic async getBalance<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\taddress: Address,\n\t\tblockNumber: BlockNumberOrTag = this.defaultBlock,\n\t\treturnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.getBalance(this, address, blockNumber, returnFormat);\n\t}\n\n\t/**\n\t * Get the storage at a specific position of an address.\n\t *\n\t * @param address The address to get the storage from.\n\t * @param storageSlot The index position of the storage.\n\t * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) Specifies what block to use as the current state for the storage query.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @returns The value in storage at the given position.\n\t *\n\t * ```ts\n\t * web3.eth.getStorageAt(\"0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234\", 0).then(console.log);\n\t * > \"0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234\"\n\t *\n\t * web3.eth.getStorageAt(\n\t *      \"0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234\",\n\t *      0,\n\t *      undefined,\n\t *      { number: FMT_NUMBER.HEX , bytes: FMT_BYTES.UINT8ARRAY }\n\t * ).then(console.log);\n\t * > Uint8Array(31) [\n\t *       3, 52,  86, 115,  33,  35, 255, 255,\n\t *       35, 66,  52,  45, 209,  35,  66,  67,\n\t *       67, 36,  35,  66,  52, 253,  35,  79,\n\t *       210, 63, 212, 242,  61,  66,  52\n\t *    ]\n\t * ```\n\t */\n\tpublic async getStorageAt<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\taddress: Address,\n\t\tstorageSlot: Numbers,\n\t\tblockNumber: BlockNumberOrTag = this.defaultBlock,\n\t\treturnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.getStorageAt(\n\t\t\tthis,\n\t\t\taddress,\n\t\t\tstorageSlot,\n\t\t\tblockNumber,\n\t\t\treturnFormat,\n\t\t);\n\t}\n\n\t/**\n\t * Get the code at a specific address.\n\t *\n\t * @param address The address to get the code from.\n\t * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) Specifies what block to use as the current state for the code query.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @returns The [data](https://ethereum.org/en/developers/docs/transactions/#the-data-field) at the provided `address`.\n\t *\n\t * ```ts\n\t * web3.eth.getCode(\"0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234\").then(console.log);\n\t * > \"0x600160008035811a818181146012578301005b601b6001356025565b8060005260206000f25b600060078202905091905056\"\n\t *\n\t * web3.eth.getCode(\n\t *      \"0x407d73d8a49eeb85d32cf465507dd71d507100c1\",\n\t *      undefined,\n\t *      { number: FMT_NUMBER.HEX , bytes: FMT_BYTES.UINT8ARRAY }\n\t * ).then(console.log);\n\t * > Uint8Array(50) [\n\t *   96,  1,  96,   0, 128, 53, 129, 26, 129, 129, 129,\n\t *   20, 96,  18,  87, 131,  1,   0, 91,  96,  27,  96,\n\t *   1, 53,  96,  37,  86, 91, 128, 96,   0,  82,  96,\n\t *   32, 96,   0, 242,  91, 96,   0, 96,   7, 130,   2,\n\t *   144, 80, 145, 144,  80, 86\n\t * ]\n\t * ```\n\t */\n\tpublic async getCode<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\taddress: Address,\n\t\tblockNumber: BlockNumberOrTag = this.defaultBlock,\n\t\treturnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.getCode(this, address, blockNumber, returnFormat);\n\t}\n\n\t/**\n\t * Retrieves a {@link Block} matching the provided block number, block hash or block tag.\n\t *\n\t * @param block The {@link BlockNumberOrTag} (defaults to {@link Web3Eth.defaultBlock}) or block hash of the desired block.\n\t * @param hydrated If specified `true`, the returned block will contain all transactions as objects. If `false` it will only contain transaction hashes.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted (does not format transaction objects or hashes).\n\t * @returns A {@link Block} object matching the provided block number or block hash.\n\t *\n\t * ```ts\n\t * web3.eth.getBlock(0).then(console.log);\n\t * > {\n\t *    hash: '0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d',\n\t *    parentHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n\t *    sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\n\t *    miner: '0x0000000000000000000000000000000000000000',\n\t *    stateRoot: '0x5ed9882897d363c4632a6e67fba6203df61bd994813dcf048da59be442a9c6c4',\n\t *    transactionsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\n\t *    receiptsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\n\t *    logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n\t *    difficulty: 1n,\n\t *    number: 0n,\n\t *    gasLimit: 30000000n,\n\t *    gasUsed: 0n,\n\t *    timestamp: 1658281638n,\n\t *    extraData: '0x',\n\t *    mixHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n\t *    nonce: 0n,\n\t *    totalDifficulty: 1n,\n\t *    baseFeePerGas: 1000000000n,\n\t *    size: 514n,\n\t *    transactions: [],\n\t *    uncles: []\n\t *  }\n\t *\n\t * web3.eth.getBlock(\n\t *      \"0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d\",\n\t *      false,\n\t *      { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\n\t * ).then(console.log);\n\t * > {\n\t *    hash: '0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d',\n\t *    parentHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n\t *    sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\n\t *    miner: '0x0000000000000000000000000000000000000000',\n\t *    stateRoot: '0x5ed9882897d363c4632a6e67fba6203df61bd994813dcf048da59be442a9c6c4',\n\t *    transactionsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\n\t *    receiptsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\n\t *    logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n\t *    difficulty: 1,\n\t *    number: 0,\n\t *    gasLimit: 30000000,\n\t *    gasUsed: 0,\n\t *    timestamp: 1658281638,\n\t *    extraData: '0x',\n\t *    mixHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n\t *    nonce: 0,\n\t *    totalDifficulty: 1,\n\t *    baseFeePerGas: 1000000000,\n\t *    size: 514,\n\t *    transactions: [],\n\t *    uncles: []\n\t *  }\n\t * ```\n\t */\n\tpublic async getBlock<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\tblock: HexString32Bytes | BlockNumberOrTag = this.defaultBlock,\n\t\thydrated = false,\n\t\treturnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.getBlock(this, block, hydrated, returnFormat);\n\t}\n\n\t/**\n\t * @param block The {@link BlockNumberOrTag} (defaults to {@link Web3Eth.defaultBlock}) or block hash of the desired block.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @returns The number of transactions in the provided block.\n\t *\n\t * ```ts\n\t * web3.eth.getBlockTransactionCount(\"0x407d73d8a49eeb85d32cf465507dd71d507100c1\").then(console.log);\n\t * > 1n\n\t *\n\t * web3.eth.getBlockTransactionCount(\n\t *     \"0x407d73d8a49eeb85d32cf465507dd71d507100c1\",\n\t *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\n\t * ).then(console.log);\n\t * > 1\n\t * ```\n\t */\n\tpublic async getBlockTransactionCount<\n\t\tReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT,\n\t>(\n\t\tblock: HexString32Bytes | BlockNumberOrTag = this.defaultBlock,\n\t\treturnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.getBlockTransactionCount(this, block, returnFormat);\n\t}\n\n\t/**\n\t * @param block The {@link BlockNumberOrTag} (defaults to {@link Web3Eth.defaultBlock}) or block hash of the desired block.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @returns The number of [uncles](https://ethereum.org/en/glossary/#ommer) in the provided block.\n\t *\n\t * ```ts\n\t * web3.eth.getBlockUncleCount(\"0x407d73d8a49eeb85d32cf465507dd71d507100c1\").then(console.log);\n\t * > 1n\n\t *\n\t * web3.eth.getBlockUncleCount(\n\t *     \"0x407d73d8a49eeb85d32cf465507dd71d507100c1\",\n\t *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\n\t * ).then(console.log);\n\t * > 1\n\t * ```\n\t */\n\tpublic async getBlockUncleCount<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\tblock: HexString32Bytes | BlockNumberOrTag = this.defaultBlock,\n\t\treturnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.getBlockUncleCount(this, block, returnFormat);\n\t}\n\n\t/**\n\t *\n\t * @param block The {@link BlockNumberOrTag} (defaults to {@link Web3Eth.defaultBlock}) or block hash of the desired block.\n\t * @param uncleIndex The index position of the uncle.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @returns A blocks [uncle](https://ethereum.org/en/glossary/#ommer) by a given uncle index position.\n\t *\n\t * ```ts\n\t * web3.eth.getUncle(0, 1).then(console.log);\n\t * > {\n\t *    hash: '0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d',\n\t *    parentHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n\t *    sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\n\t *    miner: '0x0000000000000000000000000000000000000000',\n\t *    stateRoot: '0x5ed9882897d363c4632a6e67fba6203df61bd994813dcf048da59be442a9c6c4',\n\t *    transactionsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\n\t *    receiptsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\n\t *    logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n\t *    difficulty: 1n,\n\t *    number: 0n,\n\t *    gasLimit: 30000000n,\n\t *    gasUsed: 0n,\n\t *    timestamp: 1658281638n,\n\t *    extraData: '0x',\n\t *    mixHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n\t *    nonce: 0n,\n\t *    totalDifficulty: 1n,\n\t *    baseFeePerGas: 1000000000n,\n\t *    size: 514n,\n\t *    transactions: [],\n\t *    uncles: []\n\t *  }\n\t *\n\t * web3.eth.getUncle(\n\t *      \"0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d\",\n\t *      1,\n\t *      { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\n\t * ).then(console.log);\n\t * > {\n\t *    hash: '0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d',\n\t *    parentHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n\t *    sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\n\t *    miner: '0x0000000000000000000000000000000000000000',\n\t *    stateRoot: '0x5ed9882897d363c4632a6e67fba6203df61bd994813dcf048da59be442a9c6c4',\n\t *    transactionsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\n\t *    receiptsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\n\t *    logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n\t *    difficulty: 1,\n\t *    number: 0,\n\t *    gasLimit: 30000000,\n\t *    gasUsed: 0,\n\t *    timestamp: 1658281638,\n\t *    extraData: '0x',\n\t *    mixHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n\t *    nonce: 0,\n\t *    totalDifficulty: 1,\n\t *    baseFeePerGas: 1000000000,\n\t *    size: 514,\n\t *    transactions: [],\n\t *    uncles: []\n\t *  }\n\t * ```\n\t */\n\tpublic async getUncle<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\tblock: HexString32Bytes | BlockNumberOrTag = this.defaultBlock,\n\t\tuncleIndex: Numbers,\n\t\treturnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.getUncle(this, block, uncleIndex, returnFormat);\n\t}\n\n\t/**\n\t * @param transactionHash The hash of the desired transaction.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @returns The desired transaction object.\n\t *\n\t * ```ts\n\t * web3.eth.getTransaction('0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc').then(console.log);\n\t * {\n\t *    hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',\n\t *    type: 0n,\n\t *    nonce: 0n,\n\t *    blockHash: '0x43202bd16b6bd54bea1b310736bd78bdbe93a64ad940f7586739d9eb25ad8d00',\n\t *    blockNumber: 1n,\n\t *    transactionIndex: 0n,\n\t *    from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n\t *    to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n\t *    value: 1n,\n\t *    gas: 90000n,\n\t *    gasPrice: 2000000000n,\n\t *    input: '0x',\n\t *    v: 2709n,\n\t *    r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',\n\t *    s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'\n\t *  }\n\t *\n\t * web3.eth.getTransaction(\n\t *     web3.utils.hexToBytes(\"0x30755ed65396facf86c53e6217c52b4daebe72aa4941d89635409de4c9c7f9466d4e9aaec7977f05e923889b33c0d0dd27d7226b6e6f56ce737465c5cfd04be400\"),\n\t *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\n\t * ).then(console.log);\n\t * {\n\t *    hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',\n\t *    type: 0,\n\t *    nonce: 0,\n\t *    blockHash: '0x43202bd16b6bd54bea1b310736bd78bdbe93a64ad940f7586739d9eb25ad8d00',\n\t *    blockNumber: 1,\n\t *    transactionIndex: 0,\n\t *    from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n\t *    to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n\t *    value: 1,\n\t *    gas: 90000,\n\t *    gasPrice: 2000000000,\n\t *    input: '0x',\n\t *    v: 2709,\n\t *    r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',\n\t *    s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'\n\t *  }\n\t * ```\n\t */\n\tpublic async getTransaction<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\ttransactionHash: Bytes,\n\t\treturnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat,\n\t) {\n\t\tconst response = await rpcMethodsWrappers.getTransaction(\n\t\t\tthis,\n\t\t\ttransactionHash,\n\t\t\treturnFormat,\n\t\t);\n\n\t\tif (!response) throw new TransactionNotFound();\n\n\t\treturn response;\n\t}\n\n\t/**\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @returns A list of pending transactions.\n\t *\n\t * ```ts\n\t * web3.eth.getPendingTransactions().then(console.log);\n\t * > [\n\t *      {\n\t *          hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',\n\t *          type: 0n,\n\t *          nonce: 0n,\n\t *          blockHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n\t *          blockNumber: null,\n\t *          transactionIndex: 0n,\n\t *          from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n\t *          to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n\t *          value: 1n,\n\t *          gas: 90000n,\n\t *          gasPrice: 2000000000n,\n\t *          input: '0x',\n\t *          v: 2709n,\n\t *          r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',\n\t *          s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'\n\t *      },\n\t *      {\n\t *          hash: '0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f',\n\t *          type: 0n,\n\t *          nonce: 1n,\n\t *          blockHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n\t *          blockNumber: null,\n\t *          transactionIndex: 0n,\n\t *          from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n\t *          to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n\t *          value: 1n,\n\t *          gas: 90000n,\n\t *          gasPrice: 2000000000n,\n\t *          input: '0x',\n\t *          v: 2710n,\n\t *          r: '0x55ac19fade21db035a1b7ea0a8d49e265e05dbb926e75f273f836ad67ce5c96a',\n\t *          s: '0x6550036a7c3fd426d5c3d35d96a7075cd673957620b7889846a980d2d017ec08'\n\t *      }\n\t *   ]\n\t *\n\t * * web3.eth.getPendingTransactions({ number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }).then(console.log);\n\t * > [\n\t *      {\n\t *          hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',\n\t *          type: 0,\n\t *          nonce: 0,\n\t *          blockHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n\t *          blockNumber: null,\n\t *          transactionIndex: 0,\n\t *          from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n\t *          to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n\t *          value: 1,\n\t *          gas: 90000,\n\t *          gasPrice: 2000000000,\n\t *          input: '0x',\n\t *          v: 2709,\n\t *          r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',\n\t *          s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'\n\t *      },\n\t *      {\n\t *          hash: '0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f',\n\t *          type: 0,\n\t *          nonce: 1,\n\t *          blockHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n\t *          blockNumber: null,\n\t *          transactionIndex: 0,\n\t *          from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n\t *          to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n\t *          value: 1,\n\t *          gas: 90000,\n\t *          gasPrice: 2000000000,\n\t *          input: '0x',\n\t *          v: 2710,\n\t *          r: '0x55ac19fade21db035a1b7ea0a8d49e265e05dbb926e75f273f836ad67ce5c96a',\n\t *          s: '0x6550036a7c3fd426d5c3d35d96a7075cd673957620b7889846a980d2d017ec08'\n\t *      }\n\t *   ]\n\t * ```\n\t */\n\tpublic async getPendingTransactions<\n\t\tReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT,\n\t>(returnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat) {\n\t\treturn rpcMethodsWrappers.getPendingTransactions(this, returnFormat);\n\t}\n\n\t/**\n\t * @param block The {@link BlockNumberOrTag} (defaults to {@link Web3Eth.defaultBlock}) or block hash of the desired block.\n\t * @param transactionIndex The index position of the transaction.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @returns The desired transaction object.\n\t *\n\t * ```ts\n\t * web3.eth.getTransactionFromBlock('0x43202bd16b6bd54bea1b310736bd78bdbe93a64ad940f7586739d9eb25ad8d00', 0).then(console.log);\n\t * {\n\t *    hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',\n\t *    type: 0n,\n\t *    nonce: 0n,\n\t *    blockHash: '0x43202bd16b6bd54bea1b310736bd78bdbe93a64ad940f7586739d9eb25ad8d00',\n\t *    blockNumber: 1n,\n\t *    transactionIndex: 0n,\n\t *    from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n\t *    to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n\t *    value: 1n,\n\t *    gas: 90000n,\n\t *    gasPrice: 2000000000n,\n\t *    input: '0x',\n\t *    v: 2709n,\n\t *    r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',\n\t *    s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'\n\t *  }\n\t *\n\t * web3.eth.getTransactionFromBlock(\n\t *     hexToBytes(\"0x30755ed65396facf86c53e6217c52b4daebe72aa4941d89635409de4c9c7f9466d4e9aaec7977f05e923889b33c0d0dd27d7226b6e6f56ce737465c5cfd04be400\"),\n\t *     0,\n\t *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\n\t * ).then(console.log);\n\t * {\n\t *    hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',\n\t *    type: 0,\n\t *    nonce: 0,\n\t *    blockHash: '0x43202bd16b6bd54bea1b310736bd78bdbe93a64ad940f7586739d9eb25ad8d00',\n\t *    blockNumber: 1,\n\t *    transactionIndex: 0,\n\t *    from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n\t *    to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n\t *    value: 1,\n\t *    gas: 90000,\n\t *    gasPrice: 2000000000,\n\t *    input: '0x',\n\t *    v: 2709,\n\t *    r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',\n\t *    s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'\n\t *  }\n\t * ```\n\t */\n\tpublic async getTransactionFromBlock<\n\t\tReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT,\n\t>(\n\t\tblock: HexString32Bytes | BlockNumberOrTag = this.defaultBlock,\n\t\ttransactionIndex: Numbers,\n\t\treturnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.getTransactionFromBlock(\n\t\t\tthis,\n\t\t\tblock,\n\t\t\ttransactionIndex,\n\t\t\treturnFormat,\n\t\t);\n\t}\n\n\t/**\n\t * @param transactionHash Hash of the transaction to retrieve the receipt for.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @returns The desired {@link TransactionReceipt} object.\n\t *\n\t * ```ts\n\t * web3.eth.getTransactionReceipt(\"0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f\").then(console.log);\n\t * > {\n\t *      transactionHash: '0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f',\n\t *      transactionIndex: 0n,\n\t *      blockNumber: 2n,\n\t *      blockHash: '0xeb1565a08b23429552dafa92e32409f42eb43944f7611963c63ce40e7243941a',\n\t *      from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n\t *      to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n\t *      cumulativeGasUsed: 21000n,\n\t *      gasUsed: 21000n,\n\t *      logs: [],\n\t *      logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n\t *      status: 1n,\n\t *      effectiveGasPrice: 2000000000n,\n\t *      type: 0n\n\t *  }\n\t *\n\t * web3.eth.getTransactionReceipt(\n\t *      \"0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f\",\n\t *      { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\n\t * ).then(console.log);\n\t * > {\n\t *      transactionHash: '0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f',\n\t *      transactionIndex: 0,\n\t *      blockNumber: 2,\n\t *      blockHash: '0xeb1565a08b23429552dafa92e32409f42eb43944f7611963c63ce40e7243941a',\n\t *      from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n\t *      to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n\t *      cumulativeGasUsed: 21000,\n\t *      gasUsed: 21000,\n\t *      logs: [],\n\t *      logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n\t *      status: 1,\n\t *      effectiveGasPrice: 2000000000,\n\t *      type: 0n\n\t *  }\n\t * ```\n\t */\n\tpublic async getTransactionReceipt<\n\t\tReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT,\n\t>(\n\t\ttransactionHash: Bytes,\n\t\treturnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat,\n\t) {\n\t\tconst response = await rpcMethodsWrappers.getTransactionReceipt(\n\t\t\tthis,\n\t\t\ttransactionHash,\n\t\t\treturnFormat,\n\t\t);\n\n\t\tif (!response) throw new TransactionNotFound();\n\n\t\treturn response;\n\t}\n\n\t/**\n\t * @param address The address to get the number of transactions for.\n\t * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) Specifies what block to use as the current state for the query.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @returns The number of transactions sent from the provided address.\n\t *\n\t * ```ts\n\t * web3.eth.getTransactionCount(\"0x407d73d8a49eeb85d32cf465507dd71d507100c1\").then(console.log);\n\t * > 1n\n\t *\n\t * web3.eth.getTransactionCount(\n\t *     \"0x407d73d8a49eeb85d32cf465507dd71d507100c1\",\n\t *     undefined,\n\t *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\n\t * ).then(console.log);\n\t * > 1\n\t * ```\n\t */\n\tpublic async getTransactionCount<\n\t\tReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT,\n\t>(\n\t\taddress: Address,\n\t\tblockNumber: BlockNumberOrTag = this.defaultBlock,\n\t\treturnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.getTransactionCount(this, address, blockNumber, returnFormat);\n\t}\n\n\t/**\n\t * @param transaction The {@link Transaction}, {@link TransactionWithFromLocalWalletIndex}, {@link TransactionWithToLocalWalletIndex} or {@link TransactionWithFromAndToLocalWalletIndex} to send. __Note:__ In the `to` and `from` fields when hex strings are used, it is assumed they are addresses, for any other form (number, string number, etc.) it is assumed they are wallet indexes.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @param options A configuration object used to change the behavior of the `sendTransaction` method.\n\t * @returns If `await`ed or `.then`d (i.e. the promise resolves), the transaction hash is returned.\n\t * ```ts\n\t * const transaction = {\n\t *   from: '0x6E599DA0bfF7A6598AC1224E4985430Bf16458a4',\n\t *   to: '0x6f1DF96865D09d21e8f3f9a7fbA3b17A11c7C53C',\n\t *   value: '0x1'\n\t * }\n\t *\n\t * const transactionHash = await web3.eth.sendTransaction(transaction);\n\t * console.log(transactionHash);\n\t * > 0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f\n\t *\n\t * web3.eth.sendTransaction(transaction).then(console.log);\n\t * > 0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f\n\t *\n\t * web3.eth.sendTransaction(transaction).catch(console.log);\n\t * > <Some TransactionError>\n\t *\n\t * // Example using options.ignoreGasPricing = true\n\t * web3.eth.sendTransaction(transaction, undefined, { ignoreGasPricing: true }).then(console.log);\n\t * > 0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f\n\t * ```\n\t *\n\t *\n\t * Otherwise, a {@link Web3PromiEvent} is returned which has several events than can be listened to using the `.on` syntax, such as:\n\t * - `sending`\n\t * ```ts\n\t * web3.eth.sendTransaction(transaction).on('sending', transactionToBeSent => console.log(transactionToBeSent));\n\t * > {\n\t *    from: '0x6E599DA0bfF7A6598AC1224E4985430Bf16458a4',\n\t *    to: '0x6f1DF96865D09d21e8f3f9a7fbA3b17A11c7C53C',\n\t *    value: '0x1',\n\t *    gasPrice: '0x77359400',\n\t *    maxPriorityFeePerGas: undefined,\n\t *    maxFeePerGas: undefined\n\t * }\n\t * ```\n\t * - `sent`\n\t * ```ts\n\t * web3.eth.sendTransaction(transaction).on('sent', sentTransaction => console.log(sentTransaction));\n\t * > {\n\t *    from: '0x6E599DA0bfF7A6598AC1224E4985430Bf16458a4',\n\t *    to: '0x6f1DF96865D09d21e8f3f9a7fbA3b17A11c7C53C',\n\t *    value: '0x1',\n\t *    gasPrice: '0x77359400',\n\t *    maxPriorityFeePerGas: undefined,\n\t *    maxFeePerGas: undefined\n\t * }\n\t * ```\n\t * - `transactionHash`\n\t * ```ts\n\t * web3.eth.sendTransaction(transaction).on('transactionHash', transactionHash => console.log(transactionHash));\n\t * > 0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f\n\t * ```\n\t * - `receipt`\n\t * ```ts\n\t * web3.eth.sendTransaction(transaction).on('receipt', receipt => console.log(receipt));\n\t * > {\n\t *      transactionHash: '0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f',\n\t *      transactionIndex: 0n,\n\t *      blockNumber: 2n,\n\t *      blockHash: '0xeb1565a08b23429552dafa92e32409f42eb43944f7611963c63ce40e7243941a',\n\t *      from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n\t *      to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n\t *      cumulativeGasUsed: 21000n,\n\t *      gasUsed: 21000n,\n\t *      logs: [],\n\t *      logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n\t *      status: 1n,\n\t *      effectiveGasPrice: 2000000000n,\n\t *      type: 0n\n\t * }\n\t * ```\n\t * - `confirmation`\n\t * ```ts\n\t * web3.eth.sendTransaction(transaction).on('confirmation', confirmation => console.log(confirmation));\n\t * > {\n\t *     confirmations: 1n,\n\t *     receipt: {\n\t *         transactionHash: '0xb4a3a35ae0f3e77ef0ff7be42010d948d011b21a4e341072ee18717b67e99ab8',\n\t *         transactionIndex: 0n,\n\t *         blockNumber: 5n,\n\t *         blockHash: '0xb57fbe6f145cefd86a305a9a024a4351d15d4d39607d7af53d69a319bc3b5548',\n\t *         from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n\t *         to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n\t *         cumulativeGasUsed: 21000n,\n\t *         gasUsed: 21000n,\n\t *         logs: [],\n\t *         logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n\t *         status: 1n,\n\t *         effectiveGasPrice: 2000000000n,\n\t *         type: 0n\n\t *     },\n\t *     latestBlockHash: '0xb57fbe6f145cefd86a305a9a024a4351d15d4d39607d7af53d69a319bc3b5548'\n\t * }\n\t * ```\n\t * - `error`\n\t * ```ts\n\t * web3.eth.sendTransaction(transaction).on('error', error => console.log);\n\t * > <Some TransactionError>\n\t * ```\n\t */\n\tpublic sendTransaction<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\ttransaction:\n\t\t\t| Transaction\n\t\t\t| TransactionWithFromLocalWalletIndex\n\t\t\t| TransactionWithToLocalWalletIndex\n\t\t\t| TransactionWithFromAndToLocalWalletIndex,\n\t\treturnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat,\n\t\toptions?: SendTransactionOptions,\n\t) {\n\t\treturn rpcMethodsWrappers.sendTransaction(this, transaction, returnFormat, options);\n\t}\n\n\t/**\n\t * @param transaction Signed transaction in one of the valid {@link Bytes} format.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @param options A configuration object used to change the behavior of the method\n\t * @returns If `await`ed or `.then`d (i.e. the promise resolves), the transaction hash is returned.\n\t * ```ts\n\t * const signedTransaction = \"0xf86580843b9aca0182520894e899f0130fd099c0b896b2ce4e5e15a25b23139a0180820a95a03a42d53ca5b71f845e1cd4c65359b05446a85d16881372d3bfaab8980935cb04a0711497bc8dd3b541152e2fed14fe650a647f1f0edab0d386ad9506f0e642410f\"\n\t *\n\t * const transactionHash = await web3.eth.sendSignedTransaction(signedTransaction);\n\t * console.log(transactionHash);\n\t * > 0xed8c241ea44d57f4605dc22c63500de46254d6c7844fd65fa438b128c80cf700\n\t *\n\t * web3.eth.sendSignedTransaction(signedTransaction).then(console.log);\n\t * > 0xed8c241ea44d57f4605dc22c63500de46254d6c7844fd65fa438b128c80cf700\n\t *\n\t * web3.eth.sendSignedTransaction(signedTransaction).catch(console.log);\n\t * > <Some TransactionError>\n\t * ```\n\t *\n\t *\n\t * Otherwise, a {@link Web3PromiEvent} is returned which has several events than can be listened to using the `.on` syntax, such as:\n\t * - `sending`\n\t * ```ts\n\t * web3.eth.sendSignedTransaction(signedTransaction).on('sending', transactionToBeSent => console.log(transactionToBeSent));\n\t * > \"0xf86580843b9aca0182520894e899f0130fd099c0b896b2ce4e5e15a25b23139a0180820a95a03a42d53ca5b71f845e1cd4c65359b05446a85d16881372d3bfaab8980935cb04a0711497bc8dd3b541152e2fed14fe650a647f1f0edab0d386ad9506f0e642410f\"\n\t * ```\n\t * - `sent`\n\t * ```ts\n\t * web3.eth.sendSignedTransaction(signedTransaction).on('sent', sentTransaction => console.log(sentTransaction));\n\t * > \"0xf86580843b9aca0182520894e899f0130fd099c0b896b2ce4e5e15a25b23139a0180820a95a03a42d53ca5b71f845e1cd4c65359b05446a85d16881372d3bfaab8980935cb04a0711497bc8dd3b541152e2fed14fe650a647f1f0edab0d386ad9506f0e642410f\"\n\t * ```\n\t * - `transactionHash`\n\t * ```ts\n\t * web3.eth.sendSignedTransaction(signedTransaction).on('transactionHash', transactionHash => console.log(transactionHash));\n\t * > 0xed8c241ea44d57f4605dc22c63500de46254d6c7844fd65fa438b128c80cf700\n\t * ```\n\t * - `receipt`\n\t * ```ts\n\t * web3.eth.sendSignedTransaction(signedTransaction).on('receipt', receipt => console.log(receipt));\n\t * > {\n\t *      blockHash: '0xff2b1687995d81066361bc6affe4455746120a7d4bb75fc938211a2692a50081',\n\t *      blockNumber: 1n,\n\t *      cumulativeGasUsed: 21000n,\n\t *      effectiveGasPrice: 1000000001n,\n\t *      from: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',\n\t *      gasUsed: 21000n,\n\t *      logs: [],\n\t *      logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n\t *      status: 1n,\n\t *      to: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',\n\t *      transactionHash: '0xed8c241ea44d57f4605dc22c63500de46254d6c7844fd65fa438b128c80cf700',\n\t *      transactionIndex: 0n,\n\t *      type: 0n\n\t * }\n\t * ```\n\t * - `confirmation`\n\t * ```ts\n\t * web3.eth.sendSignedTransaction(signedTransaction).on('confirmation', confirmation => console.log(confirmation));\n\t * > {\n\t *     confirmations: 1n,\n\t *     receipt: {\n\t *          blockHash: '0xff2b1687995d81066361bc6affe4455746120a7d4bb75fc938211a2692a50081',\n\t *          blockNumber: 1n,\n\t *          cumulativeGasUsed: 21000n,\n\t *          effectiveGasPrice: 1000000001n,\n\t *          from: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',\n\t *          gasUsed: 21000n,\n\t *          logs: [],\n\t *          logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n\t *          status: 1n,\n\t *          to: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',\n\t *          transactionHash: '0xed8c241ea44d57f4605dc22c63500de46254d6c7844fd65fa438b128c80cf700',\n\t *          transactionIndex: 0n,\n\t *          type: 0n\n\t *     },\n\t *     latestBlockHash: '0xff2b1687995d81066361bc6affe4455746120a7d4bb75fc938211a2692a50081'\n\t * }\n\t * ```\n\t * - `error`\n\t * ```ts\n\t * web3.eth.sendSignedTransaction(signedTransaction).on('error', error => console.log(error));\n\t * > <Some TransactionError>\n\t * ```\n\t */\n\tpublic sendSignedTransaction<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\ttransaction: Bytes,\n\t\treturnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat,\n\t\toptions?: SendTransactionOptions,\n\t) {\n\t\treturn rpcMethodsWrappers.sendSignedTransaction(this, transaction, returnFormat, options);\n\t}\n\n\t/**\n\t * @param message Data to sign in one of the valid {@link Bytes} format.\n\t * @param address Address to sign data with, can be an address or the index of a local wallet.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @returns The signed `message`.\n\t *\n\t * ```ts\n\t * // Using an unlocked account managed by connected RPC client\n\t * web3.eth.sign(\"0x48656c6c6f20776f726c64\", \"0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe\").then(console.log);\n\t * > \"0x30755ed65396facf86c53e6217c52b4daebe72aa4941d89635409de4c9c7f9466d4e9aaec7977f05e923889b33c0d0dd27d7226b6e6f56ce737465c5cfd04be400\"\n\t *\n\t * // Using an unlocked account managed by connected RPC client\n\t * web3.eth.sign(\"0x48656c6c6f20776f726c64\", \"0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe\", { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.UINT8ARRAY }).then(console.log);\n\t * > Uint8Array(65) [\n\t *    48, 117,  94, 214,  83, 150, 250, 207, 134, 197,  62,\n\t *    98,  23, 197,  43,  77, 174, 190, 114, 170,  73,  65,\n\t *   216, 150,  53,  64, 157, 228, 201, 199, 249,  70, 109,\n\t *    78, 154, 174, 199, 151, 127,   5, 233,  35, 136, 155,\n\t *    51, 192, 208, 221,  39, 215,  34, 107, 110, 111,  86,\n\t *   206, 115, 116, 101, 197, 207, 208,  75, 228,   0\n\t * ]\n\t * ```\n\t *\n\t * // Using an indexed account managed by local Web3 wallet\n\t * web3.eth.sign(\"0x48656c6c6f20776f726c64\", 0).then(console.log);\n\t * > \"0x30755ed65396facf86c53e6217c52b4daebe72aa4941d89635409de4c9c7f9466d4e9aaec7977f05e923889b33c0d0dd27d7226b6e6f56ce737465c5cfd04be400\"\n\t */\n\tpublic async sign<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\tmessage: Bytes,\n\t\taddressOrIndex: Address | number,\n\t\treturnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.sign(this, message, addressOrIndex, returnFormat);\n\t}\n\n\t/**\n\t * @param transaction The transaction object to sign.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @returns {@link SignedTransactionInfoAPI}, an object containing the [RLP](https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/#top) encoded signed transaction (accessed via the `raw` property) and the signed transaction object (accessed via the `tx` property).\n\t *\n\t * ```ts\n\t * const transaction = {\n\t *      from: '0xe899f0130FD099c0b896B2cE4E5E15A25b23139a',\n\t *      to: '0xe899f0130FD099c0b896B2cE4E5E15A25b23139a',\n\t *      value: '0x1',\n\t *      gas: '21000',\n\t *      gasPrice: await web3Eth.getGasPrice(),\n\t *      nonce: '0x1',\n\t *      type: '0x0'\n\t * }\n\t *\n\t * web3.eth.signTransaction(transaction).then(console.log);\n\t * > {\n\t *   raw: '0xf86501843b9aca0182520894e899f0130fd099c0b896b2ce4e5e15a25b23139a0180820a96a0adb3468dbb4dce89fe1785ea9182e85fb56b399b378f82b93af7a8a12a4f9679a027d37d736e9bcf00121f78b2d10e4404fa5c45856d62b746574345f5cd278097',\n\t *   tx: {\n\t *      type: 0n,\n\t *      nonce: 1n,\n\t *      gasPrice: 1000000001n,\n\t *      gas: 21000n,\n\t *      value: 1n,\n\t *      v: 2710n,\n\t *      r: '0xadb3468dbb4dce89fe1785ea9182e85fb56b399b378f82b93af7a8a12a4f9679',\n\t *      s: '0x27d37d736e9bcf00121f78b2d10e4404fa5c45856d62b746574345f5cd278097',\n\t *      to: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',\n\t *      data: '0x'\n\t *   }\n\t * }\n\t *\n\t * web3.eth.signTransaction(transaction, { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }).then(console.log);\n\t * > {\n\t *   raw: '0xf86501843b9aca0182520894e899f0130fd099c0b896b2ce4e5e15a25b23139a0180820a96a0adb3468dbb4dce89fe1785ea9182e85fb56b399b378f82b93af7a8a12a4f9679a027d37d736e9bcf00121f78b2d10e4404fa5c45856d62b746574345f5cd278097',\n\t *   tx: {\n\t *      type: 0,\n\t *      nonce: 1,\n\t *      gasPrice: 1000000001,\n\t *      gas: 21000,\n\t *      value: 1,\n\t *      v: 2710,\n\t *      r: '0xadb3468dbb4dce89fe1785ea9182e85fb56b399b378f82b93af7a8a12a4f9679',\n\t *      s: '0x27d37d736e9bcf00121f78b2d10e4404fa5c45856d62b746574345f5cd278097',\n\t *      to: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',\n\t *      data: '0x'\n\t *   }\n\t * }\n\t * ```\n\t */\n\tpublic async signTransaction<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\ttransaction: Transaction,\n\t\treturnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.signTransaction(this, transaction, returnFormat);\n\t}\n\n\t// TODO Decide what to do with transaction.to\n\t// https://github.com/ChainSafe/web3.js/pull/4525#issuecomment-982330076\n\t/**\n\t * Executes a message call within the EVM without creating a transaction.\n\t * It does not publish anything to the blockchain and does not consume any gas.\n\t *\n\t * @param transaction - A transaction object where all properties are optional except `to`, however it's recommended to include the `from` property or it may default to `0x0000000000000000000000000000000000000000` depending on your node or provider.\n\t * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) - Specifies what block to use as the current state of the blockchain while processing the transaction.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.\n\t * @returns The returned data of the call, e.g. a smart contract function's return value.\n\t */\n\tpublic async call<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\ttransaction: TransactionCall,\n\t\tblockNumber: BlockNumberOrTag = this.defaultBlock,\n\t\treturnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.call(this, transaction, blockNumber, returnFormat);\n\t}\n\n\t/**\n\t * Simulates the transaction within the EVM to estimate the amount of gas to be used by the transaction.\n\t * The transaction will not be added to the blockchain, and actual gas usage can vary when interacting\n\t * with a contract as a result of updating the contract's state.\n\t *\n\t * @param transaction The {@link Transaction} object to estimate the gas for.\n\t * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) - Specifies what block to use as the current state of the blockchain while processing the gas estimation.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.\n\t * @returns The used gas for the simulated transaction execution.\n\t *\n\t * ```ts\n\t * const transaction = {\n\t *       from: '0xe899f0130FD099c0b896B2cE4E5E15A25b23139a',\n\t *       to: '0xe899f0130FD099c0b896B2cE4E5E15A25b23139a',\n\t *       value: '0x1',\n\t *       nonce: '0x1',\n\t *       type: '0x0'\n\t * }\n\t *\n\t * web3.eth.estimateGas(transaction).then(console.log);\n\t * > 21000n\n\t *\n\t * web3.eth.estimateGas(transaction, { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }).then(console.log);\n\t * > 21000\n\t * ```\n\t */\n\tpublic async estimateGas<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\ttransaction: Transaction,\n\t\tblockNumber: BlockNumberOrTag = this.defaultBlock,\n\t\treturnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.estimateGas(this, transaction, blockNumber, returnFormat);\n\t}\n\n\t/**\n\t * Gets past logs, matching the provided `filter`.\n\t *\n\t * @param filter A {@link Filter} object containing the properties for the desired logs.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.\n\t * @returns {@link FilterResultsAPI}, an array of {@link Log} objects.\n\t *\n\t * ```ts\n\t * web3.eth.getPastLogs({\n\t *      address: \"0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe\",\n\t *      topics: [\"0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234\"]\n\t *  }).then(console.log);\n\t * > [{\n\t *       data: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\n\t *       topics: ['0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7', '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385']\n\t *       logIndex: 0n,\n\t *       transactionIndex: 0n,\n\t *       transactionHash: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\n\t *       blockHash: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',\n\t *       blockNumber: 1234n,\n\t *       address: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'\n\t *   },\n\t *   {...}]\n\t *\n\t * web3.eth.getPastLogs(\n\t *     {\n\t *       address: \"0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe\",\n\t *       topics: [\"0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234\"]\n\t *     },\n\t *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\n\t * ).then(console.log);\n\t * > [{\n\t *       data: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\n\t *       topics: ['0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7', '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385']\n\t *       logIndex: 0,\n\t *       transactionIndex: 0,\n\t *       transactionHash: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\n\t *       blockHash: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',\n\t *       blockNumber: 1234,\n\t *       address: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'\n\t *   },\n\t *   {...}]\n\t * ```\n\t */\n\tpublic async getPastLogs<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\tfilter: Filter,\n\t\treturnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.getLogs(this, filter, returnFormat);\n\t}\n\n\t/**\n\t * Gets work for miners to mine on. Returns the hash of the current block, the seedHash, and the boundary condition to be met ('target').\n\t *\n\t * @returns The mining work as an array of strings with the following structure:\n\t *\n\t * String 32 Bytes - at index 0: current block header pow-hash\n\t * String 32 Bytes - at index 1: the seed hash used for the DAG.\n\t * String 32 Bytes - at index 2: the boundary condition ('target'), 2^256 / difficulty.\n\t *\n\t * ```ts\n\t * web3.eth.getWork().then(console.log);\n\t * > [\n\t *     \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\",\n\t *     \"0x5EED00000000000000000000000000005EED0000000000000000000000000000\",\n\t *     \"0xd1ff1c01710000000000000000000000d1ff1c01710000000000000000000000\"\n\t * ]\n\t * ```\n\t */\n\tpublic async getWork() {\n\t\treturn ethRpcMethods.getWork(this.requestManager);\n\t}\n\n\t/**\n\t * Used for submitting a proof-of-work solution.\n\t *\n\t * @param nonce The nonce found (8 bytes).\n\t * @param hash  The header’s pow-hash (32 bytes).\n\t * @param digest The mix digest (32 bytes).\n\t * @returns Returns `true` if the provided solution is valid, otherwise `false`.\n\t *\n\t * ```ts\n\t * web3.eth.submitWork([\n\t *     \"0x0000000000000001\",\n\t *     \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\",\n\t *     \"0xD1FE5700000000000000000000000000D1FE5700000000000000000000000000\"\n\t * ]).then(console.log);\n\t * > true\n\t * ```\n\t */\n\tpublic async submitWork(\n\t\tnonce: HexString8Bytes,\n\t\thash: HexString32Bytes,\n\t\tdigest: HexString32Bytes,\n\t) {\n\t\treturn ethRpcMethods.submitWork(this.requestManager, nonce, hash, digest);\n\t}\n\n\t// TODO - Format addresses\n\t/**\n\t * This method will request/enable the accounts from the current environment and for supporting [EIP 1102](https://eips.ethereum.org/EIPS/eip-1102)\n\t * This method will only work if you’re using the injected provider from a application like Metamask, Status or TrustWallet.\n\t * It doesn’t work if you’re connected to a node with a default Web3.js provider (WebsocketProvider, HttpProvider and IpcProvider).\n\t * For more information about the behavior of this method please read [EIP-1102](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1102.md): Opt-in account exposure.\n\t *\n\t * @returns An array of enabled accounts.\n\t *\n\t * ```ts\n\t * web3.eth.requestAccounts().then(console.log);\n\t * > ['0aae0B295369a9FD31d5F28D9Ec85E40f4cb692BAf', '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe']\n\t * ```\n\t */\n\tpublic async requestAccounts() {\n\t\treturn ethRpcMethods.requestAccounts(this.requestManager);\n\t}\n\n\t/**\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.\n\t * @returns The chain ID of the current connected node as described in the [EIP-695](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-695.md).\n\t *\n\t * ```ts\n\t * web3.eth.getChainId().then(console.log);\n\t * > 61n\n\t *\n\t * web3.eth.getChainId({ number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }).then(console.log);\n\t * > 61\n\t * ```\n\t */\n\tpublic async getChainId<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\treturnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.getChainId(this, returnFormat);\n\t}\n\n\t/**\n\t * @returns The current client version.\n\t *\n\t * ```ts\n\t * web3.eth.getNodeInfo().then(console.log);\n\t * > \"Mist/v0.9.3/darwin/go1.4.1\"\n\t * ```\n\t */\n\tpublic async getNodeInfo() {\n\t\treturn ethRpcMethods.getNodeInfo(this.requestManager);\n\t}\n\n\t/**\n\t * @param address The Address of the account or contract.\n\t * @param storageKeys Array of storage-keys which should be proofed and included. See {@link web3.getStorageAt}.\n\t * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) - Specifies what block to use as the current state of the blockchain while processing the gas estimation.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.\n\t * @returns The account and storage-values of the specified account including the Merkle-proof as described in [EIP-1186](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1186.md).\n\t *\n\t * ```ts\n\t * web3.eth.getProof(\n\t *     \"0x1234567890123456789012345678901234567890\",\n\t *     [\"0x0000000000000000000000000000000000000000000000000000000000000000\",\"0x0000000000000000000000000000000000000000000000000000000000000001\"],\n\t *     \"latest\"\n\t * ).then(console.log);\n\t * > {\n\t *     \"address\": \"0x1234567890123456789012345678901234567890\",\n\t *     \"accountProof\": [\n\t *         \"0xf90211a090dcaf88c40c7bbc95a912cbdde67c175767b31173df9ee4b0d733bfdd511c43a0babe369f6b12092f49181ae04ca173fb68d1a5456f18d20fa32cba73954052bda0473ecf8a7e36a829e75039a3b055e51b8332cbf03324ab4af2066bbd6fbf0021a0bbda34753d7aa6c38e603f360244e8f59611921d9e1f128372fec0d586d4f9e0a04e44caecff45c9891f74f6a2156735886eedf6f1a733628ebc802ec79d844648a0a5f3f2f7542148c973977c8a1e154c4300fec92f755f7846f1b734d3ab1d90e7a0e823850f50bf72baae9d1733a36a444ab65d0a6faaba404f0583ce0ca4dad92da0f7a00cbe7d4b30b11faea3ae61b7f1f2b315b61d9f6bd68bfe587ad0eeceb721a07117ef9fc932f1a88e908eaead8565c19b5645dc9e5b1b6e841c5edbdfd71681a069eb2de283f32c11f859d7bcf93da23990d3e662935ed4d6b39ce3673ec84472a0203d26456312bbc4da5cd293b75b840fc5045e493d6f904d180823ec22bfed8ea09287b5c21f2254af4e64fca76acc5cd87399c7f1ede818db4326c98ce2dc2208a06fc2d754e304c48ce6a517753c62b1a9c1d5925b89707486d7fc08919e0a94eca07b1c54f15e299bd58bdfef9741538c7828b5d7d11a489f9c20d052b3471df475a051f9dd3739a927c89e357580a4c97b40234aa01ed3d5e0390dc982a7975880a0a089d613f26159af43616fd9455bb461f4869bfede26f2130835ed067a8b967bfb80\",\n\t *         \"0xf90211a0395d87a95873cd98c21cf1df9421af03f7247880a2554e20738eec2c7507a494a0bcf6546339a1e7e14eb8fb572a968d217d2a0d1f3bc4257b22ef5333e9e4433ca012ae12498af8b2752c99efce07f3feef8ec910493be749acd63822c3558e6671a0dbf51303afdc36fc0c2d68a9bb05dab4f4917e7531e4a37ab0a153472d1b86e2a0ae90b50f067d9a2244e3d975233c0a0558c39ee152969f6678790abf773a9621a01d65cd682cc1be7c5e38d8da5c942e0a73eeaef10f387340a40a106699d494c3a06163b53d956c55544390c13634ea9aa75309f4fd866f312586942daf0f60fb37a058a52c1e858b1382a8893eb9c1f111f266eb9e21e6137aff0dddea243a567000a037b4b100761e02de63ea5f1fcfcf43e81a372dafb4419d126342136d329b7a7ba032472415864b08f808ba4374092003c8d7c40a9f7f9fe9cc8291f62538e1cc14a074e238ff5ec96b810364515551344100138916594d6af966170ff326a092fab0a0d31ac4eef14a79845200a496662e92186ca8b55e29ed0f9f59dbc6b521b116fea090607784fe738458b63c1942bba7c0321ae77e18df4961b2bc66727ea996464ea078f757653c1b63f72aff3dcc3f2a2e4c8cb4a9d36d1117c742833c84e20de994a0f78407de07f4b4cb4f899dfb95eedeb4049aeb5fc1635d65cf2f2f4dfd25d1d7a0862037513ba9d45354dd3e36264aceb2b862ac79d2050f14c95657e43a51b85c80\",\n\t *         \"0xf90171a04ad705ea7bf04339fa36b124fa221379bd5a38ffe9a6112cb2d94be3a437b879a08e45b5f72e8149c01efcb71429841d6a8879d4bbe27335604a5bff8dfdf85dcea00313d9b2f7c03733d6549ea3b810e5262ed844ea12f70993d87d3e0f04e3979ea0b59e3cdd6750fa8b15164612a5cb6567cdfb386d4e0137fccee5f35ab55d0efda0fe6db56e42f2057a071c980a778d9a0b61038f269dd74a0e90155b3f40f14364a08538587f2378a0849f9608942cf481da4120c360f8391bbcc225d811823c6432a026eac94e755534e16f9552e73025d6d9c30d1d7682a4cb5bd7741ddabfd48c50a041557da9a74ca68da793e743e81e2029b2835e1cc16e9e25bd0c1e89d4ccad6980a041dda0a40a21ade3a20fcd1a4abb2a42b74e9a32b02424ff8db4ea708a5e0fb9a09aaf8326a51f613607a8685f57458329b41e938bb761131a5747e066b81a0a16808080a022e6cef138e16d2272ef58434ddf49260dc1de1f8ad6dfca3da5d2a92aaaadc58080\",\n\t *         \"0xf851808080a009833150c367df138f1538689984b8a84fc55692d3d41fe4d1e5720ff5483a6980808080808080808080a0a319c1c415b271afc0adcb664e67738d103ac168e0bc0b7bd2da7966165cb9518080\"\n\t *     ],\n\t *     \"balance\": 0n,\n\t *     \"codeHash\": \"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\",\n\t *     \"nonce\": 0n,\n\t *     \"storageHash\": \"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\",\n\t *     \"storageProof\": [\n\t *         {\n\t *             \"key\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n\t *             \"value\": 0n,\n\t *             \"proof\": []\n\t *         },\n\t *         {\n\t *             \"key\": \"0x0000000000000000000000000000000000000000000000000000000000000001\",\n\t *             \"value\": 0n,\n\t *             \"proof\": []\n\t *         }\n\t *     ]\n\t * }\n\t *\n\t * web3.eth.getProof(\n\t *     \"0x1234567890123456789012345678901234567890\",\n\t *     [\"0x0000000000000000000000000000000000000000000000000000000000000000\",\"0x0000000000000000000000000000000000000000000000000000000000000001\"],\n\t *     undefined,\n\t *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\n\t * ).then(console.log);\n\t * > {\n\t *     \"address\": \"0x1234567890123456789012345678901234567890\",\n\t *     \"accountProof\": [\n\t *         \"0xf90211a090dcaf88c40c7bbc95a912cbdde67c175767b31173df9ee4b0d733bfdd511c43a0babe369f6b12092f49181ae04ca173fb68d1a5456f18d20fa32cba73954052bda0473ecf8a7e36a829e75039a3b055e51b8332cbf03324ab4af2066bbd6fbf0021a0bbda34753d7aa6c38e603f360244e8f59611921d9e1f128372fec0d586d4f9e0a04e44caecff45c9891f74f6a2156735886eedf6f1a733628ebc802ec79d844648a0a5f3f2f7542148c973977c8a1e154c4300fec92f755f7846f1b734d3ab1d90e7a0e823850f50bf72baae9d1733a36a444ab65d0a6faaba404f0583ce0ca4dad92da0f7a00cbe7d4b30b11faea3ae61b7f1f2b315b61d9f6bd68bfe587ad0eeceb721a07117ef9fc932f1a88e908eaead8565c19b5645dc9e5b1b6e841c5edbdfd71681a069eb2de283f32c11f859d7bcf93da23990d3e662935ed4d6b39ce3673ec84472a0203d26456312bbc4da5cd293b75b840fc5045e493d6f904d180823ec22bfed8ea09287b5c21f2254af4e64fca76acc5cd87399c7f1ede818db4326c98ce2dc2208a06fc2d754e304c48ce6a517753c62b1a9c1d5925b89707486d7fc08919e0a94eca07b1c54f15e299bd58bdfef9741538c7828b5d7d11a489f9c20d052b3471df475a051f9dd3739a927c89e357580a4c97b40234aa01ed3d5e0390dc982a7975880a0a089d613f26159af43616fd9455bb461f4869bfede26f2130835ed067a8b967bfb80\",\n\t *         \"0xf90211a0395d87a95873cd98c21cf1df9421af03f7247880a2554e20738eec2c7507a494a0bcf6546339a1e7e14eb8fb572a968d217d2a0d1f3bc4257b22ef5333e9e4433ca012ae12498af8b2752c99efce07f3feef8ec910493be749acd63822c3558e6671a0dbf51303afdc36fc0c2d68a9bb05dab4f4917e7531e4a37ab0a153472d1b86e2a0ae90b50f067d9a2244e3d975233c0a0558c39ee152969f6678790abf773a9621a01d65cd682cc1be7c5e38d8da5c942e0a73eeaef10f387340a40a106699d494c3a06163b53d956c55544390c13634ea9aa75309f4fd866f312586942daf0f60fb37a058a52c1e858b1382a8893eb9c1f111f266eb9e21e6137aff0dddea243a567000a037b4b100761e02de63ea5f1fcfcf43e81a372dafb4419d126342136d329b7a7ba032472415864b08f808ba4374092003c8d7c40a9f7f9fe9cc8291f62538e1cc14a074e238ff5ec96b810364515551344100138916594d6af966170ff326a092fab0a0d31ac4eef14a79845200a496662e92186ca8b55e29ed0f9f59dbc6b521b116fea090607784fe738458b63c1942bba7c0321ae77e18df4961b2bc66727ea996464ea078f757653c1b63f72aff3dcc3f2a2e4c8cb4a9d36d1117c742833c84e20de994a0f78407de07f4b4cb4f899dfb95eedeb4049aeb5fc1635d65cf2f2f4dfd25d1d7a0862037513ba9d45354dd3e36264aceb2b862ac79d2050f14c95657e43a51b85c80\",\n\t *         \"0xf90171a04ad705ea7bf04339fa36b124fa221379bd5a38ffe9a6112cb2d94be3a437b879a08e45b5f72e8149c01efcb71429841d6a8879d4bbe27335604a5bff8dfdf85dcea00313d9b2f7c03733d6549ea3b810e5262ed844ea12f70993d87d3e0f04e3979ea0b59e3cdd6750fa8b15164612a5cb6567cdfb386d4e0137fccee5f35ab55d0efda0fe6db56e42f2057a071c980a778d9a0b61038f269dd74a0e90155b3f40f14364a08538587f2378a0849f9608942cf481da4120c360f8391bbcc225d811823c6432a026eac94e755534e16f9552e73025d6d9c30d1d7682a4cb5bd7741ddabfd48c50a041557da9a74ca68da793e743e81e2029b2835e1cc16e9e25bd0c1e89d4ccad6980a041dda0a40a21ade3a20fcd1a4abb2a42b74e9a32b02424ff8db4ea708a5e0fb9a09aaf8326a51f613607a8685f57458329b41e938bb761131a5747e066b81a0a16808080a022e6cef138e16d2272ef58434ddf49260dc1de1f8ad6dfca3da5d2a92aaaadc58080\",\n\t *         \"0xf851808080a009833150c367df138f1538689984b8a84fc55692d3d41fe4d1e5720ff5483a6980808080808080808080a0a319c1c415b271afc0adcb664e67738d103ac168e0bc0b7bd2da7966165cb9518080\"\n\t *     ],\n\t *     \"balance\": 0,\n\t *     \"codeHash\": \"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\",\n\t *     \"nonce\": 0,\n\t *     \"storageHash\": \"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\",\n\t *     \"storageProof\": [\n\t *         {\n\t *             \"key\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n\t *             \"value\": 0,\n\t *             \"proof\": []\n\t *         },\n\t *         {\n\t *             \"key\": \"0x0000000000000000000000000000000000000000000000000000000000000001\",\n\t *             \"value\": 0,\n\t *             \"proof\": []\n\t *         }\n\t *     ]\n\t * }\n\t * ```\n\t */\n\tpublic async getProof<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\taddress: Address,\n\t\tstorageKeys: Bytes[],\n\t\tblockNumber: BlockNumberOrTag = this.defaultBlock,\n\t\treturnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.getProof(this, address, storageKeys, blockNumber, returnFormat);\n\t}\n\n\t// TODO Throwing an error with Geth, but not Infura\n\t// TODO gasUsedRatio and reward not formatting\n\t/**\n\t * @param blockCount Number of blocks in the requested range. Between `1` and `1024` blocks can be requested in a single query. Less than requested may be returned if not all blocks are available.\n\t * @param newestBlock Highest number block of the requested range.\n\t * @param rewardPercentiles A monotonically increasing list of percentile values to sample from each block’s effective priority fees per gas in ascending order, weighted by gas used. Example: `['0', '25', '50', '75', '100']` or `['0', '0.5', '1', '1.5', '3', '80']`\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.\n\t * @returns `baseFeePerGas` and transaction effective `priorityFeePerGas` history for the requested block range if available.\n\t * The range between `headBlock - 4` and `headBlock` is guaranteed to be available while retrieving data from the `pending` block and older history are optional to support.\n\t * For pre-EIP-1559 blocks the `gasPrice`s are returned as `rewards` and zeroes are returned for the `baseFeePerGas`.\n\t *\n\t * ```ts\n\t * web3.eth.getFeeHistory(4, 'pending', [0, 25, 75, 100]).then(console.log);\n\t * > {\n\t *     baseFeePerGas: [\n\t *         22983878621n,\n\t *         21417903463n,\n\t *         19989260230n,\n\t *         17770954829n,\n\t *         18850641304n\n\t *     ],\n\t *     gasUsedRatio: [\n\t *         0.22746546666666667,\n\t *         0.2331871,\n\t *         0.05610054885262125,\n\t *         0.7430227268212117\n\t *     ],\n\t *     oldestBlock: 15216343n,\n\t *     reward: [\n\t *         [ '0x3b9aca00', '0x53724e00', '0x77359400', '0x1d92c03423' ],\n\t *         [ '0x3b9aca00', '0x3b9aca00', '0x3b9aca00', '0xee6b2800' ],\n\t *         [ '0x3b9aca00', '0x4f86a721', '0x77d9743a', '0x9502f900' ],\n\t *         [ '0xcc8ff9e', '0x53724e00', '0x77359400', '0x1ec9771bb3' ]\n\t *     ]\n\t * }\n\t *\n\t * web3.eth.getFeeHistory(4, BlockTags.LATEST, [0, 25, 75, 100], { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }).then(console.log);\n\t * > {\n\t *     baseFeePerGas: [\n\t *         22983878621,\n\t *         21417903463,\n\t *         19989260230,\n\t *         17770954829,\n\t *         18850641304\n\t *     ],\n\t *     gasUsedRatio: [\n\t *         0.22746546666666667,\n\t *         0.2331871,\n\t *         0.05610054885262125,\n\t *         0.7430227268212117\n\t *     ],\n\t *     oldestBlock: 15216343,\n\t *     reward: [\n\t *         [ '0x3b9aca00', '0x53724e00', '0x77359400', '0x1d92c03423' ],\n\t *         [ '0x3b9aca00', '0x3b9aca00', '0x3b9aca00', '0xee6b2800' ],\n\t *         [ '0x3b9aca00', '0x4f86a721', '0x77d9743a', '0x9502f900' ],\n\t *         [ '0xcc8ff9e', '0x53724e00', '0x77359400', '0x1ec9771bb3' ]\n\t *     ]\n\t * }\n\t * ```\n\t */\n\tpublic async getFeeHistory<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\tblockCount: Numbers,\n\t\tnewestBlock: BlockNumberOrTag = this.defaultBlock,\n\t\trewardPercentiles: Numbers[],\n\t\treturnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.getFeeHistory(\n\t\t\tthis,\n\t\t\tblockCount,\n\t\t\tnewestBlock,\n\t\t\trewardPercentiles,\n\t\t\treturnFormat,\n\t\t);\n\t}\n\n\t/**\n\t * This method generates an access list for a transaction.\n\t *\n\t * @param transaction - A transaction object where all properties are optional except `from`, however it's recommended to include the `to` property.\n\t * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) - Specifies what block to use as the current state of the blockchain while processing the transaction.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the createAccessList should be formatted.\n\t * @returns The returned data of the createAccessList,  e.g. The generated access list for transaction.\n\t * @example\n\t * ```ts\n\t * web3.eth.createAccessList({\n\t * from: '0xDe95305a63302C3aa4d3A9B42654659AeA72b694',\n\t * data: '0x9a67c8b100000000000000000000000000000000000000000000000000000000000004d0',\n\t * gasPrice: '0x3b9aca00',\n\t * gas: '0x3d0900',\n\t * to: '0x940b25304947ae863568B3804434EC77E2160b87'\n\t * })\n\t * .then(console.log);\n\t *\n\t * > {\n\t *  \"accessList\": [\n\t *     {\n\t *       \"address\": \"0x15859bdf5aff2080a9968f6a410361e9598df62f\",\n\t *       \"storageKeys\": [\n\t *         \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n\t *       ]\n\t *     }\n\t *   ],\n\t *   \"gasUsed\": \"0x7671\"\n\t * }\n\t * ```\n\t */\n\tpublic async createAccessList<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\ttransaction: TransactionForAccessList,\n\t\tblockNumber: BlockNumberOrTag = this.defaultBlock,\n\t\treturnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.createAccessList(this, transaction, blockNumber, returnFormat);\n\t}\n\n\t/**\n\t * This method sends EIP-712 typed data to the RPC provider to be signed.\n\t *\n\t * @param address The address that corresponds with the private key used to sign the typed data.\n\t * @param typedData The EIP-712 typed data object.\n\t * @param useLegacy A boolean flag determining whether the RPC call uses the legacy method `eth_signTypedData` or the newer method `eth_signTypedData_v4`\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the signed typed data should be formatted.\n\t * @returns The signed typed data.\n\t */\n\tpublic async signTypedData<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\taddress: Address,\n\t\ttypedData: Eip712TypedData,\n\t\tuseLegacy = false,\n\t\treturnFormat: ReturnFormat = (this.defaultReturnFormat ??\n\t\t\tDEFAULT_RETURN_FORMAT) as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.signTypedData(this, address, typedData, useLegacy, returnFormat);\n\t}\n\n\t/**\n\t * Lets you subscribe to specific events in the blockchain.\n\t *\n\t * @param name - The subscription you want to subscribe to.\n\t * @param args - Optional additional parameters, depending on the subscription type.\n\t * @returns A subscription object of type {@link RegisteredSubscription}. The object contains:\n\t *  - subscription.id: The subscription id, used to identify and unsubscribing the subscription.\n\t *  - subscription.subscribe(): Can be used to re-subscribe with the same parameters.\n\t *  - subscription.unsubscribe(): Unsubscribes the subscription and returns TRUE in the callback if successful.\n\t *  - subscription.args: The subscription arguments, used when re-subscribing.\n\t *\n\t *\n\t * You can use the subscription object to listen on:\n\t *\n\t * - on(\"data\") - Fires on each incoming log with the log object as argument.\n\t * - on(\"changed\") - Fires on each log which was removed from the blockchain. The log will have the additional property \"removed: true\".\n\t * - on(\"error\") - Fires when an error in the subscription occurs.\n\t * - on(\"connected\") - Fires once after the subscription successfully connected. Returns the subscription id.\n\t *\n\t * @example **Subscribe to Smart Contract events**\n\t * ```ts\n\t * // Subscribe to `logs`\n\t * const logSubscription = web3.eth.subscribe('logs', {\n\t *     address: '0x1234567890123456789012345678901234567890',\n\t *     topics: ['0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234']\n\t * });\n\t * logSubscription.on('data', (data: any) => console.log(data));\n\t * logSubscription.on('error', (error: any) => console.log(error));\n\t *\n\t * ```\n\t *\n\t * @example **Subscribe to new block headers**\n\t * ```ts\n\t * // Subscribe to `newBlockHeaders`\n\t * const newBlocksSubscription = await web3.eth.subscribe('newBlockHeaders');\n\t *\n\t * newBlocksSubscription.on('data', async blockhead => {\n\t * \tconsole.log('New block header: ', blockhead);\n\t *\n\t * \t// You do not need the next line, if you like to keep notified for every new block\n\t * \tawait newBlocksSubscription.unsubscribe();\n\t * \tconsole.log('Unsubscribed from new block headers.');\n\t * });\n\t * newBlocksSubscription.on('error', error =>\n\t * \tconsole.log('Error when subscribing to New block header: ', error),\n\t * );\n\t * ```\n\t *\n\t * \t### subscribe('pendingTransactions')\n\t *\n\t * Subscribes to incoming pending transactions.\n\t * You can subscribe to pending transactions by calling web3.eth.subscribe('pendingTransactions').\n\t *\n\t * ```ts\n\t * (await web3.eth.subscribe('pendingTransactions')).on('data', console.log);\n\t * ```\n\t *\n\t * ### subscribe('newHeads')\n\t * ( same as subscribe('newBlockHeaders'))\n\t * Subscribes to incoming block headers. This can be used as timer to check for changes on the blockchain.\n\t *\n\t * The structure of a returned block header is {@link BlockHeaderOutput}:\n\t *\n\t * ```ts\n\t * (await web3.eth.subscribe('newHeads')).on( // 'newBlockHeaders' would work as well\n\t *  'data',\n\t * console.log\n\t * );\n\t * >{\n\t * parentHash: '0x9e746a1d906b299def98c75b06f714d62dacadd567c7515d76eeaa8c8074c738',\n\t * sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\n\t * miner: '0x0000000000000000000000000000000000000000',\n\t * stateRoot: '0xe0f04b04861ecfa95e82a9310d6a7ef7aef8d7417f5209c182582bfb98a8e307',\n\t * transactionsRoot: '0x31ab4ea571a9e10d3a19aaed07d190595b1dfa34e03960c04293fec565dea536',\n\t * logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n\t * difficulty: 2n,\n\t * number: 21n,\n\t * gasLimit: 11738125n,\n\t * gasUsed: 830006n,\n\t * timestamp: 1678797237n,\n\t * extraData: '0xd883010b02846765746888676f312e32302e31856c696e757800000000000000e0a6e93cf40e2e71a72e493272210c3f43738ccc7e7d7b14ffd51833797d896c09117e8dc4fbcbc969bd21b42e5af3e276a911524038c001b2109b63b8e0352601',\n\t * nonce: 0n\n\t * }\n\t * ```\n\t *\n\t * ### subscribe('syncing')\n\t * Subscribe to syncing events. This will return `true` when the node is syncing and when it’s finished syncing will return `false`, for the `changed` event.\n\t *\n\t * ```ts\n\t * (await web3.eth.subscribe('syncing')).on('changed', console.log);\n\t * > `true` // when syncing\n\t *\n\t * (await web3.eth.subscribe('syncing')).on('data', console.log);\n\t * > {\n\t *      startingBlock: 0,\n\t *      currentBlock: 0,\n\t *      highestBlock: 0,\n\t *      pulledStates: 0,\n\t *      knownStates: 0\n\t *   }\n\t * ```\n\t *\n\t * ### subscribe('logs', options)\n\t * Subscribes to incoming logs, filtered by the given options. If a valid numerical fromBlock options property is set, web3.js will retrieve logs beginning from this point, backfilling the response as necessary.\n\t *\n\t * options: You can subscribe to logs matching a given filter object, which can take the following parameters:\n\t * - `fromBlock`: (optional, default: 'latest') Integer block number, or `'latest'` for the last mined block or `'pending'`, `'earliest'` for not yet mined transactions.\n\t * - `address`: (optional) Contract address or a list of addresses from which logs should originate.\n\t * - `topics`: (optional) Array of 32 Bytes DATA topics. Topics are order-dependent. Each topic can also be an array of DATA with `or` options.\n\t *\n\t * ```ts\n\t *  (await web3.eth.subscribe('logs', {\n\t *    address: '0xdac17f958d2ee523a2206206994597c13d831ec7',\n\t *   })).on('data', console.log);\n\t *\n\t * > {\n\t * removed: false,\n\t * logIndex: 119n,\n\t * transactionIndex: 58n,\n\t * transactionHash: '0x61533efa77937360215069d5d6cb0be09a22af9721e6dc3df59d957833ed8870',\n\t * blockHash: '0xe32bb97084479d32247f66f8b46d00af2fbc3c2db2bc6e5843fe2e4d1ca9b099',\n\t * blockNumber: 18771966n,\n\t * address: '0xdac17f958d2ee523a2206206994597c13d831ec7',\n\t * data: '0x00000000000000000000000000000000000000000000000000000000d88b2e40',\n\t * topics: [\n\t * '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\n\t * '0x0000000000000000000000002fb2457f6ec1865dc0d4e7300c696b69c2a1b989',\n\t * '0x00000000000000000000000027fd43babfbe83a81d14665b1a6fb8030a60c9b4'\n\t * ]\n\t * }\n\t *```\n\t */\n\n\tpublic async subscribe<\n\t\tT extends keyof RegisteredSubscription,\n\t\tReturnType extends DataFormat = DataFormat,\n\t>(\n\t\tname: T,\n\t\targs?: ConstructorParameters<RegisteredSubscription[T]>[0],\n\t\treturnFormat: ReturnType = (this.defaultReturnFormat ??\n\t\t\tDEFAULT_RETURN_FORMAT) as ReturnType,\n\t): Promise<InstanceType<RegisteredSubscription[T]>> {\n\t\tconst subscription = await this.subscriptionManager?.subscribe(name, args, returnFormat);\n\t\tif (\n\t\t\tsubscription instanceof LogsSubscription &&\n\t\t\tname === 'logs' &&\n\t\t\ttypeof args === 'object' &&\n\t\t\t!isNullish(args.fromBlock) &&\n\t\t\tNumber.isFinite(Number(args.fromBlock))\n\t\t) {\n\t\t\tsetImmediate(() => {\n\t\t\t\tthis.getPastLogs(args)\n\t\t\t\t\t.then(logs => {\n\t\t\t\t\t\tfor (const log of logs) {\n\t\t\t\t\t\t\tsubscription._processSubscriptionResult(log as LogsOutput);\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.catch(e => {\n\t\t\t\t\t\tsubscription._processSubscriptionError(e as Error);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\treturn subscription;\n\t}\n\n\tprivate static shouldClearSubscription({ sub }: { sub: unknown }): boolean {\n\t\treturn !(sub instanceof SyncingSubscription);\n\t}\n\n\t/**\n\t * Resets subscriptions.\n\t *\n\t * @param notClearSyncing If `true` it keeps the `syncing` subscription.\n\t * @returns A promise to an array of subscription ids that were cleared.\n\t *\n\t * ```ts\n\t * web3.eth.clearSubscriptions().then(console.log);\n\t * > [...] An array of subscription ids that were cleared\n\t * ```\n\t */\n\tpublic clearSubscriptions(notClearSyncing = false): Promise<string[]> | undefined {\n\t\treturn this.subscriptionManager?.unsubscribe(\n\t\t\t// eslint-disable-next-line\n\t\t\tnotClearSyncing ? Web3Eth.shouldClearSubscription : undefined,\n\t\t);\n\t}\n}\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/src/web3_subscriptions.ts",[],["1017","1018","1019","1020"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/e2e/e2e_utils.ts",["1021"],["1022","1023","1024","1025","1026"],"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * @NOTE This Util method is kept separate from shared system_test_utils.ts file because\n * of it's import of .secrets.json. For this method to exist in shared system_test_utils.ts\n * file, the import path would be ../.secrets.json which doesn't resolve when the file is\n * copied over to each package's test directory. Because web3 package is the only package\n * running these E2E tests that use Sepolia and Mainnet, this util exists here for now.\n */\n\nimport { getSystemTestBackend, BACKEND } from '../fixtures/system_test_utils';\n// eslint-disable-next-line import/no-relative-packages\nimport secrets from '../../../../.secrets.json';\n\nexport const getSystemE2ETestProvider = (): string => {\n\tif (process.env.WEB3_SYSTEM_TEST_MODE === 'http') {\n\t\treturn getSystemTestBackend() === BACKEND.SEPOLIA\n\t\t\t? process.env.INFURA_SEPOLIA_HTTP ?? secrets.SEPOLIA.HTTP\n\t\t\t: process.env.INFURA_MAINNET_HTTP ?? secrets.MAINNET.HTTP;\n\t}\n\treturn getSystemTestBackend() === BACKEND.SEPOLIA\n\t\t? process.env.INFURA_SEPOLIA_WS ?? secrets.SEPOLIA.WS\n\t\t: process.env.INFURA_MAINNET_WS ?? secrets.MAINNET.WS;\n};\n\nexport const getE2ETestAccountAddress = (): string => {\n\tif (process.env.TEST_ACCOUNT_ADDRESS !== undefined) {\n\t\treturn process.env.TEST_ACCOUNT_ADDRESS;\n\t\t// eslint-disable-next-line no-else-return\n\t} else if (getSystemTestBackend() === BACKEND.SEPOLIA || getSystemTestBackend() === BACKEND.MAINNET) {\n\t\treturn secrets[getSystemTestBackend().toUpperCase() as 'SEPOLIA' | 'MAINNET'].ACCOUNT\n\t\t\t.address;\n\t}\n\n\tthrow new Error('Unable to get test account address');\n};\n\nexport const getE2ETestContractAddress = () =>\n\t// eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n\tsecrets[getSystemTestBackend().toUpperCase() as 'SEPOLIA' | 'MAINNET']\n\t\t.DEPLOYED_TEST_CONTRACT_ADDRESS as string;\n\nexport const getAllowedSendTransaction = (): boolean => {\n\tif (process.env.ALLOWED_SEND_TRANSACTION !== undefined) {\n\t\t// https://github.com/actions/runner/issues/1483\n\t\tif (process.env.ALLOWED_SEND_TRANSACTION === 'false') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn Boolean(process.env.ALLOWED_SEND_TRANSACTION);\n\t\t// eslint-disable-next-line no-else-return\n\t} else if (getSystemTestBackend() === BACKEND.SEPOLIA || getSystemTestBackend() === BACKEND.MAINNET) {\n\t\treturn secrets[getSystemTestBackend().toUpperCase() as 'SEPOLIA' | 'MAINNET']\n\t\t\t.ALLOWED_SEND_TRANSACTION;\n\t}\n\n\treturn false;\n};\n\nexport const getE2ETestAccountPrivateKey = (): string => {\n\tif (process.env.TEST_ACCOUNT_PRIVATE_KEY !== undefined) {\n\t\treturn process.env.TEST_ACCOUNT_PRIVATE_KEY;\n\t\t// eslint-disable-next-line no-else-return\n\t} else if (getSystemTestBackend() === BACKEND.SEPOLIA || getSystemTestBackend() === BACKEND.MAINNET) {\n\t\treturn secrets[getSystemTestBackend().toUpperCase() as 'SEPOLIA' | 'MAINNET'].ACCOUNT\n\t\t\t.privateKey;\n\t}\n\n\tthrow new Error('Unable to get test account private key');\n};\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/e2e/subscription_new_heads.test.ts",[],["1027"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/fixtures/decoding.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/fixtures/detect_transaction_type.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/fixtures/erc20.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/fixtures/errors.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/fixtures/example_subscription.ts",[],["1028"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/fixtures/format_transaction.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/fixtures/prepare_transaction_for_signing.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/fixtures/rpc_methods_wrappers.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/fixtures/simple_revert.ts",[],["1029"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/fixtures/system_test_utils.ts",[],["1030","1031","1032","1033","1034","1035","1036","1037","1038","1039","1040","1041","1042","1043"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/fixtures/validate_transaction_for_signing.ts",[],["1044"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/fixtures/validation.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/fixtures/web3_eth_methods_with_parameters.ts",[],["1045","1046"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/batch.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/block/rpc.getBlock.test.ts",[],["1047","1048"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/block/rpc.getBlockTransactionCount.test.ts",[],["1049"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/block/rpc.getBlockUncleCount.test.ts",[],["1050"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/block/rpc.getTransactionCount.test.ts",[],["1051"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/block/rpc.getTransactionFromBlock.test.ts",[],["1052","1053"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/block/rpc.getUncle.test.ts",[],["1054"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/defaults.test.ts",["1055"],["1056","1057","1058","1059","1060"],"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { Contract } from 'web3-eth-contract';\nimport { hexToNumber, numberToHex } from 'web3-utils';\nimport { TransactionBuilder, TransactionTypeParser, Web3Context, Web3PromiEvent } from 'web3-core';\nimport {\n\tHardfork,\n\tSupportedProviders,\n\tTransactionReceipt,\n\tValidChains,\n\tWeb3BaseProvider,\n\tDEFAULT_RETURN_FORMAT,\n} from 'web3-types';\nimport {\n\tdetectTransactionType,\n\tprepareTransactionForSigning,\n\tSendTransactionEvents,\n\ttransactionBuilder,\n\tWeb3Eth,\n} from '../../src';\n\nimport {\n\tcloseOpenConnection,\n\tcreateNewAccount,\n\tcreateTempAccount,\n\tgetSystemTestProvider,\n\tisIpc,\n\tsendFewSampleTxs,\n} from '../fixtures/system_test_utils';\n\nimport {\n\tdefaultTransactionBuilder,\n\tgetTransactionFromOrToAttr,\n\tgetTransactionType,\n} from '../../src/utils';\nimport { BasicAbi, BasicBytecode } from '../shared_fixtures/build/Basic';\nimport { MsgSenderAbi, MsgSenderBytecode } from '../shared_fixtures/build/MsgSender';\nimport { getTransactionGasPricing } from '../../src/utils/get_transaction_gas_pricing';\nimport { Resolve, sendFewTxes } from './helper';\n\ndescribe('defaults', () => {\n\tlet web3Eth: Web3Eth;\n\tlet eth2: Web3Eth;\n\tlet clientUrl: string | SupportedProviders;\n\tlet contract: Contract<typeof BasicAbi>;\n\tlet deployOptions: Record<string, unknown>;\n\tlet sendOptions: Record<string, unknown>;\n\tlet tempAcc: { address: string; privateKey: string };\n\n\tbeforeEach(async () => {\n\t\tclientUrl = getSystemTestProvider();\n\t\tweb3Eth = new Web3Eth(clientUrl);\n\t\ttempAcc = await createTempAccount();\n\t\tcontract = new Contract(BasicAbi, web3Eth.getContextObject() as any);\n\t\tdeployOptions = {\n\t\t\tdata: BasicBytecode,\n\t\t\targuments: [10, 'string init value'],\n\t\t};\n\t\tsendOptions = { from: tempAcc.address, gas: '1000000' };\n\t});\n\n\tafterEach(async () => {\n\t\tawait closeOpenConnection(web3Eth);\n\t\tawait closeOpenConnection(eth2);\n\t});\n\n\tdescribe('defaults', () => {\n\t\tit('defaultAccount', async () => {\n\t\t\tconst tempAcc2 = await createTempAccount();\n\t\t\tconst tempAcc3 = await createTempAccount();\n\t\t\tconst contractMsgFrom = await new Contract(\n\t\t\t\tMsgSenderAbi,\n\t\t\t\tweb3Eth.getContextObject() as any,\n\t\t\t)\n\t\t\t\t.deploy({\n\t\t\t\t\tdata: MsgSenderBytecode,\n\t\t\t\t\targuments: ['test'],\n\t\t\t\t})\n\t\t\t\t.send({ from: tempAcc2.address, gas: '2700000' });\n\t\t\t// default\n\t\t\texpect(web3Eth.defaultAccount).toBeUndefined();\n\n\t\t\t// after set\n\t\t\tweb3Eth.setConfig({\n\t\t\t\tdefaultAccount: tempAcc.address,\n\t\t\t});\n\t\t\texpect(web3Eth.defaultAccount).toBe(tempAcc.address);\n\n\t\t\t// set by create new instance\n\t\t\teth2 = new Web3Eth({\n\t\t\t\tconfig: {\n\t\t\t\t\tdefaultAccount: tempAcc3.address,\n\t\t\t\t},\n\t\t\t});\n\t\t\texpect(eth2.defaultAccount).toBe(tempAcc3.address);\n\n\t\t\t// check utils\n\t\t\texpect(getTransactionFromOrToAttr('from', eth2)).toBe(tempAcc3.address);\n\t\t\t// TODO: after handleRevert implementation https://github.com/ChainSafe/web3.js/issues/5069 add following tests in future release\n\t\t\t//  set handleRevert true and test following functions with invalid input tx data and see revert reason present in error details:\n\t\t\tcontractMsgFrom.setConfig({\n\t\t\t\tdefaultAccount: tempAcc.address,\n\t\t\t});\n\n\t\t\tconst tx = await contractMsgFrom.methods\n\t\t\t\t.setTestString('test2')\n\t\t\t\t.send({ gas: '1000000' });\n\t\t\tconst txSend = await web3Eth.sendTransaction({\n\t\t\t\tto: tempAcc2.address,\n\t\t\t\tvalue: '0x1',\n\t\t\t});\n\t\t\texpect(tx.from).toBe(tempAcc.address.toLowerCase());\n\t\t\texpect(txSend.from).toBe(tempAcc.address.toLowerCase());\n\n\t\t\tconst tx2 = await contractMsgFrom.methods.setTestString('test3').send({\n\t\t\t\tfrom: tempAcc2.address,\n\t\t\t});\n\t\t\tconst tx2Send = await web3Eth.sendTransaction({\n\t\t\t\tto: tempAcc.address,\n\t\t\t\tvalue: '0x1',\n\t\t\t\tfrom: tempAcc2.address,\n\t\t\t});\n\t\t\texpect(tx2.from).toBe(tempAcc2.address.toLowerCase());\n\t\t\texpect(tx2Send.from).toBe(tempAcc2.address.toLowerCase());\n\n\t\t\tconst fromDefault = await contractMsgFrom.methods?.from().call();\n\t\t\tconst fromPass = await contractMsgFrom.methods?.from().call({ from: tempAcc.address });\n\t\t\tconst fromPass2 = await contractMsgFrom.methods\n\t\t\t\t?.from()\n\t\t\t\t.call({ from: tempAcc2.address });\n\t\t\texpect((fromDefault as unknown as string).toLowerCase()).toBe(\n\t\t\t\ttempAcc.address.toLowerCase(),\n\t\t\t);\n\t\t\texpect((fromPass as unknown as string).toLowerCase()).toBe(\n\t\t\t\ttempAcc.address.toLowerCase(),\n\t\t\t);\n\t\t\texpect((fromPass2 as unknown as string).toLowerCase()).toBe(\n\t\t\t\ttempAcc2.address.toLowerCase(),\n\t\t\t);\n\t\t});\n\t\tit('handleRevert', () => {\n\t\t\t/*\n            //TO DO: after handleRevert implementation https://github.com/ChainSafe/web3.js/issues/5069 add following tests in future release\n            /* set handleRevert true and test following functions with invalid input tx data and see revert reason present in error details:\n\n            web3.eth.call()\n            web3.eth.sendTransaction()\n            contract.methods.myMethod(…).send(…)\n            contract.methods.myMethod(…).call(…)\n\n            */\n\t\t\t// default\n\t\t\texpect(web3Eth.handleRevert).toBe(false);\n\n\t\t\t// after set\n\t\t\tweb3Eth.setConfig({\n\t\t\t\thandleRevert: true,\n\t\t\t});\n\t\t\texpect(web3Eth.handleRevert).toBe(true);\n\n\t\t\t// set by create new instance\n\t\t\teth2 = new Web3Eth({\n\t\t\t\tconfig: {\n\t\t\t\t\thandleRevert: true,\n\t\t\t\t},\n\t\t\t});\n\t\t\texpect(eth2.handleRevert).toBe(true);\n\t\t});\n\t\tit('defaultBlock', async () => {\n\t\t\tconst contractDeployed = await contract.deploy(deployOptions).send(sendOptions);\n\t\t\t// default\n\t\t\texpect(web3Eth.defaultBlock).toBe('latest');\n\n\t\t\tweb3Eth.setConfig({\n\t\t\t\tdefaultBlock: 'safe',\n\t\t\t});\n\t\t\texpect(web3Eth.defaultBlock).toBe('safe');\n\n\t\t\tweb3Eth.setConfig({\n\t\t\t\tdefaultBlock: 'finalized',\n\t\t\t});\n\t\t\texpect(web3Eth.defaultBlock).toBe('finalized');\n\n\t\t\t// after set\n\t\t\tweb3Eth.setConfig({\n\t\t\t\tdefaultBlock: 'earliest',\n\t\t\t});\n\t\t\texpect(web3Eth.defaultBlock).toBe('earliest');\n\n\t\t\t// set by create new instance\n\t\t\teth2 = new Web3Eth({\n\t\t\t\tprovider: web3Eth.provider,\n\t\t\t\tconfig: {\n\t\t\t\t\tdefaultBlock: 'earliest',\n\t\t\t\t},\n\t\t\t});\n\t\t\texpect(eth2.defaultBlock).toBe('earliest');\n\n\t\t\t// check implementation\n\t\t\tconst acc = await createNewAccount({ refill: true, unlock: true });\n\n\t\t\tawait sendFewTxes({\n\t\t\t\tfrom: acc.address,\n\t\t\t\ttimes: 1,\n\t\t\t\tvalue: '0x1',\n\t\t\t});\n\t\t\tconst balance = await eth2.getBalance(acc.address);\n\t\t\tconst code = await eth2.getCode(contractDeployed?.options?.address as string);\n\t\t\tconst storage = await eth2.getStorageAt(\n\t\t\t\tcontractDeployed?.options?.address as string,\n\t\t\t\t0,\n\t\t\t);\n\t\t\tconst transactionCount = await eth2.getTransactionCount(acc.address);\n\t\t\texpect(storage === '0x' ? 0 : Number(hexToNumber(storage))).toBe(0);\n\t\t\texpect(code).toBe('0x');\n\t\t\texpect(balance).toBe(BigInt(0));\n\t\t\texpect(transactionCount).toBe(BigInt(0));\n\n\t\t\t// pass blockNumber to rewrite defaultBlockNumber\n\t\t\tconst balanceWithBlockNumber = await eth2.getBalance(acc.address, 'latest');\n\t\t\tconst transactionCountWithBlockNumber = await eth2.getTransactionCount(\n\t\t\t\tacc.address,\n\t\t\t\t'latest',\n\t\t\t);\n\t\t\tconst codeWithBlockNumber = await eth2.getCode(\n\t\t\t\tcontractDeployed?.options?.address as string,\n\t\t\t\t'latest',\n\t\t\t);\n\t\t\tconst storageWithBlockNumber = await eth2.getStorageAt(\n\t\t\t\tcontractDeployed?.options?.address as string,\n\t\t\t\t0,\n\t\t\t\t'latest',\n\t\t\t);\n\t\t\texpect(Number(hexToNumber(storageWithBlockNumber))).toBe(10);\n\t\t\texpect(transactionCountWithBlockNumber).toBe(BigInt(1));\n\t\t\texpect(Number(balanceWithBlockNumber)).toBeGreaterThan(0);\n\t\t\texpect(codeWithBlockNumber.startsWith(BasicBytecode.slice(0, 10))).toBe(true);\n\n\t\t\t// set new default block to config\n\t\t\teth2.setConfig({\n\t\t\t\tdefaultBlock: 'latest',\n\t\t\t});\n\t\t\tconst balanceLatest = await eth2.getBalance(acc.address);\n\t\t\tconst codeLatest = await eth2.getCode(contractDeployed?.options?.address as string);\n\t\t\tconst storageLatest = await eth2.getStorageAt(\n\t\t\t\tcontractDeployed?.options?.address as string,\n\t\t\t\t0,\n\t\t\t);\n\t\t\tconst transactionCountLatest = await eth2.getTransactionCount(acc.address);\n\t\t\texpect(codeLatest.startsWith(BasicBytecode.slice(0, 10))).toBe(true);\n\t\t\texpect(Number(hexToNumber(storageLatest))).toBe(10);\n\t\t\texpect(transactionCountLatest).toBe(BigInt(1));\n\t\t\texpect(Number(balanceLatest)).toBeGreaterThan(0);\n\t\t});\n\t\tit('transactionSendTimeout', () => {\n\t\t\t// default\n\t\t\texpect(web3Eth.transactionSendTimeout).toBe(750 * 1000);\n\n\t\t\t// after set\n\t\t\tweb3Eth.setConfig({\n\t\t\t\ttransactionSendTimeout: 1,\n\t\t\t});\n\t\t\texpect(web3Eth.transactionSendTimeout).toBe(1);\n\n\t\t\t// set by create new instance\n\t\t\teth2 = new Web3Eth({\n\t\t\t\tprovider: web3Eth.provider,\n\t\t\t\tconfig: {\n\t\t\t\t\ttransactionSendTimeout: 120,\n\t\t\t\t},\n\t\t\t});\n\t\t\texpect(eth2.transactionSendTimeout).toBe(120);\n\t\t});\n\t\tit('transactionBlockTimeout', () => {\n\t\t\t// default\n\t\t\texpect(web3Eth.transactionBlockTimeout).toBe(50);\n\n\t\t\t// after set\n\t\t\tweb3Eth.setConfig({\n\t\t\t\ttransactionBlockTimeout: 1,\n\t\t\t});\n\t\t\texpect(web3Eth.transactionBlockTimeout).toBe(1);\n\n\t\t\t// set by create new instance\n\t\t\teth2 = new Web3Eth({\n\t\t\t\tconfig: {\n\t\t\t\t\ttransactionBlockTimeout: 120,\n\t\t\t\t},\n\t\t\t});\n\t\t\texpect(eth2.transactionBlockTimeout).toBe(120);\n\t\t});\n\t\tit('transactionConfirmationBlocks', () => {\n\t\t\t// default\n\t\t\t// eslint-disable-next-line jest/no-standalone-expect\n\t\t\texpect(web3Eth.transactionConfirmationBlocks).toBe(24);\n\n\t\t\t// after set\n\t\t\tweb3Eth.setConfig({\n\t\t\t\ttransactionConfirmationBlocks: 3,\n\t\t\t});\n\t\t\t// eslint-disable-next-line jest/no-standalone-expect\n\t\t\texpect(web3Eth.transactionConfirmationBlocks).toBe(3);\n\n\t\t\t// set by create new instance\n\t\t\teth2 = new Web3Eth({\n\t\t\t\tconfig: {\n\t\t\t\t\ttransactionConfirmationBlocks: 4,\n\t\t\t\t},\n\t\t\t});\n\t\t\t// eslint-disable-next-line jest/no-standalone-expect\n\t\t\texpect(eth2.transactionConfirmationBlocks).toBe(4);\n\t\t});\n\t\tit('transactionConfirmationBlocks implementation', async () => {\n\t\t\tconst tempAcc2 = await createTempAccount();\n\t\t\tconst waitConfirmations = 1;\n\t\t\tconst eth = new Web3Eth(web3Eth.provider);\n\t\t\teth.setConfig({ transactionConfirmationBlocks: waitConfirmations });\n\n\t\t\tconst from = tempAcc.address;\n\t\t\tconst to = tempAcc2.address;\n\t\t\tconst value = `0x1`;\n\t\t\tconst sentTx: Web3PromiEvent<\n\t\t\t\tTransactionReceipt,\n\t\t\t\tSendTransactionEvents<typeof DEFAULT_RETURN_FORMAT>\n\t\t\t> = eth.sendTransaction({\n\t\t\t\tto,\n\t\t\t\tvalue,\n\t\t\t\tfrom,\n\t\t\t});\n\n\t\t\tconst receiptPromise = new Promise((resolve: Resolve) => {\n\t\t\t\t// Tx promise is handled separately\n\t\t\t\t// eslint-disable-next-line no-void\n\t\t\t\tvoid sentTx.on('receipt', (params: TransactionReceipt) => {\n\t\t\t\t\texpect(Number(params.status)).toBe(1);\n\t\t\t\t\tresolve();\n\t\t\t\t});\n\t\t\t});\n\t\t\tlet shouldBe = 1;\n\t\t\tconst confirmationPromise = new Promise((resolve: Resolve) => {\n\t\t\t\t// Tx promise is handled separately\n\t\t\t\t// eslint-disable-next-line no-void\n\t\t\t\tvoid sentTx.on('confirmation', ({ confirmations }) => {\n\t\t\t\t\texpect(Number(confirmations)).toBeGreaterThanOrEqual(shouldBe);\n\t\t\t\t\tshouldBe += 1;\n\t\t\t\t\tif (shouldBe > waitConfirmations) {\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t\tawait sentTx;\n\t\t\tawait receiptPromise;\n\t\t\tawait sendFewSampleTxs(isIpc ? 2 * waitConfirmations : waitConfirmations);\n\t\t\tawait confirmationPromise;\n\t\t\tawait closeOpenConnection(eth);\n\t\t});\n\t\tit('transactionPollingInterval and transactionPollingTimeout', () => {\n\t\t\t// default\n\t\t\texpect(web3Eth.transactionPollingInterval).toBe(1000);\n\t\t\texpect(web3Eth.transactionPollingTimeout).toBe(750 * 1000);\n\n\t\t\t// after set\n\t\t\tweb3Eth.setConfig({\n\t\t\t\ttransactionPollingInterval: 3,\n\t\t\t\ttransactionPollingTimeout: 10,\n\t\t\t});\n\t\t\texpect(web3Eth.transactionPollingInterval).toBe(3);\n\t\t\texpect(web3Eth.transactionPollingTimeout).toBe(10);\n\n\t\t\t// set by create new instance\n\t\t\teth2 = new Web3Eth({\n\t\t\t\tconfig: {\n\t\t\t\t\ttransactionPollingInterval: 400,\n\t\t\t\t\ttransactionPollingTimeout: 10,\n\t\t\t\t},\n\t\t\t});\n\t\t\texpect(eth2.transactionPollingInterval).toBe(400);\n\t\t\texpect(eth2.transactionPollingTimeout).toBe(10);\n\t\t});\n\t\t// todo will work with not instance mining\n\t\t// itIf(isHttp)('transactionReceiptPollingInterval and transactionConfirmationPollingInterval implementation', async () => {\n\t\t//     eth2 = new Web3Eth({\n\t\t//         provider: web3Eth.provider,\n\t\t//         config: {\n\t\t//             transactionPollingInterval: 400,\n\t\t//             transactionPollingTimeout: 10,\n\t\t//         },\n\t\t//     });\n\t\t//\n\t\t//     const sentTx: Web3PromiEvent<TransactionReceipt, SendTransactionEvents> = eth2.sendTransaction({\n\t\t//         to: tempAcc2.address,\n\t\t//         value: '0x1',\n\t\t//         from: tempAcc.address,\n\t\t//     });\n\t\t//\n\t\t//     const res = await Promise.race([\n\t\t//         new Promise((resolve) => setTimeout(resolve, 410)),\n\t\t//         new Promise((resolve: Resolve) => {\n\t\t//             sentTx.on('receipt', (params: TransactionReceipt) => {\n\t\t//                 expect(params.status).toBe(BigInt(1));\n\t\t//                 resolve(params);\n\t\t//             });\n\t\t//         }),\n\t\t//     ]);\n\t\t//     expect((res as TransactionReceipt).status).toBe(BigInt(1));\n\t\t//\n\t\t//     const sentTx2: Web3PromiEvent<TransactionReceipt, SendTransactionEvents> = eth2.sendTransaction({\n\t\t//         to: tempAcc2.address,\n\t\t//         value: '0x1',\n\t\t//         from: tempAcc.address,\n\t\t//     });\n\t\t//     const res2 = await Promise.race([\n\t\t//         new Promise((resolve) => setTimeout(()=>resolve(false), 300)),\n\t\t//         new Promise((resolve: Resolve) => {\n\t\t//             sentTx2.on('receipt', (params: TransactionReceipt) => {\n\t\t//                 expect(params.status).toBe(BigInt(1));\n\t\t//                 resolve(params);\n\t\t//             });\n\t\t//         }),\n\t\t//     ]);\n\t\t//     expect((res2 as boolean)).toBe(false);\n\t\t//\n\t\t//\n\t\t// });\n\t\tit('transactionReceiptPollingInterval and transactionConfirmationPollingInterval', () => {\n\t\t\t// default\n\t\t\texpect(web3Eth.transactionReceiptPollingInterval).toBeUndefined();\n\t\t\texpect(web3Eth.transactionConfirmationPollingInterval).toBeUndefined();\n\n\t\t\t// after set\n\t\t\tweb3Eth.setConfig({\n\t\t\t\ttransactionReceiptPollingInterval: 3,\n\t\t\t\ttransactionConfirmationPollingInterval: 10,\n\t\t\t});\n\t\t\texpect(web3Eth.transactionReceiptPollingInterval).toBe(3);\n\t\t\texpect(web3Eth.transactionConfirmationPollingInterval).toBe(10);\n\n\t\t\t// set by create new instance\n\t\t\teth2 = new Web3Eth({\n\t\t\t\tconfig: {\n\t\t\t\t\ttransactionReceiptPollingInterval: 400,\n\t\t\t\t\ttransactionConfirmationPollingInterval: 10,\n\t\t\t\t},\n\t\t\t});\n\t\t\texpect(eth2.transactionReceiptPollingInterval).toBe(400);\n\t\t\texpect(eth2.transactionConfirmationPollingInterval).toBe(10);\n\t\t});\n\t\tit('blockHeaderTimeout', () => {\n\t\t\t// default\n\t\t\texpect(web3Eth.blockHeaderTimeout).toBe(10);\n\n\t\t\t// after set\n\t\t\tweb3Eth.setConfig({\n\t\t\t\tblockHeaderTimeout: 3,\n\t\t\t});\n\t\t\texpect(web3Eth.blockHeaderTimeout).toBe(3);\n\n\t\t\t// set by create new instance\n\t\t\teth2 = new Web3Eth({\n\t\t\t\tconfig: {\n\t\t\t\t\tblockHeaderTimeout: 4,\n\t\t\t\t},\n\t\t\t});\n\t\t\texpect(eth2.blockHeaderTimeout).toBe(4);\n\t\t});\n\n\t\tit('enableExperimentalFeatures useSubscriptionWhenCheckingBlockTimeout', () => {\n\t\t\t// default\n\t\t\texpect(web3Eth.enableExperimentalFeatures.useSubscriptionWhenCheckingBlockTimeout).toBe(\n\t\t\t\tfalse,\n\t\t\t);\n\n\t\t\t// after set\n\t\t\tweb3Eth.setConfig({\n\t\t\t\tenableExperimentalFeatures: {\n\t\t\t\t\tuseSubscriptionWhenCheckingBlockTimeout: true,\n\t\t\t\t\tuseRpcCallSpecification: false,\n\t\t\t\t},\n\t\t\t});\n\t\t\texpect(web3Eth.enableExperimentalFeatures.useSubscriptionWhenCheckingBlockTimeout).toBe(\n\t\t\t\ttrue,\n\t\t\t);\n\n\t\t\t// set by create new instance\n\t\t\teth2 = new Web3Eth({\n\t\t\t\tconfig: {\n\t\t\t\t\tenableExperimentalFeatures: {\n\t\t\t\t\t\tuseSubscriptionWhenCheckingBlockTimeout: true,\n\t\t\t\t\t\tuseRpcCallSpecification: false,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t});\n\t\t\texpect(eth2.enableExperimentalFeatures.useSubscriptionWhenCheckingBlockTimeout).toBe(\n\t\t\t\ttrue,\n\t\t\t);\n\t\t});\n\n\t\tit('enableExperimentalFeatures useRpcCallSpecification', () => {\n\t\t\t// default\n\t\t\texpect(web3Eth.enableExperimentalFeatures.useRpcCallSpecification).toBe(false);\n\n\t\t\t// after set\n\t\t\tweb3Eth.setConfig({\n\t\t\t\tenableExperimentalFeatures: {\n\t\t\t\t\tuseSubscriptionWhenCheckingBlockTimeout: false,\n\t\t\t\t\tuseRpcCallSpecification: true,\n\t\t\t\t},\n\t\t\t});\n\t\t\texpect(web3Eth.enableExperimentalFeatures.useRpcCallSpecification).toBe(true);\n\n\t\t\t// set by create new instance\n\t\t\teth2 = new Web3Eth({\n\t\t\t\tconfig: {\n\t\t\t\t\tenableExperimentalFeatures: {\n\t\t\t\t\t\tuseSubscriptionWhenCheckingBlockTimeout: false,\n\t\t\t\t\t\tuseRpcCallSpecification: true,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t});\n\t\t\texpect(eth2.enableExperimentalFeatures.useRpcCallSpecification).toBe(true);\n\t\t});\n\n\t\tit('should fallback to polling if provider support `on` but `newBlockHeaders` does not arrive in `blockHeaderTimeout` seconds', async () => {\n\t\t\tconst tempAcc2 = await createTempAccount();\n\n\t\t\tconst tempEth: Web3Eth = new Web3Eth(clientUrl);\n\t\t\t// Ensure the provider supports subscriptions to simulate the test scenario\n\t\t\t// It will cause providers that does not support subscriptions (like http) to throw exception when subscribing.\n\t\t\t// This case is tested to ensure that even if an error happen at subscription,\n\t\t\t//\tpolling will still get the data from next blocks.\n\t\t\t(tempEth.provider as Web3BaseProvider).supportsSubscriptions = () => true;\n\n\t\t\t// Cause the events to take a long time (more than blockHeaderTimeout),\n\t\t\t//\tto ensure that polling of new blocks works in such cases.\n\t\t\t// This will cause the providers that supports subscription (like WebSocket)\n\t\t\t// \tto never return data through listening to new events\n\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-misused-promises\n\t\t\t(tempEth.provider as Web3BaseProvider).on = async () => {\n\t\t\t\tawait new Promise(res => {\n\t\t\t\t\tsetTimeout(res, 1000000);\n\t\t\t\t});\n\t\t\t};\n\n\t\t\t// Make the test run faster by casing the polling to start after 1 second\n\t\t\ttempEth.blockHeaderTimeout = 1;\n\t\t\tconst from = tempAcc2.address;\n\t\t\tconst to = tempAcc.address;\n\t\t\tconst value = `0x1`;\n\n\t\t\tconst sentTx: Web3PromiEvent<\n\t\t\t\tTransactionReceipt,\n\t\t\t\tSendTransactionEvents<typeof DEFAULT_RETURN_FORMAT>\n\t\t\t> = tempEth.sendTransaction({\n\t\t\t\tfrom,\n\t\t\t\tto,\n\t\t\t\tvalue,\n\t\t\t});\n\n\t\t\tconst confirmationPromise = new Promise((resolve: (status: bigint) => void) => {\n\t\t\t\t// Tx promise is handled separately\n\t\t\t\t// eslint-disable-next-line no-void\n\t\t\t\tvoid sentTx.on(\n\t\t\t\t\t'confirmation',\n\t\t\t\t\tasync ({\n\t\t\t\t\t\tconfirmations,\n\t\t\t\t\t\treceipt: { status },\n\t\t\t\t\t}: {\n\t\t\t\t\t\tconfirmations: bigint;\n\t\t\t\t\t\treceipt: { status: bigint };\n\t\t\t\t\t}) => {\n\t\t\t\t\t\t// Being able to get 2 confirmations means the polling for new blocks works\n\t\t\t\t\t\tif (confirmations >= 2) {\n\t\t\t\t\t\t\tsentTx.removeAllListeners();\n\t\t\t\t\t\t\tresolve(status);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Send a transaction to cause dev providers creating new blocks to fire the 'confirmation' event again.\n\t\t\t\t\t\t\tawait tempEth.sendTransaction({\n\t\t\t\t\t\t\t\tfrom,\n\t\t\t\t\t\t\t\tto,\n\t\t\t\t\t\t\t\tvalue,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t});\n\t\t\tawait sentTx;\n\n\t\t\t// Ensure the promise the get the confirmations resolves with no error\n\t\t\tconst status = await confirmationPromise;\n\t\t\texpect(status).toBe(BigInt(1));\n\t\t\tawait closeOpenConnection(tempEth);\n\t\t});\n\t\tit('maxListenersWarningThreshold test default config', () => {\n\t\t\t// default\n\t\t\texpect(web3Eth.maxListenersWarningThreshold).toBe(100);\n\t\t});\n\t\tit('maxListenersWarningThreshold set maxListeners through variable', () => {\n\t\t\teth2 = new Web3Eth({});\n\t\t\teth2.maxListenersWarningThreshold = 3;\n\t\t\texpect(eth2.maxListenersWarningThreshold).toBe(3);\n\t\t\texpect(eth2.getMaxListeners()).toBe(3);\n\t\t});\n\t\tit('maxListenersWarningThreshold set config', () => {\n\t\t\tconst eth = new Web3Eth({});\n\t\t\teth.setConfig({\n\t\t\t\tmaxListenersWarningThreshold: 3,\n\t\t\t});\n\t\t\texpect(eth2.maxListenersWarningThreshold).toBe(3);\n\t\t\texpect(eth2.getMaxListeners()).toBe(3);\n\t\t});\n\t\tit('defaultNetworkId', async () => {\n\t\t\t// default\n\t\t\texpect(web3Eth.defaultNetworkId).toBeUndefined();\n\n\t\t\t// after set\n\t\t\tweb3Eth.setConfig({\n\t\t\t\tdefaultNetworkId: 3,\n\t\t\t});\n\t\t\texpect(web3Eth.defaultNetworkId).toBe(3);\n\n\t\t\t// set by create new instance\n\t\t\teth2 = new Web3Eth({\n\t\t\t\tprovider: web3Eth.provider,\n\t\t\t\tconfig: {\n\t\t\t\t\tdefaultNetworkId: 4,\n\t\t\t\t},\n\t\t\t});\n\t\t\texpect(eth2.defaultNetworkId).toBe(4);\n\t\t\tconst res = await defaultTransactionBuilder({\n\t\t\t\ttransaction: {\n\t\t\t\t\tfrom: '0xEB014f8c8B418Db6b45774c326A0E64C78914dC0',\n\t\t\t\t\tto: '0x3535353535353535353535353535353535353535',\n\t\t\t\t\tvalue: '0x174876e800',\n\t\t\t\t\tgas: '0x5208',\n\t\t\t\t},\n\t\t\t\tweb3Context: eth2 as Web3Context,\n\t\t\t});\n\t\t\texpect(res.networkId).toBe(4);\n\n\t\t\t// pass network id\n\t\t\tconst resWithPassNetworkId = await defaultTransactionBuilder({\n\t\t\t\ttransaction: {\n\t\t\t\t\tfrom: '0xEB014f8c8B418Db6b45774c326A0E64C78914dC0',\n\t\t\t\t\tto: '0x3535353535353535353535353535353535353535',\n\t\t\t\t\tvalue: '0x174876e800',\n\t\t\t\t\tgas: '0x5208',\n\t\t\t\t\tnetworkId: 5,\n\t\t\t\t},\n\t\t\t\tweb3Context: eth2 as Web3Context,\n\t\t\t});\n\n\t\t\texpect(resWithPassNetworkId.networkId).toBe(BigInt(5));\n\t\t});\n\t\tit('defaultChain', async () => {\n\t\t\t// default\n\t\t\texpect(web3Eth.defaultChain).toBe('mainnet');\n\n\t\t\t// after set\n\t\t\tweb3Eth.setConfig({\n\t\t\t\tdefaultChain: 'ropsten',\n\t\t\t});\n\t\t\texpect(web3Eth.defaultChain).toBe('ropsten');\n\n\t\t\t// set by create new instance\n\t\t\teth2 = new Web3Eth({\n\t\t\t\tprovider: web3Eth.provider,\n\t\t\t\tconfig: {\n\t\t\t\t\tdefaultChain: 'rinkeby',\n\t\t\t\t},\n\t\t\t});\n\t\t\texpect(eth2.defaultChain).toBe('rinkeby');\n\t\t\tconst res = await defaultTransactionBuilder({\n\t\t\t\ttransaction: {\n\t\t\t\t\tfrom: '0xEB014f8c8B418Db6b45774c326A0E64C78914dC0',\n\t\t\t\t\tto: '0x3535353535353535353535353535353535353535',\n\t\t\t\t\tvalue: '0x174876e800',\n\t\t\t\t\tgas: '0x5208',\n\t\t\t\t},\n\t\t\t\tweb3Context: eth2 as Web3Context,\n\t\t\t});\n\t\t\texpect(res.chain).toBe('rinkeby');\n\t\t});\n\t\tit('defaultHardfork', async () => {\n\t\t\t// default\n\t\t\texpect(web3Eth.defaultHardfork).toBe('london');\n\n\t\t\t// after set\n\t\t\tweb3Eth.setConfig({\n\t\t\t\tdefaultHardfork: 'dao',\n\t\t\t});\n\t\t\texpect(web3Eth.defaultHardfork).toBe('dao');\n\n\t\t\t// set by create new instance\n\t\t\teth2 = new Web3Eth({\n\t\t\t\tprovider: web3Eth.provider,\n\t\t\t\tconfig: {\n\t\t\t\t\tdefaultHardfork: 'istanbul',\n\t\t\t\t\tdefaultTransactionType: '0x0',\n\t\t\t\t},\n\t\t\t});\n\t\t\texpect(eth2.defaultHardfork).toBe('istanbul');\n\t\t\texpect(eth2.defaultTransactionType).toBe('0x0');\n\n\t\t\tconst res = await prepareTransactionForSigning(\n\t\t\t\t{\n\t\t\t\t\tfrom: '0xEB014f8c8B418Db6b45774c326A0E64C78914dC0',\n\t\t\t\t\tto: '0x3535353535353535353535353535353535353535',\n\t\t\t\t\tvalue: '0x174876e800',\n\t\t\t\t\tgas: '0x5208',\n\t\t\t\t\tgasPrice: '0x4a817c800',\n\t\t\t\t\tdata: '0x0',\n\t\t\t\t\tnonce: '0x4',\n\t\t\t\t\tchainId: '0x1',\n\t\t\t\t\tgasLimit: '0x5208',\n\t\t\t\t},\n\t\t\t\teth2,\n\t\t\t);\n\t\t\texpect(res.common.hardfork()).toBe('istanbul');\n\t\t});\n\t\tit('defaultCommon', () => {\n\t\t\t// default\n\t\t\texpect(web3Eth.defaultCommon).toBeUndefined();\n\t\t\tconst baseChain: ValidChains = 'mainnet';\n\t\t\tconst hardfork: Hardfork = 'dao';\n\t\t\tconst common = {\n\t\t\t\tcustomChain: {\n\t\t\t\t\tname: 'test',\n\t\t\t\t\tnetworkId: 123,\n\t\t\t\t\tchainId: 1234,\n\t\t\t\t},\n\t\t\t\tbaseChain,\n\t\t\t\thardfork,\n\t\t\t};\n\t\t\t// after set\n\t\t\tweb3Eth.setConfig({\n\t\t\t\tdefaultCommon: common,\n\t\t\t});\n\t\t\texpect(web3Eth.defaultCommon).toBe(common);\n\n\t\t\t// set by create new instance\n\t\t\teth2 = new Web3Eth({\n\t\t\t\tconfig: {\n\t\t\t\t\tdefaultCommon: common,\n\t\t\t\t},\n\t\t\t});\n\t\t\texpect(eth2.defaultCommon).toBe(common);\n\t\t});\n\t\tit('defaultTransactionType', async () => {\n\t\t\t// default\n\t\t\texpect(web3Eth.defaultTransactionType).toBe('0x2');\n\t\t\t// after set\n\t\t\tweb3Eth.setConfig({\n\t\t\t\tdefaultTransactionType: '0x3',\n\t\t\t});\n\t\t\texpect(web3Eth.defaultTransactionType).toBe('0x3');\n\n\t\t\t// set by create new instance\n\t\t\teth2 = new Web3Eth({\n\t\t\t\tprovider: clientUrl,\n\t\t\t\tconfig: {\n\t\t\t\t\tdefaultTransactionType: '0x4444',\n\t\t\t\t},\n\t\t\t});\n\t\t\t\n\t\t\texpect(eth2.defaultTransactionType).toBe('0x4444');\n\n\t\t\tconst res = getTransactionType(\n\t\t\t\t{\n\t\t\t\t\tfrom: '0xEB014f8c8B418Db6b45774c326A0E64C78914dC0',\n\t\t\t\t\tto: '0x3535353535353535353535353535353535353535',\n\t\t\t\t\tvalue: '0x174876e800',\n\t\t\t\t\tgas: '0x5208',\n\t\t\t\t\tdata: '0x0',\n\t\t\t\t\tnonce: '0x4',\n\t\t\t\t\tchainId: '0x1',\n\t\t\t\t\tgasLimit: '0x5208',\n\t\t\t\t},\n\t\t\t\teth2,\n\t\t\t);\n\t\t\texpect(res).toBe('0x4444');\n\n\t\t\t// test override to 0x2 if:\n\t\t\t// tx.maxFeePerGas !== undefined ||\n\t\t\t// tx.maxPriorityFeePerGas !== undefined ||\n\t\t\t// tx.hardfork === 'london' ||\n\t\t\t// tx.common?.hardfork === 'london'\n\t\t\tconst maxFeePerGasOverride = getTransactionType(\n\t\t\t\t{\n\t\t\t\t\tfrom: '0xEB014f8c8B418Db6b45774c326A0E64C78914dC0',\n\t\t\t\t\tto: '0x3535353535353535353535353535353535353535',\n\t\t\t\t\tvalue: '0x174876e800',\n\t\t\t\t\tgas: '0x5208',\n\t\t\t\t\tdata: '0x0',\n\t\t\t\t\tnonce: '0x4',\n\t\t\t\t\tchainId: '0x1',\n\t\t\t\t\tgasLimit: '0x5208',\n\t\t\t\t\tmaxFeePerGas: '0x32',\n\t\t\t\t},\n\t\t\t\teth2,\n\t\t\t);\n\t\t\texpect(maxFeePerGasOverride).toBe('0x2');\n\t\t\tconst maxPriorityFeePerGasOverride = getTransactionType(\n\t\t\t\t{\n\t\t\t\t\tfrom: '0xEB014f8c8B418Db6b45774c326A0E64C78914dC0',\n\t\t\t\t\tto: '0x3535353535353535353535353535353535353535',\n\t\t\t\t\tvalue: '0x174876e800',\n\t\t\t\t\tgas: '0x5208',\n\t\t\t\t\tdata: '0x0',\n\t\t\t\t\tnonce: '0x4',\n\t\t\t\t\tchainId: '0x1',\n\t\t\t\t\tgasLimit: '0x5208',\n\t\t\t\t\tmaxPriorityFeePerGas: '0x32',\n\t\t\t\t},\n\t\t\t\teth2,\n\t\t\t);\n\t\t\texpect(maxPriorityFeePerGasOverride).toBe('0x2');\n\t\t\tconst hardforkOverride = getTransactionType(\n\t\t\t\t{\n\t\t\t\t\tfrom: '0xEB014f8c8B418Db6b45774c326A0E64C78914dC0',\n\t\t\t\t\tto: '0x3535353535353535353535353535353535353535',\n\t\t\t\t\tvalue: '0x174876e800',\n\t\t\t\t\tgas: '0x5208',\n\t\t\t\t\tdata: '0x0',\n\t\t\t\t\tnonce: '0x4',\n\t\t\t\t\tchainId: '0x1',\n\t\t\t\t\tgasLimit: '0x5208',\n\t\t\t\t\thardfork: 'london',\n\t\t\t\t},\n\t\t\t\teth2,\n\t\t\t);\n\t\t\texpect(hardforkOverride).toBe('0x2');\n\t\t\tconst commonOverride = getTransactionType(\n\t\t\t\t{\n\t\t\t\t\tfrom: '0xEB014f8c8B418Db6b45774c326A0E64C78914dC0',\n\t\t\t\t\tto: '0x3535353535353535353535353535353535353535',\n\t\t\t\t\tvalue: '0x174876e800',\n\t\t\t\t\tgas: '0x5208',\n\t\t\t\t\tdata: '0x0',\n\t\t\t\t\tnonce: '0x4',\n\t\t\t\t\tchainId: '0x1',\n\t\t\t\t\tgasLimit: '0x5208',\n\t\t\t\t\tcommon: {\n\t\t\t\t\t\tcustomChain: { name: 'ropsten', networkId: '2', chainId: '0x1' },\n\t\t\t\t\t\thardfork: 'london',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\teth2,\n\t\t\t);\n\t\t\texpect(commonOverride).toBe('0x2');\n\n\t\t\t// override to 0x1 if:\n\t\t\t// tx.accessList !== undefined || tx.hardfork === 'berlin' || tx.common?.hardfork === 'berlin'\n\n\t\t\tconst accessListOverride = getTransactionType(\n\t\t\t\t{\n\t\t\t\t\tfrom: '0xEB014f8c8B418Db6b45774c326A0E64C78914dC0',\n\t\t\t\t\tto: '0x3535353535353535353535353535353535353535',\n\t\t\t\t\tvalue: '0x174876e800',\n\t\t\t\t\tgas: '0x5208',\n\t\t\t\t\tdata: '0x0',\n\t\t\t\t\tnonce: '0x4',\n\t\t\t\t\tchainId: '0x1',\n\t\t\t\t\tgasLimit: '0x5208',\n\t\t\t\t\taccessList: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taddress: '0xEB014f8c8B418Db6b45774c326A0E64C78914dC0',\n\t\t\t\t\t\t\tstorageKeys: ['0x3535353535353535353535353535353535353535'],\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\teth2,\n\t\t\t);\n\t\t\texpect(accessListOverride).toBe('0x1');\n\n\t\t\tconst hardforkBerlinOverride = getTransactionType(\n\t\t\t\t{\n\t\t\t\t\tfrom: '0xEB014f8c8B418Db6b45774c326A0E64C78914dC0',\n\t\t\t\t\tto: '0x3535353535353535353535353535353535353535',\n\t\t\t\t\tvalue: '0x174876e800',\n\t\t\t\t\tgas: '0x5208',\n\t\t\t\t\tdata: '0x0',\n\t\t\t\t\tnonce: '0x4',\n\t\t\t\t\tchainId: '0x1',\n\t\t\t\t\tgasLimit: '0x5208',\n\t\t\t\t\thardfork: 'berlin',\n\t\t\t\t},\n\t\t\t\teth2,\n\t\t\t);\n\t\t\texpect(hardforkBerlinOverride).toBe('0x0');\n\n\t\t\tconst commonBerlinOverride = getTransactionType(\n\t\t\t\t{\n\t\t\t\t\tfrom: '0xEB014f8c8B418Db6b45774c326A0E64C78914dC0',\n\t\t\t\t\tto: '0x3535353535353535353535353535353535353535',\n\t\t\t\t\tvalue: '0x174876e800',\n\t\t\t\t\tgas: '0x5208',\n\t\t\t\t\tdata: '0x0',\n\t\t\t\t\tnonce: '0x4',\n\t\t\t\t\tchainId: '0x1',\n\t\t\t\t\tgasLimit: '0x5208',\n\t\t\t\t\tcommon: {\n\t\t\t\t\t\tcustomChain: { name: 'ropsten', networkId: '2', chainId: '0x1' },\n\t\t\t\t\t\thardfork: 'berlin',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\teth2,\n\t\t\t);\n\t\t\texpect(commonBerlinOverride).toBe('0x0');\n\t\t});\n\t\tit('defaultMaxPriorityFeePerGas', async () => {\n\t\t\t// default\n\t\t\texpect(web3Eth.defaultMaxPriorityFeePerGas).toBe(numberToHex(2500000000));\n\t\t\t// after set\n\t\t\tweb3Eth.setConfig({\n\t\t\t\tdefaultMaxPriorityFeePerGas: numberToHex(2100000000),\n\t\t\t});\n\t\t\texpect(web3Eth.defaultMaxPriorityFeePerGas).toBe(numberToHex(2100000000));\n\n\t\t\t// set by create new instance\n\t\t\teth2 = new Web3Eth({\n\t\t\t\tprovider: web3Eth.provider,\n\t\t\t\tconfig: {\n\t\t\t\t\tdefaultMaxPriorityFeePerGas: numberToHex(1200000000),\n\t\t\t\t},\n\t\t\t});\n\t\t\texpect(eth2.defaultMaxPriorityFeePerGas).toBe(numberToHex(1200000000));\n\n\t\t\tconst res = await getTransactionGasPricing(\n\t\t\t\t{\n\t\t\t\t\tfrom: '0xEB014f8c8B418Db6b45774c326A0E64C78914dC0',\n\t\t\t\t\tto: '0x3535353535353535353535353535353535353535',\n\t\t\t\t\tvalue: '0x174876e800',\n\t\t\t\t\ttype: '0x2',\n\t\t\t\t\tgas: '0x5208',\n\t\t\t\t\tdata: '0x0',\n\t\t\t\t\tnonce: '0x4',\n\t\t\t\t\tchainId: '0x1',\n\t\t\t\t\tgasLimit: '0x5208',\n\t\t\t\t},\n\t\t\t\teth2,\n\t\t\t\tDEFAULT_RETURN_FORMAT,\n\t\t\t);\n\t\t\texpect(res?.maxPriorityFeePerGas).toBe(BigInt(1200000000));\n\n\t\t\t// override test\n\t\t\tconst resOverride = await getTransactionGasPricing(\n\t\t\t\t{\n\t\t\t\t\tfrom: '0xEB014f8c8B418Db6b45774c326A0E64C78914dC0',\n\t\t\t\t\tto: '0x3535353535353535353535353535353535353535',\n\t\t\t\t\tvalue: '0x174876e800',\n\t\t\t\t\ttype: '0x2',\n\t\t\t\t\tgas: '0x5208',\n\t\t\t\t\tdata: '0x0',\n\t\t\t\t\tnonce: '0x4',\n\t\t\t\t\tchainId: '0x1',\n\t\t\t\t\tgasLimit: '0x5208',\n\t\t\t\t\tmaxPriorityFeePerGas: '0x123123123',\n\t\t\t\t},\n\t\t\t\teth2,\n\t\t\t\tDEFAULT_RETURN_FORMAT,\n\t\t\t);\n\t\t\texpect(resOverride?.maxPriorityFeePerGas).toBe(BigInt('4883362083'));\n\t\t});\n\t\tit('transactionBuilder', async () => {\n\t\t\t// default\n\t\t\texpect(web3Eth.transactionBuilder).toBeUndefined();\n\n\t\t\t// default\n\t\t\texpect(web3Eth.transactionBuilder).toBeUndefined();\n\n\t\t\tconst newBuilderMock = jest.fn() as unknown as TransactionBuilder;\n\n\t\t\tweb3Eth.setConfig({\n\t\t\t\ttransactionBuilder: newBuilderMock,\n\t\t\t});\n\t\t\texpect(web3Eth.transactionBuilder).toBe(newBuilderMock);\n\n\t\t\t// set by create new instance\n\t\t\teth2 = new Web3Eth({\n\t\t\t\tconfig: {\n\t\t\t\t\ttransactionBuilder: newBuilderMock,\n\t\t\t\t},\n\t\t\t});\n\t\t\texpect(eth2.transactionBuilder).toBe(newBuilderMock);\n\n\t\t\tawait transactionBuilder({\n\t\t\t\ttransaction: {\n\t\t\t\t\tfrom: '0xEB014f8c8B418Db6b45774c326A0E64C78914dC0',\n\t\t\t\t\tto: '0x3535353535353535353535353535353535353535',\n\t\t\t\t\tvalue: '0x174876e800',\n\t\t\t\t\tgas: '0x5208',\n\t\t\t\t\tgasPrice: '0x4a817c800',\n\t\t\t\t\tdata: '0x0',\n\t\t\t\t\tnonce: '0x4',\n\t\t\t\t\tchainId: '0x1',\n\t\t\t\t\tgasLimit: '0x5208',\n\t\t\t\t},\n\t\t\t\tweb3Context: eth2,\n\t\t\t});\n\t\t\texpect(newBuilderMock).toHaveBeenCalled();\n\t\t});\n\t\tit('transactionTypeParser', () => {\n\t\t\t// default\n\t\t\texpect(web3Eth.transactionTypeParser).toBeUndefined();\n\n\t\t\tconst newParserMock = jest.fn() as unknown as TransactionTypeParser;\n\n\t\t\tweb3Eth.setConfig({\n\t\t\t\ttransactionTypeParser: newParserMock,\n\t\t\t});\n\t\t\texpect(web3Eth.transactionTypeParser).toBe(newParserMock);\n\n\t\t\t// set by create new instance\n\t\t\teth2 = new Web3Eth({\n\t\t\t\tconfig: {\n\t\t\t\t\ttransactionTypeParser: newParserMock,\n\t\t\t\t},\n\t\t\t});\n\t\t\texpect(eth2.transactionTypeParser).toBe(newParserMock);\n\t\t\tdetectTransactionType(\n\t\t\t\t{\n\t\t\t\t\tfrom: '0xEB014f8c8B418Db6b45774c326A0E64C78914dC0',\n\t\t\t\t\tto: '0x3535353535353535353535353535353535353535',\n\t\t\t\t\tvalue: '0x174876e800',\n\t\t\t\t\tgas: '0x5208',\n\t\t\t\t\tgasPrice: '0x4a817c800',\n\t\t\t\t\tdata: '0x0',\n\t\t\t\t\tnonce: '0x4',\n\t\t\t\t\tchainId: '0x1',\n\t\t\t\t\tgasLimit: '0x5208',\n\t\t\t\t},\n\t\t\t\teth2,\n\t\t\t);\n\t\t\texpect(newParserMock).toHaveBeenCalled();\n\t\t});\n\t});\n});\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/defaults.transactionBlockTimeout.test.ts",["1061","1062"],["1063","1064","1065","1066"],"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { DEFAULT_RETURN_FORMAT } from 'web3-types';\nimport { Web3PromiEvent } from 'web3-core';\nimport { SupportedProviders, TransactionReceipt } from 'web3-types';\nimport { TransactionBlockTimeoutError } from 'web3-errors';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { Web3 } from 'web3';\nimport { Web3Account } from 'web3-eth-accounts';\nimport { SendTransactionEvents } from '../../src';\n\nimport {\n\tcloseOpenConnection,\n\tgetSystemTestProvider,\n\tisSocket,\n\titIf,\n\twaitForOpenConnection,\n\tcreateLocalAccount,\n\tsendFewSampleTxs,\n\tgetSystemTestBackend,\n\tdescribeIf,\n\tBACKEND\n} from '../fixtures/system_test_utils';\n\nconst MAX_32_SIGNED_INTEGER = 2147483647;\nconst gas = 21000;\n// skip if using hardhat, does not return a transaction not mined error but instead a nonce too high error\n/* eslint-disable jest/no-standalone-expect */\ndescribeIf(getSystemTestBackend() !== BACKEND.HARDHAT)('defaults', () => {\n\tlet web3: Web3;\n\tlet clientUrl: string | SupportedProviders;\n\tlet account1: Web3Account;\n\tlet account2: Web3Account;\n\n\tbeforeEach(() => {\n\t\tclientUrl = getSystemTestProvider();\n\t\tweb3 = new Web3(clientUrl);\n\n\t\t// Increase other timeouts so only `transactionBlockTimeout` would be reached\n\t\tweb3.eth.transactionSendTimeout = MAX_32_SIGNED_INTEGER;\n\t\tweb3.eth.transactionPollingTimeout = MAX_32_SIGNED_INTEGER;\n\t\tweb3.eth.blockHeaderTimeout = MAX_32_SIGNED_INTEGER / 1000;\n\t});\n\n\tafterEach(async () => {\n\t\tweb3.eth.transactionBlockTimeout = 50;\n\t\tawait closeOpenConnection(web3.eth);\n\t});\n\n\tdescribe('defaults', () => {\n\t\tit('should fail if transaction was not mined within `transactionBlockTimeout` blocks', async () => {\n\t\t\taccount1 = await createLocalAccount(web3);\n\t\t\taccount2 = await createLocalAccount(web3);\n\t\t\t// Setting a high `nonce` when sending a transaction, to cause the RPC call to stuck at the Node\n\n\t\t\tconst sentTx: Web3PromiEvent<\n\t\t\t\tTransactionReceipt,\n\t\t\t\tSendTransactionEvents<typeof DEFAULT_RETURN_FORMAT>\n\t\t\t> = web3.eth.sendTransaction({\n\t\t\t\tfrom: account1.address,\n\t\t\t\tto: account2.address,\n\t\t\t\tgas,\n\t\t\t\tvalue: '0x1',\n\t\t\t\t// Give a high nonce so the transaction stuck forever.\n\t\t\t\t// However, make this random to be able to run the test many times without receiving an error that indicate submitting the same transaction twice.\n\t\t\t\tnonce: Number.MAX_SAFE_INTEGER,\n\t\t\t});\n\n\t\t\t// Some providers (mostly used for development) will make blocks only when there are new transactions\n\t\t\t// So, send 2 transactions, one after another, because in this test `transactionBlockTimeout = 2`.\n\t\t\t// eslint-disable-next-line no-void\n\t\t\tawait sendFewSampleTxs(2);\n\t\t\t\n\t\t\tweb3.eth.transactionBlockTimeout = 2;\n\n\t\t\tawait expect(sentTx).rejects.toThrow(/was not mined within [0-9]+ blocks/);\n\n\t\t\tawait expect(sentTx).rejects.toThrow(TransactionBlockTimeoutError);\n\n\t\t\tawait closeOpenConnection(web3.eth);\n\t\t});\n\n\t\t// The code of this test case is identical to the pervious one except for `eth.enableExperimentalFeatures = true`\n\t\t// TODO: And this test case will be removed once https://github.com/web3/web3.js/issues/5521 is implemented.\n\t\titIf(isSocket)(\n\t\t\t'should fail if transaction was not mined within `transactionBlockTimeout` blocks - when subscription is used',\n\t\t\tasync () => {\n\t\t\t\taccount1 = await createLocalAccount(web3);\n\t\t\t\taccount2 = await createLocalAccount(web3);\n\t\t\t\tawait waitForOpenConnection(web3.eth);\n\t\t\t\t// using subscription to get the new blocks and fire `TransactionBlockTimeoutError` is currently supported only\n\t\t\t\t//\twith `enableExperimentalFeatures.useSubscriptionWhenCheckingBlockTimeout` equal true.\n\t\t\t\tweb3.eth.enableExperimentalFeatures.useSubscriptionWhenCheckingBlockTimeout = true;\n\n\t\t\t\t// Setting a high `nonce` when sending a transaction, to cause the RPC call to stuck at the Node\n\t\t\t\tconst sentTx: Web3PromiEvent<\n\t\t\t\t\tTransactionReceipt,\n\t\t\t\t\tSendTransactionEvents<typeof DEFAULT_RETURN_FORMAT>\n\t\t\t\t> = web3.eth.sendTransaction({\n\t\t\t\t\tfrom: account1.address,\n\t\t\t\t\tto: account2.address,\n\t\t\t\t\tgas,\n\t\t\t\t\tvalue: '0x1',\n\t\t\t\t\ttype: '0x1',\n\t\t\t\t\t// Give a high nonce so the transaction stuck forever.\n\t\t\t\t\t// However, make this random to be able to run the test many times without receiving an error that indicate submitting the same transaction twice.\n\t\t\t\t\tnonce: Number.MAX_SAFE_INTEGER,\n\t\t\t\t});\n\n\t\t\t\t// Some providers (mostly used for development) will make blocks only when there are new transactions\n\t\t\t\t// So, send 2 transactions, one after another, because in this test `transactionBlockTimeout = 2`.\n\t\t\t\t// eslint-disable-next-line no-void, @typescript-eslint/no-unsafe-call\n\t\t\t\tvoid sendFewSampleTxs(2);\n\n\t\t\t\tweb3.eth.transactionBlockTimeout = 2;\n\n\t\t\t\tawait expect(sentTx).rejects.toThrow(/was not mined within [0-9]+ blocks/);\n\n\t\t\t\tawait expect(sentTx).rejects.toThrow(TransactionBlockTimeoutError);\n\n\t\t\t\tawait closeOpenConnection(web3.eth);\n\t\t\t},\n\t\t);\n\t});\n});\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/eth.test.ts",[],["1067","1068"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/format.test.ts",[],["1069"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/get_revert_reason.test.ts",["1070"],["1071","1072","1073","1074","1075","1076","1077","1078","1079","1080"],"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/* eslint-disable jest/no-conditional-expect */\n\nimport { Address, Transaction, TransactionCall } from 'web3-types';\n\nimport Web3Eth from '../../src';\nimport { getRevertReason } from '../../src/utils/get_revert_reason';\nimport { SimpleRevertAbi, SimpleRevertDeploymentData } from '../fixtures/simple_revert';\nimport {\n\tcreateTempAccount,\n\tgetSystemTestBackend,\n\tgetSystemTestProvider,\n\tBACKEND\n} from '../fixtures/system_test_utils';\n\ndescribe('Web3Eth.getRevertReason', () => {\n\tlet tempAccount: { address: string; privateKey: string };\n\tlet web3Eth: Web3Eth;\n\tlet simpleRevertContractAddress: Address;\n\n\tbeforeAll(async () => {\n\t\ttempAccount = await createTempAccount();\n\t\tweb3Eth = new Web3Eth(getSystemTestProvider());\n\n\t\tconst simpleRevertDeployTransaction: Transaction = {\n\t\t\tfrom: tempAccount.address,\n\t\t\tdata: SimpleRevertDeploymentData,\n\t\t};\n\t\tsimpleRevertDeployTransaction.gas = await web3Eth.estimateGas(\n\t\t\tsimpleRevertDeployTransaction,\n\t\t);\n\t\tsimpleRevertContractAddress = (await web3Eth.sendTransaction(simpleRevertDeployTransaction))\n\t\t\t.contractAddress as Address;\n\t});\n\n\tit('should return reason for a contract call', async () => {\n\t\tconst transaction: TransactionCall = {\n\t\t\tfrom: tempAccount.address,\n\t\t\tto: simpleRevertContractAddress,\n\t\t\tdata: '0xf38fb65b',\n\t\t};\n\n\t\tconst response = await getRevertReason(web3Eth, transaction);\n\n\t\tswitch (getSystemTestBackend()) {\n\t\t\tcase BACKEND.GETH:\n\t\t\t\texpect(response).toMatchObject({\n\t\t\t\t\treason: 'execution reverted: This is a call revert',\n\t\t\t\t\tsignature: '0x08c379a0',\n\t\t\t\t\tdata: '000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000155468697320697320612063616c6c207265766572740000000000000000000000',\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase BACKEND.HARDHAT:\n\t\t\t\texpect(response).toMatchObject({\n\t\t\t\t\treason: \"Error: VM Exception while processing transaction: reverted with reason string 'This is a call revert'\",\n\t\t\t\t\tsignature: '0x08c379a0',\n\t\t\t\t\tdata: '000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000155468697320697320612063616c6c207265766572740000000000000000000000',\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Unable to finish test, unknown backend: ${getSystemTestBackend()}`,\n\t\t\t\t);\n\t\t}\n\t});\n\n\tit('should return reason for a contract send', async () => {\n\t\tconst transaction: TransactionCall = {\n\t\t\tfrom: tempAccount.address,\n\t\t\tto: simpleRevertContractAddress,\n\t\t\tdata: '0xba57a511000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000067265766572740000000000000000000000000000000000000000000000000000',\n\t\t};\n\n\t\tconst response = await getRevertReason(web3Eth, transaction);\n\n\t\tswitch (getSystemTestBackend()) {\n\t\t\tcase BACKEND.GETH:\n\t\t\t\texpect(response).toMatchObject({\n\t\t\t\t\treason: 'execution reverted: This is a send revert',\n\t\t\t\t\tsignature: '0x08c379a0',\n\t\t\t\t\tdata: '000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000155468697320697320612073656e64207265766572740000000000000000000000',\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase BACKEND.HARDHAT:\n\t\t\t\texpect(response).toMatchObject({\n\t\t\t\t\treason: \"Error: VM Exception while processing transaction: reverted with reason string 'This is a send revert'\",\n\t\t\t\t\tsignature: '0x08c379a0',\n\t\t\t\t\tdata: '000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000155468697320697320612073656e64207265766572740000000000000000000000',\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Unable to finish test, unknown backend: ${getSystemTestBackend()}`,\n\t\t\t\t);\n\t\t}\n\t});\n\n\tit('should return out of gas reason', async () => {\n\t\tconst transaction: TransactionCall = {\n\t\t\tfrom: tempAccount.address,\n\t\t\tto: simpleRevertContractAddress,\n\t\t\tgas: '0x0',\n\t\t\tdata: '0xba57a511000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000067265766572740000000000000000000000000000000000000000000000000000',\n\t\t};\n\n\t\tconst response = await getRevertReason(web3Eth, transaction);\n\t\tswitch (getSystemTestBackend()) {\n\t\t\tcase BACKEND.GETH:\n\t\t\t\texpect(response).toBe(\n\t\t\t\t\t'err: intrinsic gas too low: have 0, want 21544 (supplied gas 0)',\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase BACKEND.HARDHAT:\n\t\t\t\texpect(response).toContain('Error: base fee exceeds gas limit');\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Unable to finish test, unknown backend: ${getSystemTestBackend()}`,\n\t\t\t\t);\n\t\t}\n\t});\n\n\tit('should revert with custom error with no params', async () => {\n\t\tconst transaction: TransactionCall = {\n\t\t\tfrom: tempAccount.address,\n\t\t\tto: simpleRevertContractAddress,\n\t\t\tdata: '0x3ebf4d9c',\n\t\t};\n\n\t\tconst response = await getRevertReason(web3Eth, transaction, SimpleRevertAbi);\n\t\tswitch (getSystemTestBackend()) {\n\t\t\tcase BACKEND.GETH:\n\t\t\t\texpect(response).toMatchObject({\n\t\t\t\t\tdata: '',\n\t\t\t\t\treason: 'execution reverted',\n\t\t\t\t\tsignature: '0x72090e4d',\n\t\t\t\t\tcustomErrorName: 'ErrorWithNoParams',\n\t\t\t\t\tcustomErrorDecodedSignature: 'ErrorWithNoParams()',\n\t\t\t\t\tcustomErrorArguments: {},\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase BACKEND.HARDHAT:\n\t\t\t\texpect(response).toMatchObject({\n\t\t\t\t\tdata: '',\n\t\t\t\t\treason: \"Error: VM Exception while processing transaction: reverted with an unrecognized custom error (return data: 0x72090e4d)\",\n\t\t\t\t\tsignature: '0x72090e4d',\n\t\t\t\t\tcustomErrorName: 'ErrorWithNoParams',\n\t\t\t\t\tcustomErrorDecodedSignature: 'ErrorWithNoParams()',\n\t\t\t\t\tcustomErrorArguments: {},\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Unable to finish test, unknown backend: ${getSystemTestBackend()}`,\n\t\t\t\t);\n\t\t}\n\t});\n\n\tit('should revert with custom error with params', async () => {\n\t\tconst transaction: TransactionCall = {\n\t\t\tfrom: tempAccount.address,\n\t\t\tto: simpleRevertContractAddress,\n\t\t\tdata: '0x819f48fe',\n\t\t};\n\n\t\tconst response = await getRevertReason(web3Eth, transaction, SimpleRevertAbi);\n\t\tswitch (getSystemTestBackend()) {\n\t\t\tcase BACKEND.GETH:\n\t\t\t\texpect(response).toMatchObject({\n\t\t\t\t\tdata: '000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000001c5468697320697320616e206572726f72207769746820706172616d7300000000',\n\t\t\t\t\treason: 'execution reverted',\n\t\t\t\t\tsignature: '0xc85bda60',\n\t\t\t\t\tcustomErrorName: 'ErrorWithParams',\n\t\t\t\t\tcustomErrorDecodedSignature: 'ErrorWithParams(uint256,string)',\n\t\t\t\t\tcustomErrorArguments: {\n\t\t\t\t\t\tcode: BigInt(42),\n\t\t\t\t\t\tmessage: 'This is an error with params',\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase BACKEND.HARDHAT:\n\t\t\t\texpect(response).toMatchObject({\n\t\t\t\t\tdata: '000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000001c5468697320697320616e206572726f72207769746820706172616d7300000000',\n\t\t\t\t\treason: \"Error: VM Exception while processing transaction: reverted with an unrecognized custom error (return data: 0xc85bda60000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000001c5468697320697320616e206572726f72207769746820706172616d7300000000)\",\n\t\t\t\t\tsignature: '0xc85bda60',\n\t\t\t\t\tcustomErrorName: 'ErrorWithParams',\n\t\t\t\t\tcustomErrorDecodedSignature: 'ErrorWithParams(uint256,string)',\n\t\t\t\t\tcustomErrorArguments: {\n\t\t\t\t\t\tcode: BigInt(42),\n\t\t\t\t\t\tmessage: 'This is an error with params',\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Unable to finish test, unknown backend: ${getSystemTestBackend()}`,\n\t\t\t\t);\n\t\t}\n\t});\n\n\tit(\"shouldn't return a revert reason\", async () => {\n\t\tconst transaction: TransactionCall = {\n\t\t\tfrom: tempAccount.address,\n\t\t\tto: simpleRevertContractAddress,\n\t\t\tdata: '0xba57a51100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000',\n\t\t};\n\n\t\tconst response = await getRevertReason(web3Eth, transaction);\n\t\texpect(response).toBeUndefined();\n\t});\n});\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/helper.ts",[],["1081","1082","1083"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/nonce.test.ts",[],["1084","1085","1086","1087"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/rpc.test.ts",[],["1088","1089","1090","1091","1092","1093","1094","1095","1096","1097","1098"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/subscribe.test.ts",[],["1099","1100"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/subscription_heads.test.ts",[],["1101","1102"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/subscription_logs.test.ts",[],["1103","1104","1105"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/subscription_logs_block.test.ts",[],["1106","1107","1108"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/subscription_logs_clear.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/subscription_new_pending_tx.test.ts",[],["1109","1110"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/subscription_on_2_events.test.ts",[],["1111","1112"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/unsubscribe.test.ts",["1113"],["1114"],"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport WebSocketProvider from 'web3-providers-ws';\nimport { Web3BaseProvider } from 'web3-types';\n/* eslint-disable  import/no-extraneous-dependencies */\nimport { IpcProvider } from 'web3-providers-ipc';\nimport Web3Eth from '../../src/index';\nimport { NewHeadsSubscription, SyncingSubscription } from '../../src/web3_subscriptions';\nimport {\n\tgetSystemTestProviderUrl,\n\tdescribeIf,\n\tisWs,\n\tisSocket,\n\tcloseOpenConnection,\n\twaitForOpenConnection,\n} from '../fixtures/system_test_utils';\n\ndescribeIf(isSocket)('unsubscribe', () => {\n\tlet web3Eth: Web3Eth;\n\tlet provider: WebSocketProvider | IpcProvider;\n\tbeforeAll(() => {\n\t\tprovider = isWs\n\t\t\t? new WebSocketProvider(getSystemTestProviderUrl())\n\t\t\t: new IpcProvider(getSystemTestProviderUrl());\n\t});\n\tafterAll(async () => {\n\t\tawait closeOpenConnection(web3Eth);\n\t});\n\n\tdescribe('unsubscribe from', () => {\n\t\tit('should clearSubscriptions', async () => {\n\t\t\tweb3Eth = new Web3Eth(provider as Web3BaseProvider);\n\t\t\tawait web3Eth.subscribe('newHeads');\n\t\t\tconst subs = web3Eth?.subscriptionManager?.subscriptions;\n\t\t\tconst inst = subs?.get(Array.from(subs.keys())[0]);\n\t\t\texpect(inst).toBeInstanceOf(NewHeadsSubscription);\n\t\t\tawait waitForOpenConnection(web3Eth);\n\t\t\tawait web3Eth.clearSubscriptions();\n\t\t\texpect(web3Eth?.subscriptionManager?.subscriptions?.size).toBe(0);\n\t\t});\n\n\t\tit('subscribe to all and clear all except syncing', async () => {\n\t\t\tweb3Eth = new Web3Eth(provider as Web3BaseProvider);\n\t\t\tawait web3Eth.subscribe('newHeads');\n\t\t\tawait web3Eth.subscribe('newPendingTransactions');\n\t\t\tawait web3Eth.subscribe('syncing');\n\t\t\tawait web3Eth.subscribe('logs', {\n\t\t\t\taddress: '0x8320fe7702b96808f7bbc0d4a888ed1468216cfd',\n\t\t\t\ttopics: ['0xd78a0cb8bb633d06981248b816e7bd33c2a35a6089241d099fa519e361cab902'],\n\t\t\t});\n\t\t\texpect(web3Eth?.subscriptionManager?.subscriptions.size).toBe(4);\n\n\t\t\tawait waitForOpenConnection(web3Eth);\n\n\t\t\tawait web3Eth.clearSubscriptions(true);\n\n\t\t\tconst subs = web3Eth?.subscriptionManager?.subscriptions;\n\t\t\tconst inst = subs?.get(Array.from(subs.keys())[0]);\n\t\t\texpect(inst).toBeInstanceOf(SyncingSubscription);\n\t\t\texpect(web3Eth?.subscriptionManager?.subscriptions.size).toBe(1);\n\t\t});\n\t});\n});\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/watch_transaction.test.ts",[],["1115","1116","1117"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/watch_transaction_polling.test.ts",["1118","1119"],["1120","1121"],"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { DEFAULT_RETURN_FORMAT } from 'web3-types';\nimport { Web3PromiEvent } from 'web3-core';\nimport { SupportedProviders, TransactionReceipt } from 'web3-types';\nimport { Web3Eth, SendTransactionEvents } from '../../src';\n\nimport {\n\tcloseOpenConnection,\n\tcreateTempAccount,\n\tdescribeIf,\n\tgetSystemTestProvider,\n\tisHttp,\n} from '../fixtures/system_test_utils';\n\nconst waitConfirmations = 3;\n\ntype Resolve = (value?: unknown) => void;\n\ndescribeIf(isHttp)('watch polling transaction', () => {\n\tlet clientUrl: string | SupportedProviders;\n\tlet tempAcc: { address: string; privateKey: string };\n\tlet tempAcc2: { address: string; privateKey: string };\n\n\tbeforeEach(async () => {\n\t\ttempAcc = await createTempAccount();\n\t\ttempAcc2 = await createTempAccount();\n\t});\n\tbeforeAll(() => {\n\t\tclientUrl = getSystemTestProvider();\n\t});\n\n\tdescribe('wait for confirmation polling', () => {\n\t\tit('polling', async () => {\n\t\t\tconst web3Eth = new Web3Eth(clientUrl);\n\t\t\tweb3Eth.setConfig({ transactionConfirmationBlocks: waitConfirmations });\n\n\t\t\tconst from = tempAcc.address;\n\t\t\tconst to = tempAcc2.address;\n\t\t\tconst value = `0x1`;\n\n\t\t\tconst sentTx: Web3PromiEvent<\n\t\t\t\tTransactionReceipt,\n\t\t\t\tSendTransactionEvents<typeof DEFAULT_RETURN_FORMAT>\n\t\t\t> = web3Eth.sendTransaction({\n\t\t\t\tto,\n\t\t\t\tvalue,\n\t\t\t\tfrom,\n\t\t\t});\n\t\t\tconst confirmationPromise = new Promise((resolve: Resolve) => {\n\t\t\t\t// Tx promise is handled separately\n\t\t\t\t// eslint-disable-next-line no-void\n\t\t\t\tvoid sentTx.on(\n\t\t\t\t\t'confirmation',\n\t\t\t\t\tasync ({ confirmations }: { confirmations: bigint }) => {\n\t\t\t\t\t\tif (confirmations >= waitConfirmations) {\n\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Send a transaction to cause dev providers creating new blocks to fire the 'confirmation' event again.\n\t\t\t\t\t\t\tawait web3Eth.sendTransaction({\n\t\t\t\t\t\t\t\tto,\n\t\t\t\t\t\t\t\tvalue,\n\t\t\t\t\t\t\t\tfrom,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t});\n\t\t\tawait new Promise((resolve: Resolve) => {\n\t\t\t\t// Tx promise is handled separately\n\t\t\t\t// eslint-disable-next-line no-void\n\t\t\t\tvoid sentTx.on('receipt', (params: TransactionReceipt) => {\n\t\t\t\t\texpect(params.status).toBe(BigInt(1));\n\t\t\t\t\tresolve();\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tawait sentTx;\n\t\t\tawait confirmationPromise;\n\t\t\tsentTx.removeAllListeners();\n\t\t\tawait closeOpenConnection(web3Eth);\n\t\t});\n\t});\n});\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/web3_eth/call.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/web3_eth/createAccessList.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/web3_eth/estimate_gas.test.ts",[],["1122","1123","1124"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/web3_eth/getFeeHistory.test.ts",["1125"],[],"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { BlockNumberOrTag, Numbers, SupportedProviders } from 'web3-types';\n\nimport Web3Eth from '../../../src';\nimport {\n\tgetSystemTestProvider,\n\tdescribeIf,\n\tgetSystemTestBackend,\n\tcloseOpenConnection,\n\tBACKEND\n} from '../../fixtures/system_test_utils';\nimport { feeHistorySchema } from '../../../src/schemas';\n\ndescribeIf(getSystemTestBackend().includes(BACKEND.GETH))('Web3Eth.getFeeHistory', () => {\n\tlet web3Eth: Web3Eth;\n\tlet systemProvider: string | SupportedProviders;\n\n\tbeforeAll(() => {\n\t\tsystemProvider = getSystemTestProvider();\n\t\tweb3Eth = new Web3Eth(systemProvider);\n\t});\n\n\tafterAll(async () => {\n\t\tawait closeOpenConnection(web3Eth);\n\t});\n\n\ttest('should return fee history with right data', async () => {\n\t\tconst blockCount: Numbers = '0x1';\n\t\tconst newestBlock: BlockNumberOrTag = 'latest';\n\t\tconst rewardPercentiles: number[] = [];\n\n\t\tconst functionResponse = await web3Eth.getFeeHistory(\n\t\t\tblockCount,\n\t\t\tnewestBlock,\n\t\t\trewardPercentiles,\n\t\t);\n\n\t\tconst functionResponseKeys = Object.keys(functionResponse);\n\n\t\tconst schemaProperties = Object.keys(feeHistorySchema.properties);\n\n\t\tfunctionResponseKeys.forEach(prop => expect(schemaProperties).toContain(prop));\n\t});\n});\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/web3_eth/send_signed_transaction.test.ts",[],["1126","1127","1128","1129"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/web3_eth/send_transaction.test.ts",["1130"],["1131","1132","1133","1134","1135","1136","1137","1138","1139","1140","1141"],"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n// TODO Seems to be an issue with linter falsely reporting this\n// error for Transaction Error Scenarios tests\n/* eslint-disable jest/no-conditional-expect */\n\nimport {\n\tTransaction,\n\tTransactionWithFromLocalWalletIndex,\n\tTransactionWithToLocalWalletIndex,\n\tTransactionWithFromAndToLocalWalletIndex,\n\tAddress,\n\tDEFAULT_RETURN_FORMAT,\n} from 'web3-types';\nimport { Wallet } from 'web3-eth-accounts';\nimport { isHexStrict } from 'web3-validator';\n\nimport Web3Eth from '../../../src';\nimport {\n\tcloseOpenConnection,\n\tcreateAccountProvider,\n\tcreateTempAccount,\n\tgetSystemTestBackend,\n\tgetSystemTestProvider,\n\tisGeth,\n\titIf,\n\tBACKEND,\n} from '../../fixtures/system_test_utils';\nimport { SimpleRevertAbi, SimpleRevertDeploymentData } from '../../fixtures/simple_revert';\n\ndescribe('Web3Eth.sendTransaction', () => {\n\tlet web3Eth: Web3Eth;\n\tlet tempAcc: { address: string; privateKey: string };\n\n\tbeforeAll(async () => {\n\t\tweb3Eth = new Web3Eth(getSystemTestProvider());\n\t\ttempAcc = await createTempAccount();\n\t});\n\n\tafterAll(async () => {\n\t\tawait closeOpenConnection(web3Eth);\n\t});\n\n\tit('should make a simple value transfer', async () => {\n\t\tconst transaction: Transaction = {\n\t\t\tfrom: tempAcc.address,\n\t\t\tto: '0x0000000000000000000000000000000000000000',\n\t\t\tvalue: BigInt(1),\n\t\t};\n\t\tconst response = await web3Eth.sendTransaction(transaction);\n\t\texpect(response.status).toBe(BigInt(1));\n\t\texpect(response.events).toBeUndefined();\n\n\t\tconst minedTransactionData = await web3Eth.getTransaction(response.transactionHash);\n\t\texpect(minedTransactionData).toMatchObject(transaction);\n\t});\n\n\tit('should make a simple value transfer - with local wallet indexed sender', async () => {\n\t\tconst web3EthWithWallet = new Web3Eth(getSystemTestProvider());\n\t\tconst accountProvider = createAccountProvider(web3Eth);\n\t\tconst wallet = new Wallet(accountProvider);\n\n\t\tweb3EthWithWallet['_accountProvider'] = accountProvider;\n\t\tweb3EthWithWallet['_wallet'] = wallet;\n\n\t\tweb3EthWithWallet.wallet?.add(tempAcc.privateKey);\n\n\t\tconst transaction: TransactionWithFromLocalWalletIndex = {\n\t\t\tfrom: 0,\n\t\t\tto: '0x0000000000000000000000000000000000000000',\n\t\t\tgas: 21000,\n\t\t\tvalue: BigInt(1),\n\t\t};\n\t\tconst response = await web3EthWithWallet.sendTransaction(transaction);\n\t\texpect(response.status).toBe(BigInt(1));\n\t\texpect(response.events).toBeUndefined();\n\n\t\tconst minedTransactionData = await web3EthWithWallet.getTransaction(response.transactionHash);\n\n\t\texpect(minedTransactionData).toMatchObject({\n\t\t\tfrom: tempAcc.address,\n\t\t\tto: '0x0000000000000000000000000000000000000000',\n\t\t\tvalue: BigInt(1),\n\t\t});\n\t});\n\n\tit('should make a simple value transfer - with local wallet indexed receiver', async () => {\n\t\tconst web3EthWithWallet = new Web3Eth(getSystemTestProvider());\n\t\tconst accountProvider = createAccountProvider(web3Eth);\n\t\tconst wallet = new Wallet(accountProvider);\n\n\t\tweb3EthWithWallet['_accountProvider'] = accountProvider;\n\t\tweb3EthWithWallet['_wallet'] = wallet;\n\n\t\tweb3EthWithWallet.wallet?.add(tempAcc.privateKey);\n\n\t\tconst transaction: TransactionWithToLocalWalletIndex = {\n\t\t\tfrom: tempAcc.address,\n\t\t\tto: 0,\n\t\t\tgas: 21000,\n\t\t\tvalue: BigInt(1),\n\t\t};\n\t\tconst response = await web3EthWithWallet.sendTransaction(transaction);\n\t\texpect(response.status).toBe(BigInt(1));\n\t\texpect(response.events).toBeUndefined();\n\n\t\tconst minedTransactionData = await web3EthWithWallet.getTransaction(response.transactionHash);\n\n\t\texpect(minedTransactionData).toMatchObject({\n\t\t\tfrom: tempAcc.address,\n\t\t\tto: wallet.get(0)?.address.toLowerCase(),\n\t\t\tvalue: BigInt(1),\n\t\t});\n\t});\n\n\tit('should make a simple value transfer - with local wallet indexed sender and receiver', async () => {\n\t\tconst web3EthWithWallet = new Web3Eth(getSystemTestProvider());\n\t\tconst accountProvider = createAccountProvider(web3Eth);\n\t\tconst wallet = new Wallet(accountProvider);\n\n\t\tweb3EthWithWallet['_accountProvider'] = accountProvider;\n\t\tweb3EthWithWallet['_wallet'] = wallet;\n\n\t\tconst tempAcc2 = await createTempAccount();\n\n\t\tweb3EthWithWallet.wallet?.add(tempAcc.privateKey);\n\n\t\tweb3EthWithWallet.wallet?.add(tempAcc2.privateKey);\n\n\t\tconst transaction: TransactionWithFromAndToLocalWalletIndex = {\n\t\t\tfrom: 0,\n\t\t\tto: 1,\n\t\t\tgas: 21000,\n\t\t\tvalue: BigInt(1),\n\t\t};\n\t\tconst response = await web3EthWithWallet.sendTransaction(transaction);\n\t\texpect(response.status).toBe(BigInt(1));\n\t\texpect(response.events).toBeUndefined();\n\n\t\tconst minedTransactionData = await web3EthWithWallet.getTransaction(response.transactionHash);\n\n\t\texpect(minedTransactionData).toMatchObject({\n\t\t\tfrom: tempAcc.address,\n\t\t\tto: wallet.get(1)?.address.toLowerCase(),\n\t\t\tvalue: BigInt(1),\n\t\t});\n\t});\n\tit('should make a transaction with no value transfer', async () => {\n\t\tconst transaction: Transaction = {\n\t\t\tfrom: tempAcc.address,\n\t\t\tto: '0x0000000000000000000000000000000000000000',\n\t\t\tvalue: BigInt(0),\n\t\t};\n\t\tconst response = await web3Eth.sendTransaction(transaction);\n\t\texpect(response.status).toBe(BigInt(1));\n\t\texpect(response.events).toBeUndefined();\n\n\t\tconst minedTransactionData = await web3Eth.getTransaction(response.transactionHash);\n\t\texpect(minedTransactionData).toMatchObject(transaction);\n\t});\n\tit('should send a transaction with data', async () => {\n\t\tconst transaction: Transaction = {\n\t\t\tfrom: tempAcc.address,\n\t\t\tto: '0x0000000000000000000000000000000000000000',\n\t\t\tdata: '0x64edfbf0e2c706ba4a09595315c45355a341a576cc17f3a19f43ac1c02f814ee',\n\t\t\tvalue: BigInt(0),\n\t\t};\n\t\tconst response = await web3Eth.sendTransaction(transaction);\n\t\texpect(response.status).toBe(BigInt(1));\n\t\texpect(response.events).toBeUndefined();\n\n\t\tconst minedTransactionData = await web3Eth.getTransaction(response.transactionHash);\n\t\texpect(minedTransactionData).toMatchObject(transaction);\n\t});\n\n\tdescribe('Deploy and interact with contract', () => {\n\t\tlet greeterContractAddress: string;\n\n\t\tit('should deploy a contract', async () => {\n\t\t\tconst greeterContractDeploymentData =\n\t\t\t\t'0x60806040523480156200001157600080fd5b5060405162000a6a38038062000a6a8339818101604052810190620000379190620002a4565b80600090805190602001906200004f92919062000057565b505062000359565b828054620000659062000324565b90600052602060002090601f016020900481019282620000895760008555620000d5565b82601f10620000a457805160ff1916838001178555620000d5565b82800160010185558215620000d5579182015b82811115620000d4578251825591602001919060010190620000b7565b5b509050620000e49190620000e8565b5090565b5b8082111562000103576000816000905550600101620000e9565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001708262000125565b810181811067ffffffffffffffff8211171562000192576200019162000136565b5b80604052505050565b6000620001a762000107565b9050620001b5828262000165565b919050565b600067ffffffffffffffff821115620001d857620001d762000136565b5b620001e38262000125565b9050602081019050919050565b60005b8381101562000210578082015181840152602081019050620001f3565b8381111562000220576000848401525b50505050565b60006200023d6200023784620001ba565b6200019b565b9050828152602081018484840111156200025c576200025b62000120565b5b62000269848285620001f0565b509392505050565b600082601f8301126200028957620002886200011b565b5b81516200029b84826020860162000226565b91505092915050565b600060208284031215620002bd57620002bc62000111565b5b600082015167ffffffffffffffff811115620002de57620002dd62000116565b5b620002ec8482850162000271565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200033d57607f821691505b602082108103620003535762000352620002f5565b5b50919050565b61070180620003696000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063a41368621461003b578063cfae32171461006c575b600080fd5b6100556004803603810190610050919061043f565b61008a565b60405161006392919061052b565b60405180910390f35b6100746101b0565b604051610081919061055b565b60405180910390f35b600060607f0d363f2fba46ab11b6db8da0125b0d5484787c44e265b48810735998bab12b756000846040516100c0929190610672565b60405180910390a182600090805190602001906100de929190610242565b507f7d7846723bda52976e0286c6efffee937ee9f76817a867ec70531ad29fb1fc0e600060405161010f91906106a9565b60405180910390a160016000808054610127906105ac565b80601f0160208091040260200160405190810160405280929190818152602001828054610153906105ac565b80156101a05780601f10610175576101008083540402835291602001916101a0565b820191906000526020600020905b81548152906001019060200180831161018357829003601f168201915b5050505050905091509150915091565b6060600080546101bf906105ac565b80601f01602080910402602001604051908101604052809291908181526020018280546101eb906105ac565b80156102385780601f1061020d57610100808354040283529160200191610238565b820191906000526020600020905b81548152906001019060200180831161021b57829003601f168201915b5050505050905090565b82805461024e906105ac565b90600052602060002090601f01602090048101928261027057600085556102b7565b82601f1061028957805160ff19168380011785556102b7565b828001600101855582156102b7579182015b828111156102b657825182559160200191906001019061029b565b5b5090506102c491906102c8565b5090565b5b808211156102e15760008160009055506001016102c9565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61034c82610303565b810181811067ffffffffffffffff8211171561036b5761036a610314565b5b80604052505050565b600061037e6102e5565b905061038a8282610343565b919050565b600067ffffffffffffffff8211156103aa576103a9610314565b5b6103b382610303565b9050602081019050919050565b82818337600083830152505050565b60006103e26103dd8461038f565b610374565b9050828152602081018484840111156103fe576103fd6102fe565b5b6104098482856103c0565b509392505050565b600082601f830112610426576104256102f9565b5b81356104368482602086016103cf565b91505092915050565b600060208284031215610455576104546102ef565b5b600082013567ffffffffffffffff811115610473576104726102f4565b5b61047f84828501610411565b91505092915050565b60008115159050919050565b61049d81610488565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156104dd5780820151818401526020810190506104c2565b838111156104ec576000848401525b50505050565b60006104fd826104a3565b61050781856104ae565b93506105178185602086016104bf565b61052081610303565b840191505092915050565b60006040820190506105406000830185610494565b818103602083015261055281846104f2565b90509392505050565b6000602082019050818103600083015261057581846104f2565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806105c457607f821691505b6020821081036105d7576105d661057d565b5b50919050565b60008190508160005260206000209050919050565b600081546105ff816105ac565b61060981866104ae565b94506001821660008114610624576001811461063657610669565b60ff1983168652602086019350610669565b61063f856105dd565b60005b8381101561066157815481890152600182019150602081019050610642565b808801955050505b50505092915050565b6000604082019050818103600083015261068c81856105f2565b905081810360208301526106a081846104f2565b90509392505050565b600060208201905081810360008301526106c381846105f2565b90509291505056fea2646970667358221220fe0f28c9f8ef0a13a95934b974e7bc2ca6762b40a5b93ccd6ca2038f454bf52764736f6c634300080e003300000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000017736f6c79656e7420677265656e2069732070656f706c65000000000000000000';\n\t\t\tconst transaction: Transaction = {\n\t\t\t\tfrom: tempAcc.address,\n\t\t\t\tdata: greeterContractDeploymentData,\n\t\t\t\tinput: greeterContractDeploymentData,\n\t\t\t\tgas: BigInt('475520'),\n\t\t\t};\n\t\t\tconst response = await web3Eth.sendTransaction(transaction);\n\t\t\texpect(response.status).toBe(BigInt(1));\n\t\t\texpect(response.events).toBeUndefined();\n\t\t\texpect(response.contractAddress).toBeDefined();\n\n\t\t\tconst minedTransactionData = await web3Eth.getTransaction(response.transactionHash);\n\t\t\texpect(minedTransactionData).toMatchObject({\n\t\t\t\tfrom: tempAcc.address,\n\t\t\t\tinput: greeterContractDeploymentData,\n\t\t\t\tgas: BigInt('475520'),\n\t\t\t});\n\n\t\t\tgreeterContractAddress = response.contractAddress as string;\n\t\t});\n\n\t\tit('should update greet in contract', async () => {\n\t\t\tconst contractFunctionCall =\n\t\t\t\t'0xa4136862000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000023432000000000000000000000000000000000000000000000000000000000000';\n\t\t\tconst transaction: Transaction = {\n\t\t\t\tfrom: tempAcc.address,\n\t\t\t\tto: greeterContractAddress,\n\t\t\t\tdata: contractFunctionCall,\n\t\t\t\tinput: contractFunctionCall,\n\t\t\t};\n\t\t\tconst response = await web3Eth.sendTransaction(transaction);\n\t\t\texpect(response.events).toBeUndefined();\n\t\t\texpect(response.status).toBe(BigInt(1));\n\n\t\t\tconst minedTransactionData = await web3Eth.getTransaction(response.transactionHash);\n\t\t\texpect(minedTransactionData).toMatchObject({\n\t\t\t\tfrom: tempAcc.address,\n\t\t\t\tto: greeterContractAddress,\n\t\t\t\tinput: contractFunctionCall,\n\t\t\t});\n\t\t});\n\t});\n\n\tdescribe('Transaction Types', () => {\n\t\tit('should send a successful type 0x0 transaction', async () => {\n\t\t\tconst transaction: Transaction = {\n\t\t\t\tfrom: tempAcc.address,\n\t\t\t\tto: '0x0000000000000000000000000000000000000000',\n\t\t\t\tvalue: BigInt(1),\n\t\t\t\ttype: BigInt(0),\n\t\t\t};\n\t\t\tconst response = await web3Eth.sendTransaction(transaction);\n\t\t\texpect(response.events).toBeUndefined();\n\t\t\texpect(response.type).toBe(BigInt(0));\n\t\t\texpect(response.status).toBe(BigInt(1));\n\n\t\t\tconst minedTransactionData = await web3Eth.getTransaction(response.transactionHash);\n\t\t\texpect(minedTransactionData).toMatchObject(transaction);\n\t\t});\n\n\t\tit('should send a successful type 0x1 transaction', async () => {\n\t\t\tconst transaction: Transaction = {\n\t\t\t\tfrom: tempAcc.address,\n\t\t\t\tto: '0x0000000000000000000000000000000000000000',\n\t\t\t\tvalue: BigInt(1),\n\t\t\t\ttype: BigInt(1),\n\t\t\t\t// TODO If this property is not included, tx gets default to type: 0x0\n\t\t\t\t// from what I can tell our library isn't doing this, but it happens\n\t\t\t\t// with both Geth and Ganache, so I'm not sure\n\t\t\t\taccessList: [],\n\t\t\t};\n\t\t\tconst response = await web3Eth.sendTransaction(transaction);\n\t\t\texpect(response.events).toBeUndefined();\n\t\t\texpect(response.type).toBe(BigInt(1));\n\t\t\texpect(response.status).toBe(BigInt(1));\n\n\t\t\tconst minedTransactionData = await web3Eth.getTransaction(response.transactionHash);\n\t\t\texpect(minedTransactionData).toMatchObject(transaction);\n\t\t});\n\n\t\tit('should send a successful type 0x2 transaction', async () => {\n\t\t\tconst transaction: Transaction = {\n\t\t\t\tfrom: tempAcc.address,\n\t\t\t\tto: '0x0000000000000000000000000000000000000000',\n\t\t\t\tvalue: BigInt(1),\n\t\t\t\ttype: BigInt(2),\n\t\t\t};\n\t\t\tconst response = await web3Eth.sendTransaction(transaction);\n\t\t\texpect(response.events).toBeUndefined();\n\t\t\texpect(response.type).toBe(BigInt(2));\n\t\t\texpect(response.status).toBe(BigInt(1));\n\n\t\t\tconst minedTransactionData = await web3Eth.getTransaction(response.transactionHash);\n\t\t\texpect(minedTransactionData).toMatchObject(transaction);\n\t\t});\n\n\t\tit('should send a successful type 0x2 transaction (gas = estimateGas)', async () => {\n\t\t\tconst transaction: Transaction = {\n\t\t\t\tfrom: tempAcc.address,\n\t\t\t\tto: '0x0000000000000000000000000000000000000000',\n\t\t\t\tvalue: BigInt(1),\n\t\t\t\ttype: BigInt(2),\n\t\t\t};\n\n\t\t\ttransaction.gas = await web3Eth.estimateGas(transaction);\n\n\t\t\tconst response = await web3Eth.sendTransaction(transaction);\n\t\t\texpect(response.events).toBeUndefined();\n\t\t\texpect(response.type).toBe(BigInt(2));\n\t\t\texpect(response.status).toBe(BigInt(1));\n\n\t\t\tconst minedTransactionData = await web3Eth.getTransaction(response.transactionHash);\n\t\t\texpect(minedTransactionData).toMatchObject(transaction);\n\t\t});\n\n\t\tit('should send a successful type 0x2 transaction (fee per gas from: calculateFeeData)', async () => {\n\t\t\tconst transaction: Transaction = {\n\t\t\t\tfrom: tempAcc.address,\n\t\t\t\tto: '0x0000000000000000000000000000000000000000',\n\t\t\t\tvalue: BigInt(1),\n\t\t\t\ttype: BigInt(2),\n\t\t\t};\n\n\t\t\tconst feeData = await web3Eth.calculateFeeData();\n\t\t\ttransaction.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n\t\t\ttransaction.maxFeePerGas = feeData.maxFeePerGas;\n\n\t\t\tconst response = await web3Eth.sendTransaction(transaction);\n\t\t\texpect(response.events).toBeUndefined();\n\t\t\texpect(response.type).toBe(BigInt(2));\n\t\t\texpect(response.status).toBe(BigInt(1));\n\n\t\t\tconst minedTransactionData = await web3Eth.getTransaction(response.transactionHash);\n\t\t\texpect(minedTransactionData).toMatchObject(transaction);\n\t\t});\n\n\t\tit('should send a successful type 0x0 transaction with data', async () => {\n\t\t\tconst transaction: Transaction = {\n\t\t\t\tfrom: tempAcc.address,\n\t\t\t\tto: '0x0000000000000000000000000000000000000000',\n\t\t\t\tdata: '0x64edfbf0e2c706ba4a09595315c45355a341a576cc17f3a19f43ac1c02f814ee',\n\t\t\t\tvalue: BigInt(1),\n\t\t\t\ttype: BigInt(0),\n\t\t\t};\n\t\t\tconst response = await web3Eth.sendTransaction(transaction, DEFAULT_RETURN_FORMAT);\n\t\t\texpect(response.type).toBe(BigInt(0));\n\t\t\texpect(response.events).toBeUndefined();\n\t\t\texpect(response.status).toBe(BigInt(1));\n\t\t\tconst minedTransactionData = await web3Eth.getTransaction(response.transactionHash);\n\t\t\texpect(minedTransactionData).toMatchObject(transaction);\n\t\t});\n\n\t\tit('should send a successful autodetected type 0x0 gasprice as data', async () => {\n\t\t\tconst transaction: Transaction = {\n\t\t\t\tfrom: tempAcc.address,\n\t\t\t\tto: '0x0000000000000000000000000000000000000000',\n\t\t\t\tdata: '0x64edfbf0e2c706ba4a09595315c45355a341a576cc17f3a19f43ac1c02f814ee',\n\t\t\t\tvalue: BigInt(1),\n\t\t\t\tgasPrice: BigInt(2500000008),\n\t\t\t};\n\t\t\tconst response = await web3Eth.sendTransaction(transaction, DEFAULT_RETURN_FORMAT);\n\t\t\texpect(response.type).toBe(BigInt(0));\n\t\t\texpect(response.status).toBe(BigInt(1));\n\t\t\tconst minedTransactionData = await web3Eth.getTransaction(response.transactionHash);\n\t\t\texpect(minedTransactionData).toMatchObject(transaction);\n\t\t});\n\n\t\tit('should send a successful default type 0x2 transaction with data', async () => {\n\t\t\tconst transaction: Transaction = {\n\t\t\t\tfrom: tempAcc.address,\n\t\t\t\tto: '0x0000000000000000000000000000000000000000',\n\t\t\t\tdata: '0x64edfbf0e2c706ba4a09595315c45355a341a576cc17f3a19f43ac1c02f814ee',\n\t\t\t\tvalue: BigInt(1),\n\t\t\t\tgas: BigInt(30000),\n\t\t\t};\n\t\t\tconst response = await web3Eth.sendTransaction(transaction, DEFAULT_RETURN_FORMAT);\n\t\t\texpect(response.type).toBe(BigInt(2));\n\t\t\texpect(response.status).toBe(BigInt(1));\n\t\t\tconst minedTransactionData = await web3Eth.getTransaction(response.transactionHash);\n\t\t\texpect(minedTransactionData).toMatchObject(transaction);\n\t\t});\n\t});\n\tit('should autofill a successful type 0x2 transaction with only maxFeePerGas passed', async () => {\n\t\tconst transaction: Transaction = {\n\t\t\tfrom: tempAcc.address,\n\t\t\tto: '0x0000000000000000000000000000000000000000',\n\t\t\tvalue: BigInt(1),\n\t\t\tmaxFeePerGas: BigInt(2500000016),\n\t\t};\n\t\tconst response = await web3Eth.sendTransaction(transaction);\n\t\texpect(response.events).toBeUndefined();\n\t\texpect(response.type).toBe(BigInt(2));\n\t\texpect(response.status).toBe(BigInt(1));\n\t\tconst minedTransactionData = await web3Eth.getTransaction(response.transactionHash);\n\t\texpect(minedTransactionData).toMatchObject(transaction);\n\t});\n\n\tit('should autofill a successful type 0x2 transaction with only maxPriorityFeePerGas passed', async () => {\n\t\tconst transaction: Transaction = {\n\t\t\tfrom: tempAcc.address,\n\t\t\tto: '0x0000000000000000000000000000000000000000',\n\t\t\tvalue: BigInt(1),\n\t\t\tmaxPriorityFeePerGas: BigInt(100),\n\t\t};\n\t\tconst response = await web3Eth.sendTransaction(transaction);\n\t\texpect(response.events).toBeUndefined();\n\t\texpect(response.type).toBe(BigInt(2));\n\t\texpect(response.status).toBe(BigInt(1));\n\t\tconst minedTransactionData = await web3Eth.getTransaction(response.transactionHash);\n\t\texpect(minedTransactionData).toMatchObject(transaction);\n\t});\n\n\titIf(isGeth)(\n\t\t'should send type 0x2 transaction with maxPriorityFeePerGas got from await web3Eth.getMaxPriorityFeePerGas()',\n\t\tasync () => {\n\t\t\tconst transaction: Transaction = {\n\t\t\t\tfrom: tempAcc.address,\n\t\t\t\tto: '0x0000000000000000000000000000000000000000',\n\t\t\t\tvalue: BigInt(1),\n\t\t\t\tmaxPriorityFeePerGas: await web3Eth.getMaxPriorityFeePerGas(),\n\t\t\t};\n\t\t\tconst response = await web3Eth.sendTransaction(transaction);\n\n\t\t\t// eslint-disable-next-line jest/no-standalone-expect\n\t\t\texpect(response.events).toBeUndefined();\n\t\t\t// eslint-disable-next-line jest/no-standalone-expect\n\t\t\texpect(response.type).toBe(BigInt(2));\n\t\t\t// eslint-disable-next-line jest/no-standalone-expect\n\t\t\texpect(response.status).toBe(BigInt(1));\n\t\t\tconst minedTransactionData = await web3Eth.getTransaction(response.transactionHash);\n\t\t\t// eslint-disable-next-line jest/no-standalone-expect\n\t\t\texpect(minedTransactionData).toMatchObject(transaction);\n\t\t},\n\t);\n\n\tdescribe('Transaction PromiEvents', () => {\n\t\tlet transaction: Transaction;\n\n\t\tbeforeEach(async () => {\n\t\t\ttempAcc = await createTempAccount();\n\t\t\ttransaction = {\n\t\t\t\tfrom: tempAcc.address,\n\t\t\t\tto: '0x0000000000000000000000000000000000000000',\n\t\t\t\tvalue: '0x1',\n\t\t\t};\n\t\t});\n\n\t\tit('should listen to the sending event', async () => {\n\t\t\tawait web3Eth.sendTransaction(transaction).on('sending', data => {\n\t\t\t\texpect(data).toMatchObject(transaction);\n\t\t\t});\n\t\t\texpect.assertions(1);\n\t\t});\n\n\t\tit('should listen to the sent event', async () => {\n\t\t\tawait web3Eth.sendTransaction(transaction).on('sent', data => {\n\t\t\t\texpect(data).toMatchObject(transaction);\n\t\t\t});\n\t\t\texpect.assertions(1);\n\t\t});\n\n\t\tit('should listen to the transactionHash event', async () => {\n\t\t\tawait web3Eth.sendTransaction(transaction).on('transactionHash', data => {\n\t\t\t\texpect(isHexStrict(data)).toBe(true);\n\t\t\t});\n\t\t\texpect.assertions(1);\n\t\t});\n\n\t\tit('should listen to the receipt event', async () => {\n\t\t\tconst expectedTransactionReceipt = {\n\t\t\t\tblockHash: expect.any(String),\n\t\t\t\tlogs: [],\n\t\t\t\tlogsBloom:\n\t\t\t\t\t'0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n\t\t\t\tfrom: transaction.from,\n\t\t\t\tto: transaction.to,\n\t\t\t\ttransactionHash: expect.any(String),\n\t\t\t};\n\t\t\tawait web3Eth.sendTransaction(transaction).on('receipt', data => {\n\t\t\t\texpect(data).toEqual(expect.objectContaining(expectedTransactionReceipt));\n\n\t\t\t\t// To avoid issue with the `objectContaining` and `cypress` had to add\n\t\t\t\t// these expectations explicitly on each attribute\n\t\t\t\texpect(typeof data.blockNumber).toBe('bigint');\n\t\t\t\texpect(typeof data.cumulativeGasUsed).toBe('bigint');\n\t\t\t\texpect(typeof data.effectiveGasPrice).toBe('bigint');\n\t\t\t\texpect(typeof data.gasUsed).toBe('bigint');\n\t\t\t\texpect(typeof data.transactionIndex).toBe('bigint');\n\t\t\t\texpect(data.status).toBe(BigInt(1));\n\t\t\t\texpect(data.type).toBe(BigInt(2));\n\t\t\t\texpect(data.events).toBeUndefined();\n\t\t\t});\n\t\t\texpect.assertions(9);\n\t\t});\n\n\t\tit('should listen to the confirmation event', async () => {\n\t\t\tconst expectedTransactionConfirmation = {\n\t\t\t\tconfirmationNumber: expect.any(BigInt),\n\t\t\t\treceipt: {\n\t\t\t\t\tblockHash: expect.any(String),\n\t\t\t\t\tblockNumber: expect.any(BigInt),\n\t\t\t\t\tcumulativeGasUsed: expect.any(BigInt),\n\t\t\t\t\teffectiveGasPrice: expect.any(BigInt),\n\t\t\t\t\tgasUsed: expect.any(BigInt),\n\t\t\t\t\tlogs: [],\n\t\t\t\t\tlogsBloom:\n\t\t\t\t\t\t'0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n\t\t\t\t\tstatus: BigInt(1),\n\t\t\t\t\tfrom: transaction.from,\n\t\t\t\t\tto: transaction.to,\n\t\t\t\t\ttransactionHash: expect.any(String),\n\t\t\t\t\ttransactionIndex: BigInt(0),\n\t\t\t\t\ttype: BigInt(0),\n\t\t\t\t},\n\t\t\t\tlatestBlockHash: expect.any(String),\n\t\t\t};\n\n\t\t\tawait web3Eth.sendTransaction(transaction).on('confirmation', data => {\n\t\t\t\texpect(data).toEqual(expect.objectContaining(expectedTransactionConfirmation));\n\t\t\t});\n\n\t\t\t// TODO Confirmations are dependent on the next block being mined,\n\t\t\t// this is manually triggering the next block to be created since both\n\t\t\t// Geth and Ganache wait for transaction before mining a block.\n\t\t\t// This should be revisted to implement a better solution\n\t\t\tawait web3Eth.sendTransaction(transaction);\n\n\t\t\t// TODO: Debug why the assertions are not being called\n\t\t\t// expect.assertions(1);\n\t\t});\n\t});\n\n\tdescribe('Transaction Error Scenarios', () => {\n\t\tlet simpleRevertContractAddress: Address;\n\n\t\tbeforeAll(async () => {\n\t\t\tconst simpleRevertDeployTransaction: Transaction = {\n\t\t\t\tfrom: tempAcc.address,\n\t\t\t\tdata: SimpleRevertDeploymentData,\n\t\t\t};\n\t\t\tsimpleRevertDeployTransaction.gas = await web3Eth.estimateGas(simpleRevertDeployTransaction);\n\t\t\tsimpleRevertContractAddress = (await web3Eth.sendTransaction(simpleRevertDeployTransaction))\n\t\t\t\t.contractAddress as Address;\n\t\t});\n\n\t\tit('Should throw TransactionRevertInstructionError because gas too low', async () => {\n\t\t\tconst transaction: Transaction = {\n\t\t\t\tfrom: tempAcc.address,\n\t\t\t\tto: '0x0000000000000000000000000000000000000000',\n\t\t\t\tvalue: BigInt(1),\n\t\t\t\tgas: 1,\n\t\t\t};\n\n\t\t\tconst expectedThrownError = {\n\t\t\t\tname: 'TransactionRevertInstructionError',\n\t\t\t\tcode: 402,\n\t\t\t\treason:\n\t\t\t\t\tgetSystemTestBackend() === BACKEND.GETH\n\t\t\t\t\t\t? 'err: intrinsic gas too low: have 1, want 21000 (supplied gas 1)'\n\t\t\t\t\t\t: 'base fee exceeds gas limit',\n\t\t\t};\n\n\t\t\tif (getSystemTestBackend() !== BACKEND.HARDHAT) {\n\t\t\t\tawait expect(\n\t\t\t\t\tweb3Eth\n\t\t\t\t\t\t.sendTransaction(transaction)\n\t\t\t\t\t\t.on('error', error => expect(error).toMatchObject(expectedThrownError)),\n\t\t\t\t).rejects.toMatchObject(expectedThrownError);\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tawait web3Eth.sendTransaction(transaction);\n\t\t\t\t} catch (error) {\n\t\t\t\t\texpect((error as any).name).toEqual(expectedThrownError.name);\n\t\t\t\t\texpect((error as any).code).toEqual(expectedThrownError.code);\n\t\t\t\t\texpect((error as any).reason).toContain(expectedThrownError.reason);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\titIf(getSystemTestBackend() !== BACKEND.HARDHAT)(\n\t\t\t'Should throw TransactionRevertInstructionError because insufficient funds',\n\t\t\tasync () => {\n\t\t\t\tconst transaction: Transaction = {\n\t\t\t\t\tfrom: tempAcc.address,\n\t\t\t\t\tto: '0x0000000000000000000000000000000000000000',\n\t\t\t\t\tvalue: BigInt('99999999999999999999999999999999999999999999999999999999999999999'),\n\t\t\t\t};\n\n\t\t\t\tconst expectedThrownError = {\n\t\t\t\t\tname: 'TransactionRevertInstructionError',\n\t\t\t\t\tmessage: 'Transaction has been reverted by the EVM',\n\t\t\t\t\tcode: 402,\n\t\t\t\t\treason:\n\t\t\t\t\t\tgetSystemTestBackend() === BACKEND.GETH\n\t\t\t\t\t\t\t? expect.stringContaining('err: insufficient funds for gas * price + value: address')\n\t\t\t\t\t\t\t: 'VM Exception while processing transaction: insufficient balance',\n\t\t\t\t};\n\n\t\t\t\t// eslint-disable-next-line jest/no-standalone-expect\n\t\t\t\tawait expect(\n\t\t\t\t\tweb3Eth\n\t\t\t\t\t\t.sendTransaction(transaction)\n\t\t\t\t\t\t// eslint-disable-next-line jest/no-standalone-expect\n\t\t\t\t\t\t.on('error', error => expect(error).toMatchObject(expectedThrownError)),\n\t\t\t\t).rejects.toMatchObject(expectedThrownError);\n\t\t\t},\n\t\t);\n\n\t\tit('Should throw TransactionRevertInstructionError because of contract revert and return revert reason', async () => {\n\t\t\tconst transaction: Transaction = {\n\t\t\t\tfrom: tempAcc.address,\n\t\t\t\tto: simpleRevertContractAddress,\n\t\t\t\tdata: '0xba57a511000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000067265766572740000000000000000000000000000000000000000000000000000',\n\t\t\t};\n\n\t\t\tweb3Eth.handleRevert = true;\n\n\t\t\tconst expectedThrownError = {\n\t\t\t\tname: 'TransactionRevertInstructionError',\n\t\t\t\tcode: 402,\n\t\t\t\treason:\n\t\t\t\t\tgetSystemTestBackend() === BACKEND.GETH\n\t\t\t\t\t\t? 'execution reverted: This is a send revert'\n\t\t\t\t\t\t: \"Error: VM Exception while processing transaction: reverted with reason string 'This is a send revert'\",\n\t\t\t\tsignature: '0x08c379a0',\n\t\t\t\tdata: '000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000155468697320697320612073656e64207265766572740000000000000000000000',\n\t\t\t\treceipt: undefined,\n\t\t\t};\n\n\t\t\tawait expect(\n\t\t\t\tweb3Eth\n\t\t\t\t\t.sendTransaction(transaction)\n\t\t\t\t\t.on('error', error => expect(error).toMatchObject(expectedThrownError)),\n\t\t\t).rejects.toMatchObject(expectedThrownError);\n\t\t});\n\n\t\tit('Should throw TransactionRevertWithCustomError because of contract revert and return custom error ErrorWithNoParams', async () => {\n\t\t\tconst transaction: Transaction = {\n\t\t\t\tfrom: tempAcc.address,\n\t\t\t\tto: simpleRevertContractAddress,\n\t\t\t\tdata: '0x3ebf4d9c',\n\t\t\t};\n\n\t\t\tweb3Eth.handleRevert = true;\n\n\t\t\tconst expectedThrownError = {\n\t\t\t\tname: 'TransactionRevertWithCustomError',\n\t\t\t\tcode: 438,\n\t\t\t\treason:\n\t\t\t\t\tgetSystemTestBackend() === BACKEND.GETH\n\t\t\t\t\t\t? 'execution reverted'\n\t\t\t\t\t\t: 'Error: VM Exception while processing transaction: reverted with an unrecognized custom error (return data: 0x72090e4d)',\n\t\t\t\tsignature: '0x72090e4d',\n\t\t\t\tcustomErrorName: 'ErrorWithNoParams',\n\t\t\t\tcustomErrorDecodedSignature: 'ErrorWithNoParams()',\n\t\t\t\tcustomErrorArguments: {},\n\t\t\t\treceipt: undefined,\n\t\t\t};\n\n\t\t\tawait expect(\n\t\t\t\tweb3Eth\n\t\t\t\t\t.sendTransaction(transaction, undefined, { contractAbi: SimpleRevertAbi })\n\t\t\t\t\t.on('error', error => expect(error).toMatchObject(expectedThrownError)),\n\t\t\t).rejects.toMatchObject(expectedThrownError);\n\t\t});\n\n\t\tit('Should throw TransactionRevertWithCustomError because of contract revert and return custom error ErrorWithParams', async () => {\n\t\t\tconst transaction: Transaction = {\n\t\t\t\tfrom: tempAcc.address,\n\t\t\t\tto: simpleRevertContractAddress,\n\t\t\t\tdata: '0x819f48fe',\n\t\t\t};\n\n\t\t\tweb3Eth.handleRevert = true;\n\n\t\t\tconst expectedThrownError = {\n\t\t\t\tname: 'TransactionRevertWithCustomError',\n\t\t\t\tcode: 438,\n\t\t\t\treason:\n\t\t\t\t\tgetSystemTestBackend() === BACKEND.GETH\n\t\t\t\t\t\t? 'execution reverted'\n\t\t\t\t\t\t: 'Error: VM Exception while processing transaction: reverted with an unrecognized custom error (return data: 0xc85bda60000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000001c5468697320697320616e206572726f72207769746820706172616d7300000000)',\n\t\t\t\tsignature: '0xc85bda60',\n\t\t\t\tdata: '000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000001c5468697320697320616e206572726f72207769746820706172616d7300000000',\n\t\t\t\tcustomErrorName: 'ErrorWithParams',\n\t\t\t\tcustomErrorDecodedSignature: 'ErrorWithParams(uint256,string)',\n\t\t\t\tcustomErrorArguments: {\n\t\t\t\t\tcode: BigInt(42),\n\t\t\t\t\tmessage: 'This is an error with params',\n\t\t\t\t},\n\t\t\t\treceipt: undefined,\n\t\t\t};\n\n\t\t\tawait expect(\n\t\t\t\tweb3Eth\n\t\t\t\t\t.sendTransaction(transaction, undefined, { contractAbi: SimpleRevertAbi })\n\t\t\t\t\t.on('error', error => expect(error).toMatchObject(expectedThrownError)),\n\t\t\t).rejects.toMatchObject(expectedThrownError);\n\t\t});\n\n\t\tit('Should throw TransactionRevertInstructionError because of contract revert', async () => {\n\t\t\tconst transaction: Transaction = {\n\t\t\t\tfrom: tempAcc.address,\n\t\t\t\tto: simpleRevertContractAddress,\n\t\t\t\tdata: '0xba57a511000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000067265766572740000000000000000000000000000000000000000000000000000',\n\t\t\t};\n\n\t\t\tweb3Eth.handleRevert = false;\n\n\t\t\tconst expectedThrownError = {\n\t\t\t\tname: 'TransactionRevertInstructionError',\n\t\t\t\tcode: 402,\n\t\t\t\treason:\n\t\t\t\t\tgetSystemTestBackend() === BACKEND.GETH\n\t\t\t\t\t\t? 'execution reverted: This is a send revert'\n\t\t\t\t\t\t: \"Error: VM Exception while processing transaction: reverted with reason string 'This is a send revert'\",\n\t\t\t\tsignature: '0x08c379a0',\n\t\t\t\tdata: '000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000155468697320697320612073656e64207265766572740000000000000000000000',\n\t\t\t};\n\n\t\t\tawait expect(\n\t\t\t\tweb3Eth\n\t\t\t\t\t.sendTransaction(transaction)\n\t\t\t\t\t.on('error', error => expect(error).toMatchObject(expectedThrownError)),\n\t\t\t).rejects.toMatchObject(expectedThrownError);\n\t\t});\n\t});\n});\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/web3_eth/sign.test.ts",[],["1142","1143"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/web3_eth/sign_transaction.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/web3_eth/sign_typed_data.test.ts",["1144"],["1145"],"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { getEncodedEip712Data } from 'web3-eth-abi';\nimport { ecrecover, toUint8Array } from 'web3-eth-accounts';\nimport { bytesToHex, hexToNumber, keccak256 } from 'web3-utils';\n\nimport Web3Eth from '../../../src';\nimport {\n\tcloseOpenConnection,\n\tcreateTempAccount,\n\tgetSystemTestBackend,\n\tgetSystemTestProvider,\n\titIf,\n} from '../../fixtures/system_test_utils';\n\ndescribe('Web3Eth.signTypedData', () => {\n\tlet web3Eth: Web3Eth;\n\tlet tempAcc: { address: string; privateKey: string };\n\n\tbeforeAll(async () => {\n\t\tweb3Eth = new Web3Eth(getSystemTestProvider());\n\t\ttempAcc = await createTempAccount();\n\t});\n\n\tafterAll(async () => {\n\t\tawait closeOpenConnection(web3Eth);\n\t});\n\n\titIf(getSystemTestBackend() === 'ganache')(\n\t\t'should sign the typed data, return the signature, and recover the correct ETH address',\n\t\tasync () => {\n\t\t\tconst typedData = {\n\t\t\t\ttypes: {\n\t\t\t\t\tEIP712Domain: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'name',\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'version',\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'chainId',\n\t\t\t\t\t\t\ttype: 'uint256',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'verifyingContract',\n\t\t\t\t\t\t\ttype: 'address',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tPerson: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'name',\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'wallet',\n\t\t\t\t\t\t\ttype: 'address',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tMail: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'from',\n\t\t\t\t\t\t\ttype: 'Person',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'to',\n\t\t\t\t\t\t\ttype: 'Person',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'contents',\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\tprimaryType: 'Mail',\n\t\t\t\tdomain: {\n\t\t\t\t\tname: 'Ether Mail',\n\t\t\t\t\tversion: '1',\n\t\t\t\t\tchainId: 1,\n\t\t\t\t\tverifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n\t\t\t\t},\n\t\t\t\tmessage: {\n\t\t\t\t\tfrom: {\n\t\t\t\t\t\tname: 'Cow',\n\t\t\t\t\t\twallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n\t\t\t\t\t},\n\t\t\t\t\tto: {\n\t\t\t\t\t\tname: 'Bob',\n\t\t\t\t\t\twallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n\t\t\t\t\t},\n\t\t\t\t\tcontents: 'Hello, Bob!',\n\t\t\t\t},\n\t\t\t};\n\t\t\tconst encodedTypedDataHash = getEncodedEip712Data(typedData, true);\n\t\t\tconst signature = await web3Eth.signTypedData(tempAcc.address, typedData);\n\t\t\tconst r = toUint8Array(signature.slice(0, 66));\n\t\t\tconst s = toUint8Array(`0x${signature.slice(66, 130)}`);\n\t\t\tconst v = BigInt(hexToNumber(`0x${signature.slice(130, 132)}`));\n\t\t\tconst recoveredPublicKey = bytesToHex(\n\t\t\t\tecrecover(toUint8Array(encodedTypedDataHash), v, r, s),\n\t\t\t);\n\n\t\t\tconst recoveredAddress = `0x${keccak256(bytesToHex(recoveredPublicKey)).slice(-40)}`;\n\t\t\t// eslint-disable-next-line jest/no-standalone-expect\n\t\t\texpect(recoveredAddress).toBe(tempAcc.address);\n\t\t},\n\t);\n});\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/integration/web3_eth/submit_work.test.ts",[],["1146"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/shared_fixtures/build/Basic.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/shared_fixtures/build/DeployRevert.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/shared_fixtures/build/ERC20Token.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/shared_fixtures/build/ERC721Token.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/shared_fixtures/build/ErrorsContract.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/shared_fixtures/build/Greeter.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/shared_fixtures/build/GreeterWithOverloading.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/shared_fixtures/build/MsgSender.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/shared_fixtures/build/MyContract.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/shared_fixtures/build/NegativeNumbers.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/shared_fixtures/utils.ts",[],["1147"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/constructor.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/decoding.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/default_transaction_builder.test.ts",["1148"],[],"﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport {\n\tEthExecutionAPI,\n\tPopulatedUnsignedEip1559Transaction,\n\tPopulatedUnsignedEip2930Transaction,\n\tTransaction,\n\tValidChains,\n\tHardfork,\n} from 'web3-types';\nimport { Web3Context } from 'web3-core';\nimport HttpProvider from 'web3-providers-http';\nimport { isNullish } from 'web3-validator';\nimport { ethRpcMethods } from 'web3-rpc-methods';\nimport {\n\tEip1559NotSupportedError,\n\tTransactionDataAndInputError,\n\tUnableToPopulateNonceError,\n\tUnsupportedTransactionTypeError,\n} from 'web3-errors';\nimport { defaultTransactionBuilder } from '../../src/utils/transaction_builder';\n\njest.mock('web3-rpc-methods');\nconst expectedNetworkId = '0x4';\njest.mock('web3-net', () => ({\n\tgetId: jest.fn().mockImplementation(() => expectedNetworkId),\n}));\n\ndescribe('defaultTransactionBuilder', () => {\n\tconst expectedFrom = '0xb8CE9ab6943e0eCED004cDe8e3bBed6568B2Fa01';\n\tconst expectedNonce = '0x42';\n\tconst expectedGas = BigInt(21000);\n\tconst expectedGasLimit = expectedGas;\n\tconst expectedGasPrice = '0x4a817c800';\n\tconst expectedBaseFeePerGas = '0x13afe8b904';\n\tconst expectedMaxPriorityFeePerGas = '0x9502f900';\n\tconst expectedMaxFeePerGas = '0x27f4d46b08';\n\tconst expectedChainId = '0x1';\n\tconst defaultTransactionType = '0x0';\n\tconst transaction: Transaction = {\n\t\tfrom: expectedFrom,\n\t\tto: '0x3535353535353535353535353535353535353535',\n\t\tvalue: '0x174876e800',\n\t\tgas: expectedGas,\n\t\tgasLimit: expectedGasLimit,\n\t\tgasPrice: expectedGasPrice,\n\t\ttype: '0x0',\n\t\tmaxFeePerGas: expectedMaxFeePerGas,\n\t\tmaxPriorityFeePerGas: expectedMaxPriorityFeePerGas,\n\t\tdata: '0x',\n\t\tnonce: expectedNonce,\n\t\tchain: 'mainnet',\n\t\thardfork: 'berlin',\n\t\tchainId: expectedChainId,\n\t\tnetworkId: expectedNetworkId,\n\t\tcommon: {\n\t\t\tcustomChain: {\n\t\t\t\tname: 'foo',\n\t\t\t\tnetworkId: expectedNetworkId,\n\t\t\t\tchainId: expectedChainId,\n\t\t\t},\n\t\t\tbaseChain: 'mainnet',\n\t\t\thardfork: 'berlin',\n\t\t},\n\t};\n\tconst mockBlockData = {\n\t\tparentHash: '0xe99e022112df268087ea7eafaf4790497fd21dbeeb6bd7a1721df161a6657a54',\n\t\tsha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\n\t\tminer: '0xbb7b8287f3f0a933474a79eae42cbca977791171',\n\t\tstateRoot: '0xddc8b0234c2e0cad087c8b389aa7ef01f7d79b2570bccb77ce48648aa61c904d',\n\t\ttransactionsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\n\t\treceiptsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\n\t\tlogsBloom:\n\t\t\t'0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n\t\tdifficulty: '0x4ea3f27bc',\n\t\tnumber: '0x1b4',\n\t\tgasLimit: '0x1388',\n\t\tgasUsed: '0x1c96e73',\n\t\ttimestamp: '0x55ba467c',\n\t\textraData: '0x476574682f4c5649562f76312e302e302f6c696e75782f676f312e342e32',\n\t\tmixHash: '0x4fffe9ae21f1c9e15207b1f472d5bbdd68c9595d461666602f2be20daf5e7843',\n\t\tnonce: '0x1c11920a4',\n\t\ttotalDifficulty: '0x78ed983323d',\n\t\tsize: '0x220',\n\t\ttransactions: [\n\t\t\t'0x88df016429689c079f3b2f6ad39fa052532c56795b733da78a91ebe6a713944b',\n\t\t\t'0x88df016429689c079f3b2f6ad39fa052532c56795b733da78a91ebe6a713944b',\n\t\t\t'0x88df016429689c079f3b2f6ad39fa052532c56795b733da78a91ebe6a713944b',\n\t\t],\n\t\tuncles: [\n\t\t\t'0xdc0818cf78f21a8e70579cb46a43643f78291264dda342ae31049421c82d21ae',\n\t\t\t'0xdc0818cf78f21a8e70579cb46a43643f78291264dda342ae31049421c82d21ae',\n\t\t\t'0xdc0818cf78f21a8e70579cb46a43643f78291264dda342ae31049421c82d21ae',\n\t\t],\n\t\thash: '0xdc0818cf78f21a8e70579cb46a43643f78291264dda342ae31049421c82d21ae',\n\t\tbaseFeePerGas: expectedBaseFeePerGas,\n\t};\n\tlet web3Context: Web3Context<EthExecutionAPI>;\n\tlet getTransactionCountSpy: jest.SpyInstance;\n\n\tbeforeEach(() => {\n\t\tjest.spyOn(ethRpcMethods, 'getBlockByNumber').mockResolvedValue(mockBlockData);\n\t\tgetTransactionCountSpy = jest\n\t\t\t.spyOn(ethRpcMethods, 'getTransactionCount')\n\t\t\t.mockResolvedValue(expectedNonce);\n\t\tjest.spyOn(ethRpcMethods, 'getGasPrice').mockResolvedValue(expectedGasPrice);\n\t\tjest.spyOn(ethRpcMethods, 'getChainId').mockResolvedValue(expectedChainId);\n\n\t\tweb3Context = new Web3Context<EthExecutionAPI>(new HttpProvider('http://127.0.0.1'));\n\t});\n\n\tit.skip('should call override method', async () => {\n\t\tconst overrideFunction = jest.fn();\n\t\tconst input = { ...transaction };\n\t\tawait defaultTransactionBuilder({\n\t\t\ttransaction: input,\n\t\t\tweb3Context,\n\t\t\t// VALID_ETH_BASE_TYPES.HexString,\n\t\t\t// '0x348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8709',\n\t\t\t// overrideFunction,\n\t\t\tfillGasPrice: true,\n\t\t});\n\t\texpect(overrideFunction).toHaveBeenCalledWith(input);\n\t});\n\n\tdescribe('should populate from', () => {\n\t\tit('should use privateKey to populate', async () => {\n\t\t\tconst input = { ...transaction };\n\t\t\tdelete input.from;\n\t\t\tdelete input.maxPriorityFeePerGas;\n\t\t\tdelete input.maxFeePerGas;\n\n\t\t\tconst result = await defaultTransactionBuilder({\n\t\t\t\ttransaction: input,\n\t\t\t\tweb3Context,\n\t\t\t\tprivateKey: '0x348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8709',\n\t\t\t\tfillGasPrice: true,\n\t\t\t});\n\t\t\texpect(result.from).toBe(expectedFrom);\n\t\t});\n\n\t\tit('should use web3Context.defaultAccount to populate', async () => {\n\t\t\tweb3Context = new Web3Context<EthExecutionAPI>({\n\t\t\t\tprovider: new HttpProvider('http://127.0.0.1'),\n\t\t\t\tconfig: {\n\t\t\t\t\tdefaultAccount: expectedFrom,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tconst input = { ...transaction };\n\t\t\tdelete input.from;\n\t\t\tdelete input.maxPriorityFeePerGas;\n\t\t\tdelete input.maxFeePerGas;\n\n\t\t\tconst result = await defaultTransactionBuilder({\n\t\t\t\ttransaction: input,\n\t\t\t\tweb3Context,\n\t\t\t\tfillGasPrice: true,\n\t\t\t});\n\t\t\texpect(result.from).toBe(expectedFrom);\n\t\t});\n\t});\n\n\tdescribe('should populate nonce', () => {\n\t\tit('should throw UnableToPopulateNonceError', async () => {\n\t\t\tconst input = { ...transaction };\n\t\t\tdelete input.from;\n\t\t\tdelete input.nonce;\n\t\t\tdelete input.maxPriorityFeePerGas;\n\t\t\tdelete input.maxFeePerGas;\n\n\t\t\tawait expect(\n\t\t\t\tdefaultTransactionBuilder({ transaction: input, web3Context, fillGasPrice: true }),\n\t\t\t).rejects.toThrow(new UnableToPopulateNonceError());\n\t\t});\n\n\t\tit('should use web3Eth.getTransactionCount to populate nonce', async () => {\n\t\t\tconst input = { ...transaction };\n\t\t\tdelete input.nonce;\n\t\t\tdelete input.maxPriorityFeePerGas;\n\t\t\tdelete input.maxFeePerGas;\n\n\t\t\tconst result = await defaultTransactionBuilder({\n\t\t\t\ttransaction: input,\n\t\t\t\tweb3Context,\n\t\t\t\tfillGasPrice: true,\n\t\t\t});\n\t\t\texpect(result.nonce).toBe(expectedNonce);\n\t\t\texpect(getTransactionCountSpy).toHaveBeenCalledWith(\n\t\t\t\tweb3Context.requestManager,\n\t\t\t\texpectedFrom,\n\t\t\t\tweb3Context.defaultBlock,\n\t\t\t);\n\t\t});\n\n\t\tit('should use web3Eth.getTransactionCount to populate nonce without gas fill', async () => {\n\t\t\tconst input = { ...transaction };\n\t\t\tdelete input.nonce;\n\t\t\tdelete input.maxPriorityFeePerGas;\n\t\t\tdelete input.maxFeePerGas;\n\n\t\t\tconst result = await defaultTransactionBuilder({\n\t\t\t\ttransaction: input,\n\t\t\t\tweb3Context,\n\t\t\t\tfillGasPrice: false,\n\t\t\t});\n\t\t\texpect(result.nonce).toBe(expectedNonce);\n\t\t\texpect(getTransactionCountSpy).toHaveBeenCalledWith(\n\t\t\t\tweb3Context.requestManager,\n\t\t\t\texpectedFrom,\n\t\t\t\tweb3Context.defaultBlock,\n\t\t\t);\n\t\t});\n\t});\n\n\tdescribe('should populate value', () => {\n\t\tit('should populate with 0x0 if not provided', async () => {\n\t\t\tconst input = { ...transaction };\n\t\t\tdelete input.value;\n\t\t\tdelete input.maxPriorityFeePerGas;\n\t\t\tdelete input.maxFeePerGas;\n\n\t\t\tconst result = await defaultTransactionBuilder({\n\t\t\t\ttransaction: input,\n\t\t\t\tweb3Context,\n\t\t\t\tfillGasPrice: true,\n\t\t\t});\n\t\t\texpect(result.value).toBe('0x0');\n\t\t});\n\n\n\t\tit('should not populate with 0x0 if provided', async () => {\n\t\t\tconst input = { ...transaction };\n\t\t\tdelete input.maxPriorityFeePerGas;\n\t\t\tdelete input.maxFeePerGas;\n\n\t\t\tconst result = await defaultTransactionBuilder({\n\t\t\t\ttransaction: input,\n\t\t\t\tweb3Context,\n\t\t\t\tfillGasPrice: true,\n\t\t\t});\n\t\t\texpect(result.value).not.toBe('0x0');\n\t\t});\n\t});\n\n\tdescribe('should populate input/data', () => {\n\t\tit('should populate input with 0x', async () => {\n\t\t\tconst input = { ...transaction };\n\t\t\tdelete input.maxPriorityFeePerGas;\n\t\t\tdelete input.maxFeePerGas;\n\t\t\tdelete input.data;\n\n\t\t\tconst result = await defaultTransactionBuilder({\n\t\t\t\ttransaction: input,\n\t\t\t\tweb3Context,\n\t\t\t\tfillGasPrice: true,\n\t\t\t});\n\t\t\texpect(result.input).toBe('0x');\n\t\t\texpect(result.data).toBeUndefined();\n\t\t});\n\n\t\tit('should prefix input with 0x', async () => {\n\t\t\tconst input = { ...transaction };\n\t\t\tinput.input = '123';\n\t\t\tdelete input.maxPriorityFeePerGas;\n\t\t\tdelete input.maxFeePerGas;\n\t\t\tdelete input.data;\n\n\t\t\tconst result = await defaultTransactionBuilder({\n\t\t\t\ttransaction: input,\n\t\t\t\tweb3Context,\n\t\t\t\tfillGasPrice: true,\n\t\t\t});\n\t\t\texpect(result.input).toBe('0x123');\n\t\t\texpect(result.data).toBeUndefined();\n\t\t});\n\n\t\tit('should prefix data with 0x', async () => {\n\t\t\tconst input = { ...transaction };\n\t\t\tdelete input.maxPriorityFeePerGas;\n\t\t\tdelete input.maxFeePerGas;\n\t\t\tinput.data = '123';\n\n\t\t\tconst result = await defaultTransactionBuilder({\n\t\t\t\ttransaction: input,\n\t\t\t\tweb3Context,\n\t\t\t\tfillGasPrice: true,\n\t\t\t});\n\t\t\texpect(result.input).toBeUndefined();\n\t\t\texpect(result.data).toBe('0x123');\n\t\t});\n\n\t\tit('should throw TransactionDataAndInputError', async () => {\n\t\t\tconst input = { ...transaction };\n\t\t\tinput.data = '0x3211';\n\t\t\tinput.input = '0x1233';\n\n\t\t\tawait expect(\n\t\t\t\tdefaultTransactionBuilder({\n\t\t\t\t\ttransaction: input,\n\t\t\t\t\tweb3Context,\n\t\t\t\t}),\n\t\t\t).rejects.toThrow(TransactionDataAndInputError);\n\t\t});\n\t});\n\n\tdescribe('should populate chain', () => {\n\t\tit('should populate with mainnet', async () => {\n\t\t\tconst input = { ...transaction };\n\t\t\tdelete input.chain;\n\t\t\tdelete input.common;\n\t\t\tdelete input.maxPriorityFeePerGas;\n\t\t\tdelete input.maxFeePerGas;\n\n\t\t\tconst result = await defaultTransactionBuilder({\n\t\t\t\ttransaction: input,\n\t\t\t\tweb3Context,\n\t\t\t\tfillGasPrice: true,\n\t\t\t});\n\t\t\texpect(result.chain).toBe('mainnet');\n\t\t});\n\n\t\tit('should use web3Context.defaultChain to populate', async () => {\n\t\t\tweb3Context = new Web3Context<EthExecutionAPI>(new HttpProvider('http://127.0.0.1'));\n\n\t\t\tconst input = { ...transaction };\n\t\t\tdelete input.chain;\n\t\t\tdelete input.common;\n\t\t\tdelete input.maxPriorityFeePerGas;\n\t\t\tdelete input.maxFeePerGas;\n\n\t\t\tconst result = await defaultTransactionBuilder({\n\t\t\t\ttransaction: input,\n\t\t\t\tweb3Context,\n\t\t\t\tfillGasPrice: true,\n\t\t\t});\n\t\t\texpect(result.chain).toBe(web3Context.defaultChain);\n\t\t});\n\t});\n\n\tdescribe('should populate hardfork', () => {\n\t\tit('should populate with london', async () => {\n\t\t\tconst input = { ...transaction };\n\t\t\tdelete input.hardfork;\n\t\t\tdelete input.common;\n\t\t\tdelete input.maxPriorityFeePerGas;\n\t\t\tdelete input.maxFeePerGas;\n\n\t\t\tconst result = await defaultTransactionBuilder({\n\t\t\t\ttransaction: input,\n\t\t\t\tweb3Context,\n\t\t\t\tfillGasPrice: true,\n\t\t\t});\n\t\t\texpect(result.hardfork).toBe('london');\n\t\t});\n\n\t\tit('should use web3Context.defaultHardfork to populate', async () => {\n\t\t\tweb3Context = new Web3Context<EthExecutionAPI>(new HttpProvider('http://127.0.0.1'));\n\n\t\t\tconst input = { ...transaction };\n\t\t\tdelete input.hardfork;\n\t\t\tdelete input.common;\n\t\t\tdelete input.maxPriorityFeePerGas;\n\t\t\tdelete input.maxFeePerGas;\n\n\t\t\tconst result = await defaultTransactionBuilder({\n\t\t\t\ttransaction: input,\n\t\t\t\tweb3Context,\n\t\t\t\tfillGasPrice: true,\n\t\t\t});\n\t\t\texpect(result.hardfork).toBe(web3Context.defaultHardfork);\n\t\t});\n\n\t\tit('should use web3Context.defaultCommon to populate', async () => {\n\t\t\tconst baseChain: ValidChains = 'mainnet';\n\t\t\tconst hardfork: Hardfork = 'berlin';\n\t\t\tconst customCommon = {\n\t\t\t\tcustomChain: {\n\t\t\t\t\tname: 'custom',\n\t\t\t\t\tnetworkId: '0x3',\n\t\t\t\t\tchainId: '0x1',\n\t\t\t\t},\n\t\t\t\tbaseChain,\n\t\t\t\thardfork,\n\t\t\t};\n\n\t\t\tweb3Context = new Web3Context<EthExecutionAPI>({\n\t\t\t\tprovider: new HttpProvider('http://127.0.0.1'),\n\t\t\t\tconfig: {\n\t\t\t\t\tdefaultCommon: customCommon,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tconst input = { ...transaction };\n\t\t\tdelete input.common;\n\t\t\tdelete input.maxPriorityFeePerGas;\n\t\t\tdelete input.maxFeePerGas;\n\n\t\t\tconst result = await defaultTransactionBuilder({\n\t\t\t\ttransaction: input,\n\t\t\t\tweb3Context,\n\t\t\t\tfillGasPrice: true,\n\t\t\t});\n\t\t\texpect(result.common).toStrictEqual(customCommon);\n\t\t});\n\t});\n\n\tdescribe('should populate chainId', () => {\n\t\tit('should populate with web3Eth.getChainId', async () => {\n\t\t\tconst input = { ...transaction };\n\t\t\tdelete input.chainId;\n\t\t\tdelete input.common;\n\t\t\tdelete input.maxPriorityFeePerGas;\n\t\t\tdelete input.maxFeePerGas;\n\n\t\t\tconst result = await defaultTransactionBuilder({\n\t\t\t\ttransaction: input,\n\t\t\t\tweb3Context,\n\t\t\t\tfillGasPrice: true,\n\t\t\t});\n\t\t\texpect(result.chainId).toBe(expectedChainId);\n\t\t});\n\t});\n\n\tdescribe('should populate networkId', () => {\n\t\tit('should populate with web3Net.getId', async () => {\n\t\t\tconst input = { ...transaction };\n\t\t\tdelete input.networkId;\n\t\t\tdelete input.maxPriorityFeePerGas;\n\t\t\tdelete input.maxFeePerGas;\n\n\t\t\tconst result = await defaultTransactionBuilder({\n\t\t\t\ttransaction: input,\n\t\t\t\tweb3Context,\n\t\t\t\tfillGasPrice: true,\n\t\t\t});\n\t\t\texpect(result.networkId).toBe(expectedNetworkId);\n\t\t});\n\t});\n\n\tdescribe('should populate gasLimit', () => {\n\t\tit('should populate with gas', async () => {\n\t\t\tconst input = { ...transaction };\n\t\t\tdelete input.gasLimit;\n\t\t\tdelete input.maxPriorityFeePerGas;\n\t\t\tdelete input.maxFeePerGas;\n\n\t\t\tconst result = await defaultTransactionBuilder({\n\t\t\t\ttransaction: input,\n\t\t\t\tweb3Context,\n\t\t\t\tfillGasPrice: true,\n\t\t\t});\n\t\t\texpect(result.gasLimit).toBe(expectedGasLimit);\n\t\t});\n\t});\n\n\tdescribe('should populate type', () => {\n\t\tit('should throw UnsupportedTransactionTypeError', async () => {\n\t\t\tconst input = { ...transaction };\n\t\t\tinput.type = '0x80'; // // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-2718.md#transactions\n\n\t\t\tawait expect(\n\t\t\t\tdefaultTransactionBuilder({ transaction: input, web3Context, fillGasPrice: true }),\n\t\t\t).rejects.toThrow(new UnsupportedTransactionTypeError(input.type));\n\t\t});\n\n\t\tit('should use web3Context.defaultTransactionType to populate', async () => {\n\t\t\tweb3Context = new Web3Context<EthExecutionAPI>({\n\t\t\t\tprovider: new HttpProvider('http://127.0.0.1'),\n\t\t\t\tconfig: {\n\t\t\t\t\tdefaultTransactionType,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tconst input = { ...transaction };\n\t\t\tdelete input.gas;\n\t\t\tdelete input.gasLimit;\n\t\t\tdelete input.gasPrice;\n\t\t\tdelete input.maxFeePerGas;\n\t\t\tdelete input.maxPriorityFeePerGas;\n\t\t\tdelete input.accessList;\n\t\t\tdelete input.type;\n\n\t\t\tinput.hardfork = 'istanbul';\n\t\t\tif (!isNullish(input.common)) input.common.hardfork = 'istanbul';\n\n\t\t\tconst result = await defaultTransactionBuilder({\n\t\t\t\ttransaction: input,\n\t\t\t\tweb3Context,\n\t\t\t\tfillGasPrice: true,\n\t\t\t});\n\t\t\texpect(result.type).toBe(web3Context.defaultTransactionType);\n\t\t});\n\t});\n\n\tdescribe('should populate gasPrice', () => {\n\t\tit('should populate with web3Eth.getGasPrice (tx.type 0x0)', async () => {\n\t\t\tconst input = { ...transaction };\n\t\t\tdelete input.gasPrice;\n\t\t\tdelete input.maxFeePerGas;\n\t\t\tdelete input.maxPriorityFeePerGas;\n\t\t\tinput.type = '0x0';\n\n\t\t\tconst result = await defaultTransactionBuilder({\n\t\t\t\ttransaction: input,\n\t\t\t\tweb3Context,\n\t\t\t\tfillGasPrice: true,\n\t\t\t});\n\t\t\texpect(result.gasPrice).toBe(expectedGasPrice);\n\t\t});\n\n\t\tit('should populate with web3Eth.getGasPrice (tx.type 0x1)', async () => {\n\t\t\tconst input = { ...transaction };\n\t\t\tdelete input.gasPrice;\n\t\t\tdelete input.maxFeePerGas;\n\t\t\tdelete input.maxPriorityFeePerGas;\n\t\t\tinput.type = '0x1';\n\n\t\t\tconst result = await defaultTransactionBuilder({\n\t\t\t\ttransaction: input,\n\t\t\t\tweb3Context,\n\t\t\t\tfillGasPrice: true,\n\t\t\t});\n\t\t\texpect(result.gasPrice).toBe(expectedGasPrice);\n\t\t});\n\t});\n\n\tdescribe('should populate accessList', () => {\n\t\tit('should populate with [] (tx.type 0x1)', async () => {\n\t\t\tconst input = { ...transaction };\n\t\t\tdelete input.accessList;\n\t\t\tdelete input.maxFeePerGas;\n\t\t\tdelete input.maxPriorityFeePerGas;\n\t\t\tinput.type = '0x1';\n\n\t\t\tconst result = await defaultTransactionBuilder<PopulatedUnsignedEip2930Transaction>({\n\t\t\t\ttransaction: input,\n\t\t\t\tweb3Context,\n\t\t\t\tfillGasPrice: true,\n\t\t\t});\n\t\t\texpect(result.accessList).toStrictEqual([]);\n\t\t});\n\n\t\tit('should populate with [] (tx.type 0x2)', async () => {\n\t\t\tconst input = { ...transaction };\n\t\t\tdelete input.accessList;\n\t\t\tdelete input.gasPrice;\n\t\t\tinput.type = '0x2';\n\n\t\t\tconst result = await defaultTransactionBuilder<PopulatedUnsignedEip1559Transaction>({\n\t\t\t\ttransaction: input,\n\t\t\t\tweb3Context,\n\t\t\t\tfillGasPrice: true,\n\t\t\t});\n\t\t\texpect(result.accessList).toStrictEqual([]);\n\t\t});\n\t});\n\n\tdescribe('should populate maxPriorityFeePerGas and maxFeePerGas', () => {\n\t\tit('should throw Eip1559NotSupportedError', async () => {\n\t\t\tconst mockBlockDataNoBaseFeePerGas = { ...mockBlockData, baseFeePerGas: undefined };\n\t\t\tjest.spyOn(ethRpcMethods, 'getBlockByNumber').mockImplementation(\n\t\t\t\t// @ts-expect-error - Mocked implementation doesn't have correct method signature\n\t\t\t\t// (i.e. requestManager, blockNumber, hydrated params), but that doesn't matter for the test\n\t\t\t\t() => mockBlockDataNoBaseFeePerGas,\n\t\t\t);\n\n\t\t\tconst input = { ...transaction };\n\t\t\tdelete input.gasPrice;\n\t\t\tinput.type = '0x2';\n\n\t\t\tawait expect(\n\t\t\t\tdefaultTransactionBuilder({ transaction: input, web3Context, fillGasPrice: true }),\n\t\t\t).rejects.toThrow(new Eip1559NotSupportedError());\n\t\t});\n\n\t\tit('should populate with gasPrice', async () => {\n\t\t\tconst input = { ...transaction };\n\t\t\tdelete input.maxPriorityFeePerGas;\n\t\t\tdelete input.maxFeePerGas;\n\t\t\tdelete input.gasPrice;\n\t\t\tinput.type = '0x2';\n\n\t\t\tconst result = await defaultTransactionBuilder<PopulatedUnsignedEip1559Transaction>({\n\t\t\t\ttransaction: input,\n\t\t\t\tweb3Context,\n\t\t\t\tfillGasPrice: true,\n\t\t\t});\n\n\t\t\texpect(result.maxPriorityFeePerGas).toBeDefined();\n\t\t\texpect(result.gasPrice).toBeUndefined();\n\t\t});\n\n\t\tit('should populate with default maxPriorityFeePerGas and calculated maxFeePerGas (no maxPriorityFeePerGas and maxFeePerGas)', async () => {\n\t\t\tconst input = { ...transaction };\n\t\t\tdelete input.maxPriorityFeePerGas;\n\t\t\tdelete input.maxFeePerGas;\n\t\t\tdelete input.gasPrice;\n\t\t\tinput.type = '0x2';\n\n\t\t\tconst result = await defaultTransactionBuilder<PopulatedUnsignedEip1559Transaction>({\n\t\t\t\ttransaction: input,\n\t\t\t\tweb3Context,\n\t\t\t\tfillGasPrice: true,\n\t\t\t});\n\t\t\texpect(result.maxPriorityFeePerGas).toBe(expectedMaxPriorityFeePerGas); // 2.5 Gwei, hardcoded in defaultTransactionBuilder;\n\t\t\texpect(result.maxFeePerGas).toBe(expectedMaxFeePerGas);\n\t\t});\n\n\t\tit('should populate with default maxPriorityFeePerGas and calculated maxFeePerGas (no maxFeePerGas)', async () => {\n\t\t\tconst input = { ...transaction };\n\t\t\tdelete input.maxFeePerGas;\n\t\t\tdelete input.gasPrice;\n\t\t\tinput.type = '0x2';\n\n\t\t\tconst result = await defaultTransactionBuilder<PopulatedUnsignedEip1559Transaction>({\n\t\t\t\ttransaction: input,\n\t\t\t\tweb3Context,\n\t\t\t\tfillGasPrice: true,\n\t\t\t});\n\t\t\texpect(result.maxPriorityFeePerGas).toBe(expectedMaxPriorityFeePerGas); // 2.5 Gwei, hardcoded in defaultTransactionBuilder;\n\t\t\texpect(result.maxFeePerGas).toBe(expectedMaxFeePerGas);\n\t\t});\n\n\t\tit('should populate with default maxPriorityFeePerGas and calculated maxFeePerGas (no maxPriorityFeePerGas)', async () => {\n\t\t\tconst input = { ...transaction };\n\t\t\tdelete input.maxPriorityFeePerGas;\n\t\t\tdelete input.gasPrice;\n\t\t\tinput.type = '0x2';\n\n\t\t\tconst result = await defaultTransactionBuilder<PopulatedUnsignedEip1559Transaction>({\n\t\t\t\ttransaction: input,\n\t\t\t\tweb3Context,\n\t\t\t\tfillGasPrice: true,\n\t\t\t});\n\t\t\texpect(result.maxPriorityFeePerGas).toBe(expectedMaxPriorityFeePerGas); // 2.5 Gwei, hardcoded in defaultTransactionBuilder;\n\t\t\texpect(result.maxFeePerGas).toBe(expectedMaxFeePerGas);\n\t\t});\n\n\t\tit('should populate with web3Context.defaultMaxPriorityFeePerGas and calculated maxFeePerGas (no maxPriorityFeePerGas and maxFeePerGas)', async () => {\n\t\t\tconst input = { ...transaction };\n\t\t\tdelete input.maxPriorityFeePerGas;\n\t\t\tdelete input.maxFeePerGas;\n\t\t\tdelete input.gasPrice;\n\t\t\tinput.type = '0x2';\n\n\t\t\tweb3Context = new Web3Context<EthExecutionAPI>({\n\t\t\t\tprovider: new HttpProvider('http://127.0.0.1'),\n\t\t\t\tconfig: {\n\t\t\t\t\tdefaultMaxPriorityFeePerGas: expectedMaxPriorityFeePerGas,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tconst result = await defaultTransactionBuilder<PopulatedUnsignedEip1559Transaction>({\n\t\t\t\ttransaction: input,\n\t\t\t\tweb3Context,\n\t\t\t\tfillGasPrice: true,\n\t\t\t});\n\t\t\texpect(result.maxPriorityFeePerGas).toBe(web3Context.defaultMaxPriorityFeePerGas); // 2.5 Gwei, hardcoded in defaultTransactionBuilder;\n\t\t\texpect(result.maxFeePerGas).toBe(expectedMaxFeePerGas);\n\t\t});\n\n\t\tit('should populate with web3Context.defaultMaxPriorityFeePerGas and calculated maxFeePerGas (no maxFeePerGas)', async () => {\n\t\t\tconst input = { ...transaction };\n\t\t\tdelete input.maxFeePerGas;\n\t\t\tdelete input.gasPrice;\n\t\t\tinput.type = '0x2';\n\n\t\t\tweb3Context = new Web3Context<EthExecutionAPI>({\n\t\t\t\tprovider: new HttpProvider('http://127.0.0.1'),\n\t\t\t\tconfig: {\n\t\t\t\t\tdefaultMaxPriorityFeePerGas: expectedMaxPriorityFeePerGas,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tconst result = await defaultTransactionBuilder<PopulatedUnsignedEip1559Transaction>({\n\t\t\t\ttransaction: input,\n\t\t\t\tweb3Context,\n\t\t\t\tfillGasPrice: true,\n\t\t\t});\n\t\t\texpect(result.maxPriorityFeePerGas).toBe(web3Context.defaultMaxPriorityFeePerGas); // 2.5 Gwei, hardcoded in defaultTransactionBuilder;\n\t\t\texpect(result.maxFeePerGas).toBe(expectedMaxFeePerGas);\n\t\t});\n\n\t\tit('should populate with web3Context.defaultMaxPriorityFeePerGas and calculated maxFeePerGas (no maxPriorityFeePerGas)', async () => {\n\t\t\tconst input = { ...transaction };\n\t\t\tdelete input.maxPriorityFeePerGas;\n\t\t\tdelete input.gasPrice;\n\t\t\tinput.type = '0x2';\n\n\t\t\tweb3Context = new Web3Context<EthExecutionAPI>({\n\t\t\t\tprovider: new HttpProvider('http://127.0.0.1'),\n\t\t\t\tconfig: {\n\t\t\t\t\tdefaultMaxPriorityFeePerGas: expectedMaxPriorityFeePerGas,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tconst result = await defaultTransactionBuilder<PopulatedUnsignedEip1559Transaction>({\n\t\t\t\ttransaction: input,\n\t\t\t\tweb3Context,\n\t\t\t\tfillGasPrice: true,\n\t\t\t});\n\t\t\texpect(result.maxPriorityFeePerGas).toBe(web3Context.defaultMaxPriorityFeePerGas); // 2.5 Gwei, hardcoded in defaultTransactionBuilder;\n\t\t\texpect(result.maxFeePerGas).toBe(expectedMaxFeePerGas);\n\t\t});\n\t});\n});\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/detect_transaction_type.test.ts",["1149","1150","1151","1152","1153"],[],"﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { InvalidPropertiesForTransactionTypeError } from 'web3-errors';\nimport { Web3Context } from 'web3-core';\nimport { EthExecutionAPI } from 'web3-types';\nimport HttpProvider from 'web3-providers-http';\n\nimport { detectTransactionType } from '../../src/utils/detect_transaction_type';\nimport {\n\ttransactionType0x0,\n\ttransactionType0x1,\n\ttransactionType0x2,\n\ttransactionTypeUndefined,\n\ttransactionTypeValidationError,\n} from '../fixtures/detect_transaction_type';\n\n\njest.mock('../../src/rpc_method_wrappers');\n\ndescribe('detectTransactionType', () => {\n\tafterAll(() => {\n\t\tjest.resetAllMocks();\n\t});\n\n\tdescribe('should detect transaction type 0x0', () => {\n\t\tconst web3Context = new Web3Context<EthExecutionAPI>({\n\t\t\tprovider: new HttpProvider('http://127.0.0.1:80'),\n\t\t});\n\t\tit.each(transactionType0x0)('%s', async transaction => {\n\t\t\texpect(detectTransactionType(transaction, web3Context)).toBe('0x0');\n\t\t});\n\t});\n\n\tdescribe('should detect transaction type 0x1', () => {\n\t\tconst web3Context = new Web3Context<EthExecutionAPI>({\n\t\t\tprovider: new HttpProvider('http://127.0.0.1:80'),\n\t\t});\n\t\tit.each(transactionType0x1)('%s', async transaction => {\n\t\t\texpect(detectTransactionType(transaction, web3Context)).toBe('0x1');\n\t\t});\n\t});\n\n\tdescribe('should detect transaction type 0x2', () => {\n\t\tconst web3Context = new Web3Context<EthExecutionAPI>({\n\t\t\tprovider: new HttpProvider('http://127.0.0.1:80'),\n\t\t});\n\t\tit.each(transactionType0x2)('%s', async transaction => {\n\t\t\texpect(detectTransactionType(transaction, web3Context)).toBe('0x2');\n\t\t});\n\t});\n\n\tdescribe('should not be able to detect transaction type, returning undefined', () => {\n\t\tconst web3Context = new Web3Context<EthExecutionAPI>({\n\t\t\tprovider: new HttpProvider('http://127.0.0.1:80'),\n\t\t});\n\t\tit.each(transactionTypeUndefined)('%s', async transaction => {\n\t\t\texpect(detectTransactionType(transaction, web3Context)).toBeUndefined();\n\t\t});\n\t});\n\n\tdescribe('should throw validation error', () => {\n\t\tconst web3Context = new Web3Context<EthExecutionAPI>({\n\t\t\tprovider: new HttpProvider('http://127.0.0.1:80'),\n\t\t});\n\t\tit.each(transactionTypeValidationError)('%s', async transaction => {\n\t\t\tlet err;\n\t\t\ttry {\n\t\t\t\tdetectTransactionType(transaction, web3Context);\n\t\t\t} catch (error) {\n\t\t\t\terr = error;\n\t\t\t}\n\t\t\texpect(err).toBeInstanceOf(InvalidPropertiesForTransactionTypeError);\n\t\t});\n\t});\n});\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/errors.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/format_rpc_methods.test.ts",["1154"],[],"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { ethRpcMethods } from 'web3-rpc-methods';\nimport { DEFAULT_RETURN_FORMAT } from 'web3-types';\nimport { numberToHex, isNullish } from 'web3-utils';\nimport * as rpcMethodWrappers from '../../src/rpc_method_wrappers';\nimport { getPastLogsValidFormatData } from '../fixtures/web3_eth_methods_with_parameters';\nimport Web3Eth from '../../src/index';\n\njest.mock('web3-rpc-methods');\ndescribe('web3_eth_methods formatting', () => {\n\tlet web3Eth: Web3Eth;\n\n\tbeforeAll(() => {\n\t\tweb3Eth = new Web3Eth('http://127.0.0.1:8545');\n\t});\n\n\tdescribe('getPastLogs makes sure data is prepared properly', () => {\n\t\tit.each(getPastLogsValidFormatData)('input: %s\\nrpcMethodParameters: %s', async filter => {\n\t\t\tjest.spyOn(ethRpcMethods, 'getLogs').mockResolvedValue(['']);\n\t\t\tawait rpcMethodWrappers.getLogs(web3Eth, filter, DEFAULT_RETURN_FORMAT);\n\t\t\tlet { fromBlock, toBlock } = filter;\n\t\t\tif (\n\t\t\t\t!isNullish(filter.fromBlock) &&\n\t\t\t\t(typeof filter.fromBlock === 'bigint' || typeof filter.fromBlock === 'number')\n\t\t\t)\n\t\t\t\tfromBlock = numberToHex(filter.fromBlock);\n\t\t\tif (\n\t\t\t\t!isNullish(filter.toBlock) &&\n\t\t\t\t(typeof filter.toBlock === 'bigint' || typeof filter.toBlock === 'number')\n\t\t\t)\n\t\t\t\ttoBlock = numberToHex(filter.toBlock);\n\t\t\texpect(ethRpcMethods.getLogs).toHaveBeenCalledWith(web3Eth.requestManager, {\n\t\t\t\t...filter,\n\t\t\t\ttoBlock,\n\t\t\t\tfromBlock,\n\t\t\t});\n\t\t});\n\t});\n});\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/format_transaction.test.ts",["1155"],[],"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { DEFAULT_RETURN_FORMAT, FMT_BYTES, FMT_NUMBER, Transaction } from 'web3-types';\nimport { TransactionDataAndInputError } from 'web3-errors';\n\nimport { formatTransaction } from '../../src/utils/format_transaction';\nimport {\n\tbytesAsHexStringTransaction,\n\tnumbersAsBigIntTransaction,\n\tnumbersAsHexStringTransaction,\n\tnumbersAsStringTransaction,\n\tnumbersAsNumberTransaction,\n\tbytesAsUint8ArrayTransaction,\n} from '../fixtures/format_transaction';\nimport { objectBigintToString } from '../fixtures/system_test_utils';\n\nconst transactionsDataForNumberTypes: Record<FMT_NUMBER, Record<string, unknown>> = {\n\t[FMT_NUMBER.BIGINT]: numbersAsBigIntTransaction,\n\t[FMT_NUMBER.HEX]: numbersAsHexStringTransaction,\n\t[FMT_NUMBER.NUMBER]: numbersAsNumberTransaction,\n\t[FMT_NUMBER.STR]: numbersAsStringTransaction,\n};\n\nconst transactionsDataForByteTypes: Record<FMT_BYTES, Record<string, unknown>> = {\n\t[FMT_BYTES.HEX]: bytesAsHexStringTransaction,\n\t[FMT_BYTES.UINT8ARRAY]: bytesAsUint8ArrayTransaction,\n};\n\ndescribe('formatTransaction', () => {\n\tit.skip('should call override method', () => {\n\t\tconst overrideFunction = jest.fn();\n\t\tformatTransaction(numbersAsHexStringTransaction, DEFAULT_RETURN_FORMAT);\n\t\texpect(overrideFunction).toHaveBeenCalledWith(numbersAsHexStringTransaction);\n\t});\n\n\tdescribe('numbers fields', () => {\n\t\tfor (const sourceType of Object.keys(transactionsDataForNumberTypes)) {\n\t\t\tfor (const destinationType of Object.keys(transactionsDataForNumberTypes)) {\n\t\t\t\tit(`should convert \"${sourceType}\" properties to \"${destinationType}\"`, () => {\n\t\t\t\t\t// formatTransaction replaces gasLimit with gas property to follow ETH spec\n\t\t\t\t\t// https://github.com/ethereum/execution-apis/issues/283\n\t\t\t\t\tconst expectedFormattedTransaction =\n\t\t\t\t\t\ttransactionsDataForNumberTypes[destinationType as FMT_NUMBER];\n\t\t\t\t\tdelete expectedFormattedTransaction.gasLimit;\n\t\t\t\t\t// formatTransaction replaces data with input to follow ETH spec\n\t\t\t\t\tdelete expectedFormattedTransaction.data;\n\n\t\t\t\t\texpect(\n\t\t\t\t\t\tobjectBigintToString(\n\t\t\t\t\t\t\tformatTransaction(\n\t\t\t\t\t\t\t\ttransactionsDataForNumberTypes[sourceType as FMT_NUMBER],\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t...DEFAULT_RETURN_FORMAT,\n\t\t\t\t\t\t\t\t\tnumber: destinationType as FMT_NUMBER,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t),\n\t\t\t\t\t).toStrictEqual(objectBigintToString(expectedFormattedTransaction));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t});\n\n\tdescribe('bytes fields', () => {\n\t\tfor (const sourceType of Object.keys(transactionsDataForByteTypes)) {\n\t\t\tfor (const destinationType of Object.keys(transactionsDataForByteTypes)) {\n\t\t\t\tit(`should convert \"${sourceType}\" properties to \"${destinationType}\"`, () => {\n\t\t\t\t\t// formatTransaction replaces gasLimit with gas property to follow ETH spec\n\t\t\t\t\t// https://github.com/ethereum/execution-apis/issues/283\n\t\t\t\t\tconst expectedFormattedTransaction =\n\t\t\t\t\t\ttransactionsDataForByteTypes[destinationType as FMT_BYTES];\n\t\t\t\t\tdelete expectedFormattedTransaction.gasLimit;\n\t\t\t\t\t// formatTransaction replaces data with input to follow ETH spec\n\t\t\t\t\tdelete expectedFormattedTransaction.data;\n\n\t\t\t\t\texpect(\n\t\t\t\t\t\tobjectBigintToString(\n\t\t\t\t\t\t\tformatTransaction(\n\t\t\t\t\t\t\t\ttransactionsDataForByteTypes[sourceType as FMT_BYTES],\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t...DEFAULT_RETURN_FORMAT,\n\t\t\t\t\t\t\t\t\tbytes: destinationType as FMT_BYTES,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t),\n\t\t\t\t\t).toStrictEqual(objectBigintToString(expectedFormattedTransaction));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t});\n\n\tit('Should throw a TransactionDataAndInputError error', () => {\n\t\tconst transaction: Transaction = {\n\t\t\tdata: '0x00',\n\t\t\tinput: '0x01',\n\t\t};\n\n\t\texpect(() => formatTransaction(transaction)).toThrow(\n\t\t\tnew TransactionDataAndInputError({\n\t\t\t\tdata: transaction.data as string,\n\t\t\t\tinput: transaction.input as string,\n\t\t\t}),\n\t\t);\n\t});\n});\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/prepare_transaction_for_signing.test.ts",["1156","1157","1158","1159"],[],"﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport {\n\tEthExecutionAPI,\n\tHexString,\n\tWeb3NetAPI,\n\tTransaction as TransactionType,\n} from 'web3-types';\nimport { Web3Context } from 'web3-core';\nimport HttpProvider from 'web3-providers-http';\nimport { isNullish } from 'web3-validator';\n\nimport { ethRpcMethods } from 'web3-rpc-methods';\n\nimport { bytesToHex, hexToBytes } from 'web3-utils';\nimport {\n\tAccessListEIP2930Transaction,\n\tFeeMarketEIP1559Transaction,\n\tTransaction,\n\tHardfork,\n} from 'web3-eth-accounts';\nimport { prepareTransactionForSigning } from '../../src/utils/prepare_transaction_for_signing';\nimport { validTransactions } from '../fixtures/prepare_transaction_for_signing';\n\ndescribe('prepareTransactionForSigning', () => {\n\tconst web3Context = new Web3Context<EthExecutionAPI>({\n\t\tprovider: new HttpProvider('http://127.0.0.1'),\n\t\tconfig: { defaultNetworkId: '0x1' },\n\t});\n\n\tdescribe('default', () => {\n\t\tit('use default common', async () => {\n\t\t\tconst context = new Web3Context<EthExecutionAPI>({\n\t\t\t\tprovider: new HttpProvider('http://127.0.0.1'),\n\t\t\t\tconfig: { defaultNetworkId: '0x1' },\n\t\t\t});\n\t\t\tcontext.defaultChain = 'mainnet';\n\t\t\tcontext.defaultCommon = {\n\t\t\t\tcustomChain: {\n\t\t\t\t\tname: 'test',\n\t\t\t\t\tnetworkId: 457,\n\t\t\t\t\tchainId: 1458,\n\t\t\t\t},\n\t\t\t\tbaseChain: 'mainnet',\n\t\t\t};\n\n\t\t\tasync function transactionBuilder<ReturnType = TransactionType>(options: {\n\t\t\t\ttransaction: TransactionType;\n\t\t\t\tweb3Context: Web3Context<EthExecutionAPI & Web3NetAPI>;\n\t\t\t\tprivateKey?: HexString | Uint8Array;\n\t\t\t\tfillGasPrice?: boolean;\n\t\t\t\tfillGasLimit?: boolean;\n\t\t\t}): Promise<ReturnType> {\n\t\t\t\tconst tx = { ...options.transaction };\n\n\t\t\t\tif (isNullish(tx.common)) {\n\t\t\t\t\tif (options.web3Context.defaultCommon) {\n\t\t\t\t\t\tconst common = options.web3Context.defaultCommon;\n\t\t\t\t\t\tconst chainId = common.customChain.chainId as string;\n\t\t\t\t\t\tconst networkId = common.customChain.networkId as string;\n\t\t\t\t\t\tconst name = common.customChain.name as string;\n\t\t\t\t\t\ttx.common = {\n\t\t\t\t\t\t\t...common,\n\t\t\t\t\t\t\tcustomChain: { chainId, networkId, name },\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn tx as unknown as ReturnType;\n\t\t\t}\n\n\t\t\tcontext.transactionBuilder = transactionBuilder;\n\n\t\t\tconst ethereumjsTx = await prepareTransactionForSigning(\n\t\t\t\t{\n\t\t\t\t\tchainId: 1458,\n\t\t\t\t\tnonce: 1,\n\t\t\t\t\tgasPrice: BigInt(20000000000),\n\t\t\t\t\tgas: BigInt(21000),\n\t\t\t\t\tto: '0xF0109fC8DF283027b6285cc889F5aA624EaC1F55',\n\t\t\t\t\tfrom: '0x2c7536E3605D9C16a7a3D7b1898e529396a65c23',\n\t\t\t\t\tvalue: '1000000000',\n\t\t\t\t\tinput: '',\n\t\t\t\t},\n\t\t\t\tcontext,\n\t\t\t);\n\t\t\texpect(Number(ethereumjsTx.common.networkId())).toBe(457);\n\t\t\texpect(ethereumjsTx.common.chainName()).toBe('test');\n\t\t});\n\t});\n\n\tit('should be able to read Hardfork from context.defaultHardfork', async () => {\n\t\tconst context = new Web3Context<EthExecutionAPI>({\n\t\t\tprovider: new HttpProvider('http://127.0.0.1'),\n\t\t\tconfig: { defaultNetworkId: '0x9' },\n\t\t});\n\t\tcontext.defaultChain = 'mainnet';\n\t\tcontext.defaultHardfork = Hardfork.Istanbul;\n\n\t\tasync function transactionBuilder<ReturnType = TransactionType>(options: {\n\t\t\ttransaction: TransactionType;\n\t\t\tweb3Context: Web3Context<EthExecutionAPI & Web3NetAPI>;\n\t\t\tprivateKey?: HexString | Uint8Array;\n\t\t\tfillGasPrice?: boolean;\n\t\t\tfillGasLimit?: boolean;\n\t\t}): Promise<ReturnType> {\n\t\t\tconst tx = { ...options.transaction };\n\t\t\treturn tx as unknown as ReturnType;\n\t\t}\n\n\t\tcontext.transactionBuilder = transactionBuilder;\n\n\t\tconst ethereumjsTx = await prepareTransactionForSigning(\n\t\t\t{\n\t\t\t\tchainId: 1458,\n\t\t\t\tnonce: 1,\n\t\t\t\tgasPrice: BigInt(20000000000),\n\t\t\t\tgas: BigInt(21000),\n\t\t\t\tto: '0xF0109fC8DF283027b6285cc889F5aA624EaC1F55',\n\t\t\t\tfrom: '0x2c7536E3605D9C16a7a3D7b1898e529396a65c23',\n\t\t\t\tvalue: '1000000000',\n\t\t\t\tinput: '',\n\t\t\t\tnetworkId: 999,\n\t\t\t},\n\t\t\tcontext,\n\t\t);\n\t\texpect(ethereumjsTx.common.hardfork()).toBe(Hardfork.Istanbul);\n\t\texpect(ethereumjsTx.common.networkId().toString()).toBe('999');\n\t});\n\n\tit('should be able to read Hardfork from context.config.defaultHardfork and context.defaultCommon.hardfork', async () => {\n\t\tconst context = new Web3Context<EthExecutionAPI>({\n\t\t\tprovider: new HttpProvider('http://127.0.0.1'),\n\t\t\tconfig: { defaultNetworkId: '0x9' },\n\t\t});\n\t\tcontext.defaultChain = 'mainnet';\n\n\t\t// if the value here is different from the one in context.defaultCommon.hardfork\n\t\t// Then an error will be thrown:\n\t\t// \"ConfigHardforkMismatchError: Web3Config hardfork doesnt match in defaultHardfork london and common.hardfork istanbul\"\n\t\tcontext.config.defaultHardfork = Hardfork.Istanbul;\n\t\tcontext.defaultCommon = {\n\t\t\tcustomChain: {\n\t\t\t\tname: 'test',\n\t\t\t\tnetworkId: 111,\n\t\t\t\tchainId: 1458,\n\t\t\t},\n\t\t\thardfork: Hardfork.Istanbul,\n\t\t\tbaseChain: 'mainnet',\n\t\t} as any;\n\n\t\tasync function transactionBuilder<ReturnType = TransactionType>(options: {\n\t\t\ttransaction: TransactionType;\n\t\t\tweb3Context: Web3Context<EthExecutionAPI & Web3NetAPI>;\n\t\t\tprivateKey?: HexString | Uint8Array;\n\t\t\tfillGasPrice?: boolean;\n\t\t\tfillGasLimit?: boolean;\n\t\t}): Promise<ReturnType> {\n\t\t\tconst tx = { ...options.transaction };\n\t\t\treturn tx as unknown as ReturnType;\n\t\t}\n\n\t\tcontext.transactionBuilder = transactionBuilder;\n\n\t\tconst ethereumjsTx = await prepareTransactionForSigning(\n\t\t\t{\n\t\t\t\tchainId: 1458,\n\t\t\t\tnonce: 1,\n\t\t\t\tgasPrice: BigInt(20000000000),\n\t\t\t\tgas: BigInt(21000),\n\t\t\t\tto: '0xF0109fC8DF283027b6285cc889F5aA624EaC1F55',\n\t\t\t\tfrom: '0x2c7536E3605D9C16a7a3D7b1898e529396a65c23',\n\t\t\t\tvalue: '1000000000',\n\t\t\t\tinput: '',\n\t\t\t},\n\t\t\tcontext,\n\t\t);\n\t\texpect(ethereumjsTx.common.hardfork()).toBe(Hardfork.Istanbul);\n\t\texpect(ethereumjsTx.common.networkId().toString()).toBe('111');\n\t});\n\n\tit('should give priorities to tx.hardfork and tx.networkId over values from context', async () => {\n\t\tconst context = new Web3Context<EthExecutionAPI>({\n\t\t\tprovider: new HttpProvider('http://127.0.0.1'),\n\t\t\tconfig: { defaultNetworkId: '0x9' },\n\t\t});\n\t\tcontext.defaultChain = 'mainnet';\n\n\t\t// if the value here is different from the one in context.defaultCommon.hardfork\n\t\t// Then an error will be thrown:\n\t\t// \"ConfigHardforkMismatchError: Web3Config hardfork doesnt match in defaultHardfork london and common.hardfork istanbul\"\n\t\tcontext.config.defaultHardfork = Hardfork.Istanbul;\n\t\tcontext.defaultCommon = {\n\t\t\tcustomChain: {\n\t\t\t\tname: 'test',\n\t\t\t\tnetworkId: 111,\n\t\t\t\tchainId: 1458,\n\t\t\t},\n\t\t\thardfork: Hardfork.Istanbul,\n\t\t\tbaseChain: 'mainnet',\n\t\t} as any;\n\n\t\tasync function transactionBuilder<ReturnType = TransactionType>(options: {\n\t\t\ttransaction: TransactionType;\n\t\t\tweb3Context: Web3Context<EthExecutionAPI & Web3NetAPI>;\n\t\t\tprivateKey?: HexString | Uint8Array;\n\t\t\tfillGasPrice?: boolean;\n\t\t\tfillGasLimit?: boolean;\n\t\t}): Promise<ReturnType> {\n\t\t\tconst tx = { ...options.transaction };\n\t\t\treturn tx as unknown as ReturnType;\n\t\t}\n\n\t\tcontext.transactionBuilder = transactionBuilder;\n\n\t\t// context.transactionBuilder = defaultTransactionBuilder;\n\n\t\tconst ethereumjsTx = await prepareTransactionForSigning(\n\t\t\t{\n\t\t\t\tchainId: 1458,\n\t\t\t\tnonce: 1,\n\t\t\t\tgasPrice: BigInt(20000000000),\n\t\t\t\tgas: BigInt(21000),\n\t\t\t\tto: '0xF0109fC8DF283027b6285cc889F5aA624EaC1F55',\n\t\t\t\tfrom: '0x2c7536E3605D9C16a7a3D7b1898e529396a65c23',\n\t\t\t\tvalue: '1000000000',\n\t\t\t\tinput: '',\n\t\t\t\tnetworkId: 999,\n\t\t\t\thardfork: Hardfork.Chainstart,\n\t\t\t\tchain: 'mainnet',\n\t\t\t},\n\t\t\tcontext,\n\t\t);\n\t\texpect(ethereumjsTx.common.hardfork()).toBe(Hardfork.Chainstart);\n\t\texpect(ethereumjsTx.common.networkId().toString()).toBe('999');\n\t});\n\n\tdescribe('should return an web3-utils/tx instance with expected properties', () => {\n\t\tit.each(validTransactions)(\n\t\t\t'mockBlock: %s\\nexpectedTransaction: %s\\nexpectedPrivateKey: %s\\nexpectedAddress: %s\\nexpectedRlpEncodedTransaction: %s\\nexpectedTransactionHash: %s\\nexpectedMessageToSign: %s\\nexpectedV: %s\\nexpectedR: %s\\nexpectedS: %s',\n\t\t\tasync (\n\t\t\t\tmockBlock,\n\t\t\t\texpectedTransaction,\n\t\t\t\texpectedPrivateKey,\n\t\t\t\texpectedAddress,\n\t\t\t\texpectedRlpEncodedTransaction,\n\t\t\t\texpectedTransactionHash,\n\t\t\t\texpectedMessageToSign,\n\t\t\t\texpectedV,\n\t\t\t\texpectedR,\n\t\t\t\texpectedS,\n\t\t\t) => {\n\t\t\t\t// (i.e. requestManager, blockNumber, hydrated params), but that doesn't matter for the test\n\t\t\t\tjest.spyOn(ethRpcMethods, 'estimateGas').mockImplementation(\n\t\t\t\t\t// @ts-expect-error - Mocked implementation doesn't have correct method signature\n\t\t\t\t\t() => expectedTransaction.gas,\n\t\t\t\t);\n\t\t\t\t// @ts-expect-error - Mocked implementation doesn't have correct method signature\n\t\t\t\tjest.spyOn(ethRpcMethods, 'getBlockByNumber').mockImplementation(() => mockBlock);\n\n\t\t\t\tconst ethereumjsTx = await prepareTransactionForSigning(\n\t\t\t\t\texpectedTransaction,\n\t\t\t\t\tweb3Context,\n\t\t\t\t\texpectedPrivateKey,\n\t\t\t\t\ttrue,\n\t\t\t\t);\n\n\t\t\t\t// should produce an web3-utils/tx instance\n\t\t\t\texpect(\n\t\t\t\t\tethereumjsTx instanceof Transaction ||\n\t\t\t\t\t\tethereumjsTx instanceof AccessListEIP2930Transaction ||\n\t\t\t\t\t\tethereumjsTx instanceof FeeMarketEIP1559Transaction,\n\t\t\t\t).toBeTruthy();\n\t\t\t\texpect(ethereumjsTx.sign).toBeDefined();\n\n\t\t\t\t// should sign transaction\n\t\t\t\tconst signedTransaction = ethereumjsTx.sign(\n\t\t\t\t\thexToBytes(expectedPrivateKey.substring(2)),\n\t\t\t\t);\n\n\t\t\t\tconst senderAddress = signedTransaction.getSenderAddress().toString();\n\t\t\t\texpect(senderAddress).toBe(expectedAddress.toLowerCase());\n\n\t\t\t\t// should be able to obtain expectedRlpEncodedTransaction\n\t\t\t\tconst rlpEncodedTransaction = bytesToHex(signedTransaction.serialize());\n\t\t\t\texpect(rlpEncodedTransaction).toBe(expectedRlpEncodedTransaction);\n\n\t\t\t\t// should be able to obtain expectedTransactionHash\n\t\t\t\tconst transactionHash = bytesToHex(signedTransaction.hash());\n\t\t\t\texpect(transactionHash).toBe(expectedTransactionHash);\n\n\t\t\t\t// should be able to obtain expectedMessageToSign\n\t\t\t\tconst messageToSign = bytesToHex(signedTransaction.getMessageToSign());\n\t\t\t\texpect(messageToSign).toBe(expectedMessageToSign);\n\t\t\t\t// should have expected v, r, and s\n\t\t\t\tconst v = !isNullish(signedTransaction.v)\n\t\t\t\t\t? `0x${signedTransaction.v.toString(16)}`\n\t\t\t\t\t: '';\n\t\t\t\tconst r = !isNullish(signedTransaction.r)\n\t\t\t\t\t? `0x${signedTransaction.r.toString(16)}`\n\t\t\t\t\t: '';\n\t\t\t\tconst s = !isNullish(signedTransaction.s)\n\t\t\t\t\t? `0x${signedTransaction.s.toString(16)}`\n\t\t\t\t\t: '';\n\t\t\t\texpect(v).toBe(expectedV);\n\t\t\t\texpect(r).toBe(expectedR);\n\t\t\t\texpect(s).toBe(expectedS);\n\t\t\t},\n\t\t);\n\t});\n});\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/call.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/createAccessList.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/estimate_gas.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/fixtures/call.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/fixtures/createAccessList.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/fixtures/estimate_gas.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/fixtures/get_balance.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/fixtures/get_block.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/fixtures/get_block_transaction_count.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/fixtures/get_block_uncle_count.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/fixtures/get_code.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/fixtures/get_fee_history.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/fixtures/get_logs.ts",[],["1160"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/fixtures/get_pending_transactions.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/fixtures/get_proof.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/fixtures/get_storage_at.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/fixtures/get_transaction.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/fixtures/get_transaction_count.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/fixtures/get_transaction_from_block.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/fixtures/get_transaction_receipt.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/fixtures/get_uncle.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/fixtures/return_formats.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/fixtures/send_signed_transaction.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/fixtures/send_transaction.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/fixtures/sign.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/fixtures/sign_transaction.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/fixtures/sign_typed_data.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/get_balance.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/get_block.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/get_block_number.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/get_block_transaction_count.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/get_block_uncle_count.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/get_chain_id.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/get_code.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/get_coinbase.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/get_fee_history.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/get_gas_price.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/get_hash_rate.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/get_logs.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/get_pending_transactions.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/get_proof.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/get_protocol_version.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/get_storage_at.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/get_transaction.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/get_transaction_count.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/get_transaction_from_block.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/get_transaction_receipt.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/get_uncle.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/is_mining.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/is_syncing.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/send_signed_transaction.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/send_transaction.test.ts",[],["1161","1162"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/sign.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/sign_transaction.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/rpc_method_wrappers/sign_typed_data.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/send_tx_helper.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/utils/getTransactionFromOrToAttr.test.ts",["1163"],[],"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { Web3Context } from 'web3-core';\n\nimport { Wallet } from 'web3-eth-accounts';\nimport { getTransactionFromOrToAttr } from '../../../src/utils/transaction_builder';\nimport {\n\tvalidGetTransactionFromOrToAttrData,\n\tinvalidGetTransactionFromOrToAttrData,\n\tinvalidGetTransactionFromOrToAttrDataForWallet,\n} from '../../fixtures/format_transaction';\nimport { createAccountProvider } from '../../fixtures/system_test_utils';\n\nimport Web3Eth from '../../../src';\n\ndescribe('getTransactionFromOrToAttr', () => {\n\tconst web3Context = new Web3Context();\n\n\tdescribe('valid data', () => {\n\t\tit.each(validGetTransactionFromOrToAttrData)('$title', ({ input, output }) => {\n\t\t\tconst { role, transaction } = input;\n\n\t\t\texpect(getTransactionFromOrToAttr(role, web3Context, transaction)).toEqual(output);\n\t\t});\n\t});\n\n\tdescribe('invalid data', () => {\n\t\tit.each(invalidGetTransactionFromOrToAttrData)('$title', ({ input, output }) => {\n\t\t\tconst { role, transaction } = input;\n\t\t\texpect(() => getTransactionFromOrToAttr(role, web3Context, transaction)).toThrow(\n\t\t\t\toutput,\n\t\t\t);\n\t\t});\n\n\t\tit.each(invalidGetTransactionFromOrToAttrDataForWallet)(\n\t\t\t'$title with wallet',\n\t\t\t({ input, output }) => {\n\t\t\t\tconst privateKey =\n\t\t\t\t\t'0x348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8709';\n\n\t\t\t\t// setup wallet\n\t\t\t\tconst web3Eth = new Web3Eth('http://localhost:8545');\n\t\t\t\tconst accountProvider = createAccountProvider(web3Eth);\n\t\t\t\tconst wallet = new Wallet(accountProvider);\n\t\t\t\tweb3Eth.wallet?.add(privateKey);\n\t\t\t\tweb3Eth['_wallet'] = wallet;\n\n\t\t\t\tconst { role, transaction } = input;\n\t\t\t\texpect(() => getTransactionFromOrToAttr(role, web3Eth, transaction)).toThrow(\n\t\t\t\t\toutput,\n\t\t\t\t);\n\t\t\t},\n\t\t);\n\t});\n});\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/utils/get_revert_reason.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/utils/get_transaction_error.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/utils/get_transaction_type.test.ts",["1164"],[],"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { EthExecutionAPI, Transaction, ETH_DATA_FORMAT } from 'web3-types';\nimport HttpProvider from 'web3-providers-http';\nimport { Web3Context } from 'web3-core';\nimport { format } from 'web3-utils';\n\nimport { transactionSchema } from '../../../src/schemas';\nimport { getTransactionType } from '../../../src/utils/transaction_builder';\n\n\ndescribe('getTransactionType', () => {\n\tconst expectedFrom = '0xb8CE9ab6943e0eCED004cDe8e3bBed6568B2Fa01';\n\n    const transaction: Transaction = {\n        from: expectedFrom,\n        to: '0x3535353535353535353535353535353535353535',\n        value: '0x174876e800',\n        gas: BigInt(21000),\n        data: '0x',\n        nonce: 0x42,\n        chain: 'mainnet',\n        chainId: 0x1,\n        networkId: 0x4,\n    };\n    const formattedTransaction = format(transactionSchema, transaction, ETH_DATA_FORMAT);\n\n    const web3Context = new Web3Context<EthExecutionAPI>({\n        provider: new HttpProvider('http://127.0.0.1:80'),\n        config: {\n            defaultAccount: expectedFrom,\n        },\n    });\n\n    it('should default to 0x2 when transaction type cannot be inferred and use default transaction type', async () => {\n\n\t\tconst transactionType = getTransactionType(formattedTransaction, web3Context);\n\t\texpect(transactionType).toBe('0x2');\n\t});\n});\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/utils/parse_transaction_error.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/utils/wait_for_transaction_receipt.test.ts",["1165","1166","1167"],[],"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { Web3Context } from 'web3-core';\nimport { DEFAULT_RETURN_FORMAT, Web3EthExecutionAPI } from 'web3-types';\nimport { TransactionBlockTimeoutError } from 'web3-errors';\nimport { waitForTransactionReceipt } from '../../../src/utils/wait_for_transaction_receipt';\n\ndescribe('waitForTransactionReceipt unit test', () => {\n\tlet web3Context: Web3Context<Web3EthExecutionAPI>;\n\n\tit(`waitForTransactionReceipt should throw error after block timeout`, async () => {\n\t\tlet blockNum = 1;\n\n\t\tweb3Context = new Web3Context({\n\t\t\trequest: async (payload: any) => {\n\t\t\t\tlet response: { jsonrpc: string; id: any; result: string } | undefined;\n\n\t\t\t\tswitch (payload.method) {\n\t\t\t\t\tcase 'eth_blockNumber':\n\t\t\t\t\t\tblockNum += 50;\n\t\t\t\t\t\tresponse = {\n\t\t\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\t\t\tid: payload.id,\n\t\t\t\t\t\t\tresult: `0x${blockNum.toString(16)}`,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'eth_getTransactionReceipt':\n\t\t\t\t\t\tresponse = undefined;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error(`Unknown payload ${payload}`);\n\t\t\t\t}\n\n\t\t\t\treturn new Promise(resolve => {\n\t\t\t\t\tresolve(response as any);\n\t\t\t\t});\n\t\t\t},\n\t\t\tsupportsSubscriptions: () => false,\n\t\t});\n\n\t\tawait expect(async () =>\n\t\t\twaitForTransactionReceipt(\n\t\t\t\tweb3Context,\n\t\t\t\t'0x0430b701e657e634a9d5480eae0387a473913ef29af8e60c38a3cee24494ed54',\n\t\t\t\tDEFAULT_RETURN_FORMAT,\n\t\t\t),\n\t\t).rejects.toThrow(TransactionBlockTimeoutError);\n\t});\n\n\tit(`waitForTransactionReceipt should resolve immediately if receipt is available`, async () => {\n\t\tlet blockNum = 1;\n\t\tconst txHash = '0x85d995eba9763907fdf35cd2034144dd9d53ce32cbec21349d4b12823c6860c5';\n\t\tconst blockHash = '0xa957d47df264a31badc3ae823e10ac1d444b098d9b73d204c40426e57f47e8c3';\n\n\t\tweb3Context = new Web3Context({\n\t\t\trequest: async (payload: any) => {\n\t\t\t\tconst response = {\n\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\tid: payload.id,\n\t\t\t\t\tresult: {},\n\t\t\t\t};\n\n\t\t\t\tswitch (payload.method) {\n\t\t\t\t\tcase 'eth_blockNumber':\n\t\t\t\t\t\tblockNum += 10;\n\t\t\t\t\t\tresponse.result = `0x${blockNum.toString(16)}`;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'eth_getTransactionReceipt':\n\t\t\t\t\t\tresponse.result = {\n\t\t\t\t\t\t\tblockHash,\n\t\t\t\t\t\t\tblockNumber: `0x1`,\n\t\t\t\t\t\t\tcumulativeGasUsed: '0xa12515',\n\t\t\t\t\t\t\tfrom: payload.from,\n\t\t\t\t\t\t\tgasUsed: payload.gasLimit,\n\t\t\t\t\t\t\tstatus: '0x1',\n\t\t\t\t\t\t\tto: payload.to,\n\t\t\t\t\t\t\ttransactionHash: txHash,\n\t\t\t\t\t\t\ttransactionIndex: '0x66',\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error(`Unknown payload ${payload}`);\n\t\t\t\t}\n\n\t\t\t\treturn new Promise(resolve => {\n\t\t\t\t\tresolve(response as any);\n\t\t\t\t});\n\t\t\t},\n\t\t\tsupportsSubscriptions: () => false,\n\t\t});\n\n\t\tconst res = await waitForTransactionReceipt(\n\t\t\tweb3Context,\n\t\t\t'0x0430b701e657e634a9d5480eae0387a473913ef29af8e60c38a3cee24494ed54',\n\t\t\tDEFAULT_RETURN_FORMAT,\n\t\t);\n\n\t\texpect(res).toBeDefined();\n\t\texpect(res.transactionHash).toStrictEqual(txHash);\n\t\texpect(res.blockHash).toStrictEqual(blockHash);\n\t});\n\n\tit(`waitForTransactionReceipt should resolve immediately if receipt is available - when subscription is enabled`, async () => {\n\t\tlet blockNum = 1;\n\t\tconst txHash = '0x85d995eba9763907fdf35cd2034144dd9d53ce32cbec21349d4b12823c6860c5';\n\t\tconst blockHash = '0xa957d47df264a31badc3ae823e10ac1d444b098d9b73d204c40426e57f47e8c3';\n\n\t\tweb3Context = new Web3Context({\n\t\t\trequest: async (payload: any) => {\n\t\t\t\tconst response = {\n\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\tid: payload.id,\n\t\t\t\t\tresult: {},\n\t\t\t\t};\n\n\t\t\t\tswitch (payload.method) {\n\t\t\t\t\tcase 'eth_blockNumber':\n\t\t\t\t\t\tblockNum += 10;\n\t\t\t\t\t\tresponse.result = `0x${blockNum.toString(16)}`;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'eth_getTransactionReceipt':\n\t\t\t\t\t\tresponse.result = {\n\t\t\t\t\t\t\tblockHash,\n\t\t\t\t\t\t\tblockNumber: `0x1`,\n\t\t\t\t\t\t\tcumulativeGasUsed: '0xa12515',\n\t\t\t\t\t\t\tfrom: payload.from,\n\t\t\t\t\t\t\tgasUsed: payload.gasLimit,\n\t\t\t\t\t\t\tstatus: '0x1',\n\t\t\t\t\t\t\tto: payload.to,\n\t\t\t\t\t\t\ttransactionHash: txHash,\n\t\t\t\t\t\t\ttransactionIndex: '0x66',\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error(`Unknown payload ${payload}`);\n\t\t\t\t}\n\n\t\t\t\treturn new Promise(resolve => {\n\t\t\t\t\tresolve(response as any);\n\t\t\t\t});\n\t\t\t},\n\t\t\tsupportsSubscriptions: () => true,\n\t\t});\n\t\tweb3Context.enableExperimentalFeatures.useSubscriptionWhenCheckingBlockTimeout = true;\n\n\t\tconst res = await waitForTransactionReceipt(\n\t\t\tweb3Context,\n\t\t\t'0x0430b701e657e634a9d5480eae0387a473913ef29af8e60c38a3cee24494ed54',\n\t\t\tDEFAULT_RETURN_FORMAT,\n\t\t);\n\n\t\texpect(res).toBeDefined();\n\t\texpect(res.transactionHash).toStrictEqual(txHash);\n\t\texpect(res.blockHash).toStrictEqual(blockHash);\n\t});\n});","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/utils/watch_transaction_by_polling.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/utils/watch_transaction_by_subscription.test.ts",["1168"],[],"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { Web3Context, Web3RequestManager } from 'web3-core';\nimport { format } from 'web3-utils';\nimport { DEFAULT_RETURN_FORMAT, JsonRpcResponseWithResult, Web3EthExecutionAPI } from 'web3-types';\nimport { ethRpcMethods } from 'web3-rpc-methods';\nimport { WebSocketProvider } from 'web3-providers-ws';\nimport * as rpcMethodWrappers from '../../../src/rpc_method_wrappers';\nimport * as WatchTransactionBySubscription from '../../../src/utils/watch_transaction_by_subscription';\nimport {\n\texpectedTransactionReceipt,\n\texpectedTransactionHash,\n\ttestData,\n} from '../rpc_method_wrappers/fixtures/send_signed_transaction';\nimport { transactionReceiptSchema } from '../../../src/schemas';\nimport { registeredSubscriptions } from '../../../src';\n\njest.mock('web3-rpc-methods');\njest.mock('web3-providers-ws');\njest.mock('../../../src/utils/watch_transaction_by_polling');\n\nconst testMessage =\n\t'Title: %s\\ninputSignedTransaction: %s\\nexpectedTransactionHash: %s\\nexpectedTransactionReceipt: %s\\n';\n\nasync function waitUntilCalled(mock: jest.Mock, timeout = 1000): Promise<jest.Mock> {\n\treturn new Promise((resolve, reject) => {\n\t\tlet timeoutId: NodeJS.Timeout | undefined;\n\t\tconst intervalId = setInterval(() => {\n\t\t\tif (mock.mock.calls.length > 0) {\n\t\t\t\tclearInterval(intervalId);\n\t\t\t\tif (timeoutId) {\n\t\t\t\t\tclearTimeout(timeoutId);\n\t\t\t\t}\n\t\t\t\tresolve(mock);\n\t\t\t}\n\t\t}, 100);\n\t\ttimeoutId = setTimeout(() => {\n\t\t\tclearInterval(intervalId);\n\t\t\tif (timeoutId) {\n\t\t\t\tclearTimeout(timeoutId);\n\t\t\t}\n\t\t\treject(new Error('timeout'));\n\t\t}, timeout);\n\t});\n}\n\ndescribe('watchTransactionBySubscription', () => {\n\tdescribe('should revert to polling in cases where getting by subscription did not workout', () => {\n\t\tlet web3Context: Web3Context<Web3EthExecutionAPI>;\n\n\t\tbeforeEach(() => {\n\t\t\tjest.spyOn(Web3RequestManager.prototype, 'send').mockImplementation(async () => {\n\t\t\t\treturn {} as Promise<unknown>;\n\t\t\t});\n\t\t\tjest.spyOn(WebSocketProvider.prototype, 'request').mockImplementation(async () => {\n\t\t\t\treturn {} as Promise<JsonRpcResponseWithResult<unknown>>;\n\t\t\t});\n\n\t\t\t(ethRpcMethods.sendRawTransaction as jest.Mock).mockResolvedValue(\n\t\t\t\texpectedTransactionHash,\n\t\t\t);\n\t\t\t(ethRpcMethods.getTransactionReceipt as jest.Mock).mockResolvedValue(\n\t\t\t\texpectedTransactionHash,\n\t\t\t);\n\t\t\tweb3Context = new Web3Context({\n\t\t\t\t// dummy provider that does supports subscription\n\t\t\t\tprovider: new WebSocketProvider('ws://localhost:8546'),\n\t\t\t\tregisteredSubscriptions,\n\t\t\t});\n\t\t\t(web3Context.provider as any).supportsSubscriptions = () => true;\n\t\t});\n\t\tafterEach(() => {\n\t\t\t// to clear the interval inside the subscription function:\n\t\t\tweb3Context.transactionConfirmationBlocks = 0;\n\t\t});\n\t\tlet counter = 0;\n\t\tit.each(testData)(\n\t\t\t`should call getBlockNumber if blockHeaderTimeout reached\\n ${testMessage}`,\n\t\t\tasync (_, inputTransaction) => {\n\t\t\t\tif (counter > 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tcounter += 1;\n\t\t\t\tconst formattedTransactionReceipt = format(\n\t\t\t\t\ttransactionReceiptSchema,\n\t\t\t\t\texpectedTransactionReceipt,\n\t\t\t\t\tDEFAULT_RETURN_FORMAT,\n\t\t\t\t);\n\n\t\t\t\tweb3Context.enableExperimentalFeatures.useSubscriptionWhenCheckingBlockTimeout =\n\t\t\t\t\ttrue;\n\t\t\t\t// this will case the function to revert to polling:\n\t\t\t\tweb3Context.blockHeaderTimeout = 0;\n\n\t\t\t\tweb3Context.transactionSendTimeout = 2;\n\n\t\t\t\tconst promiEvent = rpcMethodWrappers.sendSignedTransaction(\n\t\t\t\t\tweb3Context,\n\t\t\t\t\tinputTransaction,\n\t\t\t\t\tDEFAULT_RETURN_FORMAT,\n\t\t\t\t);\n\t\t\t\t// await promiEvent;\n\t\t\t\tWatchTransactionBySubscription.watchTransactionBySubscription({\n\t\t\t\t\tweb3Context,\n\t\t\t\t\ttransactionReceipt: formattedTransactionReceipt,\n\t\t\t\t\ttransactionPromiEvent: promiEvent,\n\t\t\t\t\treturnFormat: DEFAULT_RETURN_FORMAT,\n\t\t\t\t});\n\t\t\t\tawait waitUntilCalled(ethRpcMethods.getBlockNumber as jest.Mock, 5000);\n\n\t\t\t\tawait promiEvent;\n\t\t\t},\n\t\t\t60000,\n\t\t);\n\t});\n});\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/utils/watch_transaction_for_confirmations.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/validate_transaction_for_signing.test.ts",[],["1169","1170","1171","1172","1173","1174","1175","1176"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/validation.test.ts",[],["1177","1178","1179","1180"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/web3_eth_calculate_fee_data.test.ts",["1181"],[],"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { ethRpcMethods } from 'web3-rpc-methods';\n\nimport Web3Eth from '../../src/index';\n\njest.mock('web3-rpc-methods');\n\ndescribe('Web3Eth.calculateFeeData', () => {\n\tlet web3Eth: Web3Eth;\n\n\tbeforeAll(() => {\n\t\tweb3Eth = new Web3Eth('http://127.0.0.1:8545');\n\t});\n\n\tit('should return call getBlockByNumber, getGasPrice and getMaxPriorityFeePerGas', async () => {\n\t\tawait web3Eth.calculateFeeData();\n\t\t// web3Eth.getBlock = jest.fn();\n\t\texpect(ethRpcMethods.getBlockByNumber).toHaveBeenCalledWith(\n\t\t\tweb3Eth.requestManager,\n\t\t\t'latest',\n\t\t\tfalse,\n\t\t);\n\t\texpect(ethRpcMethods.getGasPrice).toHaveBeenCalledWith(web3Eth.requestManager);\n\t\texpect(ethRpcMethods.getMaxPriorityFeePerGas).toHaveBeenCalledWith(web3Eth.requestManager);\n\t});\n\n\tit('should calculate fee data', async () => {\n\t\tconst gasPrice = BigInt(20 * 1000);\n\t\tconst baseFeePerGas = BigInt(1000);\n\t\tconst maxPriorityFeePerGas = BigInt(100);\n\t\tconst baseFeePerGasFactor = BigInt(3);\n\n\t\tjest.spyOn(ethRpcMethods, 'getBlockByNumber').mockReturnValueOnce({ baseFeePerGas } as any);\n\t\tjest.spyOn(ethRpcMethods, 'getGasPrice').mockReturnValueOnce(gasPrice as any);\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-call\n\t\tjest\n\t\t\t.spyOn(ethRpcMethods, 'getMaxPriorityFeePerGas')\n\t\t\t.mockReturnValueOnce(maxPriorityFeePerGas as any);\n\n\t\tconst feeData = await web3Eth.calculateFeeData(baseFeePerGasFactor, maxPriorityFeePerGas);\n\t\texpect(feeData).toMatchObject({\n\t\t\tgasPrice,\n\t\t\tmaxFeePerGas: baseFeePerGas * baseFeePerGasFactor + maxPriorityFeePerGas,\n\t\t\tmaxPriorityFeePerGas,\n\t\t\tbaseFeePerGas,\n\t\t});\n\t});\n\n\tit('should calculate fee data based on `alternativeMaxPriorityFeePerGas` if `getMaxPriorityFeePerGas` did not return a value', async () => {\n\t\tconst gasPrice = BigInt(20 * 1000);\n\t\tconst baseFeePerGas = BigInt(1000);\n\t\tconst alternativeMaxPriorityFeePerGas = BigInt(700);\n\t\tconst baseFeePerGasFactor = BigInt(3);\n\n\t\tjest.spyOn(ethRpcMethods, 'getBlockByNumber').mockReturnValueOnce({ baseFeePerGas } as any);\n\t\tjest.spyOn(ethRpcMethods, 'getGasPrice').mockReturnValueOnce(gasPrice as any);\n\t\tconst feeData = await web3Eth.calculateFeeData(\n\t\t\tbaseFeePerGasFactor,\n\t\t\talternativeMaxPriorityFeePerGas,\n\t\t);\n\t\texpect(feeData).toMatchObject({\n\t\t\tgasPrice,\n\t\t\tmaxFeePerGas: baseFeePerGas * baseFeePerGasFactor + alternativeMaxPriorityFeePerGas,\n\t\t\tmaxPriorityFeePerGas: alternativeMaxPriorityFeePerGas,\n\t\t\tbaseFeePerGas,\n\t\t});\n\t});\n});\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/web3_eth_methods_no_parameters.test.ts",["1182"],[],"﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { ethRpcMethods } from 'web3-rpc-methods';\n\nimport Web3Eth from '../../src/index';\n\njest.mock('web3-rpc-methods');\n\ndescribe('web3_eth_methods_no_parameters', () => {\n\tlet web3Eth: Web3Eth;\n\n\tbeforeAll(() => {\n\t\tweb3Eth = new Web3Eth('http://127.0.0.1:8545');\n\t});\n\n\tdescribe('should call RPC method with only request manager parameter', () => {\n\t\tit('getProtocolVersion', async () => {\n\t\t\tawait web3Eth.getProtocolVersion();\n\t\t\texpect(ethRpcMethods.getProtocolVersion).toHaveBeenCalledWith(web3Eth.requestManager);\n\t\t});\n\n\t\tit('isSyncing', async () => {\n\t\t\tawait web3Eth.isSyncing();\n\t\t\texpect(ethRpcMethods.getSyncing).toHaveBeenCalledWith(web3Eth.requestManager);\n\t\t});\n\n\t\tit('getCoinbase', async () => {\n\t\t\tawait web3Eth.getCoinbase();\n\t\t\texpect(ethRpcMethods.getCoinbase).toHaveBeenCalledWith(web3Eth.requestManager);\n\t\t});\n\n\t\tit('isMining', async () => {\n\t\t\tawait web3Eth.isMining();\n\t\t\texpect(ethRpcMethods.getMining).toHaveBeenCalledWith(web3Eth.requestManager);\n\t\t});\n\n\t\tit('getAccounts', async () => {\n\t\t\tawait web3Eth.getAccounts();\n\t\t\texpect(ethRpcMethods.getAccounts).toHaveBeenCalledWith(web3Eth.requestManager);\n\t\t});\n\n\t\tit('getWork', async () => {\n\t\t\tawait web3Eth.getWork();\n\t\t\texpect(ethRpcMethods.getWork).toHaveBeenCalledWith(web3Eth.requestManager);\n\t\t});\n\n\t\tit('getPendingTransactions', async () => {\n\t\t\t(ethRpcMethods.getPendingTransactions as jest.Mock).mockResolvedValueOnce([]);\n\n\t\t\tawait web3Eth.getPendingTransactions();\n\t\t\texpect(ethRpcMethods.getPendingTransactions).toHaveBeenCalledWith(\n\t\t\t\tweb3Eth.requestManager,\n\t\t\t);\n\t\t});\n\n\t\tit('requestAccounts', async () => {\n\t\t\tawait web3Eth.requestAccounts();\n\t\t\texpect(ethRpcMethods.requestAccounts).toHaveBeenCalledWith(web3Eth.requestManager);\n\t\t});\n\n\t\tit('getNodeInfo', async () => {\n\t\t\tawait web3Eth.getNodeInfo();\n\t\t\texpect(ethRpcMethods.getNodeInfo).toHaveBeenCalledWith(web3Eth.requestManager);\n\t\t});\n\n\t\tit('getMaxPriorityFeePerGas', async () => {\n\t\t\tawait web3Eth.getMaxPriorityFeePerGas();\n\t\t\texpect(ethRpcMethods.getMaxPriorityFeePerGas).toHaveBeenCalledWith(web3Eth.requestManager);\n\t\t});\n\t});\n});\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/web3_eth_methods_with_parameters.test.ts",["1183"],["1184"],"﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { ethRpcMethods } from 'web3-rpc-methods';\n\nimport { TransactionInfoAPI } from 'web3-types';\nimport Web3Eth from '../../src/index';\nimport * as rpcMethodWrappers from '../../src/rpc_method_wrappers';\nimport {\n\tgetBlockNumberValidData,\n\tgetChainIdValidData,\n\tgetGasPriceValidData,\n\tgetHashRateValidData,\n} from '../fixtures/rpc_methods_wrappers';\nimport {\n\testimateGasValidData,\n\tgetBalanceValidData,\n\tgetBlockTransactionCountValidData,\n\tgetBlockUncleCountValidData,\n\tgetBlockValidData,\n\tgetCodeValidData,\n\tgetFeeHistoryValidData,\n\tgetPastLogsValidData,\n\tgetProofValidData,\n\tgetStorageAtValidData,\n\tgetTransactionCountValidData,\n\tgetTransactionFromBlockValidData,\n\tgetTransactionReceiptValidData,\n\tgetTransactionValidData,\n\tgetUncleValidData,\n\tsendSignedTransactionValidData,\n\tsignValidData,\n\tsubmitWorkValidData,\n\ttx,\n\ttxReceipt,\n} from '../fixtures/web3_eth_methods_with_parameters';\n\nimport { testData as createAccessListTestData } from './rpc_method_wrappers/fixtures/createAccessList';\n\njest.mock('web3-rpc-methods');\njest.mock('../../src/rpc_method_wrappers');\n// eslint-disable-next-line @typescript-eslint/no-unsafe-call\njest.spyOn(rpcMethodWrappers, 'getTransaction').mockResolvedValue(tx as TransactionInfoAPI);\njest.spyOn(rpcMethodWrappers, 'getTransactionReceipt').mockResolvedValue(txReceipt);\n\ndescribe('web3_eth_methods_with_parameters', () => {\n\tlet web3Eth: Web3Eth;\n\n\tbeforeAll(() => {\n\t\tweb3Eth = new Web3Eth('http://127.0.0.1:8545');\n\t});\n\n\tdescribe('should call RPC method with expected parameters', () => {\n\t\tdescribe('only has returnFormat parameter', () => {\n\t\t\tdescribe('getHashRate', () => {\n\t\t\t\tit.each(getHashRateValidData)('returnFormat: %s', async returnFormat => {\n\t\t\t\t\tawait web3Eth.getHashRate(returnFormat);\n\t\t\t\t\texpect(rpcMethodWrappers.getHashRate).toHaveBeenCalledWith(\n\t\t\t\t\t\tweb3Eth,\n\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tdescribe('getHashrate', () => {\n\t\t\t\tit.each(getHashRateValidData)('returnFormat: %s', async returnFormat => {\n\t\t\t\t\t// eslint-disable-next-line deprecation/deprecation\n\t\t\t\t\tawait web3Eth.getHashrate(returnFormat);\n\t\t\t\t\texpect(rpcMethodWrappers.getHashRate).toHaveBeenCalledWith(\n\t\t\t\t\t\tweb3Eth,\n\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tdescribe('getGasPrice', () => {\n\t\t\t\tit.each(getGasPriceValidData)('returnFormat: %s', async returnFormat => {\n\t\t\t\t\tawait web3Eth.getGasPrice(returnFormat);\n\t\t\t\t\texpect(rpcMethodWrappers.getGasPrice).toHaveBeenCalledWith(\n\t\t\t\t\t\tweb3Eth,\n\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tdescribe('getBlockNumber', () => {\n\t\t\t\tit.each(getBlockNumberValidData)('returnFormat: %s', async returnFormat => {\n\t\t\t\t\tawait web3Eth.getBlockNumber(returnFormat);\n\t\t\t\t\texpect(rpcMethodWrappers.getBlockNumber).toHaveBeenCalledWith(\n\t\t\t\t\t\tweb3Eth,\n\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tdescribe('getChainId', () => {\n\t\t\t\tit.each(getChainIdValidData)('returnFormat: %s', async returnFormat => {\n\t\t\t\t\tawait web3Eth.getChainId(returnFormat);\n\t\t\t\t\texpect(rpcMethodWrappers.getChainId).toHaveBeenCalledWith(\n\t\t\t\t\t\tweb3Eth,\n\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\tdescribe('has multiple parameters', () => {\n\t\t\tdescribe('has returnFormat parameter', () => {\n\t\t\t\tdescribe('getBalance', () => {\n\t\t\t\t\tit.each(getBalanceValidData)(\n\t\t\t\t\t\t'input: %s\\nrpcMethodParameters: %s',\n\t\t\t\t\t\tasync (input, rpcMethodParameters) => {\n\t\t\t\t\t\t\tawait web3Eth.getBalance(...input);\n\t\t\t\t\t\t\texpect(rpcMethodWrappers.getBalance).toHaveBeenCalledWith(\n\t\t\t\t\t\t\t\tweb3Eth,\n\t\t\t\t\t\t\t\t...rpcMethodParameters,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t});\n\n\t\t\t\tdescribe('getBlock', () => {\n\t\t\t\t\tit.each(getBlockValidData)(\n\t\t\t\t\t\t'input: %s\\nrpcMethodParameters: %s',\n\t\t\t\t\t\tasync (input, rpcMethodParameters) => {\n\t\t\t\t\t\t\tawait web3Eth.getBlock(...input);\n\t\t\t\t\t\t\texpect(rpcMethodWrappers.getBlock).toHaveBeenCalledWith(\n\t\t\t\t\t\t\t\tweb3Eth,\n\t\t\t\t\t\t\t\t...rpcMethodParameters,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t});\n\n\t\t\t\tdescribe('getBlockTransactionCount', () => {\n\t\t\t\t\tit.each(getBlockTransactionCountValidData)(\n\t\t\t\t\t\t'input: %s\\nrpcMethodParameters: %s',\n\t\t\t\t\t\tasync (input, rpcMethodParameters) => {\n\t\t\t\t\t\t\tawait web3Eth.getBlockTransactionCount(...input);\n\t\t\t\t\t\t\texpect(rpcMethodWrappers.getBlockTransactionCount).toHaveBeenCalledWith(\n\t\t\t\t\t\t\t\tweb3Eth,\n\t\t\t\t\t\t\t\t...rpcMethodParameters,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t});\n\n\t\t\t\tdescribe('getBlockUncleCount', () => {\n\t\t\t\t\tit.each(getBlockUncleCountValidData)(\n\t\t\t\t\t\t'input: %s\\nrpcMethodParameters: %s',\n\t\t\t\t\t\tasync (input, rpcMethodParameters) => {\n\t\t\t\t\t\t\tawait web3Eth.getBlockUncleCount(...input);\n\t\t\t\t\t\t\texpect(rpcMethodWrappers.getBlockUncleCount).toHaveBeenCalledWith(\n\t\t\t\t\t\t\t\tweb3Eth,\n\t\t\t\t\t\t\t\t...rpcMethodParameters,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t});\n\n\t\t\t\tdescribe('getUncle', () => {\n\t\t\t\t\tit.each(getUncleValidData)(\n\t\t\t\t\t\t'input: %s\\nrpcMethodParameters: %s',\n\t\t\t\t\t\tasync (input, rpcMethodParameters) => {\n\t\t\t\t\t\t\tawait web3Eth.getUncle(...input);\n\t\t\t\t\t\t\texpect(rpcMethodWrappers.getUncle).toHaveBeenCalledWith(\n\t\t\t\t\t\t\t\tweb3Eth,\n\t\t\t\t\t\t\t\t...rpcMethodParameters,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t});\n\n\t\t\t\tdescribe('getTransaction', () => {\n\t\t\t\t\tit.each(getTransactionValidData)(\n\t\t\t\t\t\t'input: %s\\nrpcMethodParameters: %s',\n\t\t\t\t\t\tasync (input, rpcMethodParameters) => {\n\t\t\t\t\t\t\tawait web3Eth.getTransaction(...input);\n\t\t\t\t\t\t\texpect(rpcMethodWrappers.getTransaction).toHaveBeenCalledWith(\n\t\t\t\t\t\t\t\tweb3Eth,\n\t\t\t\t\t\t\t\t...rpcMethodParameters,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t});\n\n\t\t\t\tdescribe('getTransactionFromBlock', () => {\n\t\t\t\t\tit.each(getTransactionFromBlockValidData)(\n\t\t\t\t\t\t'input: %s\\nrpcMethodParameters: %s',\n\t\t\t\t\t\tasync (input, rpcMethodParameters) => {\n\t\t\t\t\t\t\tawait web3Eth.getTransactionFromBlock(...input);\n\t\t\t\t\t\t\texpect(rpcMethodWrappers.getTransactionFromBlock).toHaveBeenCalledWith(\n\t\t\t\t\t\t\t\tweb3Eth,\n\t\t\t\t\t\t\t\t...rpcMethodParameters,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t});\n\n\t\t\t\tdescribe('getTransactionReceipt', () => {\n\t\t\t\t\tit.each(getTransactionReceiptValidData)(\n\t\t\t\t\t\t'input: %s\\nrpcMethodParameters: %s',\n\t\t\t\t\t\tasync (input, rpcMethodParameters) => {\n\t\t\t\t\t\t\tawait web3Eth.getTransactionReceipt(...input);\n\t\t\t\t\t\t\texpect(rpcMethodWrappers.getTransactionReceipt).toHaveBeenCalledWith(\n\t\t\t\t\t\t\t\tweb3Eth,\n\t\t\t\t\t\t\t\t...rpcMethodParameters,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t});\n\n\t\t\t\tdescribe('getTransactionCount', () => {\n\t\t\t\t\tit.each(getTransactionCountValidData)(\n\t\t\t\t\t\t'input: %s\\rpcMethodParameters: %s',\n\t\t\t\t\t\tasync (input, rpcMethodParameters) => {\n\t\t\t\t\t\t\tawait web3Eth.getTransactionCount(...input);\n\t\t\t\t\t\t\texpect(rpcMethodWrappers.getTransactionCount).toHaveBeenCalledWith(\n\t\t\t\t\t\t\t\tweb3Eth,\n\t\t\t\t\t\t\t\t...rpcMethodParameters,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t});\n\n\t\t\t\tdescribe('estimateGas', () => {\n\t\t\t\t\tit.each(estimateGasValidData)(\n\t\t\t\t\t\t'input: %s\\nrpcMethodParameters: %s',\n\t\t\t\t\t\tasync (input, rpcMethodParameters) => {\n\t\t\t\t\t\t\tawait web3Eth.estimateGas(...input);\n\t\t\t\t\t\t\texpect(rpcMethodWrappers.estimateGas).toHaveBeenCalledWith(\n\t\t\t\t\t\t\t\tweb3Eth,\n\t\t\t\t\t\t\t\t...rpcMethodParameters,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t});\n\n\t\t\t\tdescribe('getFeeHistory', () => {\n\t\t\t\t\tit.each(getFeeHistoryValidData)(\n\t\t\t\t\t\t'input: %s\\nrpcMethodParameters: %s',\n\t\t\t\t\t\tasync (input, rpcMethodParameters) => {\n\t\t\t\t\t\t\tawait web3Eth.getFeeHistory(...input);\n\t\t\t\t\t\t\texpect(rpcMethodWrappers.getFeeHistory).toHaveBeenCalledWith(\n\t\t\t\t\t\t\t\tweb3Eth,\n\t\t\t\t\t\t\t\t...rpcMethodParameters,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t});\n\n\t\t\t\tdescribe('getProof', () => {\n\t\t\t\t\tit.each(getProofValidData)(\n\t\t\t\t\t\t'input: %s\\nrpcMethodParameters: %s',\n\t\t\t\t\t\tasync (input, rpcMethodParameters) => {\n\t\t\t\t\t\t\tawait web3Eth.getProof(...input);\n\t\t\t\t\t\t\texpect(rpcMethodWrappers.getProof).toHaveBeenCalledWith(\n\t\t\t\t\t\t\t\tweb3Eth,\n\t\t\t\t\t\t\t\t...rpcMethodParameters,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t});\n\n\t\t\t\tdescribe('getStorageAt', () => {\n\t\t\t\t\tit.each(getStorageAtValidData)(\n\t\t\t\t\t\t'input: %s\\nrpcMethodParameters: %s',\n\t\t\t\t\t\tasync (input, rpcMethodParameters) => {\n\t\t\t\t\t\t\tawait web3Eth.getStorageAt(...input);\n\t\t\t\t\t\t\texpect(rpcMethodWrappers.getStorageAt).toHaveBeenCalledWith(\n\t\t\t\t\t\t\t\tweb3Eth,\n\t\t\t\t\t\t\t\t...rpcMethodParameters,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t});\n\n\t\t\t\tdescribe('getCode', () => {\n\t\t\t\t\tit.each(getCodeValidData)(\n\t\t\t\t\t\t'input: %s\\nrpcMethodParameters: %s',\n\t\t\t\t\t\tasync (input, rpcMethodParameters) => {\n\t\t\t\t\t\t\tawait web3Eth.getCode(...input);\n\t\t\t\t\t\t\texpect(rpcMethodWrappers.getCode).toHaveBeenCalledWith(\n\t\t\t\t\t\t\t\tweb3Eth,\n\t\t\t\t\t\t\t\t...rpcMethodParameters,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t});\n\n\t\t\t\tdescribe('sendSignedTransaction', () => {\n\t\t\t\t\tit.each(sendSignedTransactionValidData)(\n\t\t\t\t\t\t'input: %s\\nrpcMethodParameters: %s',\n\t\t\t\t\t\tasync (input, rpcMethodParameters) => {\n\t\t\t\t\t\t\tawait web3Eth.sendSignedTransaction(...input);\n\t\t\t\t\t\t\texpect(rpcMethodWrappers.sendSignedTransaction).toHaveBeenCalledWith(\n\t\t\t\t\t\t\t\tweb3Eth,\n\t\t\t\t\t\t\t\t...rpcMethodParameters,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t});\n\n\t\t\t\tdescribe('sign', () => {\n\t\t\t\t\tit.each(signValidData)(\n\t\t\t\t\t\t'input: %s\\nrpcMethodParameters: %s',\n\t\t\t\t\t\tasync (input, rpcMethodParameters) => {\n\t\t\t\t\t\t\tawait web3Eth.sign(...input);\n\t\t\t\t\t\t\texpect(rpcMethodWrappers.sign).toHaveBeenCalledWith(\n\t\t\t\t\t\t\t\tweb3Eth,\n\t\t\t\t\t\t\t\t...rpcMethodParameters,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t});\n\n\t\t\t\tdescribe('getPastLogs', () => {\n\t\t\t\t\tit.each(getPastLogsValidData)(\n\t\t\t\t\t\t'input: %s\\nrpcMethodParameters: %s',\n\t\t\t\t\t\tasync (input, rpcMethodParameters) => {\n\t\t\t\t\t\t\tawait web3Eth.getPastLogs(...input);\n\t\t\t\t\t\t\texpect(rpcMethodWrappers.getLogs).toHaveBeenCalledWith(\n\t\t\t\t\t\t\t\tweb3Eth,\n\t\t\t\t\t\t\t\t...rpcMethodParameters,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t\tdescribe('getPastLogs called with rpcMethodWrappers', () => {\n\t\t\t\t\tit.each(getPastLogsValidData)(\n\t\t\t\t\t\t'input: %s\\nrpcMethodParameters: %s',\n\t\t\t\t\t\tasync (_, rpcMethodParameters) => {\n\t\t\t\t\t\t\tawait rpcMethodWrappers.getLogs(web3Eth, ...rpcMethodParameters);\n\t\t\t\t\t\t\texpect(rpcMethodWrappers.getLogs).toHaveBeenCalledWith(\n\t\t\t\t\t\t\t\tweb3Eth,\n\t\t\t\t\t\t\t\t...rpcMethodParameters,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t});\n\n\t\t\t\tdescribe('createAccessList', () => {\n\t\t\t\t\tit.each(createAccessListTestData)(\n\t\t\t\t\t\t'input: %s\\nrpcMethodParameters: %s',\n\t\t\t\t\t\tasync (_, input) => {\n\t\t\t\t\t\t\tawait web3Eth.createAccessList(...input);\n\t\t\t\t\t\t\texpect(rpcMethodWrappers.createAccessList).toHaveBeenCalledWith(\n\t\t\t\t\t\t\t\tweb3Eth,\n\t\t\t\t\t\t\t\t...input,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tdescribe(\"doesn't have returnFormat parameter\", () => {\n\t\t\t\tdescribe('submitWork', () => {\n\t\t\t\t\tit.each(submitWorkValidData)('input: %s', async input => {\n\t\t\t\t\t\tawait web3Eth.submitWork(...input);\n\t\t\t\t\t\texpect(ethRpcMethods.submitWork).toHaveBeenCalledWith(\n\t\t\t\t\t\t\tweb3Eth.requestManager,\n\t\t\t\t\t\t\t...input,\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t});\n});\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth/test/unit/web3_eth_subscription.test.ts",[],[],{"ruleId":"1185","severity":1,"message":"1186","line":87,"column":4,"nodeType":null,"messageId":"1187","endLine":87,"endColumn":10},{"ruleId":"1185","severity":1,"message":"1186","line":95,"column":4,"nodeType":null,"messageId":"1187","endLine":95,"endColumn":10},{"ruleId":"1185","severity":1,"message":"1186","line":103,"column":4,"nodeType":null,"messageId":"1187","endLine":103,"endColumn":10},{"ruleId":"1185","severity":1,"message":"1186","line":110,"column":4,"nodeType":null,"messageId":"1187","endLine":110,"endColumn":10},{"ruleId":"1185","severity":1,"message":"1186","line":117,"column":4,"nodeType":null,"messageId":"1187","endLine":117,"endColumn":10},{"ruleId":"1185","severity":1,"message":"1186","line":134,"column":4,"nodeType":null,"messageId":"1187","endLine":134,"endColumn":10},{"ruleId":"1185","severity":1,"message":"1186","line":151,"column":4,"nodeType":null,"messageId":"1187","endLine":151,"endColumn":10},{"ruleId":"1185","severity":1,"message":"1186","line":167,"column":4,"nodeType":null,"messageId":"1187","endLine":167,"endColumn":10},{"ruleId":"1185","severity":1,"message":"1186","line":184,"column":4,"nodeType":null,"messageId":"1187","endLine":184,"endColumn":10},{"ruleId":"1185","severity":1,"message":"1186","line":209,"column":4,"nodeType":null,"messageId":"1187","endLine":209,"endColumn":10},{"ruleId":"1185","severity":1,"message":"1186","line":237,"column":4,"nodeType":null,"messageId":"1187","endLine":237,"endColumn":10},{"ruleId":"1185","severity":1,"message":"1186","line":262,"column":4,"nodeType":null,"messageId":"1187","endLine":262,"endColumn":10},{"ruleId":"1185","severity":1,"message":"1186","line":297,"column":4,"nodeType":null,"messageId":"1187","endLine":297,"endColumn":10},{"ruleId":"1185","severity":1,"message":"1186","line":330,"column":4,"nodeType":null,"messageId":"1187","endLine":330,"endColumn":10},{"ruleId":"1185","severity":1,"message":"1186","line":363,"column":4,"nodeType":null,"messageId":"1187","endLine":363,"endColumn":10},{"ruleId":"1185","severity":1,"message":"1186","line":401,"column":4,"nodeType":null,"messageId":"1187","endLine":401,"endColumn":10},{"ruleId":"1185","severity":1,"message":"1186","line":427,"column":4,"nodeType":null,"messageId":"1187","endLine":427,"endColumn":10},{"ruleId":"1185","severity":1,"message":"1186","line":448,"column":4,"nodeType":null,"messageId":"1187","endLine":448,"endColumn":10},{"ruleId":"1185","severity":1,"message":"1186","line":486,"column":4,"nodeType":null,"messageId":"1187","endLine":486,"endColumn":10},{"ruleId":"1185","severity":1,"message":"1186","line":514,"column":4,"nodeType":null,"messageId":"1187","endLine":514,"endColumn":10},{"ruleId":"1185","severity":1,"message":"1186","line":540,"column":4,"nodeType":null,"messageId":"1187","endLine":540,"endColumn":10},{"ruleId":"1185","severity":1,"message":"1186","line":659,"column":4,"nodeType":null,"messageId":"1187","endLine":659,"endColumn":10},{"ruleId":"1188","severity":1,"message":"1189","line":702,"column":15,"nodeType":"1190","messageId":"1191","endLine":702,"endColumn":16},{"ruleId":"1188","severity":1,"message":"1192","line":702,"column":18,"nodeType":"1190","messageId":"1191","endLine":702,"endColumn":19},{"ruleId":"1188","severity":1,"message":"1193","line":702,"column":21,"nodeType":"1190","messageId":"1191","endLine":702,"endColumn":22},{"ruleId":"1185","severity":1,"message":"1186","line":776,"column":4,"nodeType":null,"messageId":"1187","endLine":776,"endColumn":10},{"ruleId":"1185","severity":1,"message":"1186","line":809,"column":4,"nodeType":null,"messageId":"1187","endLine":809,"endColumn":10},{"ruleId":"1185","severity":1,"message":"1186","line":842,"column":4,"nodeType":null,"messageId":"1187","endLine":842,"endColumn":10},{"ruleId":"1185","severity":1,"message":"1186","line":866,"column":4,"nodeType":null,"messageId":"1187","endLine":866,"endColumn":10},{"ruleId":"1185","severity":1,"message":"1186","line":895,"column":4,"nodeType":null,"messageId":"1187","endLine":895,"endColumn":10},{"ruleId":"1185","severity":1,"message":"1186","line":936,"column":4,"nodeType":null,"messageId":"1187","endLine":936,"endColumn":10},{"ruleId":"1185","severity":1,"message":"1186","line":954,"column":4,"nodeType":null,"messageId":"1187","endLine":954,"endColumn":10},{"ruleId":"1185","severity":1,"message":"1186","line":989,"column":4,"nodeType":null,"messageId":"1187","endLine":989,"endColumn":10},{"ruleId":"1185","severity":1,"message":"1186","line":1031,"column":4,"nodeType":null,"messageId":"1187","endLine":1031,"endColumn":10},{"ruleId":"1185","severity":1,"message":"1186","line":1058,"column":4,"nodeType":null,"messageId":"1187","endLine":1058,"endColumn":10},{"ruleId":"1194","severity":2,"message":"1195","line":75,"column":1,"nodeType":"1196","endLine":75,"endColumn":77,"suppressions":"1197"},{"ruleId":"1194","severity":2,"message":"1198","line":78,"column":1,"nodeType":"1196","endLine":78,"endColumn":70,"suppressions":"1199"},{"ruleId":"1194","severity":2,"message":"1195","line":80,"column":1,"nodeType":"1196","endLine":80,"endColumn":85,"suppressions":"1200"},{"ruleId":"1194","severity":2,"message":"1201","line":83,"column":1,"nodeType":"1196","endLine":83,"endColumn":58,"suppressions":"1202"},{"ruleId":"1203","severity":2,"message":"1204","line":189,"column":2,"nodeType":"1205","messageId":"1206","endLine":189,"endColumn":58,"suppressions":"1207"},{"ruleId":"1203","severity":2,"message":"1204","line":215,"column":2,"nodeType":"1205","messageId":"1206","endLine":215,"endColumn":58,"suppressions":"1208"},{"ruleId":"1203","severity":2,"message":"1204","line":242,"column":2,"nodeType":"1205","messageId":"1206","endLine":242,"endColumn":58,"suppressions":"1209"},{"ruleId":"1203","severity":2,"message":"1204","line":266,"column":2,"nodeType":"1205","messageId":"1206","endLine":266,"endColumn":60,"suppressions":"1210"},{"ruleId":"1203","severity":2,"message":"1204","line":267,"column":2,"nodeType":"1205","messageId":"1206","endLine":267,"endColumn":18,"suppressions":"1211"},{"ruleId":"1203","severity":2,"message":"1204","line":301,"column":2,"nodeType":"1205","messageId":"1206","endLine":301,"endColumn":60,"suppressions":"1212"},{"ruleId":"1203","severity":2,"message":"1204","line":334,"column":2,"nodeType":"1205","messageId":"1206","endLine":334,"endColumn":60,"suppressions":"1213"},{"ruleId":"1203","severity":2,"message":"1204","line":367,"column":2,"nodeType":"1205","messageId":"1206","endLine":367,"endColumn":60,"suppressions":"1214"},{"ruleId":"1203","severity":2,"message":"1204","line":452,"column":2,"nodeType":"1205","messageId":"1206","endLine":452,"endColumn":60,"suppressions":"1215"},{"ruleId":"1203","severity":2,"message":"1204","line":519,"column":2,"nodeType":"1205","messageId":"1206","endLine":519,"endColumn":58,"suppressions":"1216"},{"ruleId":"1203","severity":2,"message":"1204","line":871,"column":2,"nodeType":"1205","messageId":"1206","endLine":871,"endColumn":58,"suppressions":"1217"},{"ruleId":"1203","severity":2,"message":"1204","line":960,"column":2,"nodeType":"1205","messageId":"1206","endLine":960,"endColumn":58,"suppressions":"1218"},{"ruleId":"1203","severity":2,"message":"1204","line":994,"column":2,"nodeType":"1205","messageId":"1206","endLine":994,"endColumn":58,"suppressions":"1219"},{"ruleId":"1203","severity":2,"message":"1204","line":1036,"column":2,"nodeType":"1205","messageId":"1206","endLine":1036,"endColumn":58,"suppressions":"1220"},{"ruleId":"1185","severity":1,"message":"1186","line":31,"column":4,"nodeType":null,"messageId":"1187","endLine":31,"endColumn":10},{"ruleId":"1185","severity":1,"message":"1186","line":32,"column":4,"nodeType":null,"messageId":"1187","endLine":32,"endColumn":10},{"ruleId":"1194","severity":2,"message":"1221","line":36,"column":1,"nodeType":"1196","endLine":36,"endColumn":50,"suppressions":"1222"},{"ruleId":"1194","severity":2,"message":"1223","line":33,"column":1,"nodeType":"1196","endLine":33,"endColumn":81,"suppressions":"1224"},{"ruleId":"1194","severity":2,"message":"1225","line":31,"column":1,"nodeType":"1196","endLine":31,"endColumn":67,"suppressions":"1226"},{"ruleId":"1194","severity":2,"message":"1195","line":34,"column":1,"nodeType":"1196","endLine":34,"endColumn":63,"suppressions":"1227"},{"ruleId":"1194","severity":2,"message":"1228","line":24,"column":1,"nodeType":"1196","endLine":24,"endColumn":60,"suppressions":"1229"},{"ruleId":"1194","severity":2,"message":"1230","line":53,"column":1,"nodeType":"1196","endLine":53,"endColumn":77,"suppressions":"1231"},{"ruleId":"1194","severity":2,"message":"1232","line":55,"column":1,"nodeType":"1196","endLine":55,"endColumn":64,"suppressions":"1233"},{"ruleId":"1194","severity":2,"message":"1234","line":60,"column":1,"nodeType":"1196","endLine":60,"endColumn":66,"suppressions":"1235"},{"ruleId":"1194","severity":2,"message":"1236","line":62,"column":1,"nodeType":"1196","endLine":62,"endColumn":58,"suppressions":"1237"},{"ruleId":"1194","severity":2,"message":"1195","line":49,"column":1,"nodeType":"1196","endLine":49,"endColumn":90,"suppressions":"1238"},{"ruleId":"1194","severity":2,"message":"1195","line":54,"column":1,"nodeType":"1196","endLine":54,"endColumn":77,"suppressions":"1239"},{"ruleId":"1240","severity":2,"message":"1241","line":260,"column":3,"nodeType":"1242","messageId":"1243","endLine":260,"endColumn":5,"suppressions":"1244"},{"ruleId":"1194","severity":2,"message":"1245","line":23,"column":1,"nodeType":"1196","endLine":23,"endColumn":69,"suppressions":"1246"},{"ruleId":"1194","severity":2,"message":"1245","line":25,"column":1,"nodeType":"1196","endLine":25,"endColumn":69,"suppressions":"1247"},{"ruleId":"1194","severity":2,"message":"1195","line":27,"column":1,"nodeType":"1196","endLine":27,"endColumn":67,"suppressions":"1248"},{"ruleId":"1249","severity":1,"message":"1250","line":17,"column":60,"nodeType":"1251","endLine":17,"endColumn":72},{"ruleId":"1249","severity":1,"message":"1250","line":22,"column":28,"nodeType":"1251","endLine":22,"endColumn":40},{"ruleId":"1249","severity":1,"message":"1250","line":17,"column":71,"nodeType":"1251","endLine":17,"endColumn":83},{"ruleId":"1249","severity":1,"message":"1250","line":20,"column":28,"nodeType":"1251","endLine":20,"endColumn":40},{"ruleId":"1249","severity":1,"message":"1250","line":17,"column":78,"nodeType":"1251","endLine":17,"endColumn":90},{"ruleId":"1249","severity":1,"message":"1250","line":26,"column":28,"nodeType":"1251","endLine":26,"endColumn":40},{"ruleId":"1252","severity":1,"message":"1253","line":103,"column":42,"nodeType":"1254","messageId":"1255","endLine":103,"endColumn":45,"suggestions":"1256"},{"ruleId":"1252","severity":1,"message":"1253","line":107,"column":64,"nodeType":"1254","messageId":"1255","endLine":107,"endColumn":67,"suggestions":"1257"},{"ruleId":"1252","severity":1,"message":"1253","line":111,"column":55,"nodeType":"1254","messageId":"1255","endLine":111,"endColumn":58,"suggestions":"1258"},{"ruleId":"1185","severity":1,"message":"1186","line":192,"column":5,"nodeType":null,"messageId":"1187","endLine":192,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":211,"column":5,"nodeType":null,"messageId":"1187","endLine":211,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":229,"column":5,"nodeType":null,"messageId":"1187","endLine":229,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":247,"column":5,"nodeType":null,"messageId":"1187","endLine":247,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":269,"column":5,"nodeType":null,"messageId":"1187","endLine":269,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":270,"column":5,"nodeType":null,"messageId":"1187","endLine":270,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":356,"column":5,"nodeType":null,"messageId":"1187","endLine":356,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":376,"column":5,"nodeType":null,"messageId":"1187","endLine":376,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":377,"column":5,"nodeType":null,"messageId":"1187","endLine":377,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":378,"column":5,"nodeType":null,"messageId":"1187","endLine":378,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":400,"column":5,"nodeType":null,"messageId":"1187","endLine":400,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":401,"column":5,"nodeType":null,"messageId":"1187","endLine":401,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":402,"column":5,"nodeType":null,"messageId":"1187","endLine":402,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":403,"column":5,"nodeType":null,"messageId":"1187","endLine":403,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":442,"column":5,"nodeType":null,"messageId":"1187","endLine":442,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":443,"column":5,"nodeType":null,"messageId":"1187","endLine":443,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":444,"column":5,"nodeType":null,"messageId":"1187","endLine":444,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":476,"column":5,"nodeType":null,"messageId":"1187","endLine":476,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":477,"column":5,"nodeType":null,"messageId":"1187","endLine":477,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":478,"column":5,"nodeType":null,"messageId":"1187","endLine":478,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":546,"column":5,"nodeType":null,"messageId":"1187","endLine":546,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":547,"column":5,"nodeType":null,"messageId":"1187","endLine":547,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":571,"column":5,"nodeType":null,"messageId":"1187","endLine":571,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":572,"column":5,"nodeType":null,"messageId":"1187","endLine":572,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":595,"column":5,"nodeType":null,"messageId":"1187","endLine":595,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":596,"column":5,"nodeType":null,"messageId":"1187","endLine":596,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":597,"column":5,"nodeType":null,"messageId":"1187","endLine":597,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":665,"column":5,"nodeType":null,"messageId":"1187","endLine":665,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":666,"column":5,"nodeType":null,"messageId":"1187","endLine":666,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":728,"column":5,"nodeType":null,"messageId":"1187","endLine":728,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":816,"column":5,"nodeType":null,"messageId":"1187","endLine":816,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":817,"column":5,"nodeType":null,"messageId":"1187","endLine":817,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":818,"column":5,"nodeType":null,"messageId":"1187","endLine":818,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":881,"column":5,"nodeType":null,"messageId":"1187","endLine":881,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":882,"column":5,"nodeType":null,"messageId":"1187","endLine":882,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":942,"column":5,"nodeType":null,"messageId":"1187","endLine":942,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":943,"column":5,"nodeType":null,"messageId":"1187","endLine":943,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":944,"column":5,"nodeType":null,"messageId":"1187","endLine":944,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":970,"column":5,"nodeType":null,"messageId":"1187","endLine":970,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":971,"column":5,"nodeType":null,"messageId":"1187","endLine":971,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":972,"column":5,"nodeType":null,"messageId":"1187","endLine":972,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":1088,"column":5,"nodeType":null,"messageId":"1187","endLine":1088,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":1089,"column":5,"nodeType":null,"messageId":"1187","endLine":1089,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":1090,"column":5,"nodeType":null,"messageId":"1187","endLine":1090,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":1180,"column":5,"nodeType":null,"messageId":"1187","endLine":1180,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":1181,"column":5,"nodeType":null,"messageId":"1187","endLine":1181,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":1182,"column":5,"nodeType":null,"messageId":"1187","endLine":1182,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1259","line":1204,"column":5,"nodeType":null,"messageId":"1260","endLine":1204,"endColumn":6},{"ruleId":"1185","severity":1,"message":"1186","line":1215,"column":5,"nodeType":null,"messageId":"1187","endLine":1215,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":1216,"column":5,"nodeType":null,"messageId":"1187","endLine":1216,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":1279,"column":5,"nodeType":null,"messageId":"1187","endLine":1279,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":1280,"column":5,"nodeType":null,"messageId":"1187","endLine":1280,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":1296,"column":5,"nodeType":null,"messageId":"1187","endLine":1296,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":1297,"column":5,"nodeType":null,"messageId":"1187","endLine":1297,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":1298,"column":5,"nodeType":null,"messageId":"1187","endLine":1298,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":1328,"column":5,"nodeType":null,"messageId":"1187","endLine":1328,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":1329,"column":5,"nodeType":null,"messageId":"1187","endLine":1329,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":1401,"column":5,"nodeType":null,"messageId":"1187","endLine":1401,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":1402,"column":5,"nodeType":null,"messageId":"1187","endLine":1402,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":1403,"column":5,"nodeType":null,"messageId":"1187","endLine":1403,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":1442,"column":5,"nodeType":null,"messageId":"1187","endLine":1442,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":1472,"column":5,"nodeType":null,"messageId":"1187","endLine":1472,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":1473,"column":5,"nodeType":null,"messageId":"1187","endLine":1473,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":1474,"column":5,"nodeType":null,"messageId":"1187","endLine":1474,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":1475,"column":5,"nodeType":null,"messageId":"1187","endLine":1475,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":1555,"column":5,"nodeType":null,"messageId":"1187","endLine":1555,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":1556,"column":5,"nodeType":null,"messageId":"1187","endLine":1556,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":1557,"column":5,"nodeType":null,"messageId":"1187","endLine":1557,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":1558,"column":5,"nodeType":null,"messageId":"1187","endLine":1558,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":1632,"column":5,"nodeType":null,"messageId":"1187","endLine":1632,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":1633,"column":5,"nodeType":null,"messageId":"1187","endLine":1633,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":1670,"column":5,"nodeType":null,"messageId":"1187","endLine":1670,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":1671,"column":5,"nodeType":null,"messageId":"1187","endLine":1671,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":1672,"column":5,"nodeType":null,"messageId":"1187","endLine":1672,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":1673,"column":5,"nodeType":null,"messageId":"1187","endLine":1673,"endColumn":11},{"ruleId":"1185","severity":1,"message":"1186","line":1858,"column":5,"nodeType":null,"messageId":"1187","endLine":1858,"endColumn":11},{"ruleId":"1261","severity":2,"message":"1262","line":340,"column":22,"nodeType":"1263","messageId":"1264","endLine":340,"endColumn":43,"suppressions":"1265"},{"ruleId":"1203","severity":2,"message":"1204","line":657,"column":3,"nodeType":"1205","messageId":"1206","endLine":657,"endColumn":65,"suppressions":"1266"},{"ruleId":"1203","severity":2,"message":"1204","line":868,"column":3,"nodeType":"1205","messageId":"1206","endLine":868,"endColumn":65,"suppressions":"1267"},{"ruleId":"1203","severity":2,"message":"1204","line":1081,"column":3,"nodeType":"1205","messageId":"1206","endLine":1081,"endColumn":72,"suppressions":"1268"},{"ruleId":"1203","severity":2,"message":"1204","line":1173,"column":3,"nodeType":"1205","messageId":"1206","endLine":1173,"endColumn":72,"suppressions":"1269"},{"ruleId":"1203","severity":2,"message":"1204","line":1615,"column":3,"nodeType":"1205","messageId":"1206","endLine":1615,"endColumn":52,"suppressions":"1270"},{"ruleId":"1261","severity":2,"message":"1262","line":1869,"column":22,"nodeType":"1263","messageId":"1264","endLine":1869,"endColumn":53,"suppressions":"1271"},{"ruleId":"1272","severity":2,"message":"1273","line":18,"column":1,"nodeType":"1274","messageId":"1275","endLine":177,"endColumn":1,"suppressions":"1276"},{"ruleId":"1277","severity":2,"message":"1278","line":75,"column":2,"nodeType":"1279","messageId":"1280","endLine":75,"endColumn":36,"suppressions":"1281"},{"ruleId":"1277","severity":2,"message":"1278","line":117,"column":2,"nodeType":"1279","messageId":"1280","endLine":117,"endColumn":36,"suppressions":"1282"},{"ruleId":"1277","severity":2,"message":"1278","line":150,"column":2,"nodeType":"1279","messageId":"1280","endLine":150,"endColumn":36,"suppressions":"1283"},{"ruleId":"1185","severity":1,"message":"1284","line":19,"column":4,"nodeType":null,"messageId":"1285","endLine":19,"endColumn":9},{"ruleId":"1286","severity":2,"message":"1287","line":28,"column":21,"nodeType":"1251","endLine":28,"endColumn":48,"fix":"1288","suppressions":"1289"},{"ruleId":"1290","severity":2,"message":"1291","line":45,"column":9,"nodeType":"1292","messageId":"1293","endLine":48,"endColumn":3,"fix":"1294","suppressions":"1295"},{"ruleId":"1296","severity":2,"message":"1297","line":55,"column":2,"nodeType":"1298","messageId":"1299","endLine":56,"endColumn":44,"fix":"1300","suppressions":"1301"},{"ruleId":"1290","severity":2,"message":"1291","line":67,"column":9,"nodeType":"1292","messageId":"1293","endLine":70,"endColumn":3,"fix":"1302","suppressions":"1303"},{"ruleId":"1290","severity":2,"message":"1291","line":79,"column":9,"nodeType":"1292","messageId":"1293","endLine":82,"endColumn":3,"fix":"1304","suppressions":"1305"},{"ruleId":"1306","severity":2,"message":"1307","line":18,"column":1,"nodeType":"1196","endLine":18,"endColumn":48,"suppressions":"1308"},{"ruleId":"1277","severity":2,"message":"1278","line":25,"column":2,"nodeType":"1279","messageId":"1280","endLine":25,"endColumn":36,"suppressions":"1309"},{"ruleId":"1310","severity":2,"message":"1311","line":85,"column":16,"nodeType":"1251","endLine":85,"endColumn":20,"suppressions":"1312"},{"ruleId":"1306","severity":2,"message":"1313","line":29,"column":1,"nodeType":"1196","endLine":29,"endColumn":49,"suppressions":"1314"},{"ruleId":"1306","severity":2,"message":"1315","line":31,"column":1,"nodeType":"1196","endLine":31,"endColumn":66,"suppressions":"1316"},{"ruleId":"1306","severity":2,"message":"1317","line":55,"column":1,"nodeType":"1196","endLine":55,"endColumn":46,"suppressions":"1318"},{"ruleId":"1306","severity":2,"message":"1307","line":57,"column":1,"nodeType":"1196","endLine":57,"endColumn":25,"suppressions":"1319"},{"ruleId":"1306","severity":2,"message":"1320","line":60,"column":1,"nodeType":"1196","endLine":60,"endColumn":60,"suppressions":"1321"},{"ruleId":"1306","severity":2,"message":"1322","line":64,"column":1,"nodeType":"1196","endLine":64,"endColumn":50,"suppressions":"1323"},{"ruleId":"1324","severity":2,"message":"1325","line":72,"column":2,"nodeType":"1326","messageId":"1327","endLine":72,"endColumn":21,"suppressions":"1328"},{"ruleId":"1329","severity":2,"message":"1330","line":74,"column":2,"nodeType":"1331","messageId":"1332","endLine":74,"endColumn":56,"suppressions":"1333"},{"ruleId":"1334","severity":2,"message":"1335","line":74,"column":19,"nodeType":"1263","messageId":"1336","endLine":74,"endColumn":30,"suppressions":"1337"},{"ruleId":"1338","severity":2,"message":"1339","line":152,"column":4,"nodeType":"1340","messageId":"1341","endLine":152,"endColumn":20,"suppressions":"1342"},{"ruleId":"1343","severity":2,"message":"1344","line":152,"column":4,"nodeType":"1190","messageId":"1345","endLine":152,"endColumn":18,"suppressions":"1346"},{"ruleId":"1347","severity":2,"message":"1348","line":491,"column":4,"nodeType":"1349","messageId":"1350","endLine":496,"endColumn":6,"suppressions":"1351"},{"ruleId":"1329","severity":2,"message":"1330","line":505,"column":2,"nodeType":"1352","messageId":"1332","endLine":508,"endColumn":3,"suppressions":"1353"},{"ruleId":"1329","severity":2,"message":"1330","line":507,"column":38,"nodeType":"1331","messageId":"1332","endLine":507,"endColumn":90,"suppressions":"1354"},{"ruleId":"1355","severity":2,"message":"1356","line":35,"column":87,"nodeType":"1242","messageId":"1293","endLine":35,"endColumn":89,"suppressions":"1357"},{"ruleId":"1310","severity":2,"message":"1311","line":1809,"column":6,"nodeType":"1251","endLine":1809,"endColumn":10,"suppressions":"1358"},{"ruleId":"1310","severity":2,"message":"1311","line":1825,"column":6,"nodeType":"1251","endLine":1825,"endColumn":10,"suppressions":"1359"},{"ruleId":"1306","severity":2,"message":"1320","line":25,"column":1,"nodeType":"1196","endLine":25,"endColumn":46,"suppressions":"1360"},{"ruleId":"1361","severity":2,"message":"1362","line":138,"column":5,"nodeType":"1352","messageId":"1363","endLine":138,"endColumn":62,"suppressions":"1364"},{"ruleId":"1306","severity":2,"message":"1320","line":19,"column":1,"nodeType":"1196","endLine":19,"endColumn":46,"suppressions":"1365"},{"ruleId":"1306","severity":2,"message":"1320","line":19,"column":1,"nodeType":"1196","endLine":19,"endColumn":46,"suppressions":"1366"},{"ruleId":"1306","severity":2,"message":"1320","line":19,"column":1,"nodeType":"1196","endLine":19,"endColumn":46,"suppressions":"1367"},{"ruleId":"1306","severity":2,"message":"1320","line":19,"column":1,"nodeType":"1196","endLine":19,"endColumn":46,"suppressions":"1368"},{"ruleId":"1369","severity":1,"message":"1370","line":94,"column":15,"nodeType":"1371","messageId":"1372","endLine":97,"endColumn":7,"suppressions":"1373"},{"ruleId":"1306","severity":2,"message":"1320","line":19,"column":1,"nodeType":"1196","endLine":19,"endColumn":46,"suppressions":"1374"},{"ruleId":"1240","severity":1,"message":"1375","line":764,"column":41,"nodeType":"1242","messageId":"1243","endLine":764,"endColumn":43},{"ruleId":"1306","severity":2,"message":"1320","line":18,"column":1,"nodeType":"1196","endLine":18,"endColumn":46,"suppressions":"1376"},{"ruleId":"1377","severity":2,"message":"1378","line":349,"column":5,"nodeType":"1379","messageId":"1380","endLine":352,"endColumn":7,"suppressions":"1381"},{"ruleId":"1377","severity":2,"message":"1378","line":358,"column":5,"nodeType":"1379","messageId":"1380","endLine":364,"endColumn":7,"suppressions":"1382"},{"ruleId":"1383","severity":2,"message":"1384","line":554,"column":48,"nodeType":"1242","messageId":"1385","endLine":558,"endColumn":5,"suppressions":"1386"},{"ruleId":"1377","severity":2,"message":"1378","line":578,"column":5,"nodeType":"1379","messageId":"1380","endLine":600,"endColumn":6,"suppressions":"1387"},{"ruleId":"1249","severity":1,"message":"1388","line":17,"column":39,"nodeType":"1251","endLine":17,"endColumn":51},{"ruleId":"1249","severity":1,"message":"1388","line":19,"column":56,"nodeType":"1251","endLine":19,"endColumn":68},{"ruleId":"1306","severity":2,"message":"1307","line":22,"column":1,"nodeType":"1196","endLine":22,"endColumn":29,"suppressions":"1389"},{"ruleId":"1377","severity":2,"message":"1378","line":127,"column":5,"nodeType":"1379","messageId":"1380","endLine":127,"endColumn":29,"suppressions":"1390"},{"ruleId":"1391","severity":2,"message":"1392","line":131,"column":11,"nodeType":"1352","messageId":"1393","endLine":131,"endColumn":79,"suppressions":"1394"},{"ruleId":"1391","severity":2,"message":"1392","line":133,"column":11,"nodeType":"1352","messageId":"1393","endLine":133,"endColumn":71,"suppressions":"1395"},{"ruleId":"1306","severity":2,"message":"1320","line":20,"column":1,"nodeType":"1196","endLine":20,"endColumn":46,"suppressions":"1396"},{"ruleId":"1306","severity":2,"message":"1322","line":24,"column":1,"nodeType":"1196","endLine":24,"endColumn":50,"suppressions":"1397"},{"ruleId":"1306","severity":2,"message":"1320","line":20,"column":1,"nodeType":"1196","endLine":20,"endColumn":46,"suppressions":"1398"},{"ruleId":"1399","severity":1,"message":"1400","line":22,"column":8,"nodeType":"1401","endLine":22,"endColumn":15},{"ruleId":"1361","severity":2,"message":"1362","line":63,"column":5,"nodeType":"1352","messageId":"1363","endLine":67,"endColumn":7,"suppressions":"1402"},{"ruleId":"1361","severity":2,"message":"1362","line":70,"column":5,"nodeType":"1352","messageId":"1363","endLine":74,"endColumn":7,"suppressions":"1403"},{"ruleId":"1361","severity":2,"message":"1362","line":94,"column":5,"nodeType":"1352","messageId":"1363","endLine":98,"endColumn":7,"suppressions":"1404"},{"ruleId":"1361","severity":2,"message":"1362","line":101,"column":5,"nodeType":"1352","messageId":"1363","endLine":105,"endColumn":7,"suppressions":"1405"},{"ruleId":"1361","severity":2,"message":"1362","line":125,"column":5,"nodeType":"1352","messageId":"1363","endLine":127,"endColumn":6,"suppressions":"1406"},{"ruleId":"1361","severity":2,"message":"1362","line":130,"column":5,"nodeType":"1352","messageId":"1363","endLine":130,"endColumn":68,"suppressions":"1407"},{"ruleId":"1361","severity":2,"message":"1362","line":149,"column":5,"nodeType":"1352","messageId":"1363","endLine":156,"endColumn":7,"suppressions":"1408"},{"ruleId":"1361","severity":2,"message":"1362","line":159,"column":5,"nodeType":"1352","messageId":"1363","endLine":166,"endColumn":7,"suppressions":"1409"},{"ruleId":"1361","severity":2,"message":"1362","line":185,"column":5,"nodeType":"1352","messageId":"1363","endLine":195,"endColumn":7,"suppressions":"1410"},{"ruleId":"1361","severity":2,"message":"1362","line":198,"column":5,"nodeType":"1352","messageId":"1363","endLine":208,"endColumn":7,"suppressions":"1411"},{"ruleId":"1306","severity":2,"message":"1307","line":19,"column":1,"nodeType":"1196","endLine":19,"endColumn":25,"suppressions":"1412"},{"ruleId":"1347","severity":2,"message":"1348","line":49,"column":4,"nodeType":"1349","messageId":"1350","endLine":54,"endColumn":6,"suppressions":"1413"},{"ruleId":"1369","severity":1,"message":"1370","line":128,"column":43,"nodeType":"1371","messageId":"1372","endLine":130,"endColumn":4,"suppressions":"1414"},{"ruleId":"1306","severity":2,"message":"1307","line":19,"column":1,"nodeType":"1196","endLine":19,"endColumn":49,"suppressions":"1415"},{"ruleId":"1361","severity":2,"message":"1362","line":75,"column":6,"nodeType":"1352","messageId":"1363","endLine":79,"endColumn":7,"suppressions":"1416"},{"ruleId":"1361","severity":2,"message":"1362","line":84,"column":6,"nodeType":"1352","messageId":"1363","endLine":88,"endColumn":7,"suppressions":"1417"},{"ruleId":"1361","severity":2,"message":"1362","line":91,"column":6,"nodeType":"1352","messageId":"1363","endLine":91,"endColumn":64,"suppressions":"1418"},{"ruleId":"1306","severity":2,"message":"1320","line":27,"column":1,"nodeType":"1196","endLine":27,"endColumn":62,"suppressions":"1419"},{"ruleId":"1391","severity":2,"message":"1392","line":88,"column":5,"nodeType":"1352","messageId":"1393","endLine":88,"endColumn":53,"suppressions":"1420"},{"ruleId":"1391","severity":2,"message":"1392","line":110,"column":5,"nodeType":"1352","messageId":"1393","endLine":110,"endColumn":32,"suppressions":"1421"},{"ruleId":"1361","severity":2,"message":"1362","line":131,"column":5,"nodeType":"1352","messageId":"1363","endLine":131,"endColumn":70,"suppressions":"1422"},{"ruleId":"1361","severity":2,"message":"1362","line":135,"column":5,"nodeType":"1352","messageId":"1363","endLine":135,"endColumn":37,"suppressions":"1423"},{"ruleId":"1391","severity":2,"message":"1392","line":373,"column":4,"nodeType":"1352","messageId":"1393","endLine":373,"endColumn":29,"suppressions":"1424"},{"ruleId":"1369","severity":1,"message":"1370","line":383,"column":36,"nodeType":"1371","messageId":"1372","endLine":386,"endColumn":7,"suppressions":"1425"},{"ruleId":"1391","severity":2,"message":"1392","line":409,"column":4,"nodeType":"1352","messageId":"1393","endLine":409,"endColumn":27,"suppressions":"1426"},{"ruleId":"1391","severity":2,"message":"1392","line":428,"column":4,"nodeType":"1352","messageId":"1393","endLine":428,"endColumn":42,"suppressions":"1427"},{"ruleId":"1391","severity":2,"message":"1392","line":430,"column":4,"nodeType":"1352","messageId":"1393","endLine":430,"endColumn":54,"suppressions":"1428"},{"ruleId":"1347","severity":2,"message":"1348","line":438,"column":16,"nodeType":"1349","messageId":"1350","endLine":438,"endColumn":85,"suppressions":"1429"},{"ruleId":"1306","severity":2,"message":"1322","line":21,"column":1,"nodeType":"1196","endLine":21,"endColumn":50,"suppressions":"1430"},{"ruleId":"1399","severity":1,"message":"1400","line":22,"column":8,"nodeType":"1401","endLine":22,"endColumn":15,"suppressions":"1431"},{"ruleId":"1306","severity":2,"message":"1307","line":19,"column":1,"nodeType":"1196","endLine":19,"endColumn":29,"suppressions":"1432"},{"ruleId":"1377","severity":2,"message":"1378","line":79,"column":4,"nodeType":"1379","messageId":"1380","endLine":79,"endColumn":39,"suppressions":"1433"},{"ruleId":"1306","severity":2,"message":"1320","line":19,"column":1,"nodeType":"1196","endLine":19,"endColumn":62,"suppressions":"1434"},{"ruleId":"1306","severity":2,"message":"1322","line":22,"column":1,"nodeType":"1196","endLine":22,"endColumn":50,"suppressions":"1435"},{"ruleId":"1347","severity":2,"message":"1348","line":51,"column":12,"nodeType":"1349","messageId":"1350","endLine":51,"endColumn":86,"suppressions":"1436"},{"ruleId":"1306","severity":2,"message":"1320","line":19,"column":1,"nodeType":"1196","endLine":19,"endColumn":62,"suppressions":"1437"},{"ruleId":"1306","severity":2,"message":"1322","line":23,"column":1,"nodeType":"1196","endLine":23,"endColumn":50,"suppressions":"1438"},{"ruleId":"1347","severity":2,"message":"1348","line":52,"column":12,"nodeType":"1349","messageId":"1350","endLine":52,"endColumn":86,"suppressions":"1439"},{"ruleId":"1306","severity":2,"message":"1307","line":18,"column":1,"nodeType":"1196","endLine":18,"endColumn":29,"suppressions":"1440"},{"ruleId":"1441","severity":2,"message":"1442","line":43,"column":5,"nodeType":"1443","messageId":"1444","endLine":84,"endColumn":10,"suggestions":"1445","suppressions":"1446"},{"ruleId":"1306","severity":2,"message":"1307","line":18,"column":1,"nodeType":"1196","endLine":18,"endColumn":48,"suppressions":"1447"},{"ruleId":"1355","severity":2,"message":"1356","line":85,"column":43,"nodeType":"1242","messageId":"1293","endLine":85,"endColumn":45,"suppressions":"1448"},{"ruleId":"1399","severity":1,"message":"1400","line":21,"column":8,"nodeType":"1401","endLine":21,"endColumn":15},{"ruleId":"1306","severity":2,"message":"1322","line":20,"column":1,"nodeType":"1196","endLine":20,"endColumn":50,"suppressions":"1449"},{"ruleId":"1306","severity":2,"message":"1307","line":21,"column":1,"nodeType":"1196","endLine":21,"endColumn":29,"suppressions":"1450"},{"ruleId":"1377","severity":2,"message":"1378","line":68,"column":5,"nodeType":"1379","messageId":"1380","endLine":71,"endColumn":7,"suppressions":"1451"},{"ruleId":"1377","severity":2,"message":"1378","line":78,"column":5,"nodeType":"1379","messageId":"1380","endLine":84,"endColumn":7,"suppressions":"1452"},{"ruleId":"1249","severity":1,"message":"1388","line":17,"column":39,"nodeType":"1251","endLine":17,"endColumn":51},{"ruleId":"1249","severity":1,"message":"1388","line":19,"column":56,"nodeType":"1251","endLine":19,"endColumn":68},{"ruleId":"1377","severity":2,"message":"1378","line":67,"column":5,"nodeType":"1379","messageId":"1380","endLine":81,"endColumn":6,"suppressions":"1453"},{"ruleId":"1377","severity":2,"message":"1378","line":86,"column":5,"nodeType":"1379","messageId":"1380","endLine":89,"endColumn":7,"suppressions":"1454"},{"ruleId":"1361","severity":2,"message":"1362","line":52,"column":4,"nodeType":"1352","messageId":"1363","endLine":52,"endColumn":40,"suppressions":"1455"},{"ruleId":"1361","severity":2,"message":"1362","line":55,"column":4,"nodeType":"1352","messageId":"1363","endLine":55,"endColumn":40,"suppressions":"1456"},{"ruleId":"1391","severity":2,"message":"1392","line":68,"column":3,"nodeType":"1352","messageId":"1393","endLine":68,"endColumn":40,"suppressions":"1457"},{"ruleId":"1399","severity":1,"message":"1400","line":19,"column":8,"nodeType":"1401","endLine":19,"endColumn":15},{"ruleId":"1441","severity":2,"message":"1442","line":78,"column":6,"nodeType":"1443","messageId":"1444","endLine":81,"endColumn":9,"suggestions":"1458","suppressions":"1459"},{"ruleId":"1441","severity":2,"message":"1442","line":115,"column":6,"nodeType":"1443","messageId":"1444","endLine":118,"endColumn":9,"suggestions":"1460","suppressions":"1461"},{"ruleId":"1361","severity":2,"message":"1362","line":418,"column":9,"nodeType":"1352","messageId":"1363","endLine":420,"endColumn":10,"suppressions":"1462"},{"ruleId":"1361","severity":2,"message":"1362","line":454,"column":9,"nodeType":"1352","messageId":"1363","endLine":456,"endColumn":10,"suppressions":"1463"},{"ruleId":"1399","severity":1,"message":"1400","line":33,"column":8,"nodeType":"1401","endLine":33,"endColumn":15},{"ruleId":"1391","severity":2,"message":"1392","line":421,"column":4,"nodeType":"1352","messageId":"1393","endLine":421,"endColumn":43,"suppressions":"1464"},{"ruleId":"1391","severity":2,"message":"1392","line":423,"column":4,"nodeType":"1352","messageId":"1393","endLine":423,"endColumn":41,"suppressions":"1465"},{"ruleId":"1391","severity":2,"message":"1392","line":425,"column":4,"nodeType":"1352","messageId":"1393","endLine":425,"endColumn":43,"suppressions":"1466"},{"ruleId":"1391","severity":2,"message":"1392","line":428,"column":4,"nodeType":"1352","messageId":"1393","endLine":428,"endColumn":59,"suppressions":"1467"},{"ruleId":"1361","severity":2,"message":"1362","line":560,"column":11,"nodeType":"1352","messageId":"1363","endLine":564,"endColumn":49,"suppressions":"1468"},{"ruleId":"1361","severity":2,"message":"1362","line":563,"column":29,"nodeType":"1352","messageId":"1363","endLine":563,"endColumn":77,"suppressions":"1469"},{"ruleId":"1361","severity":2,"message":"1362","line":569,"column":6,"nodeType":"1352","messageId":"1363","endLine":569,"endColumn":67,"suppressions":"1470"},{"ruleId":"1361","severity":2,"message":"1362","line":570,"column":6,"nodeType":"1352","messageId":"1363","endLine":570,"endColumn":67,"suppressions":"1471"},{"ruleId":"1361","severity":2,"message":"1362","line":571,"column":6,"nodeType":"1352","messageId":"1363","endLine":571,"endColumn":73,"suppressions":"1472"},{"ruleId":"1391","severity":2,"message":"1392","line":595,"column":11,"nodeType":"1352","messageId":"1393","endLine":600,"endColumn":49,"suppressions":"1473"},{"ruleId":"1391","severity":2,"message":"1392","line":599,"column":29,"nodeType":"1352","messageId":"1393","endLine":599,"endColumn":77,"suppressions":"1474"},{"ruleId":"1361","severity":2,"message":"1362","line":48,"column":4,"nodeType":"1352","messageId":"1363","endLine":48,"endColumn":54,"suppressions":"1475"},{"ruleId":"1361","severity":2,"message":"1362","line":53,"column":4,"nodeType":"1352","messageId":"1363","endLine":53,"endColumn":54,"suppressions":"1476"},{"ruleId":"1399","severity":1,"message":"1400","line":21,"column":8,"nodeType":"1401","endLine":21,"endColumn":15},{"ruleId":"1391","severity":2,"message":"1392","line":121,"column":4,"nodeType":"1352","messageId":"1393","endLine":121,"endColumn":50,"suppressions":"1477"},{"ruleId":"1391","severity":2,"message":"1392","line":46,"column":3,"nodeType":"1352","messageId":"1393","endLine":46,"endColumn":31,"suppressions":"1478"},{"ruleId":"1369","severity":1,"message":"1370","line":50,"column":27,"nodeType":"1371","messageId":"1372","endLine":50,"endColumn":38,"suppressions":"1479"},{"ruleId":"1480","severity":1,"message":"1481","line":126,"column":2,"nodeType":"1352","messageId":"1482","endLine":138,"endColumn":4},{"ruleId":"1240","severity":1,"message":"1375","line":43,"column":55,"nodeType":"1242","messageId":"1243","endLine":43,"endColumn":57},{"ruleId":"1240","severity":1,"message":"1375","line":52,"column":55,"nodeType":"1242","messageId":"1243","endLine":52,"endColumn":57},{"ruleId":"1240","severity":1,"message":"1375","line":61,"column":55,"nodeType":"1242","messageId":"1243","endLine":61,"endColumn":57},{"ruleId":"1240","severity":1,"message":"1375","line":70,"column":61,"nodeType":"1242","messageId":"1243","endLine":70,"endColumn":63},{"ruleId":"1240","severity":1,"message":"1375","line":79,"column":67,"nodeType":"1242","messageId":"1243","endLine":79,"endColumn":69},{"ruleId":"1399","severity":1,"message":"1400","line":23,"column":8,"nodeType":"1401","endLine":23,"endColumn":15},{"ruleId":"1480","severity":1,"message":"1481","line":44,"column":2,"nodeType":"1352","messageId":"1482","endLine":48,"endColumn":4},{"ruleId":"1240","severity":1,"message":"1483","line":62,"column":4,"nodeType":"1484","messageId":"1243","endLine":62,"endColumn":67},{"ruleId":"1240","severity":1,"message":"1483","line":114,"column":3,"nodeType":"1484","messageId":"1243","endLine":114,"endColumn":66},{"ruleId":"1240","severity":1,"message":"1483","line":166,"column":3,"nodeType":"1484","messageId":"1243","endLine":166,"endColumn":66},{"ruleId":"1240","severity":1,"message":"1483","line":217,"column":3,"nodeType":"1484","messageId":"1243","endLine":217,"endColumn":66},{"ruleId":"1310","severity":2,"message":"1311","line":38,"column":3,"nodeType":"1251","endLine":38,"endColumn":7,"suppressions":"1485"},{"ruleId":"1361","severity":2,"message":"1362","line":75,"column":5,"nodeType":"1352","messageId":"1363","endLine":75,"endColumn":63,"suppressions":"1486"},{"ruleId":"1361","severity":2,"message":"1362","line":77,"column":9,"nodeType":"1352","messageId":"1363","endLine":77,"endColumn":63,"suppressions":"1487"},{"ruleId":"1399","severity":1,"message":"1400","line":29,"column":8,"nodeType":"1401","endLine":29,"endColumn":15},{"ruleId":"1240","severity":1,"message":"1375","line":50,"column":116,"nodeType":"1242","messageId":"1243","endLine":50,"endColumn":118},{"ruleId":"1488","severity":1,"message":"1489","line":47,"column":42,"nodeType":"1190","messageId":"1490","endLine":47,"endColumn":49},{"ruleId":"1488","severity":1,"message":"1489","line":100,"column":42,"nodeType":"1190","messageId":"1490","endLine":100,"endColumn":49},{"ruleId":"1488","severity":1,"message":"1489","line":155,"column":42,"nodeType":"1190","messageId":"1490","endLine":155,"endColumn":49},{"ruleId":"1491","severity":1,"message":"1492","line":91,"column":3,"nodeType":"1352","messageId":"1493","endLine":128,"endColumn":4},{"ruleId":"1361","severity":2,"message":"1362","line":50,"column":5,"nodeType":"1352","messageId":"1363","endLine":50,"endColumn":77,"suppressions":"1494"},{"ruleId":"1361","severity":2,"message":"1362","line":52,"column":5,"nodeType":"1352","messageId":"1363","endLine":52,"endColumn":71,"suppressions":"1495"},{"ruleId":"1361","severity":2,"message":"1362","line":60,"column":5,"nodeType":"1352","messageId":"1363","endLine":60,"endColumn":77,"suppressions":"1496"},{"ruleId":"1361","severity":2,"message":"1362","line":62,"column":5,"nodeType":"1352","messageId":"1363","endLine":62,"endColumn":71,"suppressions":"1497"},{"ruleId":"1361","severity":2,"message":"1362","line":70,"column":5,"nodeType":"1352","messageId":"1363","endLine":70,"endColumn":77,"suppressions":"1498"},{"ruleId":"1361","severity":2,"message":"1362","line":72,"column":5,"nodeType":"1352","messageId":"1363","endLine":72,"endColumn":71,"suppressions":"1499"},{"ruleId":"1361","severity":2,"message":"1362","line":80,"column":5,"nodeType":"1352","messageId":"1363","endLine":80,"endColumn":77,"suppressions":"1500"},{"ruleId":"1361","severity":2,"message":"1362","line":82,"column":5,"nodeType":"1352","messageId":"1363","endLine":82,"endColumn":71,"suppressions":"1501"},{"ruleId":"1361","severity":2,"message":"1362","line":88,"column":5,"nodeType":"1352","messageId":"1363","endLine":88,"endColumn":71,"suppressions":"1502"},{"ruleId":"1361","severity":2,"message":"1362","line":90,"column":5,"nodeType":"1352","messageId":"1363","endLine":90,"endColumn":69,"suppressions":"1503"},{"ruleId":"1361","severity":2,"message":"1362","line":104,"column":6,"nodeType":"1352","messageId":"1363","endLine":104,"endColumn":66,"suppressions":"1504"},{"ruleId":"1361","severity":2,"message":"1362","line":106,"column":6,"nodeType":"1352","messageId":"1363","endLine":106,"endColumn":64,"suppressions":"1505"},{"ruleId":"1399","severity":1,"message":"1400","line":20,"column":8,"nodeType":"1401","endLine":20,"endColumn":15},{"ruleId":"1399","severity":1,"message":"1400","line":19,"column":8,"nodeType":"1401","endLine":19,"endColumn":15},{"ruleId":"1399","severity":1,"message":"1400","line":20,"column":8,"nodeType":"1401","endLine":20,"endColumn":15},{"ruleId":"1506","severity":2,"message":"1507","line":81,"column":20,"nodeType":"1190","messageId":"1508","endLine":81,"endColumn":31,"suppressions":"1509"},"tsdoc/syntax","tsdoc-param-tag-missing-hyphen: The @param block should be followed by a parameter name and then a hyphen","tsdoc-param-tag-missing-hyphen","@typescript-eslint/no-unused-vars","'v' is assigned a value but never used.","Identifier","unusedVar","'r' is assigned a value but never used.","'s' is assigned a value but never used.","import/no-cycle","Dependency cycle detected.","ImportDeclaration",["1510"],"Dependency cycle via ./reject_if_block_timeout.js:23",["1511"],["1512"],"Dependency cycle via ./get_transaction_gas_pricing.js:53",["1513"],"default-param-last","Default parameters should be last.","AssignmentPattern","shouldBeLast",["1514"],["1515"],["1516"],["1517"],["1518"],["1519"],["1520"],["1521"],["1522"],["1523"],["1524"],["1525"],["1526"],["1527"],"Dependency cycle via ./utils/send_tx_helper.js:83",["1528"],"Dependency cycle via ../rpc_method_wrappers.js:36=>./utils/send_tx_helper.js:83",["1529"],"Dependency cycle via ./utils/transaction_builder.js:75",["1530"],["1531"],"Dependency cycle via ./utils/try_send_transaction.js:78",["1532"],"Dependency cycle via ../rpc_method_wrappers.js:31",["1533"],"Dependency cycle via ./reject_if_block_timeout.js:23=>../rpc_method_wrappers.js:24",["1534"],"Dependency cycle via ./get_revert_reason.js:33=>../rpc_method_wrappers.js:36",["1535"],"Dependency cycle via ../rpc_method_wrappers.js:36",["1536"],["1537"],["1538"],"@typescript-eslint/require-await","Async arrow function 'transactionBuilder' has no 'await' expression.","ArrowFunctionExpression","missingAwait",["1539"],"Dependency cycle via ../rpc_method_wrappers.js:24",["1540"],["1541"],["1542"],"import/no-duplicates","'/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-types/lib/types/index.d.ts' imported multiple times.","Literal","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["1543","1544"],["1545","1546"],["1547","1548"],"tsdoc-escape-greater-than: The \">\" character should be escaped using a backslash to avoid confusion with an HTML tag","tsdoc-escape-greater-than","@typescript-eslint/unbound-method","Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.","MemberExpression","unboundWithoutThisAnnotation",["1549"],["1550"],["1551"],["1552"],["1553"],["1554"],["1555"],"max-classes-per-file","File has too many classes (4). Maximum allowed is 1.","Program","maximumExceeded",["1556"],"class-methods-use-this","Expected 'this' to be used by class method '_buildSubscriptionParams'.","FunctionExpression","missingThis",["1557"],["1558"],["1559"],"tsdoc-undefined-tag: The TSDoc tag \"@NOTE\" is not defined in this configuration","tsdoc-undefined-tag","import/no-relative-packages","Relative import from another package is not allowed. Use `web3.js/.secrets.json` instead of `../../../../.secrets.json`",{"range":"1560","text":"1561"},["1562"],"no-else-return","Unnecessary 'else' after 'return'.","IfStatement","unexpected",{"range":"1563","text":"1564"},["1565"],"@typescript-eslint/no-unnecessary-type-assertion","This assertion is unnecessary since it does not change the type of the expression.","TSAsExpression","unnecessaryAssertion",{"range":"1566","text":"1567"},["1568"],{"range":"1569","text":"1570"},["1571"],{"range":"1572","text":"1573"},["1574"],"import/no-extraneous-dependencies","'web3' should be listed in the project's dependencies. Run 'npm i -S web3' to add it",["1575"],["1576"],"no-null/no-null","Use undefined instead of null",["1577"],"'web3-hardhat-plugin' should be listed in the project's dependencies. Run 'npm i -S web3-hardhat-plugin' to add it",["1578"],"'web3-eth' should be listed in the project's dependencies. Run 'npm i -S web3-eth' to add it",["1579"],"'web3-eth-personal' should be listed in the project's dependencies. Run 'npm i -S web3-eth-personal' to add it",["1580"],["1581"],"'web3-eth-contract' should be listed in the project's dependencies. Run 'npm i -S web3-eth-contract' to add it",["1582"],"'web3-providers-ipc' should be listed in the project's dependencies. Run 'npm i -S web3-providers-ipc' to add it",["1583"],"@typescript-eslint/ban-ts-comment","Include a description after the \"@ts-expect-error\" directive to explain why the @ts-expect-error is necessary. The description must be 3 characters or longer.","Line","tsDirectiveCommentRequiresDescription",["1584"],"@typescript-eslint/no-unsafe-return","Unsafe return of an `any` typed value.","ConditionalExpression","unsafeReturn",["1585"],"@typescript-eslint/no-unsafe-call","Unsafe call of an `any` typed value.","unsafeCall",["1586"],"no-plusplus","Unary operator '++' used.","UpdateExpression","unexpectedUnaryOp",["1587"],"no-param-reassign","Assignment to function parameter 'currentAttempt'.","assignmentToFunctionParam",["1588"],"no-await-in-loop","Unexpected `await` inside a loop.","AwaitExpression","unexpectedAwait",["1589"],"CallExpression",["1590"],["1591"],"@typescript-eslint/no-empty-function","Unexpected empty arrow function.",["1592"],["1593"],["1594"],["1595"],"jest/no-conditional-expect","Avoid calling `expect` conditionally`","conditionalExpect",["1596"],["1597"],["1598"],["1599"],["1600"],"@typescript-eslint/no-non-null-assertion","Forbidden non-null assertion.","TSNonNullExpression","noNonNull",["1601"],["1602"],"Async arrow function has no 'await' expression.",["1603"],"no-void","Expected 'undefined' and instead saw 'void'.","UnaryExpression","noVoid",["1604"],["1605"],"@typescript-eslint/no-misused-promises","Promise-returning function provided to variable where a void return was expected.","voidReturnVariable",["1606"],["1607"],"'/Users/alexeykosinski/work/chainsafe/web3.js/node_modules/web3-types/lib/esm/index.js' imported multiple times.",["1608"],["1609"],"jest/no-standalone-expect","Expect must be inside of a test block.","unexpectedExpect",["1610"],["1611"],["1612"],["1613"],["1614"],"import/no-named-as-default","Using exported name 'Web3Eth' as identifier for default export.","ImportDefaultSpecifier",["1615"],["1616"],["1617"],["1618"],["1619"],["1620"],["1621"],["1622"],["1623"],["1624"],["1625"],["1626"],["1627"],["1628"],["1629"],["1630"],["1631"],["1632"],["1633"],["1634"],["1635"],["1636"],["1637"],["1638"],["1639"],["1640"],["1641"],["1642"],["1643"],["1644"],["1645"],["1646"],["1647"],["1648"],["1649"],["1650"],["1651"],["1652"],["1653"],"@typescript-eslint/no-floating-promises","Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","ExpressionStatement","floatingVoid",["1654"],["1655"],["1656"],["1657"],["1658"],["1659"],["1660"],["1661"],["1662"],["1663"],["1664"],["1665"],["1666"],["1667"],["1668"],["1669"],["1670"],["1671"],["1672"],["1673"],["1674"],["1675"],["1676"],["1677"],["1678"],["1679"],["1680"],["1681"],["1682"],["1683"],["1684"],["1685"],["1686"],["1687"],["1688"],"jest/no-disabled-tests","Disabled test","disabledTest","Async function 'transactionBuilder' has no 'await' expression.","FunctionDeclaration",["1689"],["1690"],["1691"],"@typescript-eslint/restrict-template-expressions","Invalid type \"any\" of template literal expression.","invalidType","jest/expect-expect","Test has no assertions","noAssertions",["1692"],["1693"],["1694"],["1695"],["1696"],["1697"],["1698"],["1699"],["1700"],["1701"],["1702"],["1703"],"deprecation/deprecation","'getHashrate' is deprecated. Will be removed in the future, please use {@link Web3Eth.getHashRate} method instead.","deprecated",["1704"],{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"messageId":"1706","fix":"1707","desc":"1708"},{"messageId":"1709","fix":"1710","desc":"1711"},{"messageId":"1706","fix":"1712","desc":"1708"},{"messageId":"1709","fix":"1713","desc":"1711"},{"messageId":"1706","fix":"1714","desc":"1708"},{"messageId":"1709","fix":"1715","desc":"1711"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},[1269,1296],"\"web3.js/.secrets.json\"",{"kind":"1705","justification":"1567"},[1794,2219],"(): string => {\n\tif (process.env.TEST_ACCOUNT_ADDRESS !== undefined) {\n\t\treturn process.env.TEST_ACCOUNT_ADDRESS;\n\t\t// eslint-disable-next-line no-else-return\n\t} if (getSystemTestBackend() === BACKEND.SEPOLIA || getSystemTestBackend() === BACKEND.MAINNET) {\n\t\treturn secrets[getSystemTestBackend().toUpperCase() as 'SEPOLIA' | 'MAINNET'].ACCOUNT\n\t\t\t.address;\n\t}\n\n\tthrow new Error('Unable to get test account address');\n}",{"kind":"1705","justification":"1567"},[2453,2462],"",{"kind":"1705","justification":"1567"},[2506,3048],"(): boolean => {\n\tif (process.env.ALLOWED_SEND_TRANSACTION !== undefined) {\n\t\t// https://github.com/actions/runner/issues/1483\n\t\tif (process.env.ALLOWED_SEND_TRANSACTION === 'false') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn Boolean(process.env.ALLOWED_SEND_TRANSACTION);\n\t\t// eslint-disable-next-line no-else-return\n\t} if (getSystemTestBackend() === BACKEND.SEPOLIA || getSystemTestBackend() === BACKEND.MAINNET) {\n\t\treturn secrets[getSystemTestBackend().toUpperCase() as 'SEPOLIA' | 'MAINNET']\n\t\t\t.ALLOWED_SEND_TRANSACTION;\n\t}\n\n\treturn false;\n}",{"kind":"1705","justification":"1567"},[3094,3534],"(): string => {\n\tif (process.env.TEST_ACCOUNT_PRIVATE_KEY !== undefined) {\n\t\treturn process.env.TEST_ACCOUNT_PRIVATE_KEY;\n\t\t// eslint-disable-next-line no-else-return\n\t} if (getSystemTestBackend() === BACKEND.SEPOLIA || getSystemTestBackend() === BACKEND.MAINNET) {\n\t\treturn secrets[getSystemTestBackend().toUpperCase() as 'SEPOLIA' | 'MAINNET'].ACCOUNT\n\t\t\t.privateKey;\n\t}\n\n\tthrow new Error('Unable to get test account private key');\n}",{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"messageId":"1716","fix":"1717","desc":"1718"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"messageId":"1716","fix":"1719","desc":"1718"},{"kind":"1705","justification":"1567"},{"messageId":"1716","fix":"1720","desc":"1718"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},{"kind":"1705","justification":"1567"},"directive","suggestUnknown",{"range":"1721","text":"1722"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"1721","text":"1723"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"1724","text":"1722"},{"range":"1724","text":"1723"},{"range":"1725","text":"1722"},{"range":"1725","text":"1723"},"floatingFixVoid",{"range":"1726","text":"1727"},"Add void operator to ignore.",{"range":"1728","text":"1729"},{"range":"1730","text":"1729"},[3522,3525],"unknown","never",[3681,3684],[3972,3975],[1559,2580],"void (async () => {\n\t\t\t\t\tlet waitList: string[] = [];\n\t\t\t\t\tsub.on('data', (data: string) => {\n\t\t\t\t\t\tif (receipts.length > 0 && waitList.length > 0) {\n\t\t\t\t\t\t\tfor (const hash of waitList) {\n\t\t\t\t\t\t\t\tif (receipts.includes(hash)) {\n\t\t\t\t\t\t\t\t\ttxHashes.push(hash);\n\t\t\t\t\t\t\t\t\ttimes += 1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\twaitList = [];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (receipts.length > 0 && receipts.includes(data)) {\n\t\t\t\t\t\t\ttxHashes.push(data);\n\t\t\t\t\t\t\ttimes += 1;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\twaitList.push(data);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (times >= checkTxCount) {\n\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\treceipts = (await sendFewSampleTxs(checkTxCount)).map(r =>\n\t\t\t\t\t\tString(r?.transactionHash),\n\t\t\t\t\t);\n\t\t\t\t\tif (receipts.length > 0 && waitList.length > 0) {\n\t\t\t\t\t\tfor (const hash of waitList) {\n\t\t\t\t\t\t\tif (receipts.includes(hash)) {\n\t\t\t\t\t\t\t\ttxHashes.push(hash);\n\t\t\t\t\t\t\t\ttimes += 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\twaitList = [];\n\t\t\t\t\t}\n\t\t\t\t\tif (times >= checkTxCount) {\n\t\t\t\t\t\tsub.off('data', () => {\n\t\t\t\t\t\t\t// no need to do anything\n\t\t\t\t\t\t});\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t}\n\t\t\t\t})();",[2506,2596],"void promiEvent.on('error', () => {\n\t\t\t\t\t\tonErrorReceived = true;\n\t\t\t\t\t\tresolve(true);\n\t\t\t\t\t});",[3460,3550]]