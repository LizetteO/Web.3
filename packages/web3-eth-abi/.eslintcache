[{"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/src/api/errors_api.ts":"1","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/src/api/events_api.ts":"2","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/src/api/functions_api.ts":"3","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/src/api/logs_api.ts":"4","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/src/api/parameters_api.ts":"5","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/src/coders/base/address.ts":"6","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/src/coders/base/array.ts":"7","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/src/coders/base/bool.ts":"8","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/src/coders/base/bytes.ts":"9","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/src/coders/base/index.ts":"10","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/src/coders/base/number.ts":"11","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/src/coders/base/numbersLimits.ts":"12","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/src/coders/base/string.ts":"13","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/src/coders/base/tuple.ts":"14","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/src/coders/base/utils.ts":"15","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/src/coders/decode.ts":"16","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/src/coders/encode.ts":"17","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/src/coders/types.ts":"18","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/src/coders/utils.ts":"19","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/src/decode_contract_error_data.ts":"20","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/src/eip_712.ts":"21","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/src/index.ts":"22","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/src/utils.ts":"23","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/fixtures/coders/base/address.ts":"24","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/fixtures/coders/base/array.ts":"25","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/fixtures/coders/base/bool.ts":"26","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/fixtures/coders/base/bytes.ts":"27","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/fixtures/coders/base/number.ts":"28","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/fixtures/coders/base/string.ts":"29","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/fixtures/coders/base/tuple.ts":"30","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/fixtures/coders/encode.ts":"31","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/fixtures/data.ts":"32","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/fixtures/get_encoded_eip712_data.ts":"33","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/unit/api/errors_api.test.ts":"34","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/unit/api/events_api.test.ts":"35","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/unit/api/functions_api.test.ts":"36","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/unit/api/logs_api.test.ts":"37","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/unit/api/parameters_api.test.ts":"38","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/unit/coders/base/address.test.ts":"39","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/unit/coders/base/array.test.ts":"40","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/unit/coders/base/bool.test.ts":"41","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/unit/coders/base/bytes.test.ts":"42","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/unit/coders/base/invalid.test.ts":"43","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/unit/coders/base/number.test.ts":"44","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/unit/coders/base/string.test.ts":"45","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/unit/coders/base/tuple.test.ts":"46","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/unit/constructor.test.ts":"47","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/unit/decodeContractErrorData.test.ts":"48","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/unit/encodeDecodeParams.test.ts":"49","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/unit/get_encoded_eip712_data.test.ts":"50","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/unit/test_utils.ts":"51","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/unit/types.test.ts":"52","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/unit/utils.test.ts":"53"},{"size":1492,"mtime":1701873231370,"results":"54","hashOfConfig":"55"},{"size":2646,"mtime":1701873231370,"results":"56","hashOfConfig":"55"},{"size":4613,"mtime":1709071050691,"results":"57","hashOfConfig":"55"},{"size":4109,"mtime":1701873231371,"results":"58","hashOfConfig":"55"},{"size":9475,"mtime":1702663180734,"results":"59","hashOfConfig":"55"},{"size":2534,"mtime":1695913771556,"results":"60","hashOfConfig":"55"},{"size":3915,"mtime":1698075775709,"results":"61","hashOfConfig":"55"},{"size":1824,"mtime":1695913771556,"results":"62","hashOfConfig":"55"},{"size":3290,"mtime":1695913771557,"results":"63","hashOfConfig":"55"},{"size":3186,"mtime":1701873231372,"results":"64","hashOfConfig":"55"},{"size":3524,"mtime":1711987862821,"results":"65","hashOfConfig":"55"},{"size":1362,"mtime":1700492614529,"results":"66","hashOfConfig":"55"},{"size":1439,"mtime":1695913771557,"results":"67","hashOfConfig":"55"},{"size":4060,"mtime":1698075775709,"results":"68","hashOfConfig":"55"},{"size":1680,"mtime":1695913771557,"results":"69","hashOfConfig":"55"},{"size":1161,"mtime":1695913771557,"results":"70","hashOfConfig":"55"},{"size":4408,"mtime":1702663180735,"results":"71","hashOfConfig":"55"},{"size":1012,"mtime":1695913771557,"results":"72","hashOfConfig":"55"},{"size":4078,"mtime":1695913771557,"results":"73","hashOfConfig":"55"},{"size":1740,"mtime":1685575123082,"results":"74","hashOfConfig":"55"},{"size":7103,"mtime":1701873231372,"results":"75","hashOfConfig":"55"},{"size":993,"mtime":1701873231373,"results":"76","hashOfConfig":"55"},{"size":8218,"mtime":1704729547053,"results":"77","hashOfConfig":"55"},{"size":1777,"mtime":1695913771578,"results":"78","hashOfConfig":"79"},{"size":4221,"mtime":1695913771578,"results":"80","hashOfConfig":"79"},{"size":2490,"mtime":1695913771578,"results":"81","hashOfConfig":"79"},{"size":2705,"mtime":1695913771578,"results":"82","hashOfConfig":"79"},{"size":4099,"mtime":1695913771578,"results":"83","hashOfConfig":"79"},{"size":2585,"mtime":1695913771578,"results":"84","hashOfConfig":"79"},{"size":3977,"mtime":1695913771578,"results":"85","hashOfConfig":"79"},{"size":2154,"mtime":1695913771578,"results":"86","hashOfConfig":"79"},{"size":33215,"mtime":1704729547053,"results":"87","hashOfConfig":"79"},{"size":15126,"mtime":1689879155152,"results":"88","hashOfConfig":"79"},{"size":1330,"mtime":1679686929274,"results":"89","hashOfConfig":"79"},{"size":1336,"mtime":1679686929274,"results":"90","hashOfConfig":"79"},{"size":1936,"mtime":1678154646096,"results":"91","hashOfConfig":"79"},{"size":1139,"mtime":1678154646096,"results":"92","hashOfConfig":"79"},{"size":3795,"mtime":1695913771578,"results":"93","hashOfConfig":"79"},{"size":2047,"mtime":1695913771579,"results":"94","hashOfConfig":"79"},{"size":2933,"mtime":1695913771579,"results":"95","hashOfConfig":"79"},{"size":1979,"mtime":1695913771579,"results":"96","hashOfConfig":"79"},{"size":2268,"mtime":1695913771579,"results":"97","hashOfConfig":"79"},{"size":1299,"mtime":1701873231373,"results":"98","hashOfConfig":"79"},{"size":2042,"mtime":1695913771579,"results":"99","hashOfConfig":"79"},{"size":1871,"mtime":1695913771579,"results":"100","hashOfConfig":"79"},{"size":1649,"mtime":1695913771579,"results":"101","hashOfConfig":"79"},{"size":1152,"mtime":1678154646096,"results":"102","hashOfConfig":"79"},{"size":1950,"mtime":1701873231373,"results":"103","hashOfConfig":"79"},{"size":2081,"mtime":1702663180736,"results":"104","hashOfConfig":"79"},{"size":1230,"mtime":1695221293906,"results":"105","hashOfConfig":"79"},{"size":2153,"mtime":1695913771580,"results":"106","hashOfConfig":"79"},{"size":7250,"mtime":1678154646096,"results":"107","hashOfConfig":"79"},{"size":3713,"mtime":1704729547053,"results":"108","hashOfConfig":"79"},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"q3gfvk",{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","suppressedMessages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157"},{"filePath":"158","messages":"159","suppressedMessages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161"},{"filePath":"162","messages":"163","suppressedMessages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","suppressedMessages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168"},{"filePath":"169","messages":"170","suppressedMessages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","suppressedMessages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175"},{"filePath":"176","messages":"177","suppressedMessages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","suppressedMessages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","suppressedMessages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"cqpvay",{"filePath":"185","messages":"186","suppressedMessages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","suppressedMessages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","suppressedMessages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"194","messages":"195","suppressedMessages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","suppressedMessages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"200","messages":"201","suppressedMessages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"203","messages":"204","suppressedMessages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"206","messages":"207","suppressedMessages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209"},{"filePath":"210","messages":"211","suppressedMessages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"213","messages":"214","suppressedMessages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"216","messages":"217","suppressedMessages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"219","messages":"220","suppressedMessages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"222","messages":"223","suppressedMessages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"225","messages":"226","suppressedMessages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"228","messages":"229","suppressedMessages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"231","messages":"232","suppressedMessages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"234","messages":"235","suppressedMessages":"236","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"237","messages":"238","suppressedMessages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"240","messages":"241","suppressedMessages":"242","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"243","messages":"244","suppressedMessages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"246","messages":"247","suppressedMessages":"248","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"249","messages":"250","suppressedMessages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"252","messages":"253","suppressedMessages":"254","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"255","messages":"256","suppressedMessages":"257","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"258","messages":"259","suppressedMessages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"261","messages":"262","suppressedMessages":"263","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"264","messages":"265","suppressedMessages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"267","messages":"268","suppressedMessages":"269","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"270","messages":"271","suppressedMessages":"272","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/src/api/errors_api.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/src/api/events_api.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/src/api/functions_api.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/src/api/logs_api.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/src/api/parameters_api.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/src/coders/base/address.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/src/coders/base/array.ts",[],["273","274"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/src/coders/base/bool.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/src/coders/base/bytes.ts",[],["275"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/src/coders/base/index.ts",[],["276","277","278","279"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/src/coders/base/number.ts",[],["280"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/src/coders/base/numbersLimits.ts",[],["281","282"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/src/coders/base/string.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/src/coders/base/tuple.ts",[],["283","284","285"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/src/coders/base/utils.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/src/coders/decode.ts",["286"],[],"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { AbiInput, HexString } from 'web3-types';\nimport { utils } from 'web3-validator';\nimport { decodeTuple } from './base/tuple.js';\nimport { toAbiParams } from './utils.js';\n\nexport function decodeParameters(\n\tabis: AbiInput[],\n\tbytes: HexString,\n\t_loose: boolean,\n): { [key: string]: unknown; __length__: number } {\n\tconst abiParams = toAbiParams(abis);\n\tconst bytesArray = utils.hexToUint8Array(bytes);\n\n\treturn decodeTuple({ type: 'tuple', name: '', components: abiParams }, bytesArray).result;\n}\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/src/coders/encode.ts",["287","288","289","290","291","292","293","294","295","296","297"],["298"],"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { AbiError } from 'web3-errors';\nimport { AbiInput, AbiParameter } from 'web3-types';\nimport { toHex } from 'web3-utils';\nimport { utils } from 'web3-validator';\nimport { encodeTuple } from './base/index.js';\nimport { toAbiParams } from './utils.js';\n\n/**\n * @param params - The params to infer the ABI from\n * @returns The inferred ABI\n * @example\n * ```\n * inferParamsAbi([1, -1, 'hello', '0x1234', ])\n * ```\n * > [{ type: 'int256' }, { type: 'uint256' }, { type: 'string' }, { type: 'bytes' }]\n * ```\n */\nfunction inferParamsAbi(params: unknown[]): ReadonlyArray<AbiParameter> {\n\tconst abi: AbiParameter[] = [];\n\tparams.forEach(param => {\n\t\tif (Array.isArray(param)) {\n\t\t\tconst inferredParams = inferParamsAbi(param);\n\t\t\tabi.push({\n\t\t\t\ttype: 'tuple',\n\t\t\t\tcomponents: inferredParams,\n\t\t\t\tname: '',\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n\t\t\t} as AbiParameter);\n\t\t} else {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n\t\t\tabi.push({ type: toHex(param as any, true) } as AbiParameter);\n\t\t}\n\t});\n\treturn abi;\n}\n\n/**\n * Encodes a parameter based on its type to its ABI representation.\n * @param abi - An array of {@link AbiInput}. See [Solidity's documentation](https://solidity.readthedocs.io/en/v0.5.3/abi-spec.html#json) for more details.\n * @param params - The actual parameters to encode.\n * @returns - The ABI encoded parameters\n * @example\n * ```ts\n * const res = web3.eth.abi.encodeParameters(\n *    [\"uint256\", \"string\"],\n *    [\"2345675643\", \"Hello!%\"]\n *  );\n *\n *  console.log(res);\n *  > 0x000000000000000000000000000000000000000000000000000000008bd02b7b0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000748656c6c6f212500000000000000000000000000000000000000000000000000\n * ```\n */\nexport function encodeParameters(abi: ReadonlyArray<AbiInput>, params: unknown[]): string {\n\tif (abi?.length !== params.length) {\n\t\tthrow new AbiError('Invalid number of values received for given ABI', {\n\t\t\texpected: abi?.length,\n\t\t\treceived: params.length,\n\t\t});\n\t}\n\n\tconst abiParams = toAbiParams(abi);\n\treturn utils.uint8ArrayToHexString(\n\t\tencodeTuple({ type: 'tuple', name: '', components: abiParams }, params).encoded,\n\t);\n}\n\n/**\n * Infer a smart contract method parameter type and then encode this parameter.\n * @param params - The parameters to encode.\n * @returns - The ABI encoded parameters\n *\n * @remarks\n * This method is useful when you don't know the type of the parameters you want to encode. It will infer the type of the parameters and then encode them.\n * However, it is not recommended to use this method when you know the type of the parameters you want to encode. In this case, use the {@link encodeParameters} method instead.\n * The type inference is not perfect and can lead to unexpected results. Especially when you want to encode an array, uint that is not uint256 or bytes....\n * @example\n * ```ts\n * const res = web3.eth.abi.encodeParameters(\n *    [\"2345675643\", \"Hello!%\"]\n *  );\n *\n *  console.log(res);\n *  > 0x000000000000000000000000000000000000000000000000000000008bd02b7b0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000748656c6c6f212500000000000000000000000000000000000000000000000000\n * ```\n */\nexport function inferTypesAndEncodeParameters(params: unknown[]): string {\n\ttry {\n\t\tconst abiParams = inferParamsAbi(params);\n\t\treturn utils.uint8ArrayToHexString(\n\t\t\tencodeTuple({ type: 'tuple', name: '', components: abiParams }, params).encoded,\n\t\t);\n\t} catch (e) {\n\t\t// throws If the inferred params type caused an error\n\t\tthrow new AbiError('Could not infer types from given params', {\n\t\t\tparams,\n\t\t});\n\t}\n}\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/src/coders/types.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/src/coders/utils.ts",["299"],["300"],"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { AbiParameter as ExternalAbiParameter, parseAbiParameter } from 'abitype';\nimport { AbiError } from 'web3-errors';\nimport { AbiInput, AbiParameter, AbiStruct } from 'web3-types';\nimport { isNullish } from 'web3-utils';\nimport {\n\tisSimplifiedStructFormat,\n\tmapStructNameAndType,\n\tmapStructToCoderFormat,\n} from '../utils.js';\n\nexport const WORD_SIZE = 32;\n\nexport function alloc(size = 0): Uint8Array {\n\tif (globalThis.Buffer?.alloc !== undefined) {\n\t\tconst buf = globalThis.Buffer.alloc(size);\n\t\treturn new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n\t}\n\n\treturn new Uint8Array(size);\n}\n\n/**\n * Where possible returns a Uint8Array of the requested size that references\n * uninitialized memory. Only use if you are certain you will immediately\n * overwrite every value in the returned `Uint8Array`.\n */\nexport function allocUnsafe(size = 0): Uint8Array {\n\tif (globalThis.Buffer?.allocUnsafe !== undefined) {\n\t\tconst buf = globalThis.Buffer.allocUnsafe(size);\n\t\treturn new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n\t}\n\n\treturn new Uint8Array(size);\n}\n\nexport function convertExternalAbiParameter(abiParam: ExternalAbiParameter): AbiParameter {\n\treturn {\n\t\t...abiParam,\n\t\tname: abiParam.name ?? '',\n\t\tcomponents: (abiParam as { components: readonly AbiParameter[] }).components?.map(c =>\n\t\t\tconvertExternalAbiParameter(c),\n\t\t),\n\t};\n}\n\nexport function isAbiParameter(param: unknown): param is AbiParameter {\n\treturn (\n\t\t!isNullish(param) &&\n\t\ttypeof param === 'object' &&\n\t\t!isNullish((param as { type: unknown }).type) &&\n\t\ttypeof (param as { type: unknown }).type === 'string'\n\t);\n}\n\nexport function toAbiParams(abi: ReadonlyArray<AbiInput>): ReadonlyArray<AbiParameter> {\n\treturn abi.map(input => {\n\t\tif (isAbiParameter(input)) {\n\t\t\treturn input;\n\t\t}\n\t\tif (typeof input === 'string') {\n\t\t\treturn convertExternalAbiParameter(parseAbiParameter(input.replace(/tuple/, '')));\n\t\t}\n\n\t\tif (isSimplifiedStructFormat(input)) {\n\t\t\tconst structName = Object.keys(input)[0];\n\t\t\tconst structInfo = mapStructNameAndType(structName);\n\t\t\tstructInfo.name = structInfo.name ?? '';\n\t\t\treturn {\n\t\t\t\t...structInfo,\n\t\t\t\tcomponents: mapStructToCoderFormat(\n\t\t\t\t\tinput[structName as keyof typeof input] as unknown as AbiStruct,\n\t\t\t\t),\n\t\t\t};\n\t\t}\n\t\tthrow new AbiError('Invalid abi');\n\t});\n}\n\nexport function extractArrayType(param: AbiParameter): { size: number; param: AbiParameter } {\n\tconst arrayParenthesisStart = param.type.lastIndexOf('[');\n\tconst arrayParamType = param.type.substring(0, arrayParenthesisStart);\n\tconst sizeString = param.type.substring(arrayParenthesisStart);\n\tlet size = -1;\n\tif (sizeString !== '[]') {\n\t\tsize = Number(sizeString.slice(1, -1));\n\t\t// eslint-disable-next-line no-restricted-globals\n\t\tif (isNaN(size)) {\n\t\t\tthrow new AbiError('Invalid fixed array size', { size: sizeString });\n\t\t}\n\t}\n\treturn {\n\t\tparam: { type: arrayParamType, name: '', components: param.components },\n\t\tsize,\n\t};\n}\n\n/**\n * Param is dynamic if it's dynamic base type or if some of his children (components, array items)\n * is of dynamic type\n * @param param\n */\nexport function isDynamic(param: AbiParameter): boolean {\n\tif (param.type === 'string' || param.type === 'bytes' || param.type.endsWith('[]')) return true;\n\tif (param.type === 'tuple') {\n\t\treturn param.components?.some(isDynamic) ?? false;\n\t}\n\tif (param.type.endsWith(']')) {\n\t\treturn isDynamic(extractArrayType(param).param);\n\t}\n\treturn false;\n}\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/src/decode_contract_error_data.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/src/eip_712.ts",["301","302","303","304","305","306","307","308","309","310","311","312","313"],["314","315","316"],"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * The web3.eth.abi functions let you encode and decode parameters to ABI (Application Binary Interface) for function calls to the EVM (Ethereum Virtual Machine).\n * \n *  For using Web3 ABI functions, first install Web3 package using `npm i web3` or `yarn add web3`.\n * After that, Web3 ABI functions will be available. \n * ```ts\n * import { Web3 } from 'web3';\n * \n * const web3 = new Web3();\n * const encoded = web3.eth.abi.encodeFunctionSignature({\n *     name: 'myMethod',\n *     type: 'function',\n *     inputs: [{\n *         type: 'uint256',\n *         name: 'myNumber'\n *     },{\n *         type: 'string',\n *         name: 'myString'\n *     }]\n * });\n * \n * ```\n * \n * For using individual package install `web3-eth-abi` package using `npm i web3-eth-abi` or `yarn add web3-eth-abi` and only import required functions.\n * This is more efficient approach for building lightweight applications. \n * ```ts\n * import { encodeFunctionSignature } from 'web3-eth-abi';\n * \n * const encoded = encodeFunctionSignature({\n *     name: 'myMethod',\n *     type: 'function',\n *     inputs: [{\n *         type: 'uint256',\n *         name: 'myNumber'\n *     },{\n *         type: 'string',\n *         name: 'myString'\n *     }]\n * });\n * \n * ```\n * \n *  @module ABI\n */\n\n\n// This code was taken from: https://github.com/Mrtenz/eip-712/tree/master\n\nimport { Eip712TypedData } from 'web3-types';\nimport { isNullish, keccak256 } from 'web3-utils';\nimport { AbiError } from 'web3-errors';\nimport { encodeParameters } from './coders/encode.js';\n\nconst TYPE_REGEX = /^\\w+/;\nconst ARRAY_REGEX = /^(.*)\\[([0-9]*?)]$/;\n\n/**\n * Get the dependencies of a struct type. If a struct has the same dependency multiple times, it's only included once\n * in the resulting array.\n */\nconst getDependencies = (\n\ttypedData: Eip712TypedData,\n\ttype: string,\n\tdependencies: string[] = [],\n): string[] => {\n\tconst match = type.match(TYPE_REGEX)!;\n\tconst actualType = match[0];\n\tif (dependencies.includes(actualType)) {\n\t\treturn dependencies;\n\t}\n\n\tif (!typedData.types[actualType]) {\n\t\treturn dependencies;\n\t}\n\n\treturn [\n\t\tactualType,\n\t\t...typedData.types[actualType].reduce<string[]>(\n\t\t\t(previous, _type) => [\n\t\t\t\t...previous,\n\t\t\t\t...getDependencies(typedData, _type.type, previous).filter(\n\t\t\t\t\tdependency => !previous.includes(dependency),\n\t\t\t\t),\n\t\t\t],\n\t\t\t[],\n\t\t),\n\t];\n};\n\n/**\n * Encode a type to a string. All dependant types are alphabetically sorted.\n *\n * @param {TypedData} typedData\n * @param {string} type\n * @param {Options} [options]\n * @return {string}\n */\nconst encodeType = (typedData: Eip712TypedData, type: string): string => {\n\tconst [primary, ...dependencies] = getDependencies(typedData, type);\n\t// eslint-disable-next-line @typescript-eslint/require-array-sort-compare\n\tconst types = [primary, ...dependencies.sort()];\n\n\treturn types\n\t\t.map(\n\t\t\tdependency =>\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n\t\t\t\t`${dependency}(${typedData.types[dependency].map(\n\t\t\t\t\t_type => `${_type.type} ${_type.name}`,\n\t\t\t\t)})`,\n\t\t)\n\t\t.join('');\n};\n\n/**\n * Get a type string as hash.\n */\nconst getTypeHash = (typedData: Eip712TypedData, type: string) =>\n\tkeccak256(encodeType(typedData, type));\n\n/**\n * Get encoded data as a hash. The data should be a key -> value object with all the required values. All dependant\n * types are automatically encoded.\n */\nconst getStructHash = (\n\ttypedData: Eip712TypedData,\n\ttype: string,\n\tdata: Record<string, unknown>,\n\t// eslint-disable-next-line  no-use-before-define\n): string => keccak256(encodeData(typedData, type, data));\n\n/**\n * Get the EIP-191 encoded message to sign, from the typedData object. If `hash` is enabled, the message will be hashed\n * with Keccak256.\n */\nexport const getMessage = (typedData: Eip712TypedData, hash?: boolean): string => {\n\tconst EIP_191_PREFIX = '1901';\n\tconst message = `0x${EIP_191_PREFIX}${getStructHash(\n\t\ttypedData,\n\t\t'EIP712Domain',\n\t\ttypedData.domain as Record<string, unknown>,\n\t).substring(2)}${getStructHash(typedData, typedData.primaryType, typedData.message).substring(\n\t\t2,\n\t)}`;\n\n\tif (hash) {\n\t\treturn keccak256(message);\n\t}\n\n\treturn message;\n};\n\n/**\n * Encodes a single value to an ABI serialisable string, number or Buffer. Returns the data as tuple, which consists of\n * an array of ABI compatible types, and an array of corresponding values.\n */\nconst encodeValue = (\n\ttypedData: Eip712TypedData,\n\ttype: string,\n\tdata: unknown,\n): [string, string | Uint8Array | number] => {\n\tconst match = type.match(ARRAY_REGEX);\n\n\t// Checks for array types\n\tif (match) {\n\t\tconst arrayType = match[1];\n\t\tconst length = Number(match[2]) || undefined;\n\n\t\tif (!Array.isArray(data)) {\n\t\t\tthrow new AbiError('Cannot encode data: value is not of array type', {\n\t\t\t\tdata,\n\t\t\t});\n\t\t}\n\n\t\tif (length && data.length !== length) {\n\t\t\tthrow new AbiError(\n\t\t\t\t`Cannot encode data: expected length of ${length}, but got ${data.length}`,\n\t\t\t\t{\n\t\t\t\t\tdata,\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\tconst encodedData = data.map(item => encodeValue(typedData, arrayType, item));\n\t\tconst types = encodedData.map(item => item[0]);\n\t\tconst values = encodedData.map(item => item[1]);\n\n\t\treturn ['bytes32', keccak256(encodeParameters(types, values))];\n\t}\n\n\tif (typedData.types[type]) {\n\t\treturn ['bytes32', getStructHash(typedData, type, data as Record<string, unknown>)];\n\t}\n\n\t// Strings and arbitrary byte arrays are hashed to bytes32\n\tif (type === 'string') {\n\t\treturn ['bytes32', keccak256(data as string)];\n\t}\n\n\tif (type === 'bytes') {\n\t\treturn ['bytes32', keccak256(data as string)];\n\t}\n\n\treturn [type, data as string];\n};\n\n/**\n * Encode the data to an ABI encoded Buffer. The data should be a key -> value object with all the required values. All\n * dependant types are automatically encoded.\n */\nconst encodeData = (\n\ttypedData: Eip712TypedData,\n\ttype: string,\n\tdata: Record<string, unknown>,\n): string => {\n\tconst [types, values] = typedData.types[type].reduce<[string[], unknown[]]>(\n\t\t([_types, _values], field) => {\n\t\t\tif (isNullish(data[field.name]) || isNullish(data[field.name])) {\n\t\t\t\tthrow new AbiError(`Cannot encode data: missing data for '${field.name}'`, {\n\t\t\t\t\tdata,\n\t\t\t\t\tfield,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst value = data[field.name];\n\t\t\tconst [_type, encodedValue] = encodeValue(typedData, field.type, value);\n\n\t\t\treturn [\n\t\t\t\t[..._types, _type],\n\t\t\t\t[..._values, encodedValue],\n\t\t\t];\n\t\t},\n\t\t[['bytes32'], [getTypeHash(typedData, type)]],\n\t);\n\n\treturn encodeParameters(types, values);\n};\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/src/index.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/src/utils.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/fixtures/coders/base/address.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/fixtures/coders/base/array.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/fixtures/coders/base/bool.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/fixtures/coders/base/bytes.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/fixtures/coders/base/number.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/fixtures/coders/base/string.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/fixtures/coders/base/tuple.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/fixtures/coders/encode.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/fixtures/data.ts",["317"],["318","319","320","321","322","323","324","325"],"﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { encodeParameters, decodeParameters } from '../../src/api/parameters_api';\n\n// Because Jest does not support BigInt (https://github.com/facebook/jest/issues/12827)\n// The BigInt values in this file is in a string format.\n// And the following override is to convert BigInt to a string inside the Unit Tests that uses this file,\n// \ti.e when serialization is needed there (because the values in this file is in a string format).\n(BigInt.prototype as any).toJSON = function () {\n\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-call\n\treturn this.toString();\n};\n\nexport const jsonInterfaceValidData: [any, string][] = [\n\t[\n\t\t{\n\t\t\t// testing function type\n\t\t\tname: 'myMethod',\n\t\t\ttype: 'function',\n\t\t\tinputs: [\n\t\t\t\t{\n\t\t\t\t\ttype: 'uint256',\n\t\t\t\t\tname: 'myNumber',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tname: 'myString',\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t\t'myMethod(uint256,string)',\n\t],\n\t[\n\t\t{\n\t\t\tname: 'f',\n\t\t\ttype: 'function',\n\t\t\tinputs: [\n\t\t\t\t{\n\t\t\t\t\tname: 's',\n\t\t\t\t\ttype: 'tuple',\n\t\t\t\t\tcomponents: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'a',\n\t\t\t\t\t\t\ttype: 'uint256',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'b',\n\t\t\t\t\t\t\ttype: 'uint256[]',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'c',\n\t\t\t\t\t\t\ttype: 'tuple[]',\n\t\t\t\t\t\t\tcomponents: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: 'x',\n\t\t\t\t\t\t\t\t\ttype: 'uint256',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: 'y',\n\t\t\t\t\t\t\t\t\ttype: 'uint256',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 't',\n\t\t\t\t\ttype: 'tuple',\n\t\t\t\t\tcomponents: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'x',\n\t\t\t\t\t\t\ttype: 'uint256',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'y',\n\t\t\t\t\t\t\ttype: 'uint256',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'a',\n\t\t\t\t\ttype: 'uint256',\n\t\t\t\t},\n\t\t\t],\n\t\t\toutputs: [],\n\t\t},\n\t\t'f((uint256,uint256[],(uint256,uint256)[]),(uint256,uint256),uint256)',\n\t],\n\t[\n\t\t// testing event type\n\t\t{\n\t\t\ttype: 'event',\n\t\t\tinputs: [\n\t\t\t\t{ name: 'a', type: 'uint256', indexed: true },\n\t\t\t\t{ name: 'b', type: 'bytes32', indexed: false },\n\t\t\t],\n\t\t\tname: 'Event',\n\t\t},\n\t\t'Event(uint256,bytes32)',\n\t],\n\t[\n\t\t{\n\t\t\tname: 'myEvent',\n\t\t\ttype: 'event',\n\t\t\tinputs: [\n\t\t\t\t{\n\t\t\t\t\ttype: 'uint256',\n\t\t\t\t\tname: 'myNumber',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'bytes32',\n\t\t\t\t\tname: 'myBytes',\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t\t'myEvent(uint256,bytes32)',\n\t],\n];\n\nexport const jsonInterfaceInvalidData: [any, string][] = [\n\t[\n\t\t{\n\t\t\tname: 'f',\n\t\t\ttype: 'function',\n\t\t\tinputs: [\n\t\t\t\t{\n\t\t\t\t\tname: 's',\n\t\t\t\t\ttype: 'notTuple',\n\t\t\t\t\tcomponents: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'a',\n\t\t\t\t\t\t\ttype: 'uint256',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'b',\n\t\t\t\t\t\t\ttype: 'uint256[]',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'c',\n\t\t\t\t\t\t\ttype: 'tuple[]',\n\t\t\t\t\t\t\tcomponents: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: 'x',\n\t\t\t\t\t\t\t\t\ttype: 'uint256',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: 'y',\n\t\t\t\t\t\t\t\t\ttype: 'uint256',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 't',\n\t\t\t\t\ttype: 'tuple',\n\t\t\t\t\tcomponents: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'x',\n\t\t\t\t\t\t\ttype: 'uint256',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'y',\n\t\t\t\t\t\t\ttype: 'uint256',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'a',\n\t\t\t\t\ttype: 'uint256',\n\t\t\t\t},\n\t\t\t],\n\t\t\toutputs: [],\n\t\t},\n\t\t'Invalid value given \"notTuple\". Error: components found but type is not tuple.',\n\t],\n];\n\nexport const validFunctionsSignatures: { input: any; output: string }[] = [\n\t{ input: 'myMethod(uint256,string)', output: '0x24ee0097' },\n\t{\n\t\tinput: {\n\t\t\tname: 'myMethod',\n\t\t\ttype: 'function' as const,\n\t\t\tinputs: [\n\t\t\t\t{\n\t\t\t\t\ttype: 'uint256',\n\t\t\t\t\tname: 'myNumber',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tname: 'myString',\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t\toutput: '0x24ee0097',\n\t},\n];\n\nexport const inValidFunctionsSignatures: { input: any; output: string }[] = [\n\t{ input: 345, output: 'Invalid parameter value in encodeFunctionSignature' },\n\t{ input: {}, output: 'Invalid parameter value in encodeFunctionSignature' },\n\t{ input: ['mystring'], output: 'Invalid parameter value in encodeFunctionSignature' },\n\t// Using \"null\" value intentionally for validation\n\t// eslint-disable-next-line no-null/no-null\n\t{ input: null, output: 'Invalid parameter value in encodeFunctionSignature' },\n\t{ input: undefined, output: 'Invalid parameter value in encodeFunctionSignature' },\n];\n\nexport const validFunctionsCall: { input: { abi: any; params: any }; output: string }[] = [\n\t{\n\t\tinput: {\n\t\t\tabi: {\n\t\t\t\tname: 'myMethod',\n\t\t\t\ttype: 'function',\n\t\t\t\tinputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'uint256',\n\t\t\t\t\t\tname: 'myNumber',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tname: 'myString',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\tparams: ['2345675643', 'Hello!%'],\n\t\t},\n\t\toutput: '0x24ee0097000000000000000000000000000000000000000000000000000000008bd02b7b0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000748656c6c6f212500000000000000000000000000000000000000000000000000',\n\t},\n\t{\n\t\tinput: {\n\t\t\tabi: {\n\t\t\t\ttype: 'function',\n\t\t\t\tname: 'pour',\n\t\t\t\tinputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'bytes12',\n\t\t\t\t\t\tname: 'vaultId_',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'address',\n\t\t\t\t\t\tname: 'to',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'int128',\n\t\t\t\t\t\tname: 'ink',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'int128',\n\t\t\t\t\t\tname: 'art',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\tparams: [\n\t\t\t\t'0x000000000000000000000000',\n\t\t\t\t'0x0000000000000000000000000000000000000000',\n\t\t\t\t'170141183460469231731687303715884105727',\n\t\t\t\t'-170141183460469231731687303715884105727',\n\t\t\t],\n\t\t},\n\t\toutput: '0x99d4294000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000000000000000000000000000001',\n\t},\n];\n\nexport const inValidFunctionsCalls: { input: any; output: string }[] = [\n\t{ input: 345, output: 'Invalid parameter value in encodeFunctionCall' },\n\t{ input: {}, output: 'Invalid parameter value in encodeFunctionCall' },\n\t{ input: ['mystring'], output: 'Invalid parameter value in encodeFunctionCall' },\n\t// Using \"null\" value intentionally for validation\n\t// eslint-disable-next-line no-null/no-null\n\t{ input: null, output: 'Invalid parameter value in encodeFunctionCall' },\n\t{ input: undefined, output: 'Invalid parameter value in encodeFunctionCall' },\n];\n\nexport const validEventsSignatures: { input: any; output: string }[] = [\n\t{\n\t\tinput: 'myEvent(uint256,bytes32)',\n\t\toutput: '0xf2eeb729e636a8cb783be044acf6b7b1e2c5863735b60d6daae84c366ee87d97',\n\t},\n\t{\n\t\tinput: {\n\t\t\tname: 'myEvent',\n\t\t\ttype: 'event' as const,\n\t\t\tinputs: [\n\t\t\t\t{\n\t\t\t\t\ttype: 'uint256',\n\t\t\t\t\tname: 'myNumber',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'bytes32',\n\t\t\t\t\tname: 'myBytes',\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t\toutput: '0xf2eeb729e636a8cb783be044acf6b7b1e2c5863735b60d6daae84c366ee87d97',\n\t},\n];\n\nexport const invalidEventsSignatures: { input: any; output: string }[] = [\n\t{ input: 345, output: 'Invalid parameter value in encodeEventSignature' },\n\t{ input: {}, output: 'Invalid parameter value in encodeEventSignature' },\n\t{ input: ['mystring'], output: 'Invalid parameter value in encodeEventSignature' },\n\t// Using \"null\" value intentionally for validation\n\t// eslint-disable-next-line no-null/no-null\n\t{ input: null, output: 'Invalid parameter value in encodeEventSignature' },\n\t{ input: undefined, output: 'Invalid parameter value in encodeEventSignature' },\n];\n\nexport const validErrorsSignatures: { input: any; output: string }[] = [\n\t{\n\t\tinput: 'Unauthorized()',\n\t\toutput: '0x82b4290015f7ec7256ca2a6247d3c2a89c4865c0e791456df195f40ad0a81367',\n\t},\n\t{\n\t\tinput: {\n\t\t\tinputs: [{ internalType: 'string', name: '', type: 'string' }],\n\t\t\tname: 'CustomError',\n\t\t\ttype: 'error',\n\t\t},\n\t\toutput: '0x8d6ea8bed4afafaebcad40e72174583b8bf4969c5d3bc84536051f3939bf9d81',\n\t},\n\t{\n\t\tinput: 'Error(string)',\n\t\toutput: '0x08c379a0afcc32b1a39302f7cb8073359698411ab5fd6e3edb2c02c0b5fba8aa',\n\t},\n];\n\nexport const invalidErrorSignatures: { input: any; output: string }[] = [\n\t{ input: 345, output: 'Invalid parameter value in encodeErrorSignature' },\n\t{ input: {}, output: 'Invalid parameter value in encodeErrorSignature' },\n\t{ input: ['mystring'], output: 'Invalid parameter value in encodeErrorSignature' },\n\t// Using \"null\" value intentionally for validation\n\t// eslint-disable-next-line no-null/no-null\n\t{ input: null, output: 'Invalid parameter value in encodeErrorSignature' },\n\t{ input: undefined, output: 'Invalid parameter value in encodeErrorSignature' },\n];\n\nexport const validDecodeLogsData: {\n\tinput: { abi: any; data: any; topics: any };\n\toutput: Record<string, unknown>;\n}[] = [\n\t{\n\t\tinput: {\n\t\t\tabi: [\n\t\t\t\t{\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tname: 'myString',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'uint256',\n\t\t\t\t\tname: 'myNumber',\n\t\t\t\t\tindexed: true,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'uint8',\n\t\t\t\t\tname: 'mySmallNumber',\n\t\t\t\t\tindexed: true,\n\t\t\t\t},\n\t\t\t],\n\t\t\tdata: '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000748656c6c6f252100000000000000000000000000000000000000000000000000',\n\t\t\ttopics: [\n\t\t\t\t'0x000000000000000000000000000000000000000000000000000000000000f310',\n\t\t\t\t'0x0000000000000000000000000000000000000000000000000000000000000010',\n\t\t\t],\n\t\t},\n\t\toutput: {\n\t\t\t'0': 'Hello%!',\n\t\t\t'1': '62224',\n\t\t\t'2': '16',\n\t\t\t__length__: 3,\n\t\t\tmyString: 'Hello%!',\n\t\t\tmyNumber: '62224',\n\t\t\tmySmallNumber: '16',\n\t\t},\n\t},\n\t{\n\t\t// testing an anonymous log with 4 params\n\t\tinput: {\n\t\t\tabi: [\n\t\t\t\t{\n\t\t\t\t\tname: 'myString',\n\t\t\t\t\ttype: 'string',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'myNum',\n\t\t\t\t\ttype: 'uint8',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'str',\n\t\t\t\t\ttype: 'string',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'largerNumber',\n\t\t\t\t\ttype: 'uint256',\n\t\t\t\t},\n\t\t\t],\n\t\t\ttopics: [],\n\t\t\tdata: '0x0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000007d0000000000000000000000000000000000000000000000000000000000000002307800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016200000000000000000000000000000000000000000000000000000000000000',\n\t\t},\n\t\toutput: {\n\t\t\t'0': '0x',\n\t\t\t'1': '12',\n\t\t\t'2': 'b',\n\t\t\t'3': '125',\n\t\t\t__length__: 4,\n\t\t\tmyString: '0x',\n\t\t\tmyNum: '12',\n\t\t\tlargerNumber: '125',\n\t\t\tstr: 'b',\n\t\t},\n\t},\n\t{\n\t\tinput: {\n\t\t\tabi: [\n\t\t\t\t{\n\t\t\t\t\tindexed: true,\n\t\t\t\t\tname: 'from',\n\t\t\t\t\ttype: 'address',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tindexed: true,\n\t\t\t\t\tname: 'to',\n\t\t\t\t\ttype: 'address',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tindexed: false,\n\t\t\t\t\tname: 'value',\n\t\t\t\t\ttype: 'uint256',\n\t\t\t\t},\n\t\t\t],\n\t\t\ttopics: [\n\t\t\t\t'0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\n\t\t\t\t'0x0000000000000000000000006e599da0bff7a6598ac1224e4985430bf16458a4',\n\t\t\t\t'0x0000000000000000000000006f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n\t\t\t],\n\t\t\tdata: '0x00000000000000000000000000000000000000000000000000000000000186a0',\n\t\t},\n\t\toutput: {\n\t\t\t'0': '0x6E599DA0bfF7A6598AC1224E4985430Bf16458a4',\n\t\t\t'1': '0x6f1DF96865D09d21e8f3f9a7fbA3b17A11c7C53C',\n\t\t\t'2': '100000',\n\t\t\t__length__: 3,\n\t\t\tfrom: '0x6E599DA0bfF7A6598AC1224E4985430Bf16458a4',\n\t\t\tto: '0x6f1DF96865D09d21e8f3f9a7fbA3b17A11c7C53C',\n\t\t\tvalue: '100000',\n\t\t},\n\t},\n\t{\n\t\tinput: {\n\t\t\tabi: [\n\t\t\t\t{ indexed: true, internalType: 'address', name: 'addr', type: 'address' },\n\t\t\t\t{\n\t\t\t\t\tcomponents: [\n\t\t\t\t\t\t{ internalType: 'string', name: 'name', type: 'string' },\n\t\t\t\t\t\t{ internalType: 'address', name: 'addr', type: 'address' },\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcomponents: [\n\t\t\t\t\t\t\t\t{ internalType: 'string', name: 'email', type: 'string' },\n\t\t\t\t\t\t\t\t{ internalType: 'string', name: 'phone', type: 'string' },\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\tinternalType: 'struct ABIV2UserDirectory.Contact',\n\t\t\t\t\t\t\tname: 'contact',\n\t\t\t\t\t\t\ttype: 'tuple',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tindexed: false,\n\t\t\t\t\tinternalType: 'struct ABIV2UserDirectory.User',\n\t\t\t\t\tname: 'user',\n\t\t\t\t\ttype: 'tuple',\n\t\t\t\t},\n\t\t\t],\n\t\t\tdata: '0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000060000000000000000000000000cb00cde33a7a0fba30c63745534f1f7ae607076b00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000c5269636b2053616e6368657a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000157269636b2e63313337406369746164656c2e636663000000000000000000000000000000000000000000000000000000000000000000000000000000000000112b31202835353529203331342d31353933000000000000000000000000000000',\n\t\t\ttopics: ['0x000000000000000000000000cb00cde33a7a0fba30c63745534f1f7ae607076b'],\n\t\t},\n\t\toutput: {\n\t\t\t'0': '0xCB00CDE33a7a0Fba30C63745534F1f7Ae607076b',\n\t\t\t'1': {\n\t\t\t\t'0': 'Rick Sanchez',\n\t\t\t\t'1': '0xCB00CDE33a7a0Fba30C63745534F1f7Ae607076b',\n\t\t\t\t'2': {\n\t\t\t\t\t'0': 'rick.c137@citadel.cfc',\n\t\t\t\t\t'1': '+1 (555) 314-1593',\n\t\t\t\t\t__length__: 2,\n\t\t\t\t\temail: 'rick.c137@citadel.cfc',\n\t\t\t\t\tphone: '+1 (555) 314-1593',\n\t\t\t\t},\n\t\t\t\t__length__: 3,\n\t\t\t\tname: 'Rick Sanchez',\n\t\t\t\taddr: '0xCB00CDE33a7a0Fba30C63745534F1f7Ae607076b',\n\t\t\t\tcontact: {\n\t\t\t\t\t'0': 'rick.c137@citadel.cfc',\n\t\t\t\t\t'1': '+1 (555) 314-1593',\n\t\t\t\t\t__length__: 2,\n\t\t\t\t\temail: 'rick.c137@citadel.cfc',\n\t\t\t\t\tphone: '+1 (555) 314-1593',\n\t\t\t\t},\n\t\t\t},\n\t\t\t__length__: 2,\n\t\t\taddr: '0xCB00CDE33a7a0Fba30C63745534F1f7Ae607076b',\n\t\t\tuser: {\n\t\t\t\t'0': 'Rick Sanchez',\n\t\t\t\t'1': '0xCB00CDE33a7a0Fba30C63745534F1f7Ae607076b',\n\t\t\t\t'2': {\n\t\t\t\t\t'0': 'rick.c137@citadel.cfc',\n\t\t\t\t\t'1': '+1 (555) 314-1593',\n\t\t\t\t\t__length__: 2,\n\t\t\t\t\temail: 'rick.c137@citadel.cfc',\n\t\t\t\t\tphone: '+1 (555) 314-1593',\n\t\t\t\t},\n\t\t\t\t__length__: 3,\n\t\t\t\tname: 'Rick Sanchez',\n\t\t\t\taddr: '0xCB00CDE33a7a0Fba30C63745534F1f7Ae607076b',\n\t\t\t\tcontact: {\n\t\t\t\t\t'0': 'rick.c137@citadel.cfc',\n\t\t\t\t\t'1': '+1 (555) 314-1593',\n\t\t\t\t\t__length__: 2,\n\t\t\t\t\temail: 'rick.c137@citadel.cfc',\n\t\t\t\t\tphone: '+1 (555) 314-1593',\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n];\n\nexport const validEncodeDecodeParametersData: {\n\tinput: Parameters<typeof encodeParameters>;\n\toutput: ReturnType<typeof encodeParameters>;\n\toutputResult: any;\n}[] = [\n\t{\n\t\tinput: [\n\t\t\t['uint256', 'string'],\n\t\t\t['2345675643', 'Hello!%'],\n\t\t],\n\t\toutput: '0x000000000000000000000000000000000000000000000000000000008bd02b7b0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000748656c6c6f212500000000000000000000000000000000000000000000000000',\n\t\toutputResult: {\n\t\t\t'0': '2345675643',\n\t\t\t'1': 'Hello!%',\n\t\t\t__length__: 2,\n\t\t},\n\t},\n\t{\n\t\tinput: [\n\t\t\t['uint8[]', 'bytes32'],\n\t\t\t[['34', '255'], '0x324567fff0000000000000000000000000000000000000000000000000000000'],\n\t\t],\n\t\toutput: '0x0000000000000000000000000000000000000000000000000000000000000040324567fff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000ff',\n\t\toutputResult: {\n\t\t\t'0': ['34', '255'],\n\t\t\t'1': '0x324567fff0000000000000000000000000000000000000000000000000000000',\n\t\t\t__length__: 2,\n\t\t},\n\t},\n\t{\n\t\tinput: [\n\t\t\t[\n\t\t\t\t'uint8[]',\n\t\t\t\t{\n\t\t\t\t\tParentStruct: {\n\t\t\t\t\t\tpropertyOne: 'uint256',\n\t\t\t\t\t\tpropertyTwo: 'uint256',\n\t\t\t\t\t\tChildStruct: {\n\t\t\t\t\t\t\tpropertyOne: 'uint256',\n\t\t\t\t\t\t\tpropertyTwo: 'uint256',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\t[\n\t\t\t\t['34', '255'],\n\t\t\t\t{\n\t\t\t\t\tpropertyOne: '42',\n\t\t\t\t\tpropertyTwo: '56',\n\t\t\t\t\tChildStruct: {\n\t\t\t\t\t\tpropertyOne: '45',\n\t\t\t\t\t\tpropertyTwo: '78',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t],\n\t\toutput: '0x00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000038000000000000000000000000000000000000000000000000000000000000002d000000000000000000000000000000000000000000000000000000000000004e0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000ff',\n\t\toutputResult: {\n\t\t\t'0': ['34', '255'],\n\t\t\t'1': {\n\t\t\t\t'0': '42',\n\t\t\t\t'1': '56',\n\t\t\t\t'2': {\n\t\t\t\t\t'0': '45',\n\t\t\t\t\t'1': '78',\n\t\t\t\t\tpropertyOne: '45',\n\t\t\t\t\tpropertyTwo: '78',\n\t\t\t\t\t__length__: 2,\n\t\t\t\t},\n\t\t\t\tpropertyOne: '42',\n\t\t\t\tpropertyTwo: '56',\n\t\t\t\tChildStruct: {\n\t\t\t\t\t'0': '45',\n\t\t\t\t\t'1': '78',\n\t\t\t\t\tpropertyOne: '45',\n\t\t\t\t\tpropertyTwo: '78',\n\t\t\t\t\t__length__: 2,\n\t\t\t\t},\n\t\t\t\t__length__: 3,\n\t\t\t},\n\t\t\tParentStruct: {\n\t\t\t\t'0': '42',\n\t\t\t\t'1': '56',\n\t\t\t\t'2': {\n\t\t\t\t\t'0': '45',\n\t\t\t\t\t'1': '78',\n\t\t\t\t\tpropertyOne: '45',\n\t\t\t\t\tpropertyTwo: '78',\n\t\t\t\t\t__length__: 2,\n\t\t\t\t},\n\t\t\t\tpropertyOne: '42',\n\t\t\t\tpropertyTwo: '56',\n\t\t\t\tChildStruct: {\n\t\t\t\t\t'0': '45',\n\t\t\t\t\t'1': '78',\n\t\t\t\t\tpropertyOne: '45',\n\t\t\t\t\tpropertyTwo: '78',\n\t\t\t\t\t__length__: 2,\n\t\t\t\t},\n\t\t\t\t__length__: 3,\n\t\t\t},\n\t\t\t__length__: 2,\n\t\t},\n\t},\n];\n\nexport const validEncodeDoesNotMutateData: {\n\texpectedInput: unknown[];\n\tinput: Parameters<typeof encodeParameters>;\n\toutput: ReturnType<typeof encodeParameters>;\n}[] = [\n\t{\n\t\texpectedInput: [\n\t\t\t['34', '255'],\n\t\t\t{\n\t\t\t\tpropertyOne: ['78', '124'],\n\t\t\t\tpropertyTwo: '56',\n\t\t\t\tChildStruct: {\n\t\t\t\t\tpropertyOne: ['16'],\n\t\t\t\t\tpropertyTwo: '78',\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\n\t\tinput: [\n\t\t\t[\n\t\t\t\t'uint8[]',\n\t\t\t\t{\n\t\t\t\t\tParentStruct: {\n\t\t\t\t\t\tpropertyOne: 'uint8[]',\n\t\t\t\t\t\tpropertyTwo: 'uint256',\n\t\t\t\t\t\tChildStruct: {\n\t\t\t\t\t\t\tpropertyOne: 'uint8[]',\n\t\t\t\t\t\t\tpropertyTwo: 'uint256',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\t[\n\t\t\t\t['34', '255'],\n\t\t\t\t{\n\t\t\t\t\tpropertyOne: ['78', '124'],\n\t\t\t\t\tpropertyTwo: '56',\n\t\t\t\t\tChildStruct: {\n\t\t\t\t\t\tpropertyOne: ['16'],\n\t\t\t\t\t\tpropertyTwo: '78',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t],\n\t\toutput: '0x000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000ff0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000003800000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004e000000000000000000000000000000000000000000000000000000000000007c0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000004e00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000010',\n\t},\n];\n\nexport const validEncodeParametersData: {\n\tinput: Parameters<typeof encodeParameters>;\n\toutput: ReturnType<typeof encodeParameters>;\n}[] = [\n\t{\n\t\tinput: [\n\t\t\t['uint256', 'string'],\n\t\t\t['2345675643', 'Hello!%'],\n\t\t],\n\t\toutput: '0x000000000000000000000000000000000000000000000000000000008bd02b7b0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000748656c6c6f212500000000000000000000000000000000000000000000000000',\n\t},\n\t{\n\t\tinput: [\n\t\t\t['uint8[]', 'bytes32'],\n\t\t\t[['34', '255'], '0x324567fff'],\n\t\t],\n\t\toutput: '0x0000000000000000000000000000000000000000000000000000000000000040324567fff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000ff',\n\t},\n\t{\n\t\tinput: [\n\t\t\t[\n\t\t\t\t'uint8[]',\n\t\t\t\t{\n\t\t\t\t\tParentStruct: {\n\t\t\t\t\t\tpropertyOne: 'uint256',\n\t\t\t\t\t\tpropertyTwo: 'uint256',\n\t\t\t\t\t\tChildStruct: {\n\t\t\t\t\t\t\tpropertyOne: 'uint256',\n\t\t\t\t\t\t\tpropertyTwo: 'uint256',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\t[\n\t\t\t\t['34', '255'],\n\t\t\t\t{\n\t\t\t\t\tpropertyOne: '42',\n\t\t\t\t\tpropertyTwo: '56',\n\t\t\t\t\tChildStruct: {\n\t\t\t\t\t\tpropertyOne: '45',\n\t\t\t\t\t\tpropertyTwo: '78',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t],\n\t\toutput: '0x00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000038000000000000000000000000000000000000000000000000000000000000002d000000000000000000000000000000000000000000000000000000000000004e0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000ff',\n\t},\n\t{\n\t\tinput: [\n\t\t\t['uint', 'tuple(uint256, string)'],\n\t\t\t[1234, [5678, 'Hello World']],\n\t\t],\n\t\toutput: '0x00000000000000000000000000000000000000000000000000000000000004d20000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000162e0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000b48656c6c6f20576f726c64000000000000000000000000000000000000000000',\n\t},\n];\n\nexport const inValidEncodeParametersData: {\n\tinput: any[];\n\toutput: string;\n}[] = [\n\t{\n\t\tinput: [\n\t\t\t['uint8[]', 'bytes32'],\n\t\t\t[['34', '256'], '0x324567fff'],\n\t\t],\n\t\toutput: 'Parameter encoding error',\n\t},\n\t{\n\t\tinput: [345, ['2345675643', 'Hello!%']],\n\t\toutput: 'Parameter encoding error',\n\t},\n\t{\n\t\tinput: [true, ['2345675643', 'Hello!%']],\n\t\toutput: 'Parameter encoding error',\n\t},\n\t{\n\t\tinput: [undefined, ['2345675643', 'Hello!%']],\n\t\toutput: 'Parameter encoding error',\n\t},\n\t{\n\t\t// Using \"null\" value intentionally for validation\n\t\t// eslint-disable-next-line no-null/no-null\n\t\tinput: [null, ['2345675643', 'Hello!%']],\n\t\toutput: 'Parameter encoding error',\n\t},\n];\n\nexport const validDecodeParametersData: {\n\tinput: Parameters<typeof decodeParameters>;\n\toutputResult: any;\n}[] = [\n\t{\n\t\tinput: [\n\t\t\t['uint256', 'string'],\n\t\t\t'0x000000000000000000000000000000000000000000000000000000008bd02b7b0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000748656c6c6f212500000000000000000000000000000000000000000000000000',\n\t\t],\n\t\toutputResult: {\n\t\t\t'0': '2345675643',\n\t\t\t'1': 'Hello!%',\n\t\t\t__length__: 2,\n\t\t},\n\t},\n\t{\n\t\tinput: [\n\t\t\t['uint8[]', 'bytes32'],\n\t\t\t'0x0000000000000000000000000000000000000000000000000000000000000040324567fff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000ff',\n\t\t],\n\t\toutputResult: {\n\t\t\t'0': ['34', '255'],\n\t\t\t'1': '0x324567fff0000000000000000000000000000000000000000000000000000000',\n\t\t\t__length__: 2,\n\t\t},\n\t},\n\t{\n\t\tinput: [\n\t\t\t[\n\t\t\t\t'uint8[]',\n\t\t\t\t{\n\t\t\t\t\tParentStruct: {\n\t\t\t\t\t\tpropertyOne: 'uint256',\n\t\t\t\t\t\tpropertyTwo: 'uint256',\n\t\t\t\t\t\tChildStruct: {\n\t\t\t\t\t\t\tpropertyOne: 'uint256',\n\t\t\t\t\t\t\tpropertyTwo: 'uint256',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\t'0x00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000038000000000000000000000000000000000000000000000000000000000000002d000000000000000000000000000000000000000000000000000000000000004e0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000ff',\n\t\t],\n\t\toutputResult: {\n\t\t\t'0': ['34', '255'],\n\t\t\t'1': {\n\t\t\t\t'0': '42',\n\t\t\t\t'1': '56',\n\t\t\t\t'2': {\n\t\t\t\t\t'0': '45',\n\t\t\t\t\t'1': '78',\n\t\t\t\t\tpropertyOne: '45',\n\t\t\t\t\tpropertyTwo: '78',\n\t\t\t\t\t__length__: 2,\n\t\t\t\t},\n\t\t\t\tpropertyOne: '42',\n\t\t\t\tpropertyTwo: '56',\n\t\t\t\tChildStruct: {\n\t\t\t\t\t'0': '45',\n\t\t\t\t\t'1': '78',\n\t\t\t\t\tpropertyOne: '45',\n\t\t\t\t\tpropertyTwo: '78',\n\t\t\t\t\t__length__: 2,\n\t\t\t\t},\n\t\t\t\t__length__: 3,\n\t\t\t},\n\t\t\tParentStruct: {\n\t\t\t\t'0': '42',\n\t\t\t\t'1': '56',\n\t\t\t\t'2': {\n\t\t\t\t\t'0': '45',\n\t\t\t\t\t'1': '78',\n\t\t\t\t\tpropertyOne: '45',\n\t\t\t\t\tpropertyTwo: '78',\n\t\t\t\t\t__length__: 2,\n\t\t\t\t},\n\t\t\t\tpropertyOne: '42',\n\t\t\t\tpropertyTwo: '56',\n\t\t\t\tChildStruct: {\n\t\t\t\t\t'0': '45',\n\t\t\t\t\t'1': '78',\n\t\t\t\t\tpropertyOne: '45',\n\t\t\t\t\tpropertyTwo: '78',\n\t\t\t\t\t__length__: 2,\n\t\t\t\t},\n\t\t\t\t__length__: 3,\n\t\t\t},\n\t\t\t__length__: 2,\n\t\t},\n\t},\n\t{\n\t\tinput: [\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\tcomponents: [\n\t\t\t\t\t\t{ internalType: 'string', name: 'name', type: 'string' },\n\t\t\t\t\t\t{ internalType: 'address', name: 'addr', type: 'address' },\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcomponents: [\n\t\t\t\t\t\t\t\t{ internalType: 'string', name: 'email', type: 'string' },\n\t\t\t\t\t\t\t\t{ internalType: 'string', name: 'phone', type: 'string' },\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\tinternalType: 'struct ABIV2UserDirectory.Contact',\n\t\t\t\t\t\t\tname: 'contact',\n\t\t\t\t\t\t\ttype: 'tuple',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tindexed: false,\n\t\t\t\t\tinternalType: 'struct ABIV2UserDirectory.User',\n\t\t\t\t\tname: 'user',\n\t\t\t\t\ttype: 'tuple',\n\t\t\t\t},\n\t\t\t],\n\t\t\t'0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000060000000000000000000000000cb00cde33a7a0fba30c63745534f1f7ae607076b00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000c5269636b2053616e6368657a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000157269636b2e63313337406369746164656c2e636663000000000000000000000000000000000000000000000000000000000000000000000000000000000000112b31202835353529203331342d31353933000000000000000000000000000000',\n\t\t],\n\t\toutputResult: {\n\t\t\t'0': {\n\t\t\t\t'0': 'Rick Sanchez',\n\t\t\t\t'1': '0xCB00CDE33a7a0Fba30C63745534F1f7Ae607076b',\n\t\t\t\t'2': {\n\t\t\t\t\t'0': 'rick.c137@citadel.cfc',\n\t\t\t\t\t'1': '+1 (555) 314-1593',\n\t\t\t\t\t__length__: 2,\n\t\t\t\t\temail: 'rick.c137@citadel.cfc',\n\t\t\t\t\tphone: '+1 (555) 314-1593',\n\t\t\t\t},\n\t\t\t\t__length__: 3,\n\t\t\t\taddr: '0xCB00CDE33a7a0Fba30C63745534F1f7Ae607076b',\n\t\t\t\tcontact: {\n\t\t\t\t\t'0': 'rick.c137@citadel.cfc',\n\t\t\t\t\t'1': '+1 (555) 314-1593',\n\t\t\t\t\t__length__: 2,\n\t\t\t\t\temail: 'rick.c137@citadel.cfc',\n\t\t\t\t\tphone: '+1 (555) 314-1593',\n\t\t\t\t},\n\t\t\t\tname: 'Rick Sanchez',\n\t\t\t},\n\t\t\t__length__: 1,\n\t\t\tuser: {\n\t\t\t\t'0': 'Rick Sanchez',\n\t\t\t\t'1': '0xCB00CDE33a7a0Fba30C63745534F1f7Ae607076b',\n\t\t\t\t'2': {\n\t\t\t\t\t'0': 'rick.c137@citadel.cfc',\n\t\t\t\t\t'1': '+1 (555) 314-1593',\n\t\t\t\t\t__length__: 2,\n\t\t\t\t\temail: 'rick.c137@citadel.cfc',\n\t\t\t\t\tphone: '+1 (555) 314-1593',\n\t\t\t\t},\n\t\t\t\t__length__: 3,\n\t\t\t\taddr: '0xCB00CDE33a7a0Fba30C63745534F1f7Ae607076b',\n\t\t\t\tcontact: {\n\t\t\t\t\t'0': 'rick.c137@citadel.cfc',\n\t\t\t\t\t'1': '+1 (555) 314-1593',\n\t\t\t\t\t__length__: 2,\n\t\t\t\t\temail: 'rick.c137@citadel.cfc',\n\t\t\t\t\tphone: '+1 (555) 314-1593',\n\t\t\t\t},\n\t\t\t\tname: 'Rick Sanchez',\n\t\t\t},\n\t\t},\n\t},\n];\n\nexport const inValidDecodeParametersData: {\n\tinput: any[];\n\toutput: string;\n}[] = [\n\t{\n\t\tinput: [['uint8[]', 'bytes32'], '0x000000000010'],\n\t\toutput: 'Parameter decoding error',\n\t},\n\t{\n\t\tinput: [345, '0x000000000010'],\n\t\toutput: 'Parameter decoding error',\n\t},\n\t{\n\t\tinput: [true, '0x000000000010'],\n\t\toutput: 'Parameter decoding error',\n\t},\n\t{\n\t\tinput: [undefined, '0x000000000010'],\n\t\toutput: 'Parameter decoding error',\n\t},\n\t{\n\t\t// Using \"null\" value intentionally for validation\n\t\t// eslint-disable-next-line no-null/no-null\n\t\tinput: [null, '0x000000000010'],\n\t\toutput: 'Parameter decoding error',\n\t},\n];\n\nexport const validDecodeContractErrorData: {\n\tinput: any[];\n\toutput: any;\n}[] = [\n\t{\n\t\tinput: [\n\t\t\t[\n\t\t\t\t{ inputs: [], name: 'ErrorWithNoParams', type: 'error' },\n\t\t\t\t{\n\t\t\t\t\tinputs: [\n\t\t\t\t\t\t{ name: 'code', type: 'uint256' },\n\t\t\t\t\t\t{ name: 'message', type: 'string' },\n\t\t\t\t\t],\n\t\t\t\t\tname: 'ErrorWithParams',\n\t\t\t\t\ttype: 'error',\n\t\t\t\t},\n\t\t\t],\n\t\t\t{\n\t\t\t\tcode: 12,\n\t\t\t\tmessage: 'message',\n\t\t\t\tdata: '0xc85bda60000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000001c5468697320697320616e206572726f72207769746820706172616d7300000000',\n\t\t\t},\n\t\t],\n\t\toutput: {\n\t\t\terrorName: 'ErrorWithParams',\n\t\t\terrorSignature: 'ErrorWithParams(uint256,string)',\n\t\t\terrorArgs: {\n\t\t\t\tcode: 42,\n\t\t\t\tmessage: 'This is an error with params',\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tinput: [\n\t\t\t[\n\t\t\t\t{ inputs: [], name: 'ErrorWithNoParams', type: 'error' },\n\t\t\t\t{\n\t\t\t\t\tinputs: [\n\t\t\t\t\t\t{ name: 'code', type: 'uint256' },\n\t\t\t\t\t\t{ name: 'message', type: 'string' },\n\t\t\t\t\t],\n\t\t\t\t\tname: 'ErrorWithParams',\n\t\t\t\t\ttype: 'error',\n\t\t\t\t},\n\t\t\t],\n\t\t\t{\n\t\t\t\tcode: 12,\n\t\t\t\tmessage: 'message',\n\t\t\t\tdata: {\n\t\t\t\t\tcode: -32000,\n\t\t\t\t\tdata: '0xc85bda60000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000001c5468697320697320616e206572726f72207769746820706172616d7300000000',\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t\toutput: {\n\t\t\terrorName: 'ErrorWithParams',\n\t\t\terrorSignature: 'ErrorWithParams(uint256,string)',\n\t\t\terrorArgs: {\n\t\t\t\tcode: 42,\n\t\t\t\tmessage: 'This is an error with params',\n\t\t\t},\n\t\t\tcause: {\n\t\t\t\tcode: -32000,\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tinput: [\n\t\t\t[\n\t\t\t\t{ inputs: [], name: 'ErrorWithNoParams', type: 'error' },\n\t\t\t\t{\n\t\t\t\t\tinputs: [\n\t\t\t\t\t\t{ name: 'code', type: 'uint256' },\n\t\t\t\t\t\t{ name: 'message', type: 'string' },\n\t\t\t\t\t],\n\t\t\t\t\tname: 'ErrorWithParams',\n\t\t\t\t\ttype: 'error',\n\t\t\t\t},\n\t\t\t],\n\t\t\t{\n\t\t\t\tcode: 12,\n\t\t\t\tmessage: 'message',\n\t\t\t\tdata: {\n\t\t\t\t\toriginalError: {\n\t\t\t\t\t\tcode: 3,\n\t\t\t\t\t\tdata: '0xc85bda60000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000001c5468697320697320616e206572726f72207769746820706172616d7300000000',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t\toutput: {\n\t\t\terrorName: 'ErrorWithParams',\n\t\t\terrorSignature: 'ErrorWithParams(uint256,string)',\n\t\t\terrorArgs: {\n\t\t\t\tcode: 42,\n\t\t\t\tmessage: 'This is an error with params',\n\t\t\t},\n\t\t\tcause: {\n\t\t\t\tcode: 3,\n\t\t\t},\n\t\t},\n\t},\n];\n\nexport const invalidDecodeContractErrorData: {\n\tinput: any[];\n}[] = [\n\t{\n\t\tinput: [\n\t\t\t[\n\t\t\t\t{ inputs: [], name: 'ErrorWithNoParams', type: 'error' },\n\t\t\t\t{\n\t\t\t\t\tinputs: [\n\t\t\t\t\t\t{ name: 'code', type: 'uint256' },\n\t\t\t\t\t\t{ name: 'message', type: 'string' },\n\t\t\t\t\t],\n\t\t\t\t\tname: 'ErrorWithParams',\n\t\t\t\t\ttype: 'error',\n\t\t\t\t},\n\t\t\t],\n\t\t\t{\n\t\t\t\tcode: 12,\n\t\t\t\tmessage: 'message',\n\t\t\t\tdata: '0xc85bda60000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000123450000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c5468697320697320616e206572726f72207769746820706172616d7300000000',\n\t\t\t},\n\t\t],\n\t},\n];\n\nexport const validIsAbiConstructorFragment: {\n\tinput: any;\n}[] = [\n\t{\n\t\tinput: { inputs: [], stateMutability: 'nonpayable', type: 'constructor' },\n\t},\n];\nexport const invalidIsAbiConstructorFragment: {\n\tinput: any;\n}[] = [\n\t{\n\t\tinput: { inputs: [], stateMutability: 'nonpayable', type: 'function' },\n\t},\n];\n\nexport const mapTypesValidData: [any, any][] = [\n\t[\n\t\t['string', 'uint256'],\n\t\t['string', 'uint256'],\n\t],\n\t[\n\t\t[\n\t\t\t{ type: 'string', name: 'test' },\n\t\t\t{ type: 'uint256', name: 'test' },\n\t\t],\n\t\t[\n\t\t\t{ type: 'string', name: 'test' },\n\t\t\t{ type: 'uint256', name: 'test' },\n\t\t],\n\t],\n\t[\n\t\t[\n\t\t\t{ type: 'function', name: 'test' },\n\t\t\t{ type: 'uint256', name: 'test' },\n\t\t],\n\t\t[\n\t\t\t{ type: 'bytes24', name: 'test' },\n\t\t\t{ type: 'uint256', name: 'test' },\n\t\t],\n\t],\n\t[\n\t\t[{ name1: ['string'] }],\n\t\t[{ components: [{ name: '0', type: 'string' }], name: 'name1', type: 'tuple' }],\n\t],\n];\n\nexport const formatParamValidData: [[string, any], any][] = [\n\t[['string', { name: 'test' }], { name: 'test' }],\n\t[['string', [{ name: 'test' }]], [{ name: 'test' }]],\n\t[['string', BigInt(1)], '1'],\n\t[['int', 123], 123],\n\t[['bytes', '0x99d42941'], '0x99d42941'],\n\t[\n\t\t['int', '0x1234567890123456789012345678901234567890'],\n\t\t'0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001234567890123456789012345678901234567890',\n\t],\n\t[\n\t\t['bytes256[]', ['0x99d42941']],\n\t\t[\n\t\t\t'0x99d42941000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n\t\t],\n\t],\n];\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/fixtures/get_encoded_eip712_data.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/unit/api/errors_api.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/unit/api/events_api.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/unit/api/functions_api.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/unit/api/logs_api.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/unit/api/parameters_api.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/unit/coders/base/address.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/unit/coders/base/array.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/unit/coders/base/bool.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/unit/coders/base/bytes.test.ts",[],["326","327"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/unit/coders/base/invalid.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/unit/coders/base/number.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/unit/coders/base/string.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/unit/coders/base/tuple.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/unit/constructor.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/unit/decodeContractErrorData.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/unit/encodeDecodeParams.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/unit/get_encoded_eip712_data.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/unit/test_utils.ts",[],["328","329","330","331"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/unit/types.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-abi/test/unit/utils.test.ts",[],[],{"ruleId":"332","severity":2,"message":"333","line":21,"column":1,"nodeType":"334","endLine":21,"endColumn":101,"suppressions":"335"},{"ruleId":"336","severity":2,"message":"337","line":70,"column":21,"nodeType":"338","messageId":"339","endLine":70,"endColumn":35,"suppressions":"340"},{"ruleId":"341","severity":2,"message":"342","line":31,"column":3,"nodeType":"338","messageId":"343","endLine":31,"endColumn":8,"suppressions":"344"},{"ruleId":"332","severity":2,"message":"333","line":27,"column":1,"nodeType":"334","endLine":27,"endColumn":55,"suppressions":"345"},{"ruleId":"332","severity":2,"message":"333","line":29,"column":1,"nodeType":"334","endLine":29,"endColumn":55,"suppressions":"346"},{"ruleId":"332","severity":2,"message":"333","line":37,"column":1,"nodeType":"347","endLine":37,"endColumn":55,"suppressions":"348"},{"ruleId":"332","severity":2,"message":"333","line":39,"column":1,"nodeType":"347","endLine":39,"endColumn":55,"suppressions":"349"},{"ruleId":"350","severity":2,"message":"351","line":27,"column":14,"nodeType":"352","messageId":"353","endLine":27,"endColumn":38,"suppressions":"354"},{"ruleId":"355","severity":1,"message":"356","line":37,"column":25,"nodeType":"357","messageId":"358","endLine":37,"endColumn":52,"suppressions":"359"},{"ruleId":"355","severity":1,"message":"356","line":39,"column":26,"nodeType":"357","messageId":"358","endLine":39,"endColumn":54,"suppressions":"360"},{"ruleId":"332","severity":2,"message":"333","line":22,"column":1,"nodeType":"334","endLine":22,"endColumn":87,"suppressions":"361"},{"ruleId":"355","severity":1,"message":"356","line":39,"column":26,"nodeType":"357","messageId":"358","endLine":39,"endColumn":43,"suggestions":"362","suppressions":"363"},{"ruleId":"364","severity":2,"message":"365","line":52,"column":51,"nodeType":"366","endLine":52,"endColumn":55,"suppressions":"367"},{"ruleId":"368","severity":1,"message":"369","line":26,"column":2,"nodeType":"338","messageId":"370","endLine":26,"endColumn":17},{"ruleId":"371","severity":1,"message":"372","line":31,"column":4,"nodeType":null,"messageId":"373","endLine":31,"endColumn":5},{"ruleId":"371","severity":1,"message":"374","line":31,"column":7,"nodeType":null,"messageId":"375","endLine":31,"endColumn":8},{"ruleId":"371","severity":1,"message":"376","line":31,"column":24,"nodeType":null,"messageId":"377","endLine":31,"endColumn":25},{"ruleId":"371","severity":1,"message":"374","line":31,"column":27,"nodeType":null,"messageId":"375","endLine":31,"endColumn":28},{"ruleId":"371","severity":1,"message":"376","line":31,"column":45,"nodeType":null,"messageId":"377","endLine":31,"endColumn":46},{"ruleId":"371","severity":1,"message":"374","line":31,"column":48,"nodeType":null,"messageId":"375","endLine":31,"endColumn":49},{"ruleId":"371","severity":1,"message":"376","line":31,"column":65,"nodeType":null,"messageId":"377","endLine":31,"endColumn":66},{"ruleId":"371","severity":1,"message":"374","line":31,"column":68,"nodeType":null,"messageId":"375","endLine":31,"endColumn":69},{"ruleId":"371","severity":1,"message":"376","line":31,"column":84,"nodeType":null,"messageId":"377","endLine":31,"endColumn":85},{"ruleId":"371","severity":1,"message":"378","line":32,"column":4,"nodeType":null,"messageId":"379","endLine":32,"endColumn":7},{"ruleId":"380","severity":1,"message":"381","line":47,"column":36,"nodeType":"382","messageId":"383","endLine":47,"endColumn":39,"suggestions":"384"},{"ruleId":"385","severity":2,"message":"386","line":47,"column":27,"nodeType":"387","messageId":"388","endLine":47,"endColumn":39,"suppressions":"389"},{"ruleId":"371","severity":1,"message":"390","line":117,"column":4,"nodeType":null,"messageId":"391","endLine":117,"endColumn":10},{"ruleId":"392","severity":2,"message":"393","line":104,"column":7,"nodeType":"338","messageId":"394","endLine":104,"endColumn":12,"suppressions":"395"},{"ruleId":"355","severity":1,"message":"356","line":83,"column":16,"nodeType":"357","messageId":"358","endLine":83,"endColumn":39},{"ruleId":"371","severity":1,"message":"390","line":110,"column":4,"nodeType":null,"messageId":"391","endLine":110,"endColumn":10},{"ruleId":"371","severity":1,"message":"396","line":110,"column":11,"nodeType":null,"messageId":"397","endLine":110,"endColumn":22},{"ruleId":"371","severity":1,"message":"390","line":111,"column":4,"nodeType":null,"messageId":"391","endLine":111,"endColumn":10},{"ruleId":"371","severity":1,"message":"396","line":111,"column":11,"nodeType":null,"messageId":"397","endLine":111,"endColumn":19},{"ruleId":"371","severity":1,"message":"390","line":112,"column":4,"nodeType":null,"messageId":"391","endLine":112,"endColumn":10},{"ruleId":"371","severity":1,"message":"396","line":112,"column":11,"nodeType":null,"messageId":"397","endLine":112,"endColumn":20},{"ruleId":"371","severity":1,"message":"398","line":112,"column":21,"nodeType":null,"messageId":"399","endLine":112,"endColumn":30},{"ruleId":"371","severity":1,"message":"400","line":113,"column":4,"nodeType":null,"messageId":"401","endLine":113,"endColumn":11},{"ruleId":"371","severity":1,"message":"374","line":113,"column":12,"nodeType":null,"messageId":"375","endLine":113,"endColumn":13},{"ruleId":"371","severity":1,"message":"376","line":113,"column":19,"nodeType":null,"messageId":"377","endLine":113,"endColumn":20},{"ruleId":"371","severity":1,"message":"372","line":138,"column":58,"nodeType":null,"messageId":"373","endLine":138,"endColumn":59},{"ruleId":"371","severity":1,"message":"372","line":224,"column":72,"nodeType":null,"messageId":"373","endLine":224,"endColumn":73},{"ruleId":"402","severity":2,"message":"403","line":118,"column":29,"nodeType":"404","messageId":"405","endLine":118,"endColumn":48,"suppressions":"406"},{"ruleId":"407","severity":2,"message":"408","line":124,"column":22,"nodeType":"404","messageId":"409","endLine":126,"endColumn":6,"suppressions":"410"},{"ruleId":"411","severity":2,"message":"412","line":146,"column":24,"nodeType":"338","messageId":"413","endLine":146,"endColumn":34,"suppressions":"414"},{"ruleId":"415","severity":1,"message":"416","line":24,"column":36,"nodeType":"417","messageId":"418","endLine":24,"endColumn":45},{"ruleId":"419","severity":2,"message":"420","line":26,"column":2,"nodeType":"421","messageId":"422","endLine":26,"endColumn":25,"suppressions":"423"},{"ruleId":"424","severity":2,"message":"425","line":26,"column":9,"nodeType":"426","messageId":"427","endLine":26,"endColumn":22,"suppressions":"428"},{"ruleId":"364","severity":2,"message":"365","line":221,"column":11,"nodeType":"366","endLine":221,"endColumn":15,"suppressions":"429"},{"ruleId":"364","severity":2,"message":"365","line":287,"column":11,"nodeType":"366","endLine":287,"endColumn":15,"suppressions":"430"},{"ruleId":"364","severity":2,"message":"365","line":321,"column":11,"nodeType":"366","endLine":321,"endColumn":15,"suppressions":"431"},{"ruleId":"364","severity":2,"message":"365","line":350,"column":11,"nodeType":"366","endLine":350,"endColumn":15,"suppressions":"432"},{"ruleId":"364","severity":2,"message":"365","line":777,"column":11,"nodeType":"366","endLine":777,"endColumn":15,"suppressions":"433"},{"ruleId":"364","severity":2,"message":"365","line":968,"column":11,"nodeType":"366","endLine":968,"endColumn":15,"suppressions":"434"},{"ruleId":"435","severity":2,"message":"436","line":38,"column":6,"nodeType":"404","messageId":"437","endLine":38,"endColumn":40,"suppressions":"438"},{"ruleId":"435","severity":2,"message":"436","line":41,"column":6,"nodeType":"404","messageId":"437","endLine":41,"endColumn":41,"suppressions":"439"},{"ruleId":"440","severity":2,"message":"441","line":25,"column":3,"nodeType":"442","messageId":"443","endLine":32,"endColumn":4,"suppressions":"444"},{"ruleId":"341","severity":2,"message":"445","line":28,"column":12,"nodeType":"338","messageId":"446","endLine":28,"endColumn":15,"suppressions":"447"},{"ruleId":"341","severity":2,"message":"448","line":39,"column":3,"nodeType":"338","messageId":"343","endLine":39,"endColumn":7,"suppressions":"449"},{"ruleId":"341","severity":2,"message":"450","line":43,"column":3,"nodeType":"338","messageId":"343","endLine":43,"endColumn":7,"suppressions":"451"},"import/no-cycle","Dependency cycle detected.","ImportDeclaration",["452"],"prefer-const","'arrayItemParam' is never reassigned. Use 'const' instead.","Identifier","useConst",["453"],"no-param-reassign","Assignment to function parameter 'input'.","assignmentToFunctionParam",["454"],["455"],["456"],"ExportNamedDeclaration",["457"],["458"],"no-bitwise","Unexpected use of '<<'.","BinaryExpression","unexpected",["459"],"@typescript-eslint/no-non-null-assertion","Forbidden non-null assertion.","TSNonNullExpression","noNonNull",["460"],["461"],["462"],["463"],["464"],"no-null/no-null","Use undefined instead of null","Literal",["465"],"@typescript-eslint/no-unused-vars","'_loose' is defined but never used.","unusedVar","tsdoc/syntax","tsdoc-escape-greater-than: The \">\" character should be escaped using a backslash to avoid confusion with an HTML tag","tsdoc-escape-greater-than","tsdoc-malformed-inline-tag: Expecting a TSDoc tag starting with \"{@\"","tsdoc-malformed-inline-tag","tsdoc-escape-right-brace: The \"}\" character should be escaped using a backslash to avoid confusion with a TSDoc inline tag","tsdoc-escape-right-brace","tsdoc-code-fence-missing-delimiter: Error parsing code fence: Missing closing delimiter","tsdoc-code-fence-missing-delimiter","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["466","467"],"@typescript-eslint/no-unsafe-argument","Unsafe argument of type `any` assigned to a parameter of type `string | number | bigint | boolean | object | Uint8Array`.","TSAsExpression","unsafeArgument",["468"],"tsdoc-param-tag-missing-hyphen: The @param block should be followed by a parameter name and then a hyphen","tsdoc-param-tag-missing-hyphen","no-restricted-globals","Unexpected use of 'isNaN'. Use Number.isNaN instead https://github.com/airbnb/javascript#standard-library--isnan","customMessage",["469"],"tsdoc-param-tag-with-invalid-type: The @param block should not include a JSDoc-style '{type}'","tsdoc-param-tag-with-invalid-type","tsdoc-param-tag-with-invalid-optional-name: The @param should not include a JSDoc-style optional name; it must not be enclosed in '[ ]' brackets.","tsdoc-param-tag-with-invalid-optional-name","tsdoc-undefined-tag: The TSDoc tag \"@return\" is not defined in this configuration","tsdoc-undefined-tag","@typescript-eslint/require-array-sort-compare","Require 'compare' argument.","CallExpression","requireCompare",["470"],"@typescript-eslint/restrict-template-expressions","Invalid type \"string[]\" of template literal expression.","invalidType",["471"],"no-use-before-define","'encodeData' was used before it was defined.","usedBeforeDefined",["472"],"func-names","Unexpected unnamed function.","FunctionExpression","unnamed","@typescript-eslint/no-unsafe-return","Unsafe return of an `any` typed value.","ReturnStatement","unsafeReturn",["473"],"@typescript-eslint/no-unsafe-call","Unsafe call of an `any` typed value.","MemberExpression","unsafeCall",["474"],["475"],["476"],["477"],["478"],["479"],["480"],"jest/no-conditional-expect","Avoid calling `expect` conditionally`","conditionalExpect",["481"],["482"],"no-restricted-syntax","for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array.","ForInStatement","restrictedSyntax",["483"],"Assignment to property of function parameter 'obj'.","assignmentToFunctionParamProp",["484"],"Assignment to function parameter 'obj1'.",["485"],"Assignment to function parameter 'obj2'.",["486"],{"kind":"487","justification":"488"},{"kind":"487","justification":"488"},{"kind":"487","justification":"488"},{"kind":"487","justification":"488"},{"kind":"487","justification":"488"},{"kind":"487","justification":"488"},{"kind":"487","justification":"488"},{"kind":"487","justification":"488"},{"kind":"487","justification":"488"},{"kind":"487","justification":"488"},{"kind":"487","justification":"488"},{"messageId":"489","fix":"490","desc":"491"},{"kind":"487","justification":"488"},{"kind":"487","justification":"488"},{"messageId":"492","fix":"493","desc":"494"},{"messageId":"495","fix":"496","desc":"497"},{"kind":"487","justification":"488"},{"kind":"487","justification":"488"},{"kind":"487","justification":"488"},{"kind":"487","justification":"488"},{"kind":"487","justification":"488"},{"kind":"487","justification":"488"},{"kind":"487","justification":"488"},{"kind":"487","justification":"488"},{"kind":"487","justification":"488"},{"kind":"487","justification":"488"},{"kind":"487","justification":"488"},{"kind":"487","justification":"488"},{"kind":"487","justification":"488"},{"kind":"487","justification":"488"},{"kind":"487","justification":"488"},{"kind":"487","justification":"488"},{"kind":"487","justification":"488"},{"kind":"487","justification":"488"},{"kind":"487","justification":"488"},"directive","","suggestOptionalChain",{"range":"498","text":"499"},"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.","suggestUnknown",{"range":"500","text":"501"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"500","text":"502"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",[1660,1661],"?.",[1670,1673],"unknown","never"]