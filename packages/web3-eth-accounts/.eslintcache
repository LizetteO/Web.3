[{"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/src/account.ts":"1","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/src/common/common.ts":"2","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/src/common/enums.ts":"3","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/src/common/index.ts":"4","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/src/common/types.ts":"5","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/src/common/utils.ts":"6","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/src/index.ts":"7","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/src/schemas.ts":"8","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/src/tx/address.ts":"9","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/src/tx/baseTransaction.ts":"10","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/src/tx/constants.ts":"11","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/src/tx/eip1559Transaction.ts":"12","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/src/tx/eip2930Transaction.ts":"13","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/src/tx/index.ts":"14","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/src/tx/legacyTransaction.ts":"15","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/src/tx/transactionFactory.ts":"16","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/src/tx/types.ts":"17","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/src/tx/utils.ts":"18","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/src/types.ts":"19","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/src/wallet.ts":"20","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/test/fixtures/account.ts":"21","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/test/fixtures/system_test_utils.ts":"22","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/test/integration/account.test.ts":"23","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/test/integration/wallet.test.ts":"24","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/test/unit/account.test.ts":"25","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/test/unit/account_dom.test.ts":"26","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/test/unit/common/chains.test.ts":"27","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/test/unit/common/customChains.test.ts":"28","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/test/unit/common/eips.test.ts":"29","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/test/unit/common/hardforks.test.ts":"30","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/test/unit/common/mergePOS.test.ts":"31","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/test/unit/common/params.test.ts":"32","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/test/unit/common/timestamp.test.ts":"33","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/test/unit/common/utils.test.ts":"34","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/test/unit/tx/base.test.ts":"35","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/test/unit/tx/eip1559.test.ts":"36","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/test/unit/tx/eip3860.test.ts":"37","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/test/unit/tx/inputValue.test.ts":"38","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/test/unit/tx/legacy.test.ts":"39","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/test/unit/tx/registerNewTx.test.ts":"40","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/test/unit/tx/staticMethods.test.ts":"41","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/test/unit/tx/transactionFactory.test.ts":"42","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/test/unit/tx/typedTxsAndEIP2930.test.ts":"43","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/test/unit/tx/types.ts":"44","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/test/unit/wallet.test.ts":"45"},{"size":27901,"mtime":1713877871373,"results":"46","hashOfConfig":"47"},{"size":41056,"mtime":1713877871375,"results":"48","hashOfConfig":"47"},{"size":2708,"mtime":1697727353116,"results":"49","hashOfConfig":"47"},{"size":804,"mtime":1713877871376,"results":"50","hashOfConfig":"47"},{"size":5086,"mtime":1713877871377,"results":"51","hashOfConfig":"47"},{"size":19396,"mtime":1704729547055,"results":"52","hashOfConfig":"47"},{"size":1625,"mtime":1696346948847,"results":"53","hashOfConfig":"47"},{"size":1236,"mtime":1678154646099,"results":"54","hashOfConfig":"47"},{"size":2369,"mtime":1695995183846,"results":"55","hashOfConfig":"47"},{"size":18664,"mtime":1704729545388,"results":"56","hashOfConfig":"47"},{"size":1221,"mtime":1695995183846,"results":"57","hashOfConfig":"47"},{"size":13812,"mtime":1698102404696,"results":"58","hashOfConfig":"47"},{"size":12736,"mtime":1698102404696,"results":"59","hashOfConfig":"47"},{"size":1070,"mtime":1697120570598,"results":"60","hashOfConfig":"47"},{"size":13040,"mtime":1697118201184,"results":"61","hashOfConfig":"47"},{"size":5047,"mtime":1713877869085,"results":"62","hashOfConfig":"47"},{"size":7172,"mtime":1698102417193,"results":"63","hashOfConfig":"47"},{"size":5762,"mtime":1698102404698,"results":"64","hashOfConfig":"47"},{"size":3500,"mtime":1695995183847,"results":"65","hashOfConfig":"47"},{"size":14144,"mtime":1701873231374,"results":"66","hashOfConfig":"47"},{"size":15893,"mtime":1700492614533,"results":"67","hashOfConfig":"68"},{"size":15907,"mtime":1713826363670,"results":"69","hashOfConfig":"68"},{"size":6785,"mtime":1695995183850,"results":"70","hashOfConfig":"68"},{"size":8974,"mtime":1678154646100,"results":"71","hashOfConfig":"68"},{"size":7534,"mtime":1709767329252,"results":"72","hashOfConfig":"68"},{"size":8120,"mtime":1704729547056,"results":"73","hashOfConfig":"68"},{"size":4266,"mtime":1696346948851,"results":"74","hashOfConfig":"68"},{"size":5781,"mtime":1696346948851,"results":"75","hashOfConfig":"68"},{"size":2698,"mtime":1696346948851,"results":"76","hashOfConfig":"68"},{"size":13110,"mtime":1696346948852,"results":"77","hashOfConfig":"68"},{"size":10727,"mtime":1696346948852,"results":"78","hashOfConfig":"68"},{"size":3717,"mtime":1696346948852,"results":"79","hashOfConfig":"68"},{"size":4945,"mtime":1696346948852,"results":"80","hashOfConfig":"68"},{"size":5945,"mtime":1697146216573,"results":"81","hashOfConfig":"68"},{"size":11858,"mtime":1697145736451,"results":"82","hashOfConfig":"68"},{"size":7198,"mtime":1696346948853,"results":"83","hashOfConfig":"68"},{"size":3131,"mtime":1696346948853,"results":"84","hashOfConfig":"68"},{"size":8884,"mtime":1696346948853,"results":"85","hashOfConfig":"68"},{"size":17031,"mtime":1706734513681,"results":"86","hashOfConfig":"68"},{"size":1663,"mtime":1697127066200,"results":"87","hashOfConfig":"68"},{"size":930,"mtime":1697145811257,"results":"88","hashOfConfig":"68"},{"size":4358,"mtime":1697146159364,"results":"89","hashOfConfig":"68"},{"size":16500,"mtime":1696346948855,"results":"90","hashOfConfig":"68"},{"size":1764,"mtime":1695995183852,"results":"91","hashOfConfig":"68"},{"size":12000,"mtime":1678154646101,"results":"92","hashOfConfig":"68"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},"1nz2o21",{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":67,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":49,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113"},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123"},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127"},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134"},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138"},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145"},{"filePath":"146","messages":"147","suppressedMessages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155"},{"filePath":"156","messages":"157","suppressedMessages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","suppressedMessages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","suppressedMessages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"bfkhnz",{"filePath":"165","messages":"166","suppressedMessages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","suppressedMessages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","suppressedMessages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","suppressedMessages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177"},{"filePath":"178","messages":"179","suppressedMessages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181"},{"filePath":"182","messages":"183","suppressedMessages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185"},{"filePath":"186","messages":"187","suppressedMessages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189"},{"filePath":"190","messages":"191","suppressedMessages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193"},{"filePath":"194","messages":"195","suppressedMessages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197"},{"filePath":"198","messages":"199","suppressedMessages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201"},{"filePath":"202","messages":"203","suppressedMessages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"205","messages":"206","suppressedMessages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"208","messages":"209","suppressedMessages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211"},{"filePath":"212","messages":"213","suppressedMessages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215"},{"filePath":"216","messages":"217","suppressedMessages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"219","messages":"220","suppressedMessages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"222","messages":"223","suppressedMessages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225"},{"filePath":"226","messages":"227","suppressedMessages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229"},{"filePath":"230","messages":"231","suppressedMessages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"233","messages":"234","suppressedMessages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"236","messages":"237","suppressedMessages":"238","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"239","messages":"240","suppressedMessages":"241","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242"},{"filePath":"243","messages":"244","suppressedMessages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"246","messages":"247","suppressedMessages":"248","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/src/account.ts",["249"],["250","251"],"﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * The web3 accounts package contains functions to generate Ethereum accounts and sign transactions & data.\n * \n * For using accounts functions, first install Web3 package using `npm i web3` or `yarn add web3` based on your package manager usage.\n * After that, Accounts functions will be available as mentioned in following snippet. \n * ```ts\n * import {Web3} from 'web3';\n * \n * const web3 = new Web3();\n * const account = web3.eth.accounts.create();\n * const result = web3.eth.accounts.hashMessage(\"Test Message\");\n * \n * ```\n * \n * For using individual package install `web3-eth-accounts` package using `npm i web3-eth-accounts` or `yarn add web3-eth-accounts` and only import required functions.\n * This is more efficient approach for building lightweight applications. \n * ```ts\n * import {create,hashMessage} from 'web3-eth-accounts';\n * \n * const account = create();\n * const result = hashMessage(\"Test Message\");\n * \n * ```\n * @module Accounts\n * \n */\n\nimport {\n\tdecrypt as createDecipheriv,\n\tencrypt as createCipheriv,\n} from 'ethereum-cryptography/aes.js';\nimport { pbkdf2Sync } from 'ethereum-cryptography/pbkdf2.js';\nimport { scryptSync } from 'ethereum-cryptography/scrypt.js';\nimport {\n\tInvalidKdfError,\n\tInvalidPasswordError,\n\tInvalidPrivateKeyError,\n\tInvalidSignatureError,\n\tIVLengthError,\n\tKeyDerivationError,\n\tKeyStoreVersionError,\n\tPBKDF2IterationsError,\n\tPrivateKeyLengthError,\n\tTransactionSigningError,\n\tUndefinedRawTransactionError,\n} from 'web3-errors';\nimport {\n\tAddress,\n\tBytes,\n\tCipherOptions,\n\tHexString,\n\tKeyStore,\n\tPBKDF2SHA256Params,\n\tScryptParams,\n\tTransaction,\n} from 'web3-types';\nimport {\n\tbytesToUint8Array,\n\tbytesToHex,\n\tfromUtf8,\n\thexToBytes,\n\tisUint8Array,\n\tnumberToHex,\n\trandomBytes,\n\tsha3Raw,\n\ttoChecksumAddress,\n\tuint8ArrayConcat,\n\tutf8ToHex,\n\tuuidV4,\n} from 'web3-utils';\n\nimport { isHexStrict, isNullish, isString, validator } from 'web3-validator';\nimport { secp256k1 } from './tx/constants.js';\nimport { keyStoreSchema } from './schemas.js';\nimport { TransactionFactory } from './tx/transactionFactory.js';\nimport type {\n\tSignatureObject,\n\tSignTransactionResult,\n\tTypedTransaction,\n\tWeb3Account,\n\tSignResult,\n} from './types.js';\n\n\n/**\n * Get the private key Uint8Array after the validation.\n * Note: This function is not exported through main web3 package, so for using it directly import from accounts package. \n * @param data - Private key\n * @param ignoreLength - Optional, ignore length check during validation \n * @returns The Uint8Array private key\n *\n * ```ts\n * parseAndValidatePrivateKey(\"0x08c673022000ece7964ea4db2d9369c50442b2869cbd8fc21baaca59e18f642c\")\n * \n * > Uint8Array(32) [\n * 186,  26, 143, 168, 235, 179,  90,  75,\n * 101,  63,  84, 221, 152, 150,  30, 203,\n *   8, 113,  94, 226,  53, 213, 216,   5,\n * 194, 159,  17,  53, 219,  97, 121, 248\n * ]\n * \n * ```\n */\nexport const parseAndValidatePrivateKey = (data: Bytes, ignoreLength?: boolean): Uint8Array => {\n\tlet privateKeyUint8Array: Uint8Array;\n\n\t// To avoid the case of 1 character less in a hex string which is prefixed with '0' by using 'bytesToUint8Array'\n\tif (!ignoreLength && typeof data === 'string' && isHexStrict(data) && data.length !== 66) {\n\t\tthrow new PrivateKeyLengthError();\n\t}\n\n\ttry {\n\t\tprivateKeyUint8Array = isUint8Array(data) ? (data ) : bytesToUint8Array(data);\n\t} catch {\n\t\tthrow new InvalidPrivateKeyError();\n\t}\n\n\tif (!ignoreLength && privateKeyUint8Array.byteLength !== 32) {\n\t\tthrow new PrivateKeyLengthError();\n\t}\n\n\treturn privateKeyUint8Array;\n};\n\n/**\n *\n * Hashes the given message. The data will be `UTF-8 HEX` decoded and enveloped as follows:\n * `\"\\x19Ethereum Signed Message:\\n\" + message.length + message` and hashed using keccak256.\n *\n * @param message - A message to hash, if its HEX it will be UTF8 decoded.\n * @returns The hashed message\n *\n * ```ts\n * web3.eth.accounts.hashMessage(\"Hello world\")\n * \n * > \"0x8144a6fa26be252b86456491fbcd43c1de7e022241845ffea1c3df066f7cfede\"\n * \n * web3.eth.accounts.hashMessage(web3.utils.utf8ToHex(\"Hello world\")) // Will be hex decoded in hashMessage\n * \n * > \"0x8144a6fa26be252b86456491fbcd43c1de7e022241845ffea1c3df066f7cfede\"\n * ```\n */\nexport const hashMessage = (message: string): string => {\n\tconst messageHex = isHexStrict(message) ? message : utf8ToHex(message);\n\n\tconst messageBytes = hexToBytes(messageHex);\n\n\tconst preamble = hexToBytes(\n\t\tfromUtf8(`\\x19Ethereum Signed Message:\\n${messageBytes.byteLength}`),\n\t);\n\n\tconst ethMessage = uint8ArrayConcat(preamble, messageBytes);\n\n\treturn sha3Raw(ethMessage); // using keccak in web3-utils.sha3Raw instead of SHA3 (NIST Standard) as both are different\n};\n\n/**\n * Signs arbitrary data with a given private key.\n * :::info\n * The value passed as the data parameter will be UTF-8 HEX decoded and wrapped as follows: \"\\\\x19Ethereum Signed Message:\\\\n\" + message.length + message\n * :::\n\n * @param data - The data to sign\n * @param privateKey - The 32 byte private key to sign with\n * @returns The signature Object containing the message, messageHash, signature r, s, v\n *\n * ```ts\n * web3.eth.accounts.sign('Some data', '0x4c0883a69102937d6231471b5dbb6204fe5129617082792ae468d01a3f362318')\n * > {\n * message: 'Some data',\n * messageHash: '0x1da44b586eb0729ff70a73c326926f6ed5a25f5b056e7f47fbc6e58d86871655',\n * v: '0x1c',\n * r: '0xb91467e570a6466aa9e9876cbcd013baba02900b8979d43fe208a4a4f339f5fd',\n * s: '0x6007e74cd82e037b800186422fc2da167c747ef045e5d18a5f5d4300f8e1a029',\n * signature: '0xb91467e570a6466aa9e9876cbcd013baba02900b8979d43fe208a4a4f339f5fd6007e74cd82e037b800186422fc2da167c747ef045e5d18a5f5d4300f8e1a0291c'\n * }\n * ```\n */\nexport const sign = (data: string, privateKey: Bytes): SignResult => {\n\tconst privateKeyUint8Array = parseAndValidatePrivateKey(privateKey);\n\n\tconst hash = hashMessage(data);\n\n\tconst signature = secp256k1.sign(hash.substring(2), privateKeyUint8Array);\n\tconst signatureBytes = signature.toCompactRawBytes();\n\tconst r = signature.r.toString(16).padStart(64, '0');\n\tconst s = signature.s.toString(16).padStart(64, '0');\n\tconst v = signature.recovery! + 27;\n\n\treturn {\n\t\tmessage: data,\n\t\tmessageHash: hash,\n\t\tv: numberToHex(v),\n\t\tr: `0x${r}`,\n\t\ts: `0x${s}`,\n\t\tsignature: `${bytesToHex(signatureBytes)}${v.toString(16)}`,\n\t};\n};\n\n/**\n * Signs an Ethereum transaction with a given private key.\n *\n * @param transaction - The transaction, must be a legacy, EIP2930 or EIP 1559 transaction type\n * @param privateKey -  The private key to import. This is 32 bytes of random data.\n * @returns A signTransactionResult object that contains message hash, r, s, v, transaction hash and raw transaction.\n *\n * This function is not stateful here. We need network access to get the account `nonce` and `chainId` to sign the transaction.\n * This function will rely on user to provide the full transaction to be signed. If you want to sign a partial transaction object\n * Use {@link Web3.eth.accounts.sign} instead.\n *\n * Signing a legacy transaction\n * ```ts\n * import {signTransaction, Transaction} from 'web3-eth-accounts';\n * \n * signTransaction(new Transaction({\n *\tto: '0x118C2E5F57FD62C2B5b46a5ae9216F4FF4011a07',\n *\tvalue: '0x186A0',\n *\tgasLimit: '0x520812',\n *\tgasPrice: '0x09184e72a000',\n *\tdata: '',\n *\tchainId: 1,\n *\tnonce: 0 }),\n * '0x4c0883a69102937d6231471b5dbb6204fe5129617082792ae468d01a3f362318')\n * \n * > {\n * messageHash: '0x28b7b75f7ba48d588a902c1ff4d5d13cc0ca9ac0aaa39562368146923fb853bf',\n * v: '0x25',\n * r: '0x601b0017b0e20dd0eeda4b895fbc1a9e8968990953482214f880bae593e71b5',\n * s: '0x690d984493560552e3ebdcc19a65b9c301ea9ddc82d3ab8cfde60485fd5722ce',\n * rawTransaction: '0xf869808609184e72a0008352081294118c2e5f57fd62c2b5b46a5ae9216f4ff4011a07830186a08025a00601b0017b0e20dd0eeda4b895fbc1a9e8968990953482214f880bae593e71b5a0690d984493560552e3ebdcc19a65b9c301ea9ddc82d3ab8cfde60485fd5722ce',\n * transactionHash: '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470'\n * ```\n * \n * Signing an eip 1559 transaction\n * ```ts\n * import {signTransaction, Transaction} from 'web3-eth-accounts';\n * \n * signTransaction(new Transaction({\n *\tto: '0xF0109fC8DF283027b6285cc889F5aA624EaC1F55',\n *\tmaxPriorityFeePerGas: '0x3B9ACA00',\n *\tmaxFeePerGas: '0xB2D05E00',\n *\tgasLimit: '0x6A4012',\n *\tvalue: '0x186A0',\n *\tdata: '',\n *\tchainId: 1,\n *\tnonce: 0}),\n * \"0x4c0883a69102937d6231471b5dbb6204fe5129617082792ae468d01a3f362318\")\n * > {\n *  messageHash: '0x5744f24d5f0aff6c70487c8e85adf07d8564e50b08558788f00479611d7bae5f',\n * v: '0x25',\n * r: '0x78a5a6b2876c3985f90f82073d18d57ac299b608cc76a4ba697b8bb085048347',\n * s: '0x9cfcb40cc7d505ed17ff2d3337b51b066648f10c6b7e746117de69b2eb6358d',\n * rawTransaction: '0xf8638080836a401294f0109fc8df283027b6285cc889f5aa624eac1f55830186a08025a078a5a6b2876c3985f90f82073d18d57ac299b608cc76a4ba697b8bb085048347a009cfcb40cc7d505ed17ff2d3337b51b066648f10c6b7e746117de69b2eb6358d',\n * transactionHash: '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470'\n * }\n * ```\n * \n * Signing an eip 2930 transaction\n * ```ts\n * import {signTransaction, Transaction} from 'web3-eth-accounts';\n * \n * signTransaction(new Transaction ({\n *\tchainId: 1,\n *\tnonce: 0,\n *\tgasPrice: '0x09184e72a000',\n *\tgasLimit: '0x2710321',\n *\tto: '0xF0109fC8DF283027b6285cc889F5aA624EaC1F55',\n *\tvalue: '0x186A0',\n *\tdata: '',\n *\taccessList: [\n *\t\t{\n *\t\t\taddress: '0x0000000000000000000000000000000000000101',\n *\t\t\tstorageKeys: [\n *\t\t\t\t'0x0000000000000000000000000000000000000000000000000000000000000000',\n *\t\t\t\t'0x00000000000000000000000000000000000000000000000000000000000060a7',\n *\t\t\t],\n *\t\t},\n *\t],\n * }),\"0x4c0883a69102937d6231471b5dbb6204fe5129617082792ae468d01a3f362318\")\n * \n * > {\n * messageHash: '0xc55ea24bdb4c379550a7c9a6818ac39ca33e75bc78ddb862bd82c31cc1c7a073',\n * v: '0x26',\n * r: '0x27344e77871c8b2068bc998bf28e0b5f9920867a69c455b2ed0c1c150fec098e',\n * s: '0x519f0130a1d662841d4a28082e9c9bb0a15e0e59bb46cfc39a52f0e285dec6b9',\n * rawTransaction: '0xf86a808609184e72a000840271032194f0109fc8df283027b6285cc889f5aa624eac1f55830186a08026a027344e77871c8b2068bc998bf28e0b5f9920867a69c455b2ed0c1c150fec098ea0519f0130a1d662841d4a28082e9c9bb0a15e0e59bb46cfc39a52f0e285dec6b9',\n * transactionHash: '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470'\n * }\n * ```\n */\nexport const signTransaction = async (\n\ttransaction: TypedTransaction,\n\tprivateKey: HexString,\n\t// To make it compatible with rest of the API, have to keep it async\n\t// eslint-disable-next-line @typescript-eslint/require-await\n): Promise<SignTransactionResult> => {\n\tconst signedTx = transaction.sign(hexToBytes(privateKey));\n\tif (isNullish(signedTx.v) || isNullish(signedTx.r) || isNullish(signedTx.s))\n\t\tthrow new TransactionSigningError('Signer Error');\n\n\tconst validationErrors = signedTx.validate(true);\n\n\tif (validationErrors.length > 0) {\n\t\tlet errorString = 'Signer Error ';\n\t\tfor (const validationError of validationErrors) {\n\t\t\terrorString += `${errorString} ${validationError}.`;\n\t\t}\n\t\tthrow new TransactionSigningError(errorString);\n\t}\n\n\tconst rawTx = bytesToHex(signedTx.serialize());\n\tconst txHash = sha3Raw(rawTx); // using keccak in web3-utils.sha3Raw instead of SHA3 (NIST Standard) as both are different\n\n\treturn {\n\t\tmessageHash: bytesToHex(signedTx.getMessageToSign(true)),\n\t\tv: `0x${signedTx.v.toString(16)}`,\n\t\tr: `0x${signedTx.r.toString(16).padStart(64, '0')}`,\n\t\ts: `0x${signedTx.s.toString(16).padStart(64, '0')}`,\n\t\trawTransaction: rawTx,\n\t\ttransactionHash: bytesToHex(txHash),\n\t};\n};\n\n/**\n * Recovers the Ethereum address which was used to sign the given RLP encoded transaction.\n *\n * @param rawTransaction - The hex string having RLP encoded transaction\n * @returns The Ethereum address used to sign this transaction\n * ```ts\n * web3.eth.accounts.recoverTransaction('0xf869808504e3b29200831e848094f0109fc8df283027b6285cc889f5aa624eac1f55843b9aca008025a0c9cf86333bcb065d140032ecaab5d9281bde80f21b9687b3e94161de42d51895a0727a108a0b8d101465414033c3f705a9c7b826e596766046ee1183dbc8aeaa68');\n * > \"0x2c7536E3605D9C16a7a3D7b1898e529396a65c23\"\n * ```\n */\nexport const recoverTransaction = (rawTransaction: HexString): Address => {\n\tif (isNullish(rawTransaction)) throw new UndefinedRawTransactionError();\n\n\tconst tx = TransactionFactory.fromSerializedData(hexToBytes(rawTransaction));\n\n\treturn toChecksumAddress(tx.getSenderAddress().toString());\n};\n\n/**\n * Recovers the Ethereum address which was used to sign the given data\n *\n * @param data - Either a signed message, hash, or the {@link signatureObject}\n * @param signature - The raw RLP encoded signature\n * @param signatureOrV - signature or V\n * @param prefixedOrR - prefixed or R\n * @param s - S value in signature\n * @param prefixed - (default: false) If the last parameter is true, the given message will NOT automatically be prefixed with `\"\\\\x19Ethereum Signed Message:\\\\n\" + message.length + message`, and assumed to be already prefixed.\n * @returns The Ethereum address used to sign this data\n * \n * ```ts\n * const data = 'Some data';\n * const sigObj = web3.eth.accounts.sign(data, '0xbe6383dad004f233317e46ddb46ad31b16064d14447a95cc1d8c8d4bc61c3728')\n * \n * > {\n *   message: 'Some data',\n *   messageHash: '0x1da44b586eb0729ff70a73c326926f6ed5a25f5b056e7f47fbc6e58d86871655',\n *   v: '0x1b',\n *   r: '0xa8037a6116c176a25e6fc224947fde9e79a2deaa0dd8b67b366fbdfdbffc01f9',\n *   s: '0x53e41351267b20d4a89ebfe9c8f03c04de9b345add4a52f15bd026b63c8fb150',\n *   signature: '0xa8037a6116c176a25e6fc224947fde9e79a2deaa0dd8b67b366fbdfdbffc01f953e41351267b20d4a89ebfe9c8f03c04de9b345add4a52f15bd026b63c8fb1501b'\n * }\n * \n * // now recover\n * web3.eth.accounts.recover(data, sigObj.v, sigObj.r, sigObj.s)\n * \n * > 0xEB014f8c8B418Db6b45774c326A0E64C78914dC0\n * ```\n */\nexport const recover = (\n\tdata: string | SignatureObject,\n\tsignatureOrV?: string,\n\tprefixedOrR?: boolean | string,\n\ts?: string,\n\tprefixed?: boolean,\n): Address => {\n\tif (typeof data === 'object') {\n\t\tconst signatureStr = `${data.r}${data.s.slice(2)}${data.v.slice(2)}`;\n\t\treturn recover(data.messageHash, signatureStr, prefixedOrR);\n\t}\n\tif (typeof signatureOrV === 'string' && typeof prefixedOrR === 'string' && !isNullish(s)) {\n\t\tconst signatureStr = `${prefixedOrR}${s.slice(2)}${signatureOrV.slice(2)}`;\n\t\treturn recover(data, signatureStr, prefixed);\n\t}\n\n\tif (isNullish(signatureOrV)) throw new InvalidSignatureError('signature string undefined');\n\n\tconst V_INDEX = 130; // r = first 32 bytes, s = second 32 bytes, v = last byte of signature\n\tconst hashedMessage = prefixedOrR ? data : hashMessage(data);\n\n\tlet v = parseInt(signatureOrV.substring(V_INDEX), 16); // 0x + r + s + v\n\tif (v > 26) {\n\t\tv -= 27;\n\t}\n\n\tconst ecPublicKey = secp256k1.Signature.fromCompact(signatureOrV.slice(2, V_INDEX))\n\t\t.addRecoveryBit(v)\n\t\t.recoverPublicKey(hashedMessage.replace('0x', ''))\n\t\t.toRawBytes(false);\n\n\tconst publicHash = sha3Raw(ecPublicKey.subarray(1));\n\n\tconst address = toChecksumAddress(`0x${publicHash.slice(-40)}`);\n\n\treturn address;\n};;\n\n/**\n * Get the ethereum Address from a private key\n *\n * @param privateKey - String or Uint8Array of 32 bytes\n * @param ignoreLength - if true, will not error check length\n * @returns The Ethereum address\n * @example\n * ```ts\n * web3.eth.accounts.privateKeyToAddress(\"0xbe6383dad004f233317e46ddb46ad31b16064d14447a95cc1d8c8d4bc61c3728\")\n * \n * > \"0xEB014f8c8B418Db6b45774c326A0E64C78914dC0\"\n * ```\n */\nexport const privateKeyToAddress = (privateKey: Bytes): string => {\n\tconst privateKeyUint8Array = parseAndValidatePrivateKey(privateKey);\n\n\t// Get public key from private key in compressed format\n\tconst publicKey = secp256k1.getPublicKey(privateKeyUint8Array, false);\n\n\t// Uncompressed ECDSA public key contains the prefix `0x04` which is not used in the Ethereum public key\n\tconst publicKeyHash = sha3Raw(publicKey.slice(1));\n\n\t// The hash is returned as 256 bits (32 bytes) or 64 hex characters\n\t// To get the address, take the last 20 bytes of the public hash\n\tconst address = publicKeyHash.slice(-40);\n\n\treturn toChecksumAddress(`0x${address}`);\n};\n\n/**\n * Get the public key from a private key\n *\n * @param privateKey - String or Uint8Array of 32 bytes\n * @param isCompressed - if true, will generate a 33 byte compressed public key instead of a 65 byte public key\n * @returns The public key\n * @example\n * ```ts\n * web3.eth.accounts.privateKeyToPublicKey(\"0x1e046a882bb38236b646c9f135cf90ad90a140810f439875f2a6dd8e50fa261f\", true)\n * \n * > \"0x42beb65f179720abaa3ec9a70a539629cbbc5ec65bb57e7fc78977796837e537662dd17042e6449dc843c281067a4d6d8d1a1775a13c41901670d5de7ee6503a\" // uncompressed public key\n * ```\n */\nexport const privateKeyToPublicKey = (privateKey: Bytes, isCompressed: boolean): string => {\n\tconst privateKeyUint8Array = parseAndValidatePrivateKey(privateKey);\n\n\t// Get public key from private key in compressed format\n\treturn `0x${bytesToHex(secp256k1.getPublicKey(privateKeyUint8Array, isCompressed)).slice(4)}`; // 0x and removing compression byte\n};\n\n/**\n * encrypt a private key with a password, returns a V3 JSON Keystore\n *\n * Read more: https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition\n *\n * @param privateKey - The private key to encrypt, 32 bytes.\n * @param password - The password used for encryption.\n * @param options - Options to configure to encrypt the keystore either scrypt or pbkdf2\n * @returns Returns a V3 JSON Keystore\n *\n * Encrypt using scrypt options:\n * ```ts\n * \n * web3.eth.accounts.encrypt(\n *    '0x67f476289210e3bef3c1c75e4de993ff0a00663df00def84e73aa7411eac18a6',\n *    '123',\n *    {\n *        n: 8192,\n *\t    iv: web3.utils.hexToBytes('0xbfb43120ae00e9de110f8325143a2709'),\n *\t    salt: web3.utils.hexToBytes('0x210d0ec956787d865358ac45716e6dd42e68d48e346d795746509523aeb477dd'),\n *\t}).then(console.log)\n *\n * > {\n * version: 3,\n * id: 'c0cb0a94-4702-4492-b6e6-eb2ac404344a',\n * address: 'cda9a91875fc35c8ac1320e098e584495d66e47c',\n * crypto: {\n *   ciphertext: 'cb3e13e3281ff3861a3f0257fad4c9a51b0eb046f9c7821825c46b210f040b8f',\n *   cipherparams: { iv: 'bfb43120ae00e9de110f8325143a2709' },\n *   cipher: 'aes-128-ctr',\n *   kdf: 'scrypt',\n *   kdfparams: {\n *     n: 8192,\n *     r: 8,\n *     p: 1,\n *     dklen: 32,\n *     salt: '210d0ec956787d865358ac45716e6dd42e68d48e346d795746509523aeb477dd'\n *   },\n *   mac: 'efbf6d3409f37c0084a79d5fdf9a6f5d97d11447517ef1ea8374f51e581b7efd'\n * }\n *}\n *```\n *\n * Encrypting using pbkdf2 options:\n * ```ts\n * web3.eth.accounts.encrypt('0x348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8709',\n *'123',\n *{\n *\tiv: 'bfb43120ae00e9de110f8325143a2709',\n *\tsalt: '210d0ec956787d865358ac45716e6dd42e68d48e346d795746509523aeb477dd',\n *\tc: 262144,\n *\tkdf: 'pbkdf2',\n *}).then(console.log)\n *\n * >\n * {\n *   version: 3,\n *   id: '77381417-0973-4e4b-b590-8eb3ace0fe2d',\n *   address: 'b8ce9ab6943e0eced004cde8e3bbed6568b2fa01',\n *   crypto: {\n *     ciphertext: '76512156a34105fa6473ad040c666ae7b917d14c06543accc0d2dc28e6073b12',\n *     cipherparams: { iv: 'bfb43120ae00e9de110f8325143a2709' },\n *     cipher: 'aes-128-ctr',\n *     kdf: 'pbkdf2',\n *     kdfparams: {\n *       dklen: 32,\n *       salt: '210d0ec956787d865358ac45716e6dd42e68d48e346d795746509523aeb477dd',\n *       c: 262144,\n *       prf: 'hmac-sha256'\n *     },\n *   mac: '46eb4884e82dc43b5aa415faba53cc653b7038e9d61cc32fd643cf8c396189b7'\n *   }\n * }\n *```\n */\nexport const encrypt = async (\n\tprivateKey: Bytes,\n\tpassword: string | Uint8Array,\n\toptions?: CipherOptions,\n): Promise<KeyStore> => {\n\tconst privateKeyUint8Array = parseAndValidatePrivateKey(privateKey);\n\n\t// if given salt or iv is a string, convert it to a Uint8Array\n\tlet salt;\n\tif (options?.salt) {\n\t\tsalt = typeof options.salt === 'string' ? hexToBytes(options.salt) : options.salt;\n\t} else {\n\t\tsalt = randomBytes(32);\n\t}\n\n\tif (!(isString(password) || isUint8Array(password))) {\n\t\tthrow new InvalidPasswordError();\n\t}\n\n\tconst uint8ArrayPassword =\n\t\ttypeof password === 'string' ? hexToBytes(utf8ToHex(password)) : password;\n\n\tlet initializationVector;\n\tif (options?.iv) {\n\t\tinitializationVector = typeof options.iv === 'string' ? hexToBytes(options.iv) : options.iv;\n\t\tif (initializationVector.length !== 16) {\n\t\t\tthrow new IVLengthError();\n\t\t}\n\t} else {\n\t\tinitializationVector = randomBytes(16);\n\t}\n\n\tconst kdf = options?.kdf ?? 'scrypt';\n\n\tlet derivedKey;\n\tlet kdfparams: ScryptParams | PBKDF2SHA256Params;\n\n\t// derive key from key derivation function\n\tif (kdf === 'pbkdf2') {\n\t\tkdfparams = {\n\t\t\tdklen: options?.dklen ?? 32,\n\t\t\tsalt: bytesToHex(salt).replace('0x', ''),\n\t\t\tc: options?.c ?? 262144,\n\t\t\tprf: 'hmac-sha256',\n\t\t};\n\n\t\tif (kdfparams.c < 1000) {\n\t\t\t// error when c < 1000, pbkdf2 is less secure with less iterations\n\t\t\tthrow new PBKDF2IterationsError();\n\t\t}\n\t\tderivedKey = pbkdf2Sync(uint8ArrayPassword, salt, kdfparams.c, kdfparams.dklen, 'sha256');\n\t} else if (kdf === 'scrypt') {\n\t\tkdfparams = {\n\t\t\tn: options?.n ?? 8192,\n\t\t\tr: options?.r ?? 8,\n\t\t\tp: options?.p ?? 1,\n\t\t\tdklen: options?.dklen ?? 32,\n\t\t\tsalt: bytesToHex(salt).replace('0x', ''),\n\t\t};\n\t\tderivedKey = scryptSync(\n\t\t\tuint8ArrayPassword,\n\t\t\tsalt,\n\t\t\tkdfparams.n,\n\t\t\tkdfparams.p,\n\t\t\tkdfparams.r,\n\t\t\tkdfparams.dklen,\n\t\t);\n\t} else {\n\t\tthrow new InvalidKdfError();\n\t}\n\n\tconst cipher = await createCipheriv(\n\t\tprivateKeyUint8Array,\n\t\tderivedKey.slice(0, 16),\n\t\tinitializationVector,\n\t\t'aes-128-ctr',\n\t);\n\n\tconst ciphertext = bytesToHex(cipher).slice(2);\n\n\tconst mac = sha3Raw(uint8ArrayConcat(derivedKey.slice(16, 32), cipher)).replace('0x', '');\n\treturn {\n\t\tversion: 3,\n\t\tid: uuidV4(),\n\t\taddress: privateKeyToAddress(privateKeyUint8Array).toLowerCase().replace('0x', ''),\n\t\tcrypto: {\n\t\t\tciphertext,\n\t\t\tcipherparams: {\n\t\t\t\tiv: bytesToHex(initializationVector).replace('0x', ''),\n\t\t\t},\n\t\t\tcipher: 'aes-128-ctr',\n\t\t\tkdf,\n\t\t\tkdfparams,\n\t\t\tmac,\n\t\t},\n\t};\n};\n\n/**\n * Get an Account object from the privateKey\n *\n * @param privateKey - String or Uint8Array of 32 bytes\n * @param ignoreLength - if true, will not error check length\n * @returns A Web3Account object\n *\n * :::info\n * The `Web3Account.signTransaction` is not stateful if directly imported from accounts package and used. Network access is required to get the account `nonce` and `chainId` to sign the transaction, so use {@link Web3.eth.accounts.signTransaction} for signing transactions.\n * ::::\n *\n * ```ts\n * web3.eth.accounts.privateKeyToAccount(\"0x348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8709\");\n * \n * >    {\n * \t\t\taddress: '0xb8CE9ab6943e0eCED004cDe8e3bBed6568B2Fa01',\n * \t\t\tprivateKey: '0x348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8709',\n * \t\t\tsign,\n * \t\t\tsignTransaction,\n * \t\t\tencrypt,\n * \t}\n * ```\n */\nexport const privateKeyToAccount = (privateKey: Bytes, ignoreLength?: boolean): Web3Account => {\n\tconst privateKeyUint8Array = parseAndValidatePrivateKey(privateKey, ignoreLength);\n\n\treturn {\n\t\taddress: privateKeyToAddress(privateKeyUint8Array),\n\t\tprivateKey: bytesToHex(privateKeyUint8Array),\n\t\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\t\tsignTransaction: (_tx: Transaction) => {\n\t\t\tthrow new TransactionSigningError('Do not have network access to sign the transaction');\n\t\t},\n\t\tsign: (data: Record<string, unknown> | string) =>\n\t\t\tsign(typeof data === 'string' ? data : JSON.stringify(data), privateKeyUint8Array),\n\t\tencrypt: async (password: string, options?: Record<string, unknown>) =>\n\t\t\tencrypt(privateKeyUint8Array, password, options),\n\t};\n};\n\n/**\n *\n * Generates and returns a Web3Account object that includes the private and public key\n * For creation of private key, it uses an audited package ethereum-cryptography/secp256k1\n * that is cryptographically secure random number with certain characteristics.\n * Read more: https://www.npmjs.com/package/ethereum-cryptography#secp256k1-curve\n *\n * @returns A Web3Account object\n * ```ts\n * web3.eth.accounts.create();\n * {\n * address: '0xbD504f977021b5E5DdccD8741A368b147B3B38bB',\n * privateKey: '0x964ced1c69ad27a311c432fdc0d8211e987595f7eb34ab405a5f16bdc9563ec5',\n * signTransaction: [Function: signTransaction],\n * sign: [Function: sign],\n * encrypt: [AsyncFunction: encrypt]\n * }\n * ```\n */\nexport const create = (): Web3Account => {\n\tconst privateKey = secp256k1.utils.randomPrivateKey();\n\n\treturn privateKeyToAccount(`${bytesToHex(privateKey)}`);\n};\n\n/**\n * Decrypts a v3 keystore JSON, and creates the account.\n *\n * @param keystore - the encrypted Keystore object or string to decrypt\n * @param password - The password that was used for encryption\n * @param nonStrict - if true and given a json string, the keystore will be parsed as lowercase.\n * @returns Returns the decrypted Web3Account object\n * Decrypting scrypt\n *\n * ```ts\n * web3.eth.accounts.decrypt({\n *   version: 3,\n *   id: 'c0cb0a94-4702-4492-b6e6-eb2ac404344a',\n *   address: 'cda9a91875fc35c8ac1320e098e584495d66e47c',\n *   crypto: {\n *   ciphertext: 'cb3e13e3281ff3861a3f0257fad4c9a51b0eb046f9c7821825c46b210f040b8f',\n *      cipherparams: { iv: 'bfb43120ae00e9de110f8325143a2709' },\n *      cipher: 'aes-128-ctr',\n *      kdf: 'scrypt',\n *      kdfparams: {\n *        n: 8192,\n *        r: 8,\n *        p: 1,\n *        dklen: 32,\n *        salt: '210d0ec956787d865358ac45716e6dd42e68d48e346d795746509523aeb477dd'\n *      },\n *      mac: 'efbf6d3409f37c0084a79d5fdf9a6f5d97d11447517ef1ea8374f51e581b7efd'\n *    }\n *   }, '123').then(console.log);\n * \n * \n * > {\n * address: '0xcdA9A91875fc35c8Ac1320E098e584495d66e47c',\n * privateKey: '67f476289210e3bef3c1c75e4de993ff0a00663df00def84e73aa7411eac18a6',\n * signTransaction: [Function: signTransaction],\n * sign: [Function: sign],\n * encrypt: [AsyncFunction: encrypt]\n * }\n * ```\n */\nexport const decrypt = async (\n\tkeystore: KeyStore | string,\n\tpassword: string | Uint8Array,\n\tnonStrict?: boolean,\n): Promise<Web3Account> => {\n\tconst json =\n\t\ttypeof keystore === 'object'\n\t\t\t? keystore\n\t\t\t: (JSON.parse(nonStrict ? keystore.toLowerCase() : keystore) as KeyStore);\n\n\tvalidator.validateJSONSchema(keyStoreSchema, json);\n\n\tif (json.version !== 3) throw new KeyStoreVersionError();\n\n\tconst uint8ArrayPassword =\n\t\ttypeof password === 'string' ? hexToBytes(utf8ToHex(password)) : password;\n\n\tvalidator.validate(['bytes'], [uint8ArrayPassword]);\n\n\tlet derivedKey;\n\tif (json.crypto.kdf === 'scrypt') {\n\t\tconst kdfparams = json.crypto.kdfparams as ScryptParams;\n\t\tconst uint8ArraySalt =\n\t\t\ttypeof kdfparams.salt === 'string' ? hexToBytes(kdfparams.salt) : kdfparams.salt;\n\t\tderivedKey = scryptSync(\n\t\t\tuint8ArrayPassword,\n\t\t\tuint8ArraySalt,\n\t\t\tkdfparams.n,\n\t\t\tkdfparams.p,\n\t\t\tkdfparams.r,\n\t\t\tkdfparams.dklen,\n\t\t);\n\t} else if (json.crypto.kdf === 'pbkdf2') {\n\t\tconst kdfparams: PBKDF2SHA256Params = json.crypto.kdfparams as PBKDF2SHA256Params;\n\n\t\tconst uint8ArraySalt =\n\t\t\ttypeof kdfparams.salt === 'string' ? hexToBytes(kdfparams.salt) : kdfparams.salt;\n\n\t\tderivedKey = pbkdf2Sync(\n\t\t\tuint8ArrayPassword,\n\t\t\tuint8ArraySalt,\n\t\t\tkdfparams.c,\n\t\t\tkdfparams.dklen,\n\t\t\t'sha256',\n\t\t);\n\t} else {\n\t\tthrow new InvalidKdfError();\n\t}\n\n\tconst ciphertext = hexToBytes(json.crypto.ciphertext);\n\tconst mac = sha3Raw(uint8ArrayConcat(derivedKey.slice(16, 32), ciphertext)).replace('0x', '');\n\n\tif (mac !== json.crypto.mac) {\n\t\tthrow new KeyDerivationError();\n\t}\n\n\tconst seed = await createDecipheriv(\n\t\thexToBytes(json.crypto.ciphertext),\n\t\tderivedKey.slice(0, 16),\n\t\thexToBytes(json.crypto.cipherparams.iv),\n\t);\n\n\treturn privateKeyToAccount(seed);\n};\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/src/common/common.ts",["252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290","291","292","293","294","295","296","297","298","299","300","301","302","303","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318"],["319","320","321","322","323","324","325","326","327","328","329","330","331","332","333","334","335","336","337","338","339","340","341","342","343","344","345","346","347","348","349","350","351","352","353","354","355","356","357","358","359","360","361","362","363","364","365","366","367","368","369","370","371","372","373","374","375","376","377","378","379","380","381","382","383","384","385","386","387","388","389","390","391","392","393","394","395","396","397","398","399","400","401","402","403","404","405","406","407","408","409","410","411","412","413","414","415","416","417","418","419","420","421","422","423","424"],"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport pkg from 'crc-32';\nimport { EventEmitter, bytesToHex, hexToBytes, uint8ArrayConcat } from 'web3-utils';\nimport type { Numbers } from 'web3-types';\nimport { TypeOutput } from './types.js';\nimport { intToUint8Array, toType, parseGethGenesis } from './utils.js';\nimport goerli from './chains/goerli.js';\nimport mainnet from './chains/mainnet.js';\nimport sepolia from './chains/sepolia.js';\nimport { EIPs } from './eips/index.js';\nimport type { ConsensusAlgorithm, ConsensusType } from './enums.js';\nimport { Chain, CustomChain, Hardfork } from './enums.js';\nimport { hardforks as HARDFORK_SPECS } from './hardforks/index.js';\n\nimport type {\n\tBootstrapNodeConfig,\n\tCasperConfig,\n\tChainConfig,\n\tChainName,\n\tChainsConfig,\n\tCliqueConfig,\n\tCommonOpts,\n\tCustomCommonOpts,\n\tEthashConfig,\n\tGenesisBlockConfig,\n\tGethConfigOpts,\n\tHardforkConfig,\n} from './types.js';\n\nconst { buf: crc32Uint8Array } = pkg;\n\ntype HardforkSpecKeys = keyof typeof HARDFORK_SPECS;\ntype HardforkSpecValues = typeof HARDFORK_SPECS[HardforkSpecKeys];\n/**\n * Common class to access chain and hardfork parameters and to provide\n * a unified and shared view on the network and hardfork state.\n *\n * Use the {@link Common.custom} static constructor for creating simple\n * custom chain {@link Common} objects (more complete custom chain setups\n * can be created via the main constructor and the {@link CommonOpts.customChains} parameter).\n */\nexport class Common extends EventEmitter {\n\tpublic readonly DEFAULT_HARDFORK: string | Hardfork;\n\n\tprivate _chainParams: ChainConfig;\n\tprivate _hardfork: string | Hardfork;\n\tprivate _eips: number[] = [];\n\tprivate readonly _customChains: ChainConfig[];\n\n\tprivate readonly HARDFORK_CHANGES: [HardforkSpecKeys, HardforkSpecValues][];\n\n\t/**\n\t * Creates a {@link Common} object for a custom chain, based on a standard one.\n\t *\n\t * It uses all the {@link Chain} parameters from the {@link baseChain} option except the ones overridden\n\t * in a provided {@link chainParamsOrName} dictionary. Some usage example:\n\t *\n\t * ```javascript\n\t * Common.custom({chainId: 123})\n\t * ```\n\t *\n\t * There are also selected supported custom chains which can be initialized by using one of the\n\t * {@link CustomChains} for {@link chainParamsOrName}, e.g.:\n\t *\n\t * ```javascript\n\t * Common.custom(CustomChains.MaticMumbai)\n\t * ```\n\t *\n\t * Note that these supported custom chains only provide some base parameters (usually the chain and\n\t * network ID and a name) and can only be used for selected use cases (e.g. sending a tx with\n\t * the `web3-utils/tx` library to a Layer-2 chain).\n\t *\n\t * @param chainParamsOrName Custom parameter dict (`name` will default to `custom-chain`) or string with name of a supported custom chain\n\t * @param opts Custom chain options to set the {@link CustomCommonOpts.baseChain}, selected {@link CustomCommonOpts.hardfork} and others\n\t */\n\tpublic static custom(\n\t\tchainParamsOrName: Partial<ChainConfig> | CustomChain,\n\t\topts: CustomCommonOpts = {},\n\t): Common {\n\t\tconst baseChain = opts.baseChain ?? 'mainnet';\n\t\tconst standardChainParams = { ...Common._getChainParams(baseChain) };\n\t\tstandardChainParams.name = 'custom-chain';\n\n\t\tif (typeof chainParamsOrName !== 'string') {\n\t\t\treturn new Common({\n\t\t\t\tchain: {\n\t\t\t\t\t...standardChainParams,\n\t\t\t\t\t...chainParamsOrName,\n\t\t\t\t},\n\t\t\t\t...opts,\n\t\t\t});\n\t\t}\n\t\tif (chainParamsOrName === CustomChain.PolygonMainnet) {\n\t\t\treturn Common.custom(\n\t\t\t\t{\n\t\t\t\t\tname: CustomChain.PolygonMainnet,\n\t\t\t\t\tchainId: 137,\n\t\t\t\t\tnetworkId: 137,\n\t\t\t\t},\n\t\t\t\topts,\n\t\t\t);\n\t\t}\n\t\tif (chainParamsOrName === CustomChain.PolygonMumbai) {\n\t\t\treturn Common.custom(\n\t\t\t\t{\n\t\t\t\t\tname: CustomChain.PolygonMumbai,\n\t\t\t\t\tchainId: 80001,\n\t\t\t\t\tnetworkId: 80001,\n\t\t\t\t},\n\t\t\t\topts,\n\t\t\t);\n\t\t}\n\t\tif (chainParamsOrName === CustomChain.ArbitrumRinkebyTestnet) {\n\t\t\treturn Common.custom(\n\t\t\t\t{\n\t\t\t\t\tname: CustomChain.ArbitrumRinkebyTestnet,\n\t\t\t\t\tchainId: 421611,\n\t\t\t\t\tnetworkId: 421611,\n\t\t\t\t},\n\t\t\t\topts,\n\t\t\t);\n\t\t}\n\t\tif (chainParamsOrName === CustomChain.ArbitrumOne) {\n\t\t\treturn Common.custom(\n\t\t\t\t{\n\t\t\t\t\tname: CustomChain.ArbitrumOne,\n\t\t\t\t\tchainId: 42161,\n\t\t\t\t\tnetworkId: 42161,\n\t\t\t\t},\n\t\t\t\topts,\n\t\t\t);\n\t\t}\n\t\tif (chainParamsOrName === CustomChain.xDaiChain) {\n\t\t\treturn Common.custom(\n\t\t\t\t{\n\t\t\t\t\tname: CustomChain.xDaiChain,\n\t\t\t\t\tchainId: 100,\n\t\t\t\t\tnetworkId: 100,\n\t\t\t\t},\n\t\t\t\topts,\n\t\t\t);\n\t\t}\n\n\t\tif (chainParamsOrName === CustomChain.OptimisticKovan) {\n\t\t\treturn Common.custom(\n\t\t\t\t{\n\t\t\t\t\tname: CustomChain.OptimisticKovan,\n\t\t\t\t\tchainId: 69,\n\t\t\t\t\tnetworkId: 69,\n\t\t\t\t},\n\t\t\t\t// Optimism has not implemented the London hardfork yet (targeting Q1.22)\n\t\t\t\t{ hardfork: Hardfork.Berlin, ...opts },\n\t\t\t);\n\t\t}\n\n\t\tif (chainParamsOrName === CustomChain.OptimisticEthereum) {\n\t\t\treturn Common.custom(\n\t\t\t\t{\n\t\t\t\t\tname: CustomChain.OptimisticEthereum,\n\t\t\t\t\tchainId: 10,\n\t\t\t\t\tnetworkId: 10,\n\t\t\t\t},\n\t\t\t\t// Optimism has not implemented the London hardfork yet (targeting Q1.22)\n\t\t\t\t{ hardfork: Hardfork.Berlin, ...opts },\n\t\t\t);\n\t\t}\n\t\t// eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n\t\tthrow new Error(`Custom chain ${chainParamsOrName} not supported`);\n\t}\n\n\t/**\n\t * Static method to load and set common from a geth genesis json\n\t * @param genesisJson json of geth configuration\n\t * @param { chain, eips, genesisHash, hardfork, mergeForkIdPostMerge } to further configure the common instance\n\t * @returns Common\n\t */\n\tpublic static fromGethGenesis(\n\t\tgenesisJson: any,\n\t\t{ chain, eips, genesisHash, hardfork, mergeForkIdPostMerge }: GethConfigOpts,\n\t): Common {\n\t\tconst genesisParams = parseGethGenesis(genesisJson, chain, mergeForkIdPostMerge);\n\t\tconst common = new Common({\n\t\t\tchain: genesisParams.name ?? 'custom',\n\t\t\tcustomChains: [genesisParams],\n\t\t\teips,\n\t\t\thardfork: hardfork ?? genesisParams.hardfork,\n\t\t});\n\t\tif (genesisHash !== undefined) {\n\t\t\tcommon.setForkHashes(genesisHash);\n\t\t}\n\t\treturn common;\n\t}\n\n\t/**\n\t * Static method to determine if a {@link chainId} is supported as a standard chain\n\t * @param chainId bigint id (`1`) of a standard chain\n\t * @returns boolean\n\t */\n\tpublic static isSupportedChainId(chainId: bigint): boolean {\n\t\tconst initializedChains = this._getInitializedChains();\n\t\treturn Boolean((initializedChains.names as ChainName)[chainId.toString()]);\n\t}\n\n\tprivate static _getChainParams(\n\t\t_chain: string | number | Chain | bigint,\n\t\tcustomChains?: ChainConfig[],\n\t): ChainConfig {\n\t\tlet chain = _chain;\n\t\tconst initializedChains = this._getInitializedChains(customChains);\n\t\tif (typeof chain === 'number' || typeof chain === 'bigint') {\n\t\t\tchain = chain.toString();\n\n\t\t\tif ((initializedChains.names as ChainName)[chain]) {\n\t\t\t\tconst name: string = (initializedChains.names as ChainName)[chain];\n\t\t\t\treturn initializedChains[name] as ChainConfig;\n\t\t\t}\n\n\t\t\tthrow new Error(`Chain with ID ${chain} not supported`);\n\t\t}\n\n\t\tif (initializedChains[chain] !== undefined) {\n\t\t\treturn initializedChains[chain] as ChainConfig;\n\t\t}\n\n\t\tthrow new Error(`Chain with name ${chain} not supported`);\n\t}\n\n\tpublic constructor(opts: CommonOpts) {\n\t\tsuper();\n\t\tthis._customChains = opts.customChains ?? [];\n\t\tthis._chainParams = this.setChain(opts.chain);\n\t\tthis.DEFAULT_HARDFORK = this._chainParams.defaultHardfork ?? Hardfork.Merge;\n\t\t// Assign hardfork changes in the sequence of the applied hardforks\n\t\tthis.HARDFORK_CHANGES = this.hardforks().map(hf => [\n\t\t\thf.name as HardforkSpecKeys,\n\t\t\tHARDFORK_SPECS[hf.name as HardforkSpecKeys],\n\t\t]);\n\t\tthis._hardfork = this.DEFAULT_HARDFORK;\n\t\tif (opts.hardfork !== undefined) {\n\t\t\tthis.setHardfork(opts.hardfork);\n\t\t}\n\t\tif (opts.eips) {\n\t\t\tthis.setEIPs(opts.eips);\n\t\t}\n\t}\n\n\t/**\n\t * Sets the chain\n\t * @param chain String ('mainnet') or Number (1) chain representation.\n\t *              Or, a Dictionary of chain parameters for a private network.\n\t * @returns The dictionary with parameters set as chain\n\t */\n\tpublic setChain(chain: string | number | Chain | bigint | object): ChainConfig {\n\t\tif (typeof chain === 'number' || typeof chain === 'bigint' || typeof chain === 'string') {\n\t\t\tthis._chainParams = Common._getChainParams(chain, this._customChains);\n\t\t} else if (typeof chain === 'object') {\n\t\t\tif (this._customChains.length > 0) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Chain must be a string, number, or bigint when initialized with customChains passed in',\n\t\t\t\t);\n\t\t\t}\n\t\t\tconst required = ['networkId', 'genesis', 'hardforks', 'bootstrapNodes'];\n\t\t\tfor (const param of required) {\n\t\t\t\tif (!(param in chain)) {\n\t\t\t\t\tthrow new Error(`Missing required chain parameter: ${param}`);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._chainParams = chain as ChainConfig;\n\t\t} else {\n\t\t\tthrow new Error('Wrong input format');\n\t\t}\n\t\tfor (const hf of this.hardforks()) {\n\t\t\tif (hf.block === undefined) {\n\t\t\t\tthrow new Error(`Hardfork cannot have undefined block number`);\n\t\t\t}\n\t\t}\n\t\treturn this._chainParams;\n\t}\n\n\t/**\n\t * Sets the hardfork to get params for\n\t * @param hardfork String identifier (e.g. 'byzantium') or {@link Hardfork} enum\n\t */\n\tpublic setHardfork(hardfork: string | Hardfork): void {\n\t\tlet existing = false;\n\t\tfor (const hfChanges of this.HARDFORK_CHANGES) {\n\t\t\tif (hfChanges[0] === hardfork) {\n\t\t\t\tif (this._hardfork !== hardfork) {\n\t\t\t\t\tthis._hardfork = hardfork;\n\t\t\t\t\tthis.emit('hardforkChanged', hardfork);\n\t\t\t\t}\n\t\t\t\texisting = true;\n\t\t\t}\n\t\t}\n\t\tif (!existing) {\n\t\t\tthrow new Error(`Hardfork with name ${hardfork} not supported`);\n\t\t}\n\t}\n\n\t/**\n\t * Returns the hardfork based on the block number or an optional\n\t * total difficulty (Merge HF) provided.\n\t *\n\t * An optional TD takes precedence in case the corresponding HF block\n\t * is set to `null` or otherwise needs to match (if not an error\n\t * will be thrown).\n\t *\n\t * @param blockNumber\n\t * @param td : total difficulty of the parent block (for block hf) OR of the chain latest (for chain hf)\n\t * @param timestamp: timestamp in seconds at which block was/is to be minted\n\t * @returns The name of the HF\n\t */\n\tpublic getHardforkByBlockNumber(\n\t\t_blockNumber: Numbers,\n\t\t_td?: Numbers,\n\t\t_timestamp?: Numbers,\n\t): string {\n\t\tconst blockNumber = toType(_blockNumber, TypeOutput.BigInt);\n\t\tconst td = toType(_td, TypeOutput.BigInt);\n\t\tconst timestamp = toType(_timestamp, TypeOutput.Number);\n\n\t\t// Filter out hardforks with no block number, no ttd or no timestamp (i.e. unapplied hardforks)\n\t\tconst hfs = this.hardforks().filter(\n\t\t\thf =>\n\t\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\t\thf.block !== null ||\n\t\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\t\t(hf.ttd !== null && hf.ttd !== undefined) ||\n\t\t\t\thf.timestamp !== undefined,\n\t\t);\n\t\t// eslint-disable-next-line no-null/no-null\n\t\tconst mergeIndex = hfs.findIndex(hf => hf.ttd !== null && hf.ttd !== undefined);\n\t\tconst doubleTTDHF = hfs\n\t\t\t.slice(mergeIndex + 1)\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\t.findIndex(hf => hf.ttd !== null && hf.ttd !== undefined);\n\t\tif (doubleTTDHF >= 0) {\n\t\t\tthrow Error(`More than one merge hardforks found with ttd specified`);\n\t\t}\n\n\t\t// Find the first hardfork that has a block number greater than `blockNumber`\n\t\t// (skips the merge hardfork since it cannot have a block number specified).\n\t\t// If timestamp is not provided, it also skips timestamps hardforks to continue\n\t\t// discovering/checking number hardforks.\n\t\tlet hfIndex = hfs.findIndex(\n\t\t\thf =>\n\t\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\t\t(hf.block !== null && hf.block > blockNumber) ||\n\t\t\t\t(timestamp !== undefined && Number(hf.timestamp) > timestamp),\n\t\t);\n\n\t\tif (hfIndex === -1) {\n\t\t\t// all hardforks apply, set hfIndex to the last one as that's the candidate\n\t\t\thfIndex = hfs.length;\n\t\t} else if (hfIndex === 0) {\n\t\t\t// cannot have a case where a block number is before all applied hardforks\n\t\t\t// since the chain has to start with a hardfork\n\t\t\tthrow Error('Must have at least one hardfork at block 0');\n\t\t}\n\n\t\t// If timestamp is not provided, we need to rollback to the last hf with block or ttd\n\t\tif (timestamp === undefined) {\n\t\t\tconst stepBack = hfs\n\t\t\t\t.slice(0, hfIndex)\n\t\t\t\t.reverse()\n\t\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\t\t.findIndex(hf => hf.block !== null || hf.ttd !== undefined);\n\t\t\thfIndex -= stepBack;\n\t\t}\n\t\t// Move hfIndex one back to arrive at candidate hardfork\n\t\thfIndex -= 1;\n\n\t\t// If the timestamp was not provided, we could have skipped timestamp hardforks to look for number\n\t\t// hardforks. so it will now be needed to rollback\n\t\t// eslint-disable-next-line no-null/no-null\n\t\tif (hfs[hfIndex].block === null && hfs[hfIndex].timestamp === undefined) {\n\t\t\t// We're on the merge hardfork.  Let's check the TTD\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\tif (td === undefined || td === null || BigInt(hfs[hfIndex].ttd!) > td) {\n\t\t\t\t// Merge ttd greater than current td so we're on hardfork before merge\n\t\t\t\thfIndex -= 1;\n\t\t\t}\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t} else if (mergeIndex >= 0 && td !== undefined && td !== null) {\n\t\t\tif (hfIndex >= mergeIndex && BigInt(hfs[mergeIndex].ttd!) > td) {\n\t\t\t\tthrow Error(\n\t\t\t\t\t'Maximum HF determined by total difficulty is lower than the block number HF',\n\t\t\t\t);\n\t\t\t} else if (hfIndex < mergeIndex && BigInt(hfs[mergeIndex].ttd!) <= td) {\n\t\t\t\tthrow Error(\n\t\t\t\t\t'HF determined by block number is lower than the minimum total difficulty HF',\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tconst hfStartIndex = hfIndex;\n\t\t// Move the hfIndex to the end of the hardforks that might be scheduled on the same block/timestamp\n\t\t// This won't anyway be the case with Merge hfs\n\t\tfor (; hfIndex < hfs.length - 1; hfIndex += 1) {\n\t\t\t// break out if hfIndex + 1 is not scheduled at hfIndex\n\t\t\tif (\n\t\t\t\thfs[hfIndex].block !== hfs[hfIndex + 1].block ||\n\t\t\t\thfs[hfIndex].timestamp !== hfs[hfIndex + 1].timestamp\n\t\t\t) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (timestamp) {\n\t\t\tconst minTimeStamp = hfs\n\t\t\t\t.slice(0, hfStartIndex)\n\t\t\t\t.reduce(\n\t\t\t\t\t(acc: number, hf: HardforkConfig) => Math.max(Number(hf.timestamp ?? '0'), acc),\n\t\t\t\t\t0,\n\t\t\t\t);\n\t\t\tif (minTimeStamp > timestamp) {\n\t\t\t\tthrow Error(\n\t\t\t\t\t`Maximum HF determined by timestamp is lower than the block number/ttd HF`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst maxTimeStamp = hfs\n\t\t\t\t.slice(hfIndex + 1)\n\t\t\t\t.reduce(\n\t\t\t\t\t(acc: number, hf: HardforkConfig) =>\n\t\t\t\t\t\tMath.min(Number(hf.timestamp ?? timestamp), acc),\n\t\t\t\t\ttimestamp,\n\t\t\t\t);\n\t\t\tif (maxTimeStamp < timestamp) {\n\t\t\t\tthrow Error(`Maximum HF determined by block number/ttd is lower than timestamp HF`);\n\t\t\t}\n\t\t}\n\t\tconst hardfork = hfs[hfIndex];\n\t\treturn hardfork.name;\n\t}\n\n\t/**\n\t * Sets a new hardfork based on the block number or an optional\n\t * total difficulty (Merge HF) provided.\n\t *\n\t * An optional TD takes precedence in case the corresponding HF block\n\t * is set to `null` or otherwise needs to match (if not an error\n\t * will be thrown).\n\t *\n\t * @param blockNumber\n\t * @param td\n\t * @param timestamp\n\t * @returns The name of the HF set\n\t */\n\tpublic setHardforkByBlockNumber(\n\t\tblockNumber: Numbers,\n\t\ttd?: Numbers,\n\t\ttimestamp?: Numbers,\n\t): string {\n\t\tconst hardfork = this.getHardforkByBlockNumber(blockNumber, td, timestamp);\n\t\tthis.setHardfork(hardfork);\n\t\treturn hardfork;\n\t}\n\n\t/**\n\t * Internal helper function, returns the params for the given hardfork for the chain set\n\t * @param hardfork Hardfork name\n\t * @returns Dictionary with hardfork params or null if hardfork not on chain\n\t */\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tpublic _getHardfork(hardfork: string | Hardfork): HardforkConfig | null {\n\t\tconst hfs = this.hardforks();\n\t\tfor (const hf of hfs) {\n\t\t\tif (hf.name === hardfork) return hf;\n\t\t}\n\t\t// eslint-disable-next-line no-null/no-null\n\t\treturn null;\n\t}\n\n\t/**\n\t * Sets the active EIPs\n\t * @param eips\n\t */\n\tpublic setEIPs(eips: number[] = []) {\n\t\tfor (const eip of eips) {\n\t\t\tif (!(eip in EIPs)) {\n\t\t\t\tthrow new Error(`${eip} not supported`);\n\t\t\t}\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-argument\n\t\t\tconst minHF = this.gteHardfork(EIPs[eip].minimumHardfork);\n\t\t\tif (!minHF) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n\t\t\t\t\t`${eip} cannot be activated on hardfork ${this.hardfork()}, minimumHardfork: ${minHF}`,\n\t\t\t\t);\n\t\t\t}\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\t\tif (EIPs[eip].requiredEIPs !== undefined) {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\t\t\tfor (const elem of EIPs[eip].requiredEIPs) {\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n\t\t\t\t\tif (!(eips.includes(elem) || this.isActivatedEIP(elem))) {\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n\t\t\t\t\t\t\t`${eip} requires EIP ${elem}, but is not included in the EIP list`,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis._eips = eips;\n\t}\n\n\t/**\n\t * Returns a parameter for the current chain setup\n\t *\n\t * If the parameter is present in an EIP, the EIP always takes precedence.\n\t * Otherwise the parameter if taken from the latest applied HF with\n\t * a change on the respective parameter.\n\t *\n\t * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n\t * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n\t * @returns The value requested or `BigInt(0)` if not found\n\t */\n\tpublic param(topic: string, name: string): bigint {\n\t\t// TODO: consider the case that different active EIPs\n\t\t// can change the same parameter\n\t\tlet value;\n\t\tfor (const eip of this._eips) {\n\t\t\tvalue = this.paramByEIP(topic, name, eip);\n\t\t\tif (value !== undefined) return value;\n\t\t}\n\t\treturn this.paramByHardfork(topic, name, this._hardfork);\n\t}\n\n\t/**\n\t * Returns the parameter corresponding to a hardfork\n\t * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n\t * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n\t * @param hardfork Hardfork name\n\t * @returns The value requested or `BigInt(0)` if not found\n\t */\n\tpublic paramByHardfork(topic: string, name: string, hardfork: string | Hardfork): bigint {\n\t\t// eslint-disable-next-line no-null/no-null\n\t\tlet value = null;\n\t\tfor (const hfChanges of this.HARDFORK_CHANGES) {\n\t\t\t// EIP-referencing HF file (e.g. berlin.json)\n\t\t\tif ('eips' in hfChanges[1]) {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n\t\t\t\tconst hfEIPs = hfChanges[1].eips;\n\t\t\t\tfor (const eip of hfEIPs) {\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n\t\t\t\t\tconst valueEIP = this.paramByEIP(topic, name, eip);\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\t\t\t\t\tvalue = typeof valueEIP === 'bigint' ? valueEIP : value;\n\t\t\t\t}\n\t\t\t\t// Parameter-inlining HF file (e.g. istanbul.json)\n\t\t\t} else {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\t\t\tif (hfChanges[1][topic] === undefined) {\n\t\t\t\t\tthrow new Error(`Topic ${topic} not defined`);\n\t\t\t\t}\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\t\t\tif (hfChanges[1][topic][name] !== undefined) {\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n\t\t\t\t\tvalue = hfChanges[1][topic][name].v;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (hfChanges[0] === hardfork) break;\n\t\t}\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n\t\treturn BigInt(value ?? 0);\n\t}\n\n\t/**\n\t * Returns a parameter corresponding to an EIP\n\t * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n\t * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n\t * @param eip Number of the EIP\n\t * @returns The value requested or `undefined` if not found\n\t */\n\t// eslint-disable-next-line class-methods-use-this\n\tpublic paramByEIP(topic: string, name: string, eip: number): bigint | undefined {\n\t\tif (!(eip in EIPs)) {\n\t\t\tthrow new Error(`${eip} not supported`);\n\t\t}\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\t\tconst eipParams = EIPs[eip];\n\t\tif (!(topic in eipParams)) {\n\t\t\tthrow new Error(`Topic ${topic} not defined`);\n\t\t}\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\tif (eipParams[topic][name] === undefined) {\n\t\t\treturn undefined;\n\t\t}\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n\t\tconst value = eipParams[topic][name].v;\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n\t\treturn BigInt(value);\n\t}\n\n\t/**\n\t * Returns a parameter for the hardfork active on block number or\n\t * optional provided total difficulty (Merge HF)\n\t * @param topic Parameter topic\n\t * @param name Parameter name\n\t * @param blockNumber Block number\n\t * @param td Total difficulty\n\t *    * @returns The value requested or `BigInt(0)` if not found\n\t */\n\tpublic paramByBlock(\n\t\ttopic: string,\n\t\tname: string,\n\t\tblockNumber: Numbers,\n\t\ttd?: Numbers,\n\t\ttimestamp?: Numbers,\n\t): bigint {\n\t\tconst hardfork = this.getHardforkByBlockNumber(blockNumber, td, timestamp);\n\t\treturn this.paramByHardfork(topic, name, hardfork);\n\t}\n\n\t/**\n\t * Checks if an EIP is activated by either being included in the EIPs\n\t * manually passed in with the {@link CommonOpts.eips} or in a\n\t * hardfork currently being active\n\t *\n\t * Note: this method only works for EIPs being supported\n\t * by the {@link CommonOpts.eips} constructor option\n\t * @param eip\n\t */\n\tpublic isActivatedEIP(eip: number): boolean {\n\t\tif (this.eips().includes(eip)) {\n\t\t\treturn true;\n\t\t}\n\t\tfor (const hfChanges of this.HARDFORK_CHANGES) {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\t\t\tconst hf = hfChanges[1];\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-argument\n\t\t\tif (this.gteHardfork(hf.name) && 'eips' in hf) {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\t\t\tif ((hf.eips as number[]).includes(eip)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Checks if set or provided hardfork is active on block number\n\t * @param hardfork Hardfork name or null (for HF set)\n\t * @param blockNumber\n\t * @returns True if HF is active on block number\n\t */\n\tpublic hardforkIsActiveOnBlock(\n\t\t// eslint-disable-next-line @typescript-eslint/ban-types\n\t\t_hardfork: string | Hardfork | null,\n\t\t_blockNumber: Numbers,\n\t): boolean {\n\t\tconst blockNumber = toType(_blockNumber, TypeOutput.BigInt);\n\t\tconst hardfork = _hardfork ?? this._hardfork;\n\t\tconst hfBlock = this.hardforkBlock(hardfork);\n\t\tif (typeof hfBlock === 'bigint' && hfBlock !== BigInt(0) && blockNumber >= hfBlock) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Alias to hardforkIsActiveOnBlock when hardfork is set\n\t * @param blockNumber\n\t * @returns True if HF is active on block number\n\t */\n\tpublic activeOnBlock(blockNumber: Numbers): boolean {\n\t\t// eslint-disable-next-line no-null/no-null\n\t\treturn this.hardforkIsActiveOnBlock(null, blockNumber);\n\t}\n\n\t/**\n\t * Sequence based check if given or set HF1 is greater than or equal HF2\n\t * @param hardfork1 Hardfork name or null (if set)\n\t * @param hardfork2 Hardfork name\n\t * @param opts Hardfork options\n\t * @returns True if HF1 gte HF2\n\t */\n\tpublic hardforkGteHardfork(\n\t\t// eslint-disable-next-line @typescript-eslint/ban-types\n\t\t_hardfork1: string | Hardfork | null,\n\t\thardfork2: string | Hardfork,\n\t): boolean {\n\t\tconst hardfork1 = _hardfork1 ?? this._hardfork;\n\t\tconst hardforks = this.hardforks();\n\n\t\tlet posHf1 = -1;\n\t\tlet posHf2 = -1;\n\t\tlet index = 0;\n\t\tfor (const hf of hardforks) {\n\t\t\tif (hf.name === hardfork1) posHf1 = index;\n\t\t\tif (hf.name === hardfork2) posHf2 = index;\n\t\t\tindex += 1;\n\t\t}\n\t\treturn posHf1 >= posHf2 && posHf2 !== -1;\n\t}\n\n\t/**\n\t * Alias to hardforkGteHardfork when hardfork is set\n\t * @param hardfork Hardfork name\n\t * @returns True if hardfork set is greater than hardfork provided\n\t */\n\tpublic gteHardfork(hardfork: string | Hardfork): boolean {\n\t\t// eslint-disable-next-line no-null/no-null\n\t\treturn this.hardforkGteHardfork(null, hardfork);\n\t}\n\n\t/**\n\t * Returns the hardfork change block for hardfork provided or set\n\t * @param hardfork Hardfork name, optional if HF set\n\t * @returns Block number or null if unscheduled\n\t */\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tpublic hardforkBlock(_hardfork?: string | Hardfork): bigint | null {\n\t\tconst hardfork = _hardfork ?? this._hardfork;\n\t\tconst block = this._getHardfork(hardfork)?.block;\n\t\t// eslint-disable-next-line no-null/no-null\n\t\tif (block === undefined || block === null) {\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\treturn null;\n\t\t}\n\t\treturn BigInt(block);\n\t}\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tpublic hardforkTimestamp(_hardfork?: string | Hardfork): bigint | null {\n\t\tconst hardfork = _hardfork ?? this._hardfork;\n\t\tconst timestamp = this._getHardfork(hardfork)?.timestamp;\n\t\t// eslint-disable-next-line no-null/no-null\n\t\tif (timestamp === undefined || timestamp === null) {\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\treturn null;\n\t\t}\n\t\treturn BigInt(timestamp);\n\t}\n\n\t/**\n\t * Returns the hardfork change block for eip\n\t * @param eip EIP number\n\t * @returns Block number or null if unscheduled\n\t */\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tpublic eipBlock(eip: number): bigint | null {\n\t\tfor (const hfChanges of this.HARDFORK_CHANGES) {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\t\t\tconst hf = hfChanges[1];\n\t\t\tif ('eips' in hf) {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/strict-boolean-expressions, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n\t\t\t\tif (hf.eips.includes(eip)) {\n\t\t\t\t\treturn this.hardforkBlock(\n\t\t\t\t\t\ttypeof hfChanges[0] === 'number' ? String(hfChanges[0]) : hfChanges[0],\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// eslint-disable-next-line no-null/no-null\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the hardfork change total difficulty (Merge HF) for hardfork provided or set\n\t * @param hardfork Hardfork name, optional if HF set\n\t * @returns Total difficulty or null if no set\n\t */\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tpublic hardforkTTD(_hardfork?: string | Hardfork): bigint | null {\n\t\tconst hardfork = _hardfork ?? this._hardfork;\n\t\tconst ttd = this._getHardfork(hardfork)?.ttd;\n\t\t// eslint-disable-next-line no-null/no-null\n\t\tif (ttd === undefined || ttd === null) {\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\treturn null;\n\t\t}\n\t\treturn BigInt(ttd);\n\t}\n\n\t/**\n\t * True if block number provided is the hardfork (given or set) change block\n\t * @param blockNumber Number of the block to check\n\t * @param hardfork Hardfork name, optional if HF set\n\t * @returns True if blockNumber is HF block\n\t * @deprecated\n\t */\n\tpublic isHardforkBlock(_blockNumber: Numbers, _hardfork?: string | Hardfork): boolean {\n\t\tconst blockNumber = toType(_blockNumber, TypeOutput.BigInt);\n\t\tconst hardfork = _hardfork ?? this._hardfork;\n\t\tconst block = this.hardforkBlock(hardfork);\n\t\treturn typeof block === 'bigint' && block !== BigInt(0) ? block === blockNumber : false;\n\t}\n\n\t/**\n\t * Returns the change block for the next hardfork after the hardfork provided or set\n\t * @param hardfork Hardfork name, optional if HF set\n\t * @returns Block timestamp, number or null if not available\n\t */\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tpublic nextHardforkBlockOrTimestamp(_hardfork?: string | Hardfork): bigint | null {\n\t\tconst hardfork = _hardfork ?? this._hardfork;\n\t\tconst hfs = this.hardforks();\n\t\tlet hfIndex = hfs.findIndex(hf => hf.name === hardfork);\n\t\t// If the current hardfork is merge, go one behind as merge hf is not part of these\n\t\t// calcs even if the merge hf block is set\n\t\tif (hardfork === Hardfork.Merge) {\n\t\t\thfIndex -= 1;\n\t\t}\n\t\t// Hardfork not found\n\t\tif (hfIndex < 0) {\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\treturn null;\n\t\t}\n\n\t\tlet currHfTimeOrBlock = hfs[hfIndex].timestamp ?? hfs[hfIndex].block;\n\t\tcurrHfTimeOrBlock =\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\tcurrHfTimeOrBlock !== null && currHfTimeOrBlock !== undefined\n\t\t\t\t? Number(currHfTimeOrBlock)\n\t\t\t\t: // eslint-disable-next-line no-null/no-null\n\t\t\t\t  null;\n\n\t\tconst nextHf = hfs.slice(hfIndex + 1).find(hf => {\n\t\t\tlet hfTimeOrBlock = hf.timestamp ?? hf.block;\n\t\t\thfTimeOrBlock =\n\t\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\t\thfTimeOrBlock !== null && hfTimeOrBlock !== undefined\n\t\t\t\t\t? Number(hfTimeOrBlock)\n\t\t\t\t\t: // eslint-disable-next-line no-null/no-null\n\t\t\t\t\t  null;\n\t\t\treturn (\n\t\t\t\thf.name !== Hardfork.Merge &&\n\t\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\t\thfTimeOrBlock !== null &&\n\t\t\t\thfTimeOrBlock !== undefined &&\n\t\t\t\thfTimeOrBlock !== currHfTimeOrBlock\n\t\t\t);\n\t\t});\n\t\t// If no next hf found with valid block or timestamp return null\n\t\tif (nextHf === undefined) {\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\treturn null;\n\t\t}\n\n\t\tconst nextHfBlock = nextHf.timestamp ?? nextHf.block;\n\t\t// eslint-disable-next-line no-null/no-null\n\t\tif (nextHfBlock === null || nextHfBlock === undefined) {\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\treturn null;\n\t\t}\n\n\t\treturn BigInt(nextHfBlock);\n\t}\n\n\t/**\n\t * Returns the change block for the next hardfork after the hardfork provided or set\n\t * @param hardfork Hardfork name, optional if HF set\n\t * @returns Block number or null if not available\n\t * @deprecated\n\t */\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tpublic nextHardforkBlock(_hardfork?: string | Hardfork): bigint | null {\n\t\tconst hardfork = _hardfork ?? this._hardfork;\n\t\tlet hfBlock = this.hardforkBlock(hardfork);\n\t\t// If this is a merge hardfork with block not set, then we fallback to previous hardfork\n\t\t// to find the nextHardforkBlock\n\t\t// eslint-disable-next-line no-null/no-null\n\t\tif (hfBlock === null && hardfork === Hardfork.Merge) {\n\t\t\tconst hfs = this.hardforks();\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\tconst mergeIndex = hfs.findIndex(hf => hf.ttd !== null && hf.ttd !== undefined);\n\t\t\tif (mergeIndex < 0) {\n\t\t\t\tthrow Error(`Merge hardfork should have been found`);\n\t\t\t}\n\t\t\thfBlock = this.hardforkBlock(hfs[mergeIndex - 1].name);\n\t\t}\n\t\t// eslint-disable-next-line no-null/no-null\n\t\tif (hfBlock === null) {\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\treturn null;\n\t\t}\n\t\t// Next fork block number or null if none available\n\t\t// Logic: if accumulator is still null and on the first occurrence of\n\t\t// a block greater than the current hfBlock set the accumulator,\n\t\t// pass on the accumulator as the final result from this time on\n\t\t// eslint-disable-next-line no-null/no-null, @typescript-eslint/ban-types\n\t\tconst nextHfBlock = this.hardforks().reduce((acc: bigint | null, hf: HardforkConfig) => {\n\t\t\t// We need to ignore the merge block in our next hardfork calc\n\t\t\tconst block = BigInt(\n\t\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\t\thf.block === null || (hf.ttd !== undefined && hf.ttd !== null) ? 0 : hf.block,\n\t\t\t);\n\t\t\t// TypeScript can't seem to follow that the hfBlock is not null at this point\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\treturn block > hfBlock! && acc === null ? block : acc;\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t}, null);\n\t\treturn nextHfBlock;\n\t}\n\n\t/**\n\t * True if block number provided is the hardfork change block following the hardfork given or set\n\t * @param blockNumber Number of the block to check\n\t * @param hardfork Hardfork name, optional if HF set\n\t * @returns True if blockNumber is HF block\n\t * @deprecated\n\t */\n\tpublic isNextHardforkBlock(_blockNumber: Numbers, _hardfork?: string | Hardfork): boolean {\n\t\tconst blockNumber = toType(_blockNumber, TypeOutput.BigInt);\n\t\tconst hardfork = _hardfork ?? this._hardfork;\n\t\t// eslint-disable-next-line deprecation/deprecation\n\t\tconst nextHardforkBlock = this.nextHardforkBlock(hardfork);\n\t\t// eslint-disable-next-line no-null/no-null\n\t\treturn nextHardforkBlock === null ? false : nextHardforkBlock === blockNumber;\n\t}\n\n\t/**\n\t * Internal helper function to calculate a fork hash\n\t * @param hardfork Hardfork name\n\t * @param genesisHash Genesis block hash of the chain\n\t * @returns Fork hash as hex string\n\t */\n\tpublic _calcForkHash(hardfork: string | Hardfork, genesisHash: Uint8Array) {\n\t\tlet hfUint8Array = new Uint8Array();\n\t\tlet prevBlockOrTime = 0;\n\t\tfor (const hf of this.hardforks()) {\n\t\t\tconst { block, timestamp, name } = hf;\n\t\t\t// Timestamp to be used for timestamp based hfs even if we may bundle\n\t\t\t// block number with them retrospectively\n\t\t\tlet blockOrTime = timestamp ?? block;\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\tblockOrTime = blockOrTime !== null ? Number(blockOrTime) : null;\n\n\t\t\t// Skip for chainstart (0), not applied HFs (null) and\n\t\t\t// when already applied on same blockOrTime HFs\n\t\t\t// and on the merge since forkhash doesn't change on merge hf\n\t\t\tif (\n\t\t\t\ttypeof blockOrTime === 'number' &&\n\t\t\t\tblockOrTime !== 0 &&\n\t\t\t\tblockOrTime !== prevBlockOrTime &&\n\t\t\t\tname !== Hardfork.Merge\n\t\t\t) {\n\t\t\t\tconst hfBlockUint8Array = hexToBytes(blockOrTime.toString(16).padStart(16, '0'));\n\t\t\t\thfUint8Array = uint8ArrayConcat(hfUint8Array, hfBlockUint8Array);\n\t\t\t\tprevBlockOrTime = blockOrTime;\n\t\t\t}\n\n\t\t\tif (hf.name === hardfork) break;\n\t\t}\n\t\tconst inputUint8Array = uint8ArrayConcat(genesisHash, hfUint8Array);\n\n\t\t// CRC32 delivers result as signed (negative) 32-bit integer,\n\t\t// convert to hex string\n\t\t// eslint-disable-next-line no-bitwise\n\t\tconst forkhash = bytesToHex(intToUint8Array(crc32Uint8Array(inputUint8Array) >>> 0));\n\t\treturn forkhash;\n\t}\n\n\t/**\n\t * Returns an eth/64 compliant fork hash (EIP-2124)\n\t * @param hardfork Hardfork name, optional if HF set\n\t * @param genesisHash Genesis block hash of the chain, optional if already defined and not needed to be calculated\n\t */\n\tpublic forkHash(_hardfork?: string | Hardfork, genesisHash?: Uint8Array): string {\n\t\tconst hardfork = _hardfork ?? this._hardfork;\n\t\tconst data = this._getHardfork(hardfork);\n\t\tif (\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\tdata === null ||\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\t(data?.block === null && data?.timestamp === undefined && data?.ttd === undefined)\n\t\t) {\n\t\t\tconst msg = 'No fork hash calculation possible for future hardfork';\n\t\t\tthrow new Error(msg);\n\t\t}\n\t\t// eslint-disable-next-line no-null/no-null\n\t\tif (data?.forkHash !== null && data?.forkHash !== undefined) {\n\t\t\treturn data.forkHash;\n\t\t}\n\t\tif (!genesisHash) throw new Error('genesisHash required for forkHash calculation');\n\t\treturn this._calcForkHash(hardfork, genesisHash);\n\t}\n\n\t/**\n\t *\n\t * @param forkHash Fork hash as a hex string\n\t * @returns Array with hardfork data (name, block, forkHash)\n\t */\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tpublic hardforkForForkHash(forkHash: string): HardforkConfig | null {\n\t\tconst resArray = this.hardforks().filter((hf: HardforkConfig) => hf.forkHash === forkHash);\n\t\t// eslint-disable-next-line no-null/no-null\n\t\treturn resArray.length >= 1 ? resArray[resArray.length - 1] : null;\n\t}\n\n\t/**\n\t * Sets any missing forkHashes on the passed-in {@link Common} instance\n\t * @param common The {@link Common} to set the forkHashes for\n\t * @param genesisHash The genesis block hash\n\t */\n\tpublic setForkHashes(genesisHash: Uint8Array) {\n\t\tfor (const hf of this.hardforks()) {\n\t\t\tconst blockOrTime = hf.timestamp ?? hf.block;\n\t\t\tif (\n\t\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\t\t(hf.forkHash === null || hf.forkHash === undefined) &&\n\t\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\t\t((blockOrTime !== null && blockOrTime !== undefined) ||\n\t\t\t\t\ttypeof hf.ttd !== 'undefined')\n\t\t\t) {\n\t\t\t\thf.forkHash = this.forkHash(hf.name, genesisHash);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns the Genesis parameters of the current chain\n\t * @returns Genesis dictionary\n\t */\n\tpublic genesis(): GenesisBlockConfig {\n\t\treturn this._chainParams.genesis;\n\t}\n\n\t/**\n\t * Returns the hardforks for current chain\n\t * @returns {Array} Array with arrays of hardforks\n\t */\n\tpublic hardforks(): HardforkConfig[] {\n\t\treturn this._chainParams.hardforks;\n\t}\n\n\t/**\n\t * Returns bootstrap nodes for the current chain\n\t * @returns {Dictionary} Dict with bootstrap nodes\n\t */\n\tpublic bootstrapNodes(): BootstrapNodeConfig[] | undefined {\n\t\treturn this._chainParams.bootstrapNodes;\n\t}\n\n\t/**\n\t * Returns DNS networks for the current chain\n\t * @returns {String[]} Array of DNS ENR urls\n\t */\n\tpublic dnsNetworks(): string[] {\n\t\treturn this._chainParams.dnsNetworks!;\n\t}\n\n\t/**\n\t * Returns the hardfork set\n\t * @returns Hardfork name\n\t */\n\tpublic hardfork(): string | Hardfork {\n\t\treturn this._hardfork;\n\t}\n\n\t/**\n\t * Returns the Id of current chain\n\t * @returns chain Id\n\t */\n\tpublic chainId(): bigint {\n\t\treturn BigInt(this._chainParams.chainId);\n\t}\n\n\t/**\n\t * Returns the name of current chain\n\t * @returns chain name (lower case)\n\t */\n\tpublic chainName(): string {\n\t\treturn this._chainParams.name;\n\t}\n\n\t/**\n\t * Returns the Id of current network\n\t * @returns network Id\n\t */\n\tpublic networkId(): bigint {\n\t\treturn BigInt(this._chainParams.networkId);\n\t}\n\n\t/**\n\t * Returns the active EIPs\n\t * @returns List of EIPs\n\t */\n\tpublic eips(): number[] {\n\t\treturn this._eips;\n\t}\n\n\t/**\n\t * Returns the consensus type of the network\n\t * Possible values: \"pow\"|\"poa\"|\"pos\"\n\t *\n\t * Note: This value can update along a Hardfork.\n\t */\n\tpublic consensusType(): string | ConsensusType {\n\t\tconst hardfork = this.hardfork();\n\n\t\tlet value;\n\t\tfor (const hfChanges of this.HARDFORK_CHANGES) {\n\t\t\tif ('consensus' in hfChanges[1]) {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n\t\t\t\tvalue = hfChanges[1].consensus.type;\n\t\t\t}\n\t\t\tif (hfChanges[0] === hardfork) break;\n\t\t}\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\treturn value ?? this._chainParams.consensus.type;\n\t}\n\n\t/**\n\t * Returns the concrete consensus implementation\n\t * algorithm or protocol for the network\n\t * e.g. \"ethash\" for \"pow\" consensus type,\n\t * \"clique\" for \"poa\" consensus type or\n\t * \"casper\" for \"pos\" consensus type.\n\t *\n\t * Note: This value can update along a Hardfork.\n\t */\n\tpublic consensusAlgorithm(): string | ConsensusAlgorithm {\n\t\tconst hardfork = this.hardfork();\n\n\t\tlet value;\n\t\tfor (const hfChanges of this.HARDFORK_CHANGES) {\n\t\t\tif ('consensus' in hfChanges[1]) {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n\t\t\t\tvalue = hfChanges[1].consensus.algorithm;\n\t\t\t}\n\t\t\tif (hfChanges[0] === hardfork) break;\n\t\t}\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\treturn value ?? (this._chainParams.consensus.algorithm as ConsensusAlgorithm);\n\t}\n\n\t/**\n\t * Returns a dictionary with consensus configuration\n\t * parameters based on the consensus algorithm\n\t *\n\t * Expected returns (parameters must be present in\n\t * the respective chain json files):\n\t *\n\t * ethash: empty object\n\t * clique: period, epoch\n\t * casper: empty object\n\t *\n\t * Note: This value can update along a Hardfork.\n\t */\n\tpublic consensusConfig(): { [key: string]: CliqueConfig | EthashConfig | CasperConfig } {\n\t\tconst hardfork = this.hardfork();\n\n\t\tlet value;\n\t\tfor (const hfChanges of this.HARDFORK_CHANGES) {\n\t\t\tif ('consensus' in hfChanges[1]) {\n\t\t\t\t// The config parameter is named after the respective consensus algorithm\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n\t\t\t\tvalue = hfChanges[1].consensus[hfChanges[1].consensus.algorithm];\n\t\t\t}\n\t\t\tif (hfChanges[0] === hardfork) break;\n\t\t}\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\treturn (\n\t\t\tvalue ??\n\t\t\tthis._chainParams.consensus[this.consensusAlgorithm() as ConsensusAlgorithm] ??\n\t\t\t{}\n\t\t);\n\t}\n\n\t/**\n\t * Returns a deep copy of this {@link Common} instance.\n\t */\n\tpublic copy(): Common {\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-unsafe-assignment\n\t\tconst copy = Object.assign(Object.create(Object.getPrototypeOf(this)), this);\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n\t\tcopy.removeAllListeners();\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\treturn copy;\n\t}\n\n\tpublic static _getInitializedChains(customChains?: ChainConfig[]): ChainsConfig {\n\t\tconst names: ChainName = {};\n\t\tfor (const [name, id] of Object.entries(Chain)) {\n\t\t\tnames[id] = name.toLowerCase();\n\t\t}\n\t\tconst chains = { mainnet, goerli, sepolia } as ChainsConfig;\n\t\tif (customChains) {\n\t\t\tfor (const chain of customChains) {\n\t\t\t\tconst { name } = chain;\n\t\t\t\tnames[chain.chainId.toString()] = name;\n\t\t\t\tchains[name] = chain;\n\t\t\t}\n\t\t}\n\t\tchains.names = names;\n\t\treturn chains;\n\t}\n}\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/src/common/enums.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/src/common/index.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/src/common/types.ts",[],["425","426","427"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/src/common/utils.ts",["428","429","430","431","432","433","434","435","436","437","438","439","440","441","442","443","444","445","446","447","448","449","450","451","452","453","454","455","456","457","458","459","460","461","462","463","464","465","466","467","468","469","470","471","472","473","474","475","476"],["477","478","479","480","481","482","483","484","485","486","487","488","489","490","491","492","493","494","495","496","497","498","499","500","501","502","503","504","505","506","507","508","509","510","511","512","513","514","515","516","517","518","519","520","521","522","523"],"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { isHexPrefixed, isHexString } from 'web3-validator';\nimport { bytesToHex, hexToBytes, isUint8Array, numberToHex } from 'web3-utils';\nimport { secp256k1 } from '../tx/constants.js';\nimport { Hardfork } from './enums.js';\nimport { ToBytesInputTypes, TypeOutput, TypeOutputReturnType } from './types.js';\n\ntype ConfigHardfork =\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\t| { name: string; block: null; timestamp: number }\n\t| { name: string; block: number; timestamp?: number };\n\n/**\n * Removes '0x' from a given `String` if present\n * @param str the string value\n * @returns the string without 0x prefix\n */\nexport const stripHexPrefix = (str: string): string => {\n\tif (typeof str !== 'string')\n\t\tthrow new Error(`[stripHexPrefix] input must be type 'string', received ${typeof str}`);\n\n\treturn isHexPrefixed(str) ? str.slice(2) : str;\n};\n/**\n * Transforms Geth formatted nonce (i.e. hex string) to 8 byte 0x-prefixed string used internally\n * @param nonce string parsed from the Geth genesis file\n * @returns nonce as a 0x-prefixed 8 byte string\n */\nfunction formatNonce(nonce: string): string {\n\tif (!nonce || nonce === '0x0') {\n\t\treturn '0x0000000000000000';\n\t}\n\tif (isHexPrefixed(nonce)) {\n\t\treturn `0x${stripHexPrefix(nonce).padStart(16, '0')}`;\n\t}\n\treturn `0x${nonce.padStart(16, '0')}`;\n}\n\n/**\n * Converts a `Number` into a hex `String`\n * @param {Number} i\n * @return {String}\n */\nconst intToHex = function (i: number) {\n\tif (!Number.isSafeInteger(i) || i < 0) {\n\t\tthrow new Error(`Received an invalid integer type: ${i}`);\n\t}\n\treturn `0x${i.toString(16)}`;\n};\n\n/**\n * Converts Geth genesis parameters to an EthereumJS compatible `CommonOpts` object\n * @param json object representing the Geth genesis file\n * @param optional mergeForkIdPostMerge which clarifies the placement of MergeForkIdTransition\n * hardfork, which by default is post merge as with the merged eth networks but could also come\n * before merge like in kiln genesis\n * @returns genesis parameters in a `CommonOpts` compliant object\n */\nfunction parseGethParams(json: any, mergeForkIdPostMerge = true) {\n\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\tconst {\n\t\tname,\n\t\tconfig,\n\t\tdifficulty,\n\t\tmixHash,\n\t\tgasLimit,\n\t\tcoinbase,\n\t\tbaseFeePerGas,\n\t}: {\n\t\tname: string;\n\t\tconfig: any;\n\t\tdifficulty: string;\n\t\tmixHash: string;\n\t\tgasLimit: string;\n\t\tcoinbase: string;\n\t\tbaseFeePerGas: string;\n\t} = json;\n\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\tlet { extraData, timestamp, nonce }: { extraData: string; timestamp: string; nonce: string } =\n\t\tjson;\n\tconst genesisTimestamp = Number(timestamp);\n\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\tconst { chainId }: { chainId: number } = config;\n\n\t// geth is not strictly putting empty fields with a 0x prefix\n\tif (extraData === '') {\n\t\textraData = '0x';\n\t}\n\t// geth may use number for timestamp\n\tif (!isHexPrefixed(timestamp)) {\n\t\t// eslint-disable-next-line radix\n\t\ttimestamp = intToHex(parseInt(timestamp));\n\t}\n\t// geth may not give us a nonce strictly formatted to an 8 byte hex string\n\tif (nonce.length !== 18) {\n\t\tnonce = formatNonce(nonce);\n\t}\n\n\t// EIP155 and EIP158 are both part of Spurious Dragon hardfork and must occur at the same time\n\t// but have different configuration parameters in geth genesis parameters\n\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\tif (config.eip155Block !== config.eip158Block) {\n\t\tthrow new Error(\n\t\t\t'EIP155 block number must equal EIP 158 block number since both are part of SpuriousDragon hardfork and the client only supports activating the full hardfork',\n\t\t);\n\t}\n\n\tconst params = {\n\t\tname,\n\t\tchainId,\n\t\tnetworkId: chainId,\n\t\tgenesis: {\n\t\t\ttimestamp,\n\t\t\t// eslint-disable-next-line radix\n\t\t\tgasLimit: parseInt(gasLimit), // geth gasLimit and difficulty are hex strings while ours are `number`s\n\t\t\t// eslint-disable-next-line radix\n\t\t\tdifficulty: parseInt(difficulty),\n\t\t\tnonce,\n\t\t\textraData,\n\t\t\tmixHash,\n\t\t\tcoinbase,\n\t\t\tbaseFeePerGas,\n\t\t},\n\t\thardfork: undefined as string | undefined,\n\t\thardforks: [] as ConfigHardfork[],\n\t\tbootstrapNodes: [],\n\t\tconsensus:\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\t\tconfig.clique !== undefined\n\t\t\t\t? {\n\t\t\t\t\t\ttype: 'poa',\n\t\t\t\t\t\talgorithm: 'clique',\n\t\t\t\t\t\tclique: {\n\t\t\t\t\t\t\t// The recent geth genesis seems to be using blockperiodseconds\n\t\t\t\t\t\t\t// and epochlength for clique specification\n\t\t\t\t\t\t\t// see: https://hackmd.io/PqZgMpnkSWCWv5joJoFymQ\n\t\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n\t\t\t\t\t\t\tperiod: config.clique.period ?? config.clique.blockperiodseconds,\n\t\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,  @typescript-eslint/no-unsafe-assignment\n\t\t\t\t\t\t\tepoch: config.clique.epoch ?? config.clique.epochlength,\n\t\t\t\t\t\t},\n\t\t\t\t  }\n\t\t\t\t: {\n\t\t\t\t\t\ttype: 'pow',\n\t\t\t\t\t\talgorithm: 'ethash',\n\t\t\t\t\t\tethash: {},\n\t\t\t\t  },\n\t};\n\n\tconst forkMap: { [key: string]: { name: string; postMerge?: boolean; isTimestamp?: boolean } } =\n\t\t{\n\t\t\t[Hardfork.Homestead]: { name: 'homesteadBlock' },\n\t\t\t[Hardfork.Dao]: { name: 'daoForkBlock' },\n\t\t\t[Hardfork.TangerineWhistle]: { name: 'eip150Block' },\n\t\t\t[Hardfork.SpuriousDragon]: { name: 'eip155Block' },\n\t\t\t[Hardfork.Byzantium]: { name: 'byzantiumBlock' },\n\t\t\t[Hardfork.Constantinople]: { name: 'constantinopleBlock' },\n\t\t\t[Hardfork.Petersburg]: { name: 'petersburgBlock' },\n\t\t\t[Hardfork.Istanbul]: { name: 'istanbulBlock' },\n\t\t\t[Hardfork.MuirGlacier]: { name: 'muirGlacierBlock' },\n\t\t\t[Hardfork.Berlin]: { name: 'berlinBlock' },\n\t\t\t[Hardfork.London]: { name: 'londonBlock' },\n\t\t\t[Hardfork.MergeForkIdTransition]: {\n\t\t\t\tname: 'mergeForkBlock',\n\t\t\t\tpostMerge: mergeForkIdPostMerge,\n\t\t\t},\n\t\t\t[Hardfork.Shanghai]: { name: 'shanghaiTime', postMerge: true, isTimestamp: true },\n\t\t\t[Hardfork.ShardingForkDev]: {\n\t\t\t\tname: 'shardingForkTime',\n\t\t\t\tpostMerge: true,\n\t\t\t\tisTimestamp: true,\n\t\t\t},\n\t\t};\n\n\t// forkMapRev is the map from config field name to Hardfork\n\tconst forkMapRev = Object.keys(forkMap).reduce<{ [key: string]: string }>((acc, elem) => {\n\t\tacc[forkMap[elem].name] = elem;\n\t\treturn acc;\n\t}, {});\n\t// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n\tconst configHardforkNames = Object.keys(config).filter(\n\t\t// eslint-disable-next-line no-null/no-null, @typescript-eslint/no-unsafe-member-access\n\t\tkey => forkMapRev[key] !== undefined && config[key] !== undefined && config[key] !== null,\n\t);\n\n\tparams.hardforks = configHardforkNames\n\t\t.map(nameBlock => ({\n\t\t\tname: forkMapRev[nameBlock],\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\t\t\tblock:\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\t\t\tforkMap[forkMapRev[nameBlock]].isTimestamp === true ||\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\t\t\ttypeof config[nameBlock] !== 'number'\n\t\t\t\t\t? // eslint-disable-next-line no-null/no-null\n\t\t\t\t\t  null\n\t\t\t\t\t: // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\t\t\t\t  config[nameBlock],\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\t\t\ttimestamp:\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\t\t\tforkMap[forkMapRev[nameBlock]].isTimestamp === true &&\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\t\t\ttypeof config[nameBlock] === 'number'\n\t\t\t\t\t? // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\t\t\t\t  config[nameBlock]\n\t\t\t\t\t: undefined,\n\t\t}))\n\t\t// eslint-disable-next-line no-null/no-null\n\t\t.filter(fork => fork.block !== null || fork.timestamp !== undefined) as ConfigHardfork[];\n\n\tparams.hardforks.sort(\n\t\t(a: ConfigHardfork, b: ConfigHardfork) => (a.block ?? Infinity) - (b.block ?? Infinity),\n\t);\n\n\tparams.hardforks.sort(\n\t\t(a: ConfigHardfork, b: ConfigHardfork) =>\n\t\t\t(a.timestamp ?? genesisTimestamp) - (b.timestamp ?? genesisTimestamp),\n\t);\n\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\tif (config.terminalTotalDifficulty !== undefined) {\n\t\t// Following points need to be considered for placement of merge hf\n\t\t// - Merge hardfork can't be placed at genesis\n\t\t// - Place merge hf before any hardforks that require CL participation for e.g. withdrawals\n\t\t// - Merge hardfork has to be placed just after genesis if any of the genesis hardforks make CL\n\t\t//   necessary for e.g. withdrawals\n\t\tconst mergeConfig = {\n\t\t\tname: Hardfork.Merge,\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n\t\t\tttd: config.terminalTotalDifficulty,\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\tblock: null,\n\t\t};\n\n\t\t// Merge hardfork has to be placed before first hardfork that is dependent on merge\n\t\tconst postMergeIndex = params.hardforks.findIndex(\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\t\t(hf: any) => forkMap[hf.name]?.postMerge === true,\n\t\t);\n\t\tif (postMergeIndex !== -1) {\n\t\t\tparams.hardforks.splice(postMergeIndex, 0, mergeConfig as unknown as ConfigHardfork);\n\t\t} else {\n\t\t\tparams.hardforks.push(mergeConfig as unknown as ConfigHardfork);\n\t\t}\n\t}\n\n\tconst latestHardfork = params.hardforks.length > 0 ? params.hardforks.slice(-1)[0] : undefined;\n\tparams.hardfork = latestHardfork?.name;\n\tparams.hardforks.unshift({ name: Hardfork.Chainstart, block: 0 });\n\n\treturn params;\n}\n\n/**\n * Parses a genesis.json exported from Geth into parameters for Common instance\n * @param json representing the Geth genesis file\n * @param name optional chain name\n * @returns parsed params\n */\nexport function parseGethGenesis(json: any, name?: string, mergeForkIdPostMerge?: boolean) {\n\ttry {\n\t\tif (['config', 'difficulty', 'gasLimit', 'alloc'].some(field => !(field in json))) {\n\t\t\tthrow new Error('Invalid format, expected geth genesis fields missing');\n\t\t}\n\t\tif (name !== undefined) {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, no-param-reassign\n\t\t\tjson.name = name;\n\t\t}\n\t\treturn parseGethParams(json, mergeForkIdPostMerge);\n\t} catch (e: any) {\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/restrict-template-expressions\n\t\tthrow new Error(`Error parsing parameters file: ${e.message}`);\n\t}\n}\n\n/**\n * Pads a `String` to have an even length\n * @param value\n * @return output\n */\nexport function padToEven(value: string): string {\n\tlet a = value;\n\n\tif (typeof a !== 'string') {\n\t\tthrow new Error(`[padToEven] value must be type 'string', received ${typeof a}`);\n\t}\n\n\tif (a.length % 2) a = `0${a}`;\n\n\treturn a;\n}\n\n/**\n * Converts an `Number` to a `Uint8Array`\n * @param {Number} i\n * @return {Uint8Array}\n */\nexport const intToUint8Array = function (i: number) {\n\tconst hex = intToHex(i);\n\treturn hexToBytes(`0x${padToEven(hex.slice(2))}`);\n};\n\n/**\n * Attempts to turn a value into a `Uint8Array`.\n * Inputs supported: `Uint8Array` `String` (hex-prefixed), `Number`, null/undefined, `BigInt` and other objects\n * with a `toArray()` or `toUint8Array()` method.\n * @param v the value\n */\nexport const toUint8Array = function (v: ToBytesInputTypes): Uint8Array {\n\t// eslint-disable-next-line no-null/no-null\n\tif (v === null || v === undefined) {\n\t\treturn new Uint8Array();\n\t}\n\n\tif (v instanceof Uint8Array) {\n\t\treturn v;\n\t}\n\n\tif (v?.constructor?.name === 'Uint8Array') {\n\t\treturn Uint8Array.from(v as unknown as Uint8Array);\n\t}\n\n\tif (Array.isArray(v)) {\n\t\treturn Uint8Array.from(v);\n\t}\n\n\tif (typeof v === 'string') {\n\t\tif (!isHexString(v)) {\n\t\t\tthrow new Error(\n\t\t\t\t`Cannot convert string to Uint8Array. only supports 0x-prefixed hex strings and this string was given: ${v}`,\n\t\t\t);\n\t\t}\n\t\treturn hexToBytes(padToEven(stripHexPrefix(v)));\n\t}\n\n\tif (typeof v === 'number') {\n\t\treturn toUint8Array(numberToHex(v));\n\t}\n\n\tif (typeof v === 'bigint') {\n\t\tif (v < BigInt(0)) {\n\t\t\tthrow new Error(`Cannot convert negative bigint to Uint8Array. Given: ${v}`);\n\t\t}\n\t\tlet n = v.toString(16);\n\t\tif (n.length % 2) n = `0${n}`;\n\t\treturn toUint8Array(`0x${n}`);\n\t}\n\n\tif (v.toArray) {\n\t\t// converts a BN to a Uint8Array\n\t\treturn Uint8Array.from(v.toArray());\n\t}\n\n\tthrow new Error('invalid type');\n};\n\n/**\n * Converts a {@link Uint8Array} to a {@link bigint}\n */\nexport function uint8ArrayToBigInt(buf: Uint8Array) {\n\tconst hex = bytesToHex(buf);\n\tif (hex === '0x') {\n\t\treturn BigInt(0);\n\t}\n\treturn BigInt(hex);\n}\n\n/**\n * Converts a {@link bigint} to a {@link Uint8Array}\n */\nexport function bigIntToUint8Array(num: bigint) {\n\treturn toUint8Array(`0x${num.toString(16)}`);\n}\n\n/**\n * Returns a Uint8Array filled with 0s.\n * @param bytes the number of bytes the Uint8Array should be\n */\nexport const zeros = function (bytes: number): Uint8Array {\n\treturn new Uint8Array(bytes).fill(0);\n};\n\n/**\n * Pads a `Uint8Array` with zeros till it has `length` bytes.\n * Truncates the beginning or end of input if its length exceeds `length`.\n * @param msg the value to pad (Uint8Array)\n * @param length the number of bytes the output should be\n * @param right whether to start padding form the left or right\n * @return (Uint8Array)\n */\nconst setLength = function (msg: Uint8Array, length: number, right: boolean) {\n\tconst buf = zeros(length);\n\tif (right) {\n\t\tif (msg.length < length) {\n\t\t\tbuf.set(msg);\n\t\t\treturn buf;\n\t\t}\n\t\treturn msg.subarray(0, length);\n\t}\n\tif (msg.length < length) {\n\t\tbuf.set(msg, length - msg.length);\n\t\treturn buf;\n\t}\n\treturn msg.subarray(-length);\n};\n\n/**\n * Throws if input is not a Uint8Array\n * @param {Uint8Array} input value to check\n */\nexport function assertIsUint8Array(input: unknown): asserts input is Uint8Array {\n\tif (!isUint8Array(input)) {\n\t\t// eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n\t\tconst msg = `This method only supports Uint8Array but input was: ${input}`;\n\t\tthrow new Error(msg);\n\t}\n}\n/**\n * Left Pads a `Uint8Array` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param msg the value to pad (Uint8Array)\n * @param length the number of bytes the output should be\n * @return (Uint8Array)\n */\nexport const setLengthLeft = function (msg: Uint8Array, length: number) {\n\tassertIsUint8Array(msg);\n\treturn setLength(msg, length, false);\n};\n\n/**\n * Trims leading zeros from a `Uint8Array`, `String` or `Number[]`.\n * @param a (Uint8Array|Array|String)\n * @return (Uint8Array|Array|String)\n */\nexport function stripZeros<T extends Uint8Array | number[] | string>(a: T): T {\n\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n\tlet first = a[0];\n\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n\twhile (a.length > 0 && first.toString() === '0') {\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment, prefer-destructuring, @typescript-eslint/no-unsafe-call, no-param-reassign\n\t\ta = a.slice(1) as T;\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, prefer-destructuring, @typescript-eslint/no-unsafe-member-access\n\t\tfirst = a[0];\n\t}\n\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\treturn a;\n}\n\n/**\n * Trims leading zeros from a `Uint8Array`.\n * @param a (Uint8Array)\n * @return (Uint8Array)\n */\nexport const unpadUint8Array = function (a: Uint8Array): Uint8Array {\n\tassertIsUint8Array(a);\n\treturn stripZeros(a);\n};\n\n/**\n * Converts a {@link bigint} to a `0x` prefixed hex string\n */\nexport const bigIntToHex = (num: bigint) => `0x${num.toString(16)}`;\n\n/**\n * Convert value from bigint to an unpadded Uint8Array\n * (useful for RLP transport)\n * @param value value to convert\n */\nexport function bigIntToUnpaddedUint8Array(value: bigint): Uint8Array {\n\treturn unpadUint8Array(bigIntToUint8Array(value));\n}\n\nfunction calculateSigRecovery(v: bigint, chainId?: bigint): bigint {\n\tif (v === BigInt(0) || v === BigInt(1)) return v;\n\n\tif (chainId === undefined) {\n\t\treturn v - BigInt(27);\n\t}\n\treturn v - (chainId * BigInt(2) + BigInt(35));\n}\n\nfunction isValidSigRecovery(recovery: bigint): boolean {\n\treturn recovery === BigInt(0) || recovery === BigInt(1);\n}\n\n/**\n * ECDSA public key recovery from signature.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Recovered public key\n */\nexport const ecrecover = function (\n\tmsgHash: Uint8Array,\n\tv: bigint,\n\tr: Uint8Array,\n\ts: Uint8Array,\n\tchainId?: bigint,\n): Uint8Array {\n\tconst recovery = calculateSigRecovery(v, chainId);\n\tif (!isValidSigRecovery(recovery)) {\n\t\tthrow new Error('Invalid signature v value');\n\t}\n\n\tconst senderPubKey = new secp256k1.Signature(uint8ArrayToBigInt(r), uint8ArrayToBigInt(s))\n\t\t.addRecoveryBit(Number(recovery))\n\t\t.recoverPublicKey(msgHash)\n\t\t.toRawBytes(false);\n\treturn senderPubKey.slice(1);\n};\n\n/**\n * Convert an input to a specified type.\n * Input of null/undefined returns null/undefined regardless of the output type.\n * @param input value to convert\n * @param outputType type to output\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function toType<T extends TypeOutput>(input: null, outputType: T): null;\nexport function toType<T extends TypeOutput>(input: undefined, outputType: T): undefined;\nexport function toType<T extends TypeOutput>(\n\tinput: ToBytesInputTypes,\n\toutputType: T,\n): TypeOutputReturnType[T];\nexport function toType<T extends TypeOutput>(\n\tinput: ToBytesInputTypes,\n\toutputType: T,\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n): TypeOutputReturnType[T] | undefined | null {\n\t// eslint-disable-next-line no-null/no-null\n\tif (input === null) {\n\t\t// eslint-disable-next-line no-null/no-null\n\t\treturn null;\n\t}\n\tif (input === undefined) {\n\t\treturn undefined;\n\t}\n\n\tif (typeof input === 'string' && !isHexString(input)) {\n\t\tthrow new Error(`A string must be provided with a 0x-prefix, given: ${input}`);\n\t} else if (typeof input === 'number' && !Number.isSafeInteger(input)) {\n\t\tthrow new Error(\n\t\t\t'The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)',\n\t\t);\n\t}\n\n\tconst output = toUint8Array(input);\n\n\tswitch (outputType) {\n\t\tcase TypeOutput.Uint8Array:\n\t\t\treturn output as TypeOutputReturnType[T];\n\t\tcase TypeOutput.BigInt:\n\t\t\treturn uint8ArrayToBigInt(output) as TypeOutputReturnType[T];\n\t\tcase TypeOutput.Number: {\n\t\t\tconst bigInt = uint8ArrayToBigInt(output);\n\t\t\tif (bigInt > BigInt(Number.MAX_SAFE_INTEGER)) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)',\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn Number(bigInt) as TypeOutputReturnType[T];\n\t\t}\n\t\tcase TypeOutput.PrefixedHexString:\n\t\t\treturn bytesToHex(output) as TypeOutputReturnType[T];\n\t\tdefault:\n\t\t\tthrow new Error('unknown outputType');\n\t}\n}\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/src/index.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/src/schemas.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/src/tx/address.ts",["524","525"],[],"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { keccak256 } from 'ethereum-cryptography/keccak.js';\nimport { bytesToHex, uint8ArrayEquals } from 'web3-utils';\nimport { secp256k1 } from './constants.js';\nimport { assertIsUint8Array, zeros } from '../common/utils.js';\n\nexport class Address {\n\tpublic readonly buf: Uint8Array;\n\n\tpublic constructor(buf: Uint8Array) {\n\t\tif (buf.length !== 20) {\n\t\t\tthrow new Error('Invalid address length');\n\t\t}\n\t\tthis.buf = buf;\n\t}\n\n\t/**\n\t * Returns the zero address.\n\t */\n\tpublic static zero(): Address {\n\t\treturn new Address(zeros(20));\n\t}\n\n\t/**\n\t * Is address equal to another.\n\t */\n\tpublic equals(address: Address): boolean {\n\t\treturn uint8ArrayEquals(this.buf, address.buf);\n\t}\n\n\t/**\n\t * Is address zero.\n\t */\n\tpublic isZero(): boolean {\n\t\treturn this.equals(Address.zero());\n\t}\n\n\t/**\n\t * Returns hex encoding of address.\n\t */\n\tpublic toString(): string {\n\t\treturn bytesToHex(this.buf);\n\t}\n\n\t/**\n\t * Returns Uint8Array representation of address.\n\t */\n\tpublic toArray(): Uint8Array {\n\t\treturn this.buf;\n\t}\n\n\t/**\n\t * Returns the ethereum address of a given public key.\n\t * Accepts \"Ethereum public keys\" and SEC1 encoded keys.\n\t * @param pubKey The two points of an uncompressed key, unless sanitize is enabled\n\t * @param sanitize Accept public keys in other formats\n\t */\n\tpublic static publicToAddress(_pubKey: Uint8Array, sanitize = false): Uint8Array {\n\t\tlet pubKey = _pubKey;\n\t\tassertIsUint8Array(pubKey);\n\t\tif (sanitize && pubKey.length !== 64) {\n\t\t\tpubKey = secp256k1.ProjectivePoint.fromHex(pubKey).toRawBytes(false).slice(1);\n\t\t}\n\t\tif (pubKey.length !== 64) {\n\t\t\tthrow new Error('Expected pubKey to be of length 64');\n\t\t}\n\t\t// Only take the lower 160bits of the hash\n\t\treturn keccak256(pubKey).slice(-20);\n\t}\n}\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/src/tx/baseTransaction.ts",["526","527","528","529","530","531","532","533","534","535","536","537","538","539","540","541"],["542","543","544","545","546","547","548","549","550"],"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { Common as CommonType, Numbers } from 'web3-types';\nimport { bytesToHex } from 'web3-utils';\nimport { MAX_INTEGER, MAX_UINT64, SECP256K1_ORDER_DIV_2, secp256k1 } from './constants.js';\nimport { toUint8Array, uint8ArrayToBigInt, unpadUint8Array } from '../common/utils.js';\nimport { Common } from '../common/common.js';\nimport { Hardfork, Chain } from '../common/enums.js';\nimport type {\n\tAccessListEIP2930TxData,\n\tAccessListEIP2930ValuesArray,\n\tFeeMarketEIP1559TxData,\n\tFeeMarketEIP1559ValuesArray,\n\tJsonTx,\n\tTxData,\n\tTxOptions,\n\tTxValuesArray,\n} from './types.js';\nimport { Capability, ECDSASignature } from './types.js';\nimport { Address } from './address.js';\nimport { checkMaxInitCodeSize } from './utils.js';\n\ninterface TransactionCache {\n\thash: Uint8Array | undefined;\n\tdataFee?: {\n\t\tvalue: bigint;\n\t\thardfork: string | Hardfork;\n\t};\n}\n\n/**\n * This base class will likely be subject to further\n * refactoring along the introduction of additional tx types\n * on the Ethereum network.\n *\n * It is therefore not recommended to use directly.\n */\nexport abstract class BaseTransaction<TransactionObject> {\n\tprivate readonly _type: number;\n\n\tpublic readonly nonce: bigint;\n\tpublic readonly gasLimit: bigint;\n\tpublic readonly to?: Address;\n\tpublic readonly value: bigint;\n\tpublic readonly data: Uint8Array;\n\n\tpublic readonly v?: bigint;\n\tpublic readonly r?: bigint;\n\tpublic readonly s?: bigint;\n\n\tpublic readonly common!: Common;\n\n\tprotected cache: TransactionCache = {\n\t\thash: undefined,\n\t\tdataFee: undefined,\n\t};\n\n\tprotected readonly txOptions: TxOptions;\n\n\t/**\n\t * List of tx type defining EIPs,\n\t * e.g. 1559 (fee market) and 2930 (access lists)\n\t * for FeeMarketEIP1559Transaction objects\n\t */\n\tprotected activeCapabilities: number[] = [];\n\n\t/**\n\t * The default chain the tx falls back to if no Common\n\t * is provided and if the chain can't be derived from\n\t * a passed in chainId (only EIP-2718 typed txs) or\n\t * EIP-155 signature (legacy txs).\n\t *\n\t * @hidden\n\t */\n\tprotected DEFAULT_CHAIN = Chain.Mainnet;\n\n\t/**\n\t * The default HF if the tx type is active on that HF\n\t * or the first greater HF where the tx is active.\n\t *\n\t * @hidden\n\t */\n\tprotected DEFAULT_HARDFORK: string | Hardfork = Hardfork.Merge;\n\n\tpublic constructor(\n\t\ttxData: TxData | AccessListEIP2930TxData | FeeMarketEIP1559TxData,\n\t\topts: TxOptions,\n\t) {\n\t\tconst { nonce, gasLimit, to, value, data, v, r, s, type } = txData;\n\t\tthis._type = Number(uint8ArrayToBigInt(toUint8Array(type)));\n\n\t\tthis.txOptions = opts;\n\n\t\tconst toB = toUint8Array(to === '' ? '0x' : to);\n\t\tconst vB = toUint8Array(v === '' ? '0x' : v);\n\t\tconst rB = toUint8Array(r === '' ? '0x' : r);\n\t\tconst sB = toUint8Array(s === '' ? '0x' : s);\n\n\t\tthis.nonce = uint8ArrayToBigInt(toUint8Array(nonce === '' ? '0x' : nonce));\n\t\tthis.gasLimit = uint8ArrayToBigInt(toUint8Array(gasLimit === '' ? '0x' : gasLimit));\n\t\tthis.to = toB.length > 0 ? new Address(toB) : undefined;\n\t\tthis.value = uint8ArrayToBigInt(toUint8Array(value === '' ? '0x' : value));\n\t\tthis.data = toUint8Array(data === '' ? '0x' : data);\n\n\t\tthis.v = vB.length > 0 ? uint8ArrayToBigInt(vB) : undefined;\n\t\tthis.r = rB.length > 0 ? uint8ArrayToBigInt(rB) : undefined;\n\t\tthis.s = sB.length > 0 ? uint8ArrayToBigInt(sB) : undefined;\n\n\t\tthis._validateCannotExceedMaxInteger({ value: this.value, r: this.r, s: this.s });\n\n\t\t// geth limits gasLimit to 2^64-1\n\t\tthis._validateCannotExceedMaxInteger({ gasLimit: this.gasLimit }, 64);\n\n\t\t// EIP-2681 limits nonce to 2^64-1 (cannot equal 2^64-1)\n\t\tthis._validateCannotExceedMaxInteger({ nonce: this.nonce }, 64, true);\n\t\t// eslint-disable-next-line no-null/no-null\n\t\tconst createContract = this.to === undefined || this.to === null;\n\t\tconst allowUnlimitedInitCodeSize = opts.allowUnlimitedInitCodeSize ?? false;\n\t\tconst common = opts.common ?? this._getCommon();\n\t\tif (createContract && common.isActivatedEIP(3860) && !allowUnlimitedInitCodeSize) {\n\t\t\tcheckMaxInitCodeSize(common, this.data.length);\n\t\t}\n\t}\n\n\t/**\n\t * Returns the transaction type.\n\t *\n\t * Note: legacy txs will return tx type `0`.\n\t */\n\tpublic get type() {\n\t\treturn this._type;\n\t}\n\n\t/**\n\t * Checks if a tx type defining capability is active\n\t * on a tx, for example the EIP-1559 fee market mechanism\n\t * or the EIP-2930 access list feature.\n\t *\n\t * Note that this is different from the tx type itself,\n\t * so EIP-2930 access lists can very well be active\n\t * on an EIP-1559 tx for example.\n\t *\n\t * This method can be useful for feature checks if the\n\t * tx type is unknown (e.g. when instantiated with\n\t * the tx factory).\n\t *\n\t * See `Capabilites` in the `types` module for a reference\n\t * on all supported capabilities.\n\t */\n\tpublic supports(capability: Capability) {\n\t\treturn this.activeCapabilities.includes(capability);\n\t}\n\n\t/**\n\t * Checks if the transaction has the minimum amount of gas required\n\t * (DataFee + TxFee + Creation Fee).\n\t */\n\tpublic validate(): boolean;\n\tpublic validate(stringError: false): boolean;\n\tpublic validate(stringError: true): string[];\n\tpublic validate(stringError = false): boolean | string[] {\n\t\tconst errors = [];\n\n\t\tif (this.getBaseFee() > this.gasLimit) {\n\t\t\terrors.push(\n\t\t\t\t`gasLimit is too low. given ${this.gasLimit}, need at least ${this.getBaseFee()}`,\n\t\t\t);\n\t\t}\n\n\t\tif (this.isSigned() && !this.verifySignature()) {\n\t\t\terrors.push('Invalid Signature');\n\t\t}\n\n\t\treturn stringError ? errors : errors.length === 0;\n\t}\n\n\tprotected _validateYParity() {\n\t\tconst { v } = this;\n\t\tif (v !== undefined && v !== BigInt(0) && v !== BigInt(1)) {\n\t\t\tconst msg = this._errorMsg('The y-parity of the transaction should either be 0 or 1');\n\t\t\tthrow new Error(msg);\n\t\t}\n\t}\n\n\t/**\n\t * EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2are considered invalid.\n\t * Reasoning: https://ethereum.stackexchange.com/a/55728\n\t */\n\tprotected _validateHighS() {\n\t\tconst { s } = this;\n\t\tif (this.common.gteHardfork('homestead') && s !== undefined && s > SECP256K1_ORDER_DIV_2) {\n\t\t\tconst msg = this._errorMsg(\n\t\t\t\t'Invalid Signature: s-values greater than secp256k1n/2 are considered invalid',\n\t\t\t);\n\t\t\tthrow new Error(msg);\n\t\t}\n\t}\n\n\t/**\n\t * The minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)\n\t */\n\tpublic getBaseFee(): bigint {\n\t\tconst txFee = this.common.param('gasPrices', 'tx');\n\t\tlet fee = this.getDataFee();\n\t\tif (txFee) fee += txFee;\n\t\tif (this.common.gteHardfork('homestead') && this.toCreationAddress()) {\n\t\t\tconst txCreationFee = this.common.param('gasPrices', 'txCreation');\n\t\t\tif (txCreationFee) fee += txCreationFee;\n\t\t}\n\t\treturn fee;\n\t}\n\n\t/**\n\t * The amount of gas paid for the data in this tx\n\t */\n\tpublic getDataFee(): bigint {\n\t\tconst txDataZero = this.common.param('gasPrices', 'txDataZero');\n\t\tconst txDataNonZero = this.common.param('gasPrices', 'txDataNonZero');\n\n\t\tlet cost = BigInt(0);\n\t\t// eslint-disable-next-line @typescript-eslint/prefer-for-of\n\t\tfor (let i = 0; i < this.data.length; i += 1) {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unused-expressions, no-unused-expressions\n\t\t\tthis.data[i] === 0 ? (cost += txDataZero) : (cost += txDataNonZero);\n\t\t}\n\t\t// eslint-disable-next-line no-null/no-null\n\t\tif ((this.to === undefined || this.to === null) && this.common.isActivatedEIP(3860)) {\n\t\t\tconst dataLength = BigInt(Math.ceil(this.data.length / 32));\n\t\t\tconst initCodeCost = this.common.param('gasPrices', 'initCodeWordCost') * dataLength;\n\t\t\tcost += initCodeCost;\n\t\t}\n\n\t\treturn cost;\n\t}\n\n\t/**\n\t * The up front amount that an account must have for this transaction to be valid\n\t */\n\tpublic abstract getUpfrontCost(): bigint;\n\n\t/**\n\t * If the tx's `to` is to the creation address\n\t */\n\tpublic toCreationAddress(): boolean {\n\t\treturn this.to === undefined || this.to.buf.length === 0;\n\t}\n\n\t/**\n\t * Returns a Uint8Array Array of the raw Uint8Arrays of this transaction, in order.\n\t *\n\t * Use {@link BaseTransaction.serialize} to add a transaction to a block\n\t * with {@link Block.fromValuesArray}.\n\t *\n\t * For an unsigned tx this method uses the empty Uint8Array values for the\n\t * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n\t * representation for external signing use {@link BaseTransaction.getMessageToSign}.\n\t */\n\tpublic abstract raw():\n\t\t| TxValuesArray\n\t\t| AccessListEIP2930ValuesArray\n\t\t| FeeMarketEIP1559ValuesArray;\n\n\t/**\n\t * Returns the encoding of the transaction.\n\t */\n\tpublic abstract serialize(): Uint8Array;\n\n\t// Returns the unsigned tx (hashed or raw), which is used to sign the transaction.\n\t//\n\t// Note: do not use code docs here since VS Studio is then not able to detect the\n\t// comments from the inherited methods\n\tpublic abstract getMessageToSign(hashMessage: false): Uint8Array | Uint8Array[];\n\tpublic abstract getMessageToSign(hashMessage?: true): Uint8Array;\n\n\tpublic abstract hash(): Uint8Array;\n\n\tpublic abstract getMessageToVerifySignature(): Uint8Array;\n\n\tpublic isSigned(): boolean {\n\t\tconst { v, r, s } = this;\n\t\tif (v === undefined || r === undefined || s === undefined) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Determines if the signature is valid\n\t */\n\tpublic verifySignature(): boolean {\n\t\ttry {\n\t\t\t// Main signature verification is done in `getSenderPublicKey()`\n\t\t\tconst publicKey = this.getSenderPublicKey();\n\t\t\treturn unpadUint8Array(publicKey).length !== 0;\n\t\t} catch (e: any) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Returns the sender's address\n\t */\n\tpublic getSenderAddress(): Address {\n\t\treturn new Address(Address.publicToAddress(this.getSenderPublicKey()));\n\t}\n\n\t/**\n\t * Returns the public key of the sender\n\t */\n\tpublic abstract getSenderPublicKey(): Uint8Array;\n\n\t/**\n\t * Signs a transaction.\n\t *\n\t * Note that the signed tx is returned as a new object,\n\t * use as follows:\n\t * ```javascript\n\t * const signedTx = tx.sign(privateKey)\n\t * ```\n\t */\n\tpublic sign(privateKey: Uint8Array): TransactionObject {\n\t\tif (privateKey.length !== 32) {\n\t\t\tconst msg = this._errorMsg('Private key must be 32 bytes in length.');\n\t\t\tthrow new Error(msg);\n\t\t}\n\n\t\t// Hack for the constellation that we have got a legacy tx after spuriousDragon with a non-EIP155 conforming signature\n\t\t// and want to recreate a signature (where EIP155 should be applied)\n\t\t// Leaving this hack lets the legacy.spec.ts -> sign(), verifySignature() test fail\n\t\t// 2021-06-23\n\t\tlet hackApplied = false;\n\t\tif (\n\t\t\tthis.type === 0 &&\n\t\t\tthis.common.gteHardfork('spuriousDragon') &&\n\t\t\t!this.supports(Capability.EIP155ReplayProtection)\n\t\t) {\n\t\t\tthis.activeCapabilities.push(Capability.EIP155ReplayProtection);\n\t\t\thackApplied = true;\n\t\t}\n\n\t\tconst msgHash = this.getMessageToSign(true);\n\t\tconst { v, r, s } = this._ecsign(msgHash, privateKey);\n\t\tconst tx = this._processSignature(v, r, s);\n\n\t\t// Hack part 2\n\t\tif (hackApplied) {\n\t\t\tconst index = this.activeCapabilities.indexOf(Capability.EIP155ReplayProtection);\n\t\t\tif (index > -1) {\n\t\t\t\tthis.activeCapabilities.splice(index, 1);\n\t\t\t}\n\t\t}\n\n\t\treturn tx;\n\t}\n\n\t/**\n\t * Returns an object with the JSON representation of the transaction\n\t */\n\tpublic abstract toJSON(): JsonTx;\n\n\t// Accept the v,r,s values from the `sign` method, and convert this into a TransactionObject\n\tprotected abstract _processSignature(\n\t\tv: bigint,\n\t\tr: Uint8Array,\n\t\ts: Uint8Array,\n\t): TransactionObject;\n\n\t/**\n\t * Does chain ID checks on common and returns a common\n\t * to be used on instantiation\n\t * @hidden\n\t *\n\t * @param common - {@link Common} instance from tx options\n\t * @param chainId - Chain ID from tx options (typed txs) or signature (legacy tx)\n\t */\n\tprotected _getCommon(common?: Common, chainId?: Numbers) {\n\t\t// TODO: this function needs to be reviewed and the code to be more clean\n\t\t// check issue https://github.com/web3/web3.js/issues/6666\n\t\t// Chain ID provided\n\t\tif (chainId !== undefined) {\n\t\t\tconst chainIdBigInt = uint8ArrayToBigInt(toUint8Array(chainId));\n\t\t\tif (common) {\n\t\t\t\tif (common.chainId() !== chainIdBigInt) {\n\t\t\t\t\tconst msg = this._errorMsg(\n\t\t\t\t\t\t'The chain ID does not match the chain ID of Common',\n\t\t\t\t\t);\n\t\t\t\t\tthrow new Error(msg);\n\t\t\t\t}\n\t\t\t\t// Common provided, chain ID does match\n\t\t\t\t// -> Return provided Common\n\t\t\t\treturn common.copy();\n\t\t\t}\n\t\t\tif (Common.isSupportedChainId(chainIdBigInt)) {\n\t\t\t\t// No Common, chain ID supported by Common\n\t\t\t\t// -> Instantiate Common with chain ID\n\t\t\t\treturn new Common({ chain: chainIdBigInt, hardfork: this.DEFAULT_HARDFORK });\n\t\t\t}\n\t\t\t// No Common, chain ID not supported by Common\n\t\t\t// -> Instantiate custom Common derived from DEFAULT_CHAIN\n\t\t\treturn Common.custom(\n\t\t\t\t{\n\t\t\t\t\tname: 'custom-chain',\n\t\t\t\t\tnetworkId: chainIdBigInt,\n\t\t\t\t\tchainId: chainIdBigInt,\n\t\t\t\t},\n\t\t\t\t{ baseChain: this.DEFAULT_CHAIN, hardfork: this.DEFAULT_HARDFORK },\n\t\t\t);\n\t\t}\n\t\t// No chain ID provided\n\t\t// -> return Common provided or create new default Common\n\n\t\tif (common?.copy && typeof common?.copy === 'function') {\n\t\t\treturn common.copy();\n\t\t}\n\t\t// TODO: Recheck this next block when working on https://github.com/web3/web3.js/issues/6666\n\t\t// This block is to handle when `chainId` was not passed and the `common` object does not have `copy()`\n\t\t// If it was meant to be unsupported to process `common` in this case, an exception should be thrown instead of the following block\n\t\tif (common) {\n\t\t\tconst hardfork =\n\t\t\t\ttypeof common.hardfork === 'function'\n\t\t\t\t\t? common.hardfork()\n\t\t\t\t\t: // eslint-disable-next-line @typescript-eslint/unbound-method\n\t\t\t\t\t  (common.hardfork as unknown as string);\n\n\t\t\treturn Common.custom(\n\t\t\t\t{\n\t\t\t\t\tname: 'custom-chain',\n\t\t\t\t\tnetworkId: common.networkId\n\t\t\t\t\t\t? common.networkId()\n\t\t\t\t\t\t: BigInt((common as unknown as CommonType).customChain?.networkId) ??\n\t\t\t\t\t\t  undefined,\n\t\t\t\t\tchainId: common.chainId\n\t\t\t\t\t\t? common.chainId()\n\t\t\t\t\t\t: BigInt((common as unknown as CommonType).customChain?.chainId) ??\n\t\t\t\t\t\t  undefined,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tbaseChain: this.DEFAULT_CHAIN,\n\t\t\t\t\thardfork: hardfork || this.DEFAULT_HARDFORK,\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\treturn new Common({ chain: this.DEFAULT_CHAIN, hardfork: this.DEFAULT_HARDFORK });\n\t}\n\n\t/**\n\t * Validates that an object with BigInt values cannot exceed the specified bit limit.\n\t * @param values Object containing string keys and BigInt values\n\t * @param bits Number of bits to check (64 or 256)\n\t * @param cannotEqual Pass true if the number also cannot equal one less the maximum value\n\t */\n\tprotected _validateCannotExceedMaxInteger(\n\t\tvalues: { [key: string]: bigint | undefined },\n\t\tbits = 256,\n\t\tcannotEqual = false,\n\t) {\n\t\tfor (const [key, value] of Object.entries(values)) {\n\t\t\tswitch (bits) {\n\t\t\t\tcase 64:\n\t\t\t\t\tif (cannotEqual) {\n\t\t\t\t\t\tif (value !== undefined && value >= MAX_UINT64) {\n\t\t\t\t\t\t\tconst msg = this._errorMsg(\n\t\t\t\t\t\t\t\t`${key} cannot equal or exceed MAX_UINT64 (2^64-1), given ${value}`,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tthrow new Error(msg);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (value !== undefined && value > MAX_UINT64) {\n\t\t\t\t\t\tconst msg = this._errorMsg(\n\t\t\t\t\t\t\t`${key} cannot exceed MAX_UINT64 (2^64-1), given ${value}`,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthrow new Error(msg);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 256:\n\t\t\t\t\tif (cannotEqual) {\n\t\t\t\t\t\tif (value !== undefined && value >= MAX_INTEGER) {\n\t\t\t\t\t\t\tconst msg = this._errorMsg(\n\t\t\t\t\t\t\t\t`${key} cannot equal or exceed MAX_INTEGER (2^256-1), given ${value}`,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tthrow new Error(msg);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (value !== undefined && value > MAX_INTEGER) {\n\t\t\t\t\t\tconst msg = this._errorMsg(\n\t\t\t\t\t\t\t`${key} cannot exceed MAX_INTEGER (2^256-1), given ${value}`,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthrow new Error(msg);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault: {\n\t\t\t\t\tconst msg = this._errorMsg('unimplemented bits value');\n\t\t\t\t\tthrow new Error(msg);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected static _validateNotArray(values: { [key: string]: any }) {\n\t\tconst txDataKeys = [\n\t\t\t'nonce',\n\t\t\t'gasPrice',\n\t\t\t'gasLimit',\n\t\t\t'to',\n\t\t\t'value',\n\t\t\t'data',\n\t\t\t'v',\n\t\t\t'r',\n\t\t\t's',\n\t\t\t'type',\n\t\t\t'baseFee',\n\t\t\t'maxFeePerGas',\n\t\t\t'chainId',\n\t\t];\n\t\tfor (const [key, value] of Object.entries(values)) {\n\t\t\tif (txDataKeys.includes(key)) {\n\t\t\t\tif (Array.isArray(value)) {\n\t\t\t\t\tthrow new Error(`${key} cannot be an array`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Return a compact error string representation of the object\n\t */\n\tpublic abstract errorStr(): string;\n\n\t/**\n\t * Internal helper function to create an annotated error message\n\t *\n\t * @param msg Base error message\n\t * @hidden\n\t */\n\tprotected abstract _errorMsg(msg: string): string;\n\n\t/**\n\t * Returns the shared error postfix part for _error() method\n\t * tx type implementations.\n\t */\n\tprotected _getSharedErrorPostfix() {\n\t\tlet hash = '';\n\t\ttry {\n\t\t\thash = this.isSigned() ? bytesToHex(this.hash()) : 'not available (unsigned)';\n\t\t} catch (e: any) {\n\t\t\thash = 'error';\n\t\t}\n\t\tlet isSigned = '';\n\t\ttry {\n\t\t\tisSigned = this.isSigned().toString();\n\t\t} catch (e: any) {\n\t\t\thash = 'error';\n\t\t}\n\t\tlet hf = '';\n\t\ttry {\n\t\t\thf = this.common.hardfork();\n\t\t} catch (e: any) {\n\t\t\thf = 'error';\n\t\t}\n\n\t\tlet postfix = `tx type=${this.type} hash=${hash} nonce=${this.nonce} value=${this.value} `;\n\t\tpostfix += `signed=${isSigned} hf=${hf}`;\n\n\t\treturn postfix;\n\t}\n\t// eslint-disable-next-line class-methods-use-this\n\tprivate _ecsign(msgHash: Uint8Array, privateKey: Uint8Array, chainId?: bigint): ECDSASignature {\n\t\tconst signature = secp256k1.sign(msgHash, privateKey);\n\t\tconst signatureBytes = signature.toCompactRawBytes();\n\n\t\tconst r = signatureBytes.subarray(0, 32);\n\t\tconst s = signatureBytes.subarray(32, 64);\n\n\t\tconst v =\n\t\t\tchainId === undefined\n\t\t\t\t? BigInt(signature.recovery! + 27)\n\t\t\t\t: BigInt(signature.recovery! + 35) + BigInt(chainId) * BigInt(2);\n\n\t\treturn { r, s, v };\n\t}\n\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tpublic static fromSerializedTx(\n\t\t// @ts-expect-error unused variable\n\t\tserialized: Uint8Array,\n\t\t// @ts-expect-error unused variable\n\t\topts: TxOptions = {},\n\t\t// eslint-disable-next-line @typescript-eslint/no-empty-function\n\t): any {}\n\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tpublic static fromTxData(\n\t\t// @ts-expect-error unused variable\n\t\ttxData: any,\n\t\t// @ts-expect-error unused variable\n\t\topts: TxOptions = {},\n\t\t// eslint-disable-next-line @typescript-eslint/no-empty-function\n\t): any {}\n}\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/src/tx/constants.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/src/tx/eip1559Transaction.ts",["551","552","553","554","555","556","557","558","559","560","561","562","563","564","565","566","567"],["568","569"],"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { keccak256 } from 'ethereum-cryptography/keccak.js';\nimport { validateNoLeadingZeroes } from 'web3-validator';\nimport { RLP } from '@ethereumjs/rlp';\nimport { bytesToHex, hexToBytes, uint8ArrayConcat, uint8ArrayEquals } from 'web3-utils';\nimport { MAX_INTEGER } from './constants.js';\nimport { BaseTransaction } from './baseTransaction.js';\nimport {\n\tgetAccessListData,\n\tgetAccessListJSON,\n\tgetDataFeeEIP2930,\n\tverifyAccessList,\n} from './utils.js';\nimport {\n\tbigIntToHex,\n\ttoUint8Array,\n\tecrecover,\n\tuint8ArrayToBigInt,\n\tbigIntToUnpaddedUint8Array,\n} from '../common/utils.js';\nimport type {\n\tAccessList,\n\tAccessListUint8Array,\n\tFeeMarketEIP1559TxData,\n\tFeeMarketEIP1559ValuesArray,\n\tJsonTx,\n\tTxOptions,\n} from './types.js';\nimport type { Common } from '../common/common.js';\n\nconst TRANSACTION_TYPE = 2;\nconst TRANSACTION_TYPE_UINT8ARRAY = hexToBytes(TRANSACTION_TYPE.toString(16).padStart(2, '0'));\n\n/**\n * Typed transaction with a new gas fee market mechanism\n *\n * - TransactionType: 2\n * - EIP: [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559)\n */\n// eslint-disable-next-line no-use-before-define\nexport class FeeMarketEIP1559Transaction extends BaseTransaction<FeeMarketEIP1559Transaction> {\n\tpublic readonly chainId: bigint;\n\tpublic readonly accessList: AccessListUint8Array;\n\tpublic readonly AccessListJSON: AccessList;\n\tpublic readonly maxPriorityFeePerGas: bigint;\n\tpublic readonly maxFeePerGas: bigint;\n\n\tpublic readonly common: Common;\n\n\t/**\n\t * The default HF if the tx type is active on that HF\n\t * or the first greater HF where the tx is active.\n\t *\n\t * @hidden\n\t */\n\tprotected DEFAULT_HARDFORK = 'london';\n\n\t/**\n\t * Instantiate a transaction from a data dictionary.\n\t *\n\t * Format: { chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n\t * accessList, v, r, s }\n\t *\n\t * Notes:\n\t * - `chainId` will be set automatically if not provided\n\t * - All parameters are optional and have some basic default values\n\t */\n\tpublic static fromTxData(txData: FeeMarketEIP1559TxData, opts: TxOptions = {}) {\n\t\treturn new FeeMarketEIP1559Transaction(txData, opts);\n\t}\n\n\t/**\n\t * Instantiate a transaction from the serialized tx.\n\t *\n\t * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n\t * accessList, signatureYParity, signatureR, signatureS])`\n\t */\n\tpublic static fromSerializedTx(serialized: Uint8Array, opts: TxOptions = {}) {\n\t\tif (!uint8ArrayEquals(serialized.subarray(0, 1), TRANSACTION_TYPE_UINT8ARRAY)) {\n\t\t\tthrow new Error(\n\t\t\t\t`Invalid serialized tx input: not an EIP-1559 transaction (wrong tx type, expected: ${TRANSACTION_TYPE}, received: ${bytesToHex(\n\t\t\t\t\tserialized.subarray(0, 1),\n\t\t\t\t)}`,\n\t\t\t);\n\t\t}\n\t\tconst values = RLP.decode(serialized.subarray(1));\n\n\t\tif (!Array.isArray(values)) {\n\t\t\tthrow new Error('Invalid serialized tx input: must be array');\n\t\t}\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n\t\treturn FeeMarketEIP1559Transaction.fromValuesArray(values as any, opts);\n\t}\n\n\t/**\n\t * Create a transaction from a values array.\n\t *\n\t * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n\t * accessList, signatureYParity, signatureR, signatureS]`\n\t */\n\tpublic static fromValuesArray(values: FeeMarketEIP1559ValuesArray, opts: TxOptions = {}) {\n\t\tif (values.length !== 9 && values.length !== 12) {\n\t\t\tthrow new Error(\n\t\t\t\t'Invalid EIP-1559 transaction. Only expecting 9 values (for unsigned tx) or 12 values (for signed tx).',\n\t\t\t);\n\t\t}\n\n\t\tconst [\n\t\t\tchainId,\n\t\t\tnonce,\n\t\t\tmaxPriorityFeePerGas,\n\t\t\tmaxFeePerGas,\n\t\t\tgasLimit,\n\t\t\tto,\n\t\t\tvalue,\n\t\t\tdata,\n\t\t\taccessList,\n\t\t\tv,\n\t\t\tr,\n\t\t\ts,\n\t\t] = values;\n\n\t\tthis._validateNotArray({ chainId, v });\n\t\tvalidateNoLeadingZeroes({\n\t\t\tnonce,\n\t\t\tmaxPriorityFeePerGas,\n\t\t\tmaxFeePerGas,\n\t\t\tgasLimit,\n\t\t\tvalue,\n\t\t\tv,\n\t\t\tr,\n\t\t\ts,\n\t\t});\n\n\t\treturn new FeeMarketEIP1559Transaction(\n\t\t\t{\n\t\t\t\tchainId: uint8ArrayToBigInt(chainId),\n\t\t\t\tnonce,\n\t\t\t\tmaxPriorityFeePerGas,\n\t\t\t\tmaxFeePerGas,\n\t\t\t\tgasLimit,\n\t\t\t\tto,\n\t\t\t\tvalue,\n\t\t\t\tdata,\n\t\t\t\taccessList: accessList ?? [],\n\t\t\t\tv: v !== undefined ? uint8ArrayToBigInt(v) : undefined, // EIP2930 supports v's with value 0 (empty Uint8Array)\n\t\t\t\tr,\n\t\t\t\ts,\n\t\t\t},\n\t\t\topts,\n\t\t);\n\t}\n\n\t/**\n\t * This constructor takes the values, validates them, assigns them and freezes the object.\n\t *\n\t * It is not recommended to use this constructor directly. Instead use\n\t * the static factory methods to assist in creating a Transaction object from\n\t * varying data types.\n\t */\n\tpublic constructor(txData: FeeMarketEIP1559TxData, opts: TxOptions = {}) {\n\t\tsuper({ ...txData, type: TRANSACTION_TYPE }, opts);\n\t\tconst { chainId, accessList, maxFeePerGas, maxPriorityFeePerGas } = txData;\n\n\t\tthis.common = this._getCommon(opts.common, chainId);\n\t\tthis.chainId = this.common.chainId();\n\n\t\tif (!this.common.isActivatedEIP(1559)) {\n\t\t\tthrow new Error('EIP-1559 not enabled on Common');\n\t\t}\n\t\tthis.activeCapabilities = this.activeCapabilities.concat([1559, 2718, 2930]);\n\n\t\t// Populate the access list fields\n\t\tconst accessListData = getAccessListData(accessList ?? []);\n\t\tthis.accessList = accessListData.accessList;\n\t\tthis.AccessListJSON = accessListData.AccessListJSON;\n\t\t// Verify the access list format.\n\t\tverifyAccessList(this.accessList);\n\n\t\tthis.maxFeePerGas = uint8ArrayToBigInt(\n\t\t\ttoUint8Array(maxFeePerGas === '' ? '0x' : maxFeePerGas),\n\t\t);\n\t\tthis.maxPriorityFeePerGas = uint8ArrayToBigInt(\n\t\t\ttoUint8Array(maxPriorityFeePerGas === '' ? '0x' : maxPriorityFeePerGas),\n\t\t);\n\n\t\tthis._validateCannotExceedMaxInteger({\n\t\t\tmaxFeePerGas: this.maxFeePerGas,\n\t\t\tmaxPriorityFeePerGas: this.maxPriorityFeePerGas,\n\t\t});\n\n\t\tBaseTransaction._validateNotArray(txData);\n\n\t\tif (this.gasLimit * this.maxFeePerGas > MAX_INTEGER) {\n\t\t\tconst msg = this._errorMsg(\n\t\t\t\t'gasLimit * maxFeePerGas cannot exceed MAX_INTEGER (2^256-1)',\n\t\t\t);\n\t\t\tthrow new Error(msg);\n\t\t}\n\n\t\tif (this.maxFeePerGas < this.maxPriorityFeePerGas) {\n\t\t\tconst msg = this._errorMsg(\n\t\t\t\t'maxFeePerGas cannot be less than maxPriorityFeePerGas (The total must be the larger of the two)',\n\t\t\t);\n\t\t\tthrow new Error(msg);\n\t\t}\n\n\t\tthis._validateYParity();\n\t\tthis._validateHighS();\n\n\t\tconst freeze = opts?.freeze ?? true;\n\t\tif (freeze) {\n\t\t\tObject.freeze(this);\n\t\t}\n\t}\n\n\t/**\n\t * The amount of gas paid for the data in this tx\n\t */\n\tpublic getDataFee(): bigint {\n\t\tif (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n\t\t\treturn this.cache.dataFee.value;\n\t\t}\n\n\t\tlet cost = super.getDataFee();\n\t\tcost += BigInt(getDataFeeEIP2930(this.accessList, this.common));\n\n\t\tif (Object.isFrozen(this)) {\n\t\t\tthis.cache.dataFee = {\n\t\t\t\tvalue: cost,\n\t\t\t\thardfork: this.common.hardfork(),\n\t\t\t};\n\t\t}\n\n\t\treturn cost;\n\t}\n\n\t/**\n\t * The up front amount that an account must have for this transaction to be valid\n\t * @param baseFee The base fee of the block (will be set to 0 if not provided)\n\t */\n\tpublic getUpfrontCost(baseFee = BigInt(0)): bigint {\n\t\tconst prio = this.maxPriorityFeePerGas;\n\t\tconst maxBase = this.maxFeePerGas - baseFee;\n\t\tconst inclusionFeePerGas = prio < maxBase ? prio : maxBase;\n\t\tconst gasPrice = inclusionFeePerGas + baseFee;\n\t\treturn this.gasLimit * gasPrice + this.value;\n\t}\n\n\t/**\n\t * Returns a Uint8Array Array of the raw Uint8Arrays of the EIP-1559 transaction, in order.\n\t *\n\t * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n\t * accessList, signatureYParity, signatureR, signatureS]`\n\t *\n\t * Use {@link FeeMarketEIP1559Transaction.serialize} to add a transaction to a block\n\t * with {@link Block.fromValuesArray}.\n\t *\n\t * For an unsigned tx this method uses the empty Uint8Array values for the\n\t * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n\t * representation for external signing use {@link FeeMarketEIP1559Transaction.getMessageToSign}.\n\t */\n\tpublic raw(): FeeMarketEIP1559ValuesArray {\n\t\treturn [\n\t\t\tbigIntToUnpaddedUint8Array(this.chainId),\n\t\t\tbigIntToUnpaddedUint8Array(this.nonce),\n\t\t\tbigIntToUnpaddedUint8Array(this.maxPriorityFeePerGas),\n\t\t\tbigIntToUnpaddedUint8Array(this.maxFeePerGas),\n\t\t\tbigIntToUnpaddedUint8Array(this.gasLimit),\n\t\t\tthis.to !== undefined ? this.to.buf : Uint8Array.from([]),\n\t\t\tbigIntToUnpaddedUint8Array(this.value),\n\t\t\tthis.data,\n\t\t\tthis.accessList,\n\t\t\tthis.v !== undefined ? bigIntToUnpaddedUint8Array(this.v) : Uint8Array.from([]),\n\t\t\tthis.r !== undefined ? bigIntToUnpaddedUint8Array(this.r) : Uint8Array.from([]),\n\t\t\tthis.s !== undefined ? bigIntToUnpaddedUint8Array(this.s) : Uint8Array.from([]),\n\t\t];\n\t}\n\n\t/**\n\t * Returns the serialized encoding of the EIP-1559 transaction.\n\t *\n\t * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n\t * accessList, signatureYParity, signatureR, signatureS])`\n\t *\n\t * Note that in contrast to the legacy tx serialization format this is not\n\t * valid RLP any more due to the raw tx type preceding and concatenated to\n\t * the RLP encoding of the values.\n\t */\n\tpublic serialize(): Uint8Array {\n\t\tconst base = this.raw();\n\t\treturn uint8ArrayConcat(TRANSACTION_TYPE_UINT8ARRAY, RLP.encode(base));\n\t}\n\n\t/**\n\t * Returns the serialized unsigned tx (hashed or raw), which can be used\n\t * to sign the transaction (e.g. for sending to a hardware wallet).\n\t *\n\t * Note: in contrast to the legacy tx the raw message format is already\n\t * serialized and doesn't need to be RLP encoded any more.\n\t *\n\t * ```javascript\n\t * const serializedMessage = tx.getMessageToSign(false) // use this for the HW wallet input\n\t * ```\n\t *\n\t * @param hashMessage - Return hashed message if set to true (default: true)\n\t */\n\tpublic getMessageToSign(hashMessage = true): Uint8Array {\n\t\tconst base = this.raw().slice(0, 9);\n\t\tconst message = uint8ArrayConcat(TRANSACTION_TYPE_UINT8ARRAY, RLP.encode(base));\n\t\tif (hashMessage) {\n\t\t\treturn keccak256(message);\n\t\t}\n\t\treturn message;\n\t}\n\n\t/**\n\t * Computes a sha3-256 hash of the serialized tx.\n\t *\n\t * This method can only be used for signed txs (it throws otherwise).\n\t * Use {@link FeeMarketEIP1559Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n\t */\n\tpublic hash(): Uint8Array {\n\t\tif (!this.isSigned()) {\n\t\t\tconst msg = this._errorMsg('Cannot call hash method if transaction is not signed');\n\t\t\tthrow new Error(msg);\n\t\t}\n\n\t\tif (Object.isFrozen(this)) {\n\t\t\tif (!this.cache.hash) {\n\t\t\t\tthis.cache.hash = keccak256(this.serialize());\n\t\t\t}\n\t\t\treturn this.cache.hash;\n\t\t}\n\n\t\treturn keccak256(this.serialize());\n\t}\n\n\t/**\n\t * Computes a sha3-256 hash which can be used to verify the signature\n\t */\n\tpublic getMessageToVerifySignature(): Uint8Array {\n\t\treturn this.getMessageToSign();\n\t}\n\n\t/**\n\t * Returns the public key of the sender\n\t */\n\tpublic getSenderPublicKey(): Uint8Array {\n\t\tif (!this.isSigned()) {\n\t\t\tconst msg = this._errorMsg('Cannot call this method if transaction is not signed');\n\t\t\tthrow new Error(msg);\n\t\t}\n\n\t\tconst msgHash = this.getMessageToVerifySignature();\n\t\tconst { v, r, s } = this;\n\n\t\tthis._validateHighS();\n\n\t\ttry {\n\t\t\treturn ecrecover(\n\t\t\t\tmsgHash,\n\t\t\t\tv! + BigInt(27), // Recover the 27 which was stripped from ecsign\n\t\t\t\tbigIntToUnpaddedUint8Array(r!),\n\t\t\t\tbigIntToUnpaddedUint8Array(s!),\n\t\t\t);\n\t\t} catch (e: any) {\n\t\t\tconst msg = this._errorMsg('Invalid Signature');\n\t\t\tthrow new Error(msg);\n\t\t}\n\t}\n\n\tpublic _processSignature(v: bigint, r: Uint8Array, s: Uint8Array) {\n\t\tconst opts = { ...this.txOptions, common: this.common };\n\n\t\treturn FeeMarketEIP1559Transaction.fromTxData(\n\t\t\t{\n\t\t\t\tchainId: this.chainId,\n\t\t\t\tnonce: this.nonce,\n\t\t\t\tmaxPriorityFeePerGas: this.maxPriorityFeePerGas,\n\t\t\t\tmaxFeePerGas: this.maxFeePerGas,\n\t\t\t\tgasLimit: this.gasLimit,\n\t\t\t\tto: this.to,\n\t\t\t\tvalue: this.value,\n\t\t\t\tdata: this.data,\n\t\t\t\taccessList: this.accessList,\n\t\t\t\tv: v - BigInt(27), // This looks extremely hacky: /util actually adds 27 to the value, the recovery bit is either 0 or 1.\n\t\t\t\tr: uint8ArrayToBigInt(r),\n\t\t\t\ts: uint8ArrayToBigInt(s),\n\t\t\t},\n\t\t\topts,\n\t\t);\n\t}\n\n\t/**\n\t * Returns an object with the JSON representation of the transaction\n\t */\n\tpublic toJSON(): JsonTx {\n\t\tconst accessListJSON = getAccessListJSON(this.accessList);\n\n\t\treturn {\n\t\t\tchainId: bigIntToHex(this.chainId),\n\t\t\tnonce: bigIntToHex(this.nonce),\n\t\t\tmaxPriorityFeePerGas: bigIntToHex(this.maxPriorityFeePerGas),\n\t\t\tmaxFeePerGas: bigIntToHex(this.maxFeePerGas),\n\t\t\tgasLimit: bigIntToHex(this.gasLimit),\n\t\t\tto: this.to !== undefined ? this.to.toString() : undefined,\n\t\t\tvalue: bigIntToHex(this.value),\n\t\t\tdata: bytesToHex(this.data),\n\t\t\taccessList: accessListJSON,\n\t\t\tv: this.v !== undefined ? bigIntToHex(this.v) : undefined,\n\t\t\tr: this.r !== undefined ? bigIntToHex(this.r) : undefined,\n\t\t\ts: this.s !== undefined ? bigIntToHex(this.s) : undefined,\n\t\t};\n\t}\n\n\t/**\n\t * Return a compact error string representation of the object\n\t */\n\tpublic errorStr() {\n\t\tlet errorStr = this._getSharedErrorPostfix();\n\t\terrorStr += ` maxFeePerGas=${this.maxFeePerGas} maxPriorityFeePerGas=${this.maxPriorityFeePerGas}`;\n\t\treturn errorStr;\n\t}\n\n\t/**\n\t * Internal helper function to create an annotated error message\n\t *\n\t * @param msg Base error message\n\t * @hidden\n\t */\n\tprotected _errorMsg(msg: string) {\n\t\treturn `${msg} (${this.errorStr()})`;\n\t}\n}\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/src/tx/eip2930Transaction.ts",["570","571","572","573","574","575","576","577","578","579","580","581","582","583","584","585"],["586","587"],"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { keccak256 } from 'ethereum-cryptography/keccak.js';\nimport { validateNoLeadingZeroes } from 'web3-validator';\nimport { RLP } from '@ethereumjs/rlp';\nimport { bytesToHex, hexToBytes, uint8ArrayConcat, uint8ArrayEquals } from 'web3-utils';\nimport { MAX_INTEGER } from './constants.js';\nimport {\n\tgetAccessListData,\n\tverifyAccessList,\n\tgetAccessListJSON,\n\tgetDataFeeEIP2930,\n} from './utils.js';\nimport {\n\tbigIntToHex,\n\ttoUint8Array,\n\tecrecover,\n\tuint8ArrayToBigInt,\n\tbigIntToUnpaddedUint8Array,\n} from '../common/utils.js';\nimport { BaseTransaction } from './baseTransaction.js';\nimport type {\n\tAccessList,\n\tAccessListUint8Array,\n\tAccessListEIP2930TxData,\n\tAccessListEIP2930ValuesArray,\n\tJsonTx,\n\tTxOptions,\n} from './types.js';\nimport type { Common } from '../common/common.js';\n\nconst TRANSACTION_TYPE = 1;\nconst TRANSACTION_TYPE_UINT8ARRAY = hexToBytes(TRANSACTION_TYPE.toString(16).padStart(2, '0'));\n\n/**\n * Typed transaction with optional access lists\n *\n * - TransactionType: 1\n * - EIP: [EIP-2930](https://eips.ethereum.org/EIPS/eip-2930)\n */\n// eslint-disable-next-line no-use-before-define\nexport class AccessListEIP2930Transaction extends BaseTransaction<AccessListEIP2930Transaction> {\n\tpublic readonly chainId: bigint;\n\tpublic readonly accessList: AccessListUint8Array;\n\tpublic readonly AccessListJSON: AccessList;\n\tpublic readonly gasPrice: bigint;\n\n\tpublic readonly common: Common;\n\n\t/**\n\t * The default HF if the tx type is active on that HF\n\t * or the first greater HF where the tx is active.\n\t *\n\t * @hidden\n\t */\n\tprotected DEFAULT_HARDFORK = 'berlin';\n\n\t/**\n\t * Instantiate a transaction from a data dictionary.\n\t *\n\t * Format: { chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n\t * v, r, s }\n\t *\n\t * Notes:\n\t * - `chainId` will be set automatically if not provided\n\t * - All parameters are optional and have some basic default values\n\t */\n\tpublic static fromTxData(txData: AccessListEIP2930TxData, opts: TxOptions = {}) {\n\t\treturn new AccessListEIP2930Transaction(txData, opts);\n\t}\n\n\t/**\n\t * Instantiate a transaction from the serialized tx.\n\t *\n\t * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n\t * signatureYParity (v), signatureR (r), signatureS (s)])`\n\t */\n\tpublic static fromSerializedTx(serialized: Uint8Array, opts: TxOptions = {}) {\n\t\tif (!uint8ArrayEquals(serialized.subarray(0, 1), TRANSACTION_TYPE_UINT8ARRAY)) {\n\t\t\tthrow new Error(\n\t\t\t\t`Invalid serialized tx input: not an EIP-2930 transaction (wrong tx type, expected: ${TRANSACTION_TYPE}, received: ${bytesToHex(\n\t\t\t\t\tserialized.subarray(0, 1),\n\t\t\t\t)}`,\n\t\t\t);\n\t\t}\n\t\tconst values = RLP.decode(Uint8Array.from(serialized.subarray(1)));\n\n\t\tif (!Array.isArray(values)) {\n\t\t\tthrow new Error('Invalid serialized tx input: must be array');\n\t\t}\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n\t\treturn AccessListEIP2930Transaction.fromValuesArray(values as any, opts);\n\t}\n\n\t/**\n\t * Create a transaction from a values array.\n\t *\n\t * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n\t * signatureYParity (v), signatureR (r), signatureS (s)]`\n\t */\n\tpublic static fromValuesArray(values: AccessListEIP2930ValuesArray, opts: TxOptions = {}) {\n\t\tif (values.length !== 8 && values.length !== 11) {\n\t\t\tthrow new Error(\n\t\t\t\t'Invalid EIP-2930 transaction. Only expecting 8 values (for unsigned tx) or 11 values (for signed tx).',\n\t\t\t);\n\t\t}\n\n\t\tconst [chainId, nonce, gasPrice, gasLimit, to, value, data, accessList, v, r, s] = values;\n\n\t\tthis._validateNotArray({ chainId, v });\n\t\tvalidateNoLeadingZeroes({ nonce, gasPrice, gasLimit, value, v, r, s });\n\n\t\tconst emptyAccessList: AccessList = [];\n\n\t\treturn new AccessListEIP2930Transaction(\n\t\t\t{\n\t\t\t\tchainId: uint8ArrayToBigInt(chainId),\n\t\t\t\tnonce,\n\t\t\t\tgasPrice,\n\t\t\t\tgasLimit,\n\t\t\t\tto,\n\t\t\t\tvalue,\n\t\t\t\tdata,\n\t\t\t\taccessList: accessList ?? emptyAccessList,\n\t\t\t\tv: v !== undefined ? uint8ArrayToBigInt(v) : undefined, // EIP2930 supports v's with value 0 (empty Uint8Array)\n\t\t\t\tr,\n\t\t\t\ts,\n\t\t\t},\n\t\t\topts,\n\t\t);\n\t}\n\n\t/**\n\t * This constructor takes the values, validates them, assigns them and freezes the object.\n\t *\n\t * It is not recommended to use this constructor directly. Instead use\n\t * the static factory methods to assist in creating a Transaction object from\n\t * varying data types.\n\t */\n\tpublic constructor(txData: AccessListEIP2930TxData, opts: TxOptions = {}) {\n\t\tsuper({ ...txData, type: TRANSACTION_TYPE }, opts);\n\t\tconst { chainId, accessList, gasPrice } = txData;\n\n\t\tthis.common = this._getCommon(opts.common, chainId);\n\t\tthis.chainId = this.common.chainId();\n\n\t\t// EIP-2718 check is done in Common\n\t\tif (!this.common.isActivatedEIP(2930)) {\n\t\t\tthrow new Error('EIP-2930 not enabled on Common');\n\t\t}\n\t\tthis.activeCapabilities = this.activeCapabilities.concat([2718, 2930]);\n\n\t\t// Populate the access list fields\n\t\tconst accessListData = getAccessListData(accessList ?? []);\n\t\tthis.accessList = accessListData.accessList;\n\t\tthis.AccessListJSON = accessListData.AccessListJSON;\n\t\t// Verify the access list format.\n\t\tverifyAccessList(this.accessList);\n\n\t\tthis.gasPrice = uint8ArrayToBigInt(toUint8Array(gasPrice === '' ? '0x' : gasPrice));\n\n\t\tthis._validateCannotExceedMaxInteger({\n\t\t\tgasPrice: this.gasPrice,\n\t\t});\n\n\t\tBaseTransaction._validateNotArray(txData);\n\n\t\tif (this.gasPrice * this.gasLimit > MAX_INTEGER) {\n\t\t\tconst msg = this._errorMsg('gasLimit * gasPrice cannot exceed MAX_INTEGER');\n\t\t\tthrow new Error(msg);\n\t\t}\n\n\t\tthis._validateYParity();\n\t\tthis._validateHighS();\n\n\t\tconst freeze = opts?.freeze ?? true;\n\t\tif (freeze) {\n\t\t\tObject.freeze(this);\n\t\t}\n\t}\n\n\t/**\n\t * The amount of gas paid for the data in this tx\n\t */\n\tpublic getDataFee(): bigint {\n\t\tif (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n\t\t\treturn this.cache.dataFee.value;\n\t\t}\n\n\t\tlet cost = super.getDataFee();\n\t\tcost += BigInt(getDataFeeEIP2930(this.accessList, this.common));\n\n\t\tif (Object.isFrozen(this)) {\n\t\t\tthis.cache.dataFee = {\n\t\t\t\tvalue: cost,\n\t\t\t\thardfork: this.common.hardfork(),\n\t\t\t};\n\t\t}\n\n\t\treturn cost;\n\t}\n\n\t/**\n\t * The up front amount that an account must have for this transaction to be valid\n\t */\n\tpublic getUpfrontCost(): bigint {\n\t\treturn this.gasLimit * this.gasPrice + this.value;\n\t}\n\n\t/**\n\t * Returns a Uint8Array Array of the raw Uint8Arrays of the EIP-2930 transaction, in order.\n\t *\n\t * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n\t * signatureYParity (v), signatureR (r), signatureS (s)]`\n\t *\n\t * Use {@link AccessListEIP2930Transaction.serialize} to add a transaction to a block\n\t * with {@link Block.fromValuesArray}.\n\t *\n\t * For an unsigned tx this method uses the empty UINT8ARRAY values for the\n\t * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n\t * representation for external signing use {@link AccessListEIP2930Transaction.getMessageToSign}.\n\t */\n\tpublic raw(): AccessListEIP2930ValuesArray {\n\t\treturn [\n\t\t\tbigIntToUnpaddedUint8Array(this.chainId),\n\t\t\tbigIntToUnpaddedUint8Array(this.nonce),\n\t\t\tbigIntToUnpaddedUint8Array(this.gasPrice),\n\t\t\tbigIntToUnpaddedUint8Array(this.gasLimit),\n\t\t\tthis.to !== undefined ? this.to.buf : Uint8Array.from([]),\n\t\t\tbigIntToUnpaddedUint8Array(this.value),\n\t\t\tthis.data,\n\t\t\tthis.accessList,\n\t\t\tthis.v !== undefined ? bigIntToUnpaddedUint8Array(this.v) : Uint8Array.from([]),\n\t\t\tthis.r !== undefined ? bigIntToUnpaddedUint8Array(this.r) : Uint8Array.from([]),\n\t\t\tthis.s !== undefined ? bigIntToUnpaddedUint8Array(this.s) : Uint8Array.from([]),\n\t\t];\n\t}\n\n\t/**\n\t * Returns the serialized encoding of the EIP-2930 transaction.\n\t *\n\t * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n\t * signatureYParity (v), signatureR (r), signatureS (s)])`\n\t *\n\t * Note that in contrast to the legacy tx serialization format this is not\n\t * valid RLP any more due to the raw tx type preceding and concatenated to\n\t * the RLP encoding of the values.\n\t */\n\tpublic serialize(): Uint8Array {\n\t\tconst base = this.raw();\n\t\treturn uint8ArrayConcat(TRANSACTION_TYPE_UINT8ARRAY, RLP.encode(base));\n\t}\n\n\t/**\n\t * Returns the serialized unsigned tx (hashed or raw), which can be used\n\t * to sign the transaction (e.g. for sending to a hardware wallet).\n\t *\n\t * Note: in contrast to the legacy tx the raw message format is already\n\t * serialized and doesn't need to be RLP encoded any more.\n\t *\n\t * ```javascript\n\t * const serializedMessage = tx.getMessageToSign(false) // use this for the HW wallet input\n\t * ```\n\t *\n\t * @param hashMessage - Return hashed message if set to true (default: true)\n\t */\n\tpublic getMessageToSign(hashMessage = true): Uint8Array {\n\t\tconst base = this.raw().slice(0, 8);\n\t\tconst message = uint8ArrayConcat(TRANSACTION_TYPE_UINT8ARRAY, RLP.encode(base));\n\t\tif (hashMessage) {\n\t\t\treturn keccak256(message);\n\t\t}\n\t\treturn message;\n\t}\n\n\t/**\n\t * Computes a sha3-256 hash of the serialized tx.\n\t *\n\t * This method can only be used for signed txs (it throws otherwise).\n\t * Use {@link AccessListEIP2930Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n\t */\n\tpublic hash(): Uint8Array {\n\t\tif (!this.isSigned()) {\n\t\t\tconst msg = this._errorMsg('Cannot call hash method if transaction is not signed');\n\t\t\tthrow new Error(msg);\n\t\t}\n\n\t\tif (Object.isFrozen(this)) {\n\t\t\tif (!this.cache.hash) {\n\t\t\t\tthis.cache.hash = keccak256(this.serialize());\n\t\t\t}\n\t\t\treturn this.cache.hash;\n\t\t}\n\n\t\treturn keccak256(this.serialize());\n\t}\n\n\t/**\n\t * Computes a sha3-256 hash which can be used to verify the signature\n\t */\n\tpublic getMessageToVerifySignature(): Uint8Array {\n\t\treturn this.getMessageToSign();\n\t}\n\n\t/**\n\t * Returns the public key of the sender\n\t */\n\tpublic getSenderPublicKey(): Uint8Array {\n\t\tif (!this.isSigned()) {\n\t\t\tconst msg = this._errorMsg('Cannot call this method if transaction is not signed');\n\t\t\tthrow new Error(msg);\n\t\t}\n\n\t\tconst msgHash = this.getMessageToVerifySignature();\n\t\tconst { v, r, s } = this;\n\n\t\tthis._validateHighS();\n\n\t\ttry {\n\t\t\treturn ecrecover(\n\t\t\t\tmsgHash,\n\t\t\t\tv! + BigInt(27), // Recover the 27 which was stripped from ecsign\n\t\t\t\tbigIntToUnpaddedUint8Array(r!),\n\t\t\t\tbigIntToUnpaddedUint8Array(s!),\n\t\t\t);\n\t\t} catch (e: any) {\n\t\t\tconst msg = this._errorMsg('Invalid Signature');\n\t\t\tthrow new Error(msg);\n\t\t}\n\t}\n\n\tpublic _processSignature(v: bigint, r: Uint8Array, s: Uint8Array) {\n\t\tconst opts = { ...this.txOptions, common: this.common };\n\n\t\treturn AccessListEIP2930Transaction.fromTxData(\n\t\t\t{\n\t\t\t\tchainId: this.chainId,\n\t\t\t\tnonce: this.nonce,\n\t\t\t\tgasPrice: this.gasPrice,\n\t\t\t\tgasLimit: this.gasLimit,\n\t\t\t\tto: this.to,\n\t\t\t\tvalue: this.value,\n\t\t\t\tdata: this.data,\n\t\t\t\taccessList: this.accessList,\n\t\t\t\tv: v - BigInt(27), // This looks extremely hacky: /util actually adds 27 to the value, the recovery bit is either 0 or 1.\n\t\t\t\tr: uint8ArrayToBigInt(r),\n\t\t\t\ts: uint8ArrayToBigInt(s),\n\t\t\t},\n\t\t\topts,\n\t\t);\n\t}\n\n\t/**\n\t * Returns an object with the JSON representation of the transaction\n\t */\n\tpublic toJSON(): JsonTx {\n\t\tconst accessListJSON = getAccessListJSON(this.accessList);\n\n\t\treturn {\n\t\t\tchainId: bigIntToHex(this.chainId),\n\t\t\tnonce: bigIntToHex(this.nonce),\n\t\t\tgasPrice: bigIntToHex(this.gasPrice),\n\t\t\tgasLimit: bigIntToHex(this.gasLimit),\n\t\t\tto: this.to !== undefined ? this.to.toString() : undefined,\n\t\t\tvalue: bigIntToHex(this.value),\n\t\t\tdata: bytesToHex(this.data),\n\t\t\taccessList: accessListJSON,\n\t\t\tv: this.v !== undefined ? bigIntToHex(this.v) : undefined,\n\t\t\tr: this.r !== undefined ? bigIntToHex(this.r) : undefined,\n\t\t\ts: this.s !== undefined ? bigIntToHex(this.s) : undefined,\n\t\t};\n\t}\n\n\t/**\n\t * Return a compact error string representation of the object\n\t */\n\tpublic errorStr() {\n\t\tlet errorStr = this._getSharedErrorPostfix();\n\t\t// Keep ? for this.accessList since this otherwise causes Hardhat E2E tests to fail\n\t\terrorStr += ` gasPrice=${this.gasPrice} accessListCount=${this.accessList?.length ?? 0}`;\n\t\treturn errorStr;\n\t}\n\n\t/**\n\t * Internal helper function to create an annotated error message\n\t *\n\t * @param msg Base error message\n\t * @hidden\n\t */\n\tprotected _errorMsg(msg: string) {\n\t\treturn `${msg} (${this.errorStr()})`;\n\t}\n}\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/src/tx/index.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/src/tx/legacyTransaction.ts",["588","589","590","591","592","593","594","595"],["596","597"],"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { RLP } from '@ethereumjs/rlp';\nimport { keccak256 } from 'ethereum-cryptography/keccak.js';\nimport { bytesToHex } from 'web3-utils';\nimport { validateNoLeadingZeroes } from 'web3-validator';\nimport {\n\tbigIntToHex,\n\tbigIntToUnpaddedUint8Array,\n\tecrecover,\n\ttoUint8Array,\n\tuint8ArrayToBigInt,\n\tunpadUint8Array,\n} from '../common/utils.js';\nimport { MAX_INTEGER } from './constants.js';\n\nimport { BaseTransaction } from './baseTransaction.js';\n\nimport type { Common } from '../common/common.js';\nimport type { JsonTx, TxData, TxOptions, TxValuesArray } from './types.js';\nimport { Capability } from './types.js';\n\nconst TRANSACTION_TYPE = 0;\n\nfunction meetsEIP155(_v: bigint, chainId: bigint) {\n\tconst v = Number(_v);\n\tconst chainIdDoubled = Number(chainId) * 2;\n\treturn v === chainIdDoubled + 35 || v === chainIdDoubled + 36;\n}\n\n/**\n * An Ethereum non-typed (legacy) transaction\n */\n// eslint-disable-next-line no-use-before-define\nexport class Transaction extends BaseTransaction<Transaction> {\n\tpublic readonly gasPrice: bigint;\n\n\tpublic readonly common: Common;\n\n\t/**\n\t * Instantiate a transaction from a data dictionary.\n\t *\n\t * Format: { nonce, gasPrice, gasLimit, to, value, data, v, r, s }\n\t *\n\t * Notes:\n\t * - All parameters are optional and have some basic default values\n\t */\n\tpublic static fromTxData(txData: TxData, opts: TxOptions = {}) {\n\t\treturn new Transaction(txData, opts);\n\t}\n\n\t/**\n\t * Instantiate a transaction from the serialized tx.\n\t *\n\t * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n\t */\n\tpublic static fromSerializedTx(serialized: Uint8Array, opts: TxOptions = {}) {\n\t\tconst values = RLP.decode(serialized);\n\n\t\tif (!Array.isArray(values)) {\n\t\t\tthrow new Error('Invalid serialized tx input. Must be array');\n\t\t}\n\n\t\treturn this.fromValuesArray(values as Uint8Array[], opts);\n\t}\n\n\t/**\n\t * Create a transaction from a values array.\n\t *\n\t * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n\t */\n\tpublic static fromValuesArray(values: TxValuesArray, opts: TxOptions = {}) {\n\t\t// If length is not 6, it has length 9. If v/r/s are empty Uint8Array, it is still an unsigned transaction\n\t\t// This happens if you get the RLP data from `raw()`\n\t\tif (values.length !== 6 && values.length !== 9) {\n\t\t\tthrow new Error(\n\t\t\t\t'Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).',\n\t\t\t);\n\t\t}\n\n\t\tconst [nonce, gasPrice, gasLimit, to, value, data, v, r, s] = values;\n\n\t\tvalidateNoLeadingZeroes({ nonce, gasPrice, gasLimit, value, v, r, s });\n\n\t\treturn new Transaction(\n\t\t\t{\n\t\t\t\tnonce,\n\t\t\t\tgasPrice,\n\t\t\t\tgasLimit,\n\t\t\t\tto,\n\t\t\t\tvalue,\n\t\t\t\tdata,\n\t\t\t\tv,\n\t\t\t\tr,\n\t\t\t\ts,\n\t\t\t},\n\t\t\topts,\n\t\t);\n\t}\n\n\t/**\n\t * This constructor takes the values, validates them, assigns them and freezes the object.\n\t *\n\t * It is not recommended to use this constructor directly. Instead use\n\t * the static factory methods to assist in creating a Transaction object from\n\t * varying data types.\n\t */\n\tpublic constructor(txData: TxData, opts: TxOptions = {}) {\n\t\tsuper({ ...txData, type: TRANSACTION_TYPE }, opts);\n\n\t\tthis.common = this._validateTxV(this.v, opts.common);\n\n\t\tthis.gasPrice = uint8ArrayToBigInt(\n\t\t\ttoUint8Array(txData.gasPrice === '' ? '0x' : txData.gasPrice),\n\t\t);\n\n\t\tif (this.gasPrice * this.gasLimit > MAX_INTEGER) {\n\t\t\tconst msg = this._errorMsg('gas limit * gasPrice cannot exceed MAX_INTEGER (2^256-1)');\n\t\t\tthrow new Error(msg);\n\t\t}\n\t\tthis._validateCannotExceedMaxInteger({ gasPrice: this.gasPrice });\n\t\tBaseTransaction._validateNotArray(txData);\n\n\t\tif (this.common.gteHardfork('spuriousDragon')) {\n\t\t\tif (!this.isSigned()) {\n\t\t\t\tthis.activeCapabilities.push(Capability.EIP155ReplayProtection);\n\t\t\t} else {\n\t\t\t\t// EIP155 spec:\n\t\t\t\t// If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36\n\t\t\t\t// then when computing the hash of a transaction for purposes of signing or recovering\n\t\t\t\t// instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data)\n\t\t\t\t// hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.\n\t\t\t\t// v and chain ID meet EIP-155 conditions\n\t\t\t\t// eslint-disable-next-line no-lonely-if\n\t\t\t\tif (meetsEIP155(this.v!, this.common.chainId())) {\n\t\t\t\t\tthis.activeCapabilities.push(Capability.EIP155ReplayProtection);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst freeze = opts?.freeze ?? true;\n\t\tif (freeze) {\n\t\t\tObject.freeze(this);\n\t\t}\n\t}\n\n\t/**\n\t * Returns a Uint8Array Array of the raw Uint8Arrays of the legacy transaction, in order.\n\t *\n\t * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n\t *\n\t * For legacy txs this is also the correct format to add transactions\n\t * to a block with {@link Block.fromValuesArray} (use the `serialize()` method\n\t * for typed txs).\n\t *\n\t * For an unsigned tx this method returns the empty Uint8Array values\n\t * for the signature parameters `v`, `r` and `s`. For an EIP-155 compliant\n\t * representation have a look at {@link Transaction.getMessageToSign}.\n\t */\n\tpublic raw(): TxValuesArray {\n\t\treturn [\n\t\t\tbigIntToUnpaddedUint8Array(this.nonce),\n\t\t\tbigIntToUnpaddedUint8Array(this.gasPrice),\n\t\t\tbigIntToUnpaddedUint8Array(this.gasLimit),\n\t\t\tthis.to !== undefined ? this.to.buf : Uint8Array.from([]),\n\t\t\tbigIntToUnpaddedUint8Array(this.value),\n\t\t\tthis.data,\n\t\t\tthis.v !== undefined ? bigIntToUnpaddedUint8Array(this.v) : Uint8Array.from([]),\n\t\t\tthis.r !== undefined ? bigIntToUnpaddedUint8Array(this.r) : Uint8Array.from([]),\n\t\t\tthis.s !== undefined ? bigIntToUnpaddedUint8Array(this.s) : Uint8Array.from([]),\n\t\t];\n\t}\n\n\t/**\n\t * Returns the serialized encoding of the legacy transaction.\n\t *\n\t * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n\t *\n\t * For an unsigned tx this method uses the empty Uint8Array values for the\n\t * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n\t * representation for external signing use {@link Transaction.getMessageToSign}.\n\t */\n\tpublic serialize(): Uint8Array {\n\t\treturn RLP.encode(this.raw());\n\t}\n\n\tprivate _getMessageToSign() {\n\t\tconst values = [\n\t\t\tbigIntToUnpaddedUint8Array(this.nonce),\n\t\t\tbigIntToUnpaddedUint8Array(this.gasPrice),\n\t\t\tbigIntToUnpaddedUint8Array(this.gasLimit),\n\t\t\tthis.to !== undefined ? this.to.buf : Uint8Array.from([]),\n\t\t\tbigIntToUnpaddedUint8Array(this.value),\n\t\t\tthis.data,\n\t\t];\n\n\t\tif (this.supports(Capability.EIP155ReplayProtection)) {\n\t\t\tvalues.push(toUint8Array(this.common.chainId()));\n\t\t\tvalues.push(unpadUint8Array(toUint8Array(0)));\n\t\t\tvalues.push(unpadUint8Array(toUint8Array(0)));\n\t\t}\n\n\t\treturn values;\n\t}\n\n\t/**\n\t * Returns the unsigned tx (hashed or raw), which can be used\n\t * to sign the transaction (e.g. for sending to a hardware wallet).\n\t *\n\t * Note: the raw message message format for the legacy tx is not RLP encoded\n\t * and you might need to do yourself with:\n\t *\n\t * ```javascript\n\t * import { bufArrToArr } from '../util'\n\t * import { RLP } from '../rlp'\n\t * const message = tx.getMessageToSign(false)\n\t * const serializedMessage = RLP.encode(message) // use this for the HW wallet input\n\t * ```\n\t *\n\t * @param hashMessage - Return hashed message if set to true (default: true)\n\t */\n\tpublic getMessageToSign(hashMessage: false): Uint8Array[];\n\tpublic getMessageToSign(hashMessage?: true): Uint8Array;\n\tpublic getMessageToSign(hashMessage = true) {\n\t\tconst message = this._getMessageToSign();\n\t\tif (hashMessage) {\n\t\t\treturn keccak256(RLP.encode(message));\n\t\t}\n\t\treturn message;\n\t}\n\n\t/**\n\t * The amount of gas paid for the data in this tx\n\t */\n\tpublic getDataFee(): bigint {\n\t\tif (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n\t\t\treturn this.cache.dataFee.value;\n\t\t}\n\n\t\tif (Object.isFrozen(this)) {\n\t\t\tthis.cache.dataFee = {\n\t\t\t\tvalue: super.getDataFee(),\n\t\t\t\thardfork: this.common.hardfork(),\n\t\t\t};\n\t\t}\n\n\t\treturn super.getDataFee();\n\t}\n\n\t/**\n\t * The up front amount that an account must have for this transaction to be valid\n\t */\n\tpublic getUpfrontCost(): bigint {\n\t\treturn this.gasLimit * this.gasPrice + this.value;\n\t}\n\n\t/**\n\t * Computes a sha3-256 hash of the serialized tx.\n\t *\n\t * This method can only be used for signed txs (it throws otherwise).\n\t * Use {@link Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n\t */\n\tpublic hash(): Uint8Array {\n\t\tif (!this.isSigned()) {\n\t\t\tconst msg = this._errorMsg('Cannot call hash method if transaction is not signed');\n\t\t\tthrow new Error(msg);\n\t\t}\n\n\t\tif (Object.isFrozen(this)) {\n\t\t\tif (!this.cache.hash) {\n\t\t\t\tthis.cache.hash = keccak256(RLP.encode(this.raw()));\n\t\t\t}\n\t\t\treturn this.cache.hash;\n\t\t}\n\n\t\treturn keccak256(RLP.encode(this.raw()));\n\t}\n\n\t/**\n\t * Computes a sha3-256 hash which can be used to verify the signature\n\t */\n\tpublic getMessageToVerifySignature() {\n\t\tif (!this.isSigned()) {\n\t\t\tconst msg = this._errorMsg('This transaction is not signed');\n\t\t\tthrow new Error(msg);\n\t\t}\n\t\tconst message = this._getMessageToSign();\n\t\treturn keccak256(RLP.encode(message));\n\t}\n\n\t/**\n\t * Returns the public key of the sender\n\t */\n\tpublic getSenderPublicKey(): Uint8Array {\n\t\tconst msgHash = this.getMessageToVerifySignature();\n\n\t\tconst { v, r, s } = this;\n\n\t\tthis._validateHighS();\n\n\t\ttry {\n\t\t\treturn ecrecover(\n\t\t\t\tmsgHash,\n\t\t\t\tv!,\n\t\t\t\tbigIntToUnpaddedUint8Array(r!),\n\t\t\t\tbigIntToUnpaddedUint8Array(s!),\n\t\t\t\tthis.supports(Capability.EIP155ReplayProtection)\n\t\t\t\t\t? this.common.chainId()\n\t\t\t\t\t: undefined,\n\t\t\t);\n\t\t} catch (e: any) {\n\t\t\tconst msg = this._errorMsg('Invalid Signature');\n\t\t\tthrow new Error(msg);\n\t\t}\n\t}\n\n\t/**\n\t * Process the v, r, s values from the `sign` method of the base transaction.\n\t */\n\tprotected _processSignature(_v: bigint, r: Uint8Array, s: Uint8Array) {\n\t\tlet v = _v;\n\t\tif (this.supports(Capability.EIP155ReplayProtection)) {\n\t\t\tv += this.common.chainId() * BigInt(2) + BigInt(8);\n\t\t}\n\n\t\tconst opts = { ...this.txOptions, common: this.common };\n\n\t\treturn Transaction.fromTxData(\n\t\t\t{\n\t\t\t\tnonce: this.nonce,\n\t\t\t\tgasPrice: this.gasPrice,\n\t\t\t\tgasLimit: this.gasLimit,\n\t\t\t\tto: this.to,\n\t\t\t\tvalue: this.value,\n\t\t\t\tdata: this.data,\n\t\t\t\tv,\n\t\t\t\tr: uint8ArrayToBigInt(r),\n\t\t\t\ts: uint8ArrayToBigInt(s),\n\t\t\t},\n\t\t\topts,\n\t\t);\n\t}\n\n\t/**\n\t * Returns an object with the JSON representation of the transaction.\n\t */\n\tpublic toJSON(): JsonTx {\n\t\treturn {\n\t\t\tnonce: bigIntToHex(this.nonce),\n\t\t\tgasPrice: bigIntToHex(this.gasPrice),\n\t\t\tgasLimit: bigIntToHex(this.gasLimit),\n\t\t\tto: this.to !== undefined ? this.to.toString() : undefined,\n\t\t\tvalue: bigIntToHex(this.value),\n\t\t\tdata: bytesToHex(this.data),\n\t\t\tv: this.v !== undefined ? bigIntToHex(this.v) : undefined,\n\t\t\tr: this.r !== undefined ? bigIntToHex(this.r) : undefined,\n\t\t\ts: this.s !== undefined ? bigIntToHex(this.s) : undefined,\n\t\t};\n\t}\n\n\t/**\n\t * Validates tx's `v` value\n\t */\n\tprivate _validateTxV(_v?: bigint, common?: Common): Common {\n\t\tlet chainIdBigInt;\n\t\tconst v = _v !== undefined ? Number(_v) : undefined;\n\t\t// Check for valid v values in the scope of a signed legacy tx\n\t\tif (v !== undefined) {\n\t\t\t// v is 1. not matching the EIP-155 chainId included case and...\n\t\t\t// v is 2. not matching the classic v=27 or v=28 case\n\t\t\tif (v < 37 && v !== 27 && v !== 28) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Legacy txs need either v = 27/28 or v >= 37 (EIP-155 replay protection), got v = ${v}`,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// No unsigned tx and EIP-155 activated and chain ID included\n\t\tif (\n\t\t\tv !== undefined &&\n\t\t\tv !== 0 &&\n\t\t\t(!common || common.gteHardfork('spuriousDragon')) &&\n\t\t\tv !== 27 &&\n\t\t\tv !== 28\n\t\t) {\n\t\t\tif (common) {\n\t\t\t\tif (!meetsEIP155(BigInt(v), common.chainId())) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`Incompatible EIP155-based V ${v} and chain id ${common.chainId()}. See the Common parameter of the Transaction constructor to set the chain id.`,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Derive the original chain ID\n\t\t\t\tlet numSub;\n\t\t\t\tif ((v - 35) % 2 === 0) {\n\t\t\t\t\tnumSub = 35;\n\t\t\t\t} else {\n\t\t\t\t\tnumSub = 36;\n\t\t\t\t}\n\t\t\t\t// Use derived chain ID to create a proper Common\n\t\t\t\tchainIdBigInt = BigInt(v - numSub) / BigInt(2);\n\t\t\t}\n\t\t}\n\t\treturn this._getCommon(common, chainIdBigInt);\n\t}\n\n\t/**\n\t * Return a compact error string representation of the object\n\t */\n\tpublic errorStr() {\n\t\tlet errorStr = this._getSharedErrorPostfix();\n\t\terrorStr += ` gasPrice=${this.gasPrice}`;\n\t\treturn errorStr;\n\t}\n\n\t/**\n\t * Internal helper function to create an annotated error message\n\t *\n\t * @param msg Base error message\n\t * @hidden\n\t */\n\tprotected _errorMsg(msg: string) {\n\t\treturn `${msg} (${this.errorStr()})`;\n\t}\n}\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/src/tx/transactionFactory.ts",[],["598","599","600","601","602"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/src/tx/types.ts",[],["603","604","605","606"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/src/tx/utils.ts",["607","608"],["609","610","611","612","613","614","615","616","617","618","619","620","621","622","623","624"],"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { HexString } from 'web3-types';\nimport { bytesToHex } from 'web3-utils';\nimport { setLengthLeft, toUint8Array } from '../common/utils.js';\nimport type { AccessList, AccessListUint8Array, AccessListItem } from './types.js';\nimport { isAccessList } from './types.js';\n\nimport type { Common } from '../common/common.js';\n\nexport const checkMaxInitCodeSize = (common: Common, length: number) => {\n\tconst maxInitCodeSize = common.param('vm', 'maxInitCodeSize');\n\tif (maxInitCodeSize && BigInt(length) > maxInitCodeSize) {\n\t\tthrow new Error(\n\t\t\t`the initcode size of this transaction is too large: it is ${length} while the max is ${common.param(\n\t\t\t\t'vm',\n\t\t\t\t'maxInitCodeSize',\n\t\t\t)}`,\n\t\t);\n\t}\n};\n\nexport const getAccessListData = (accessList: AccessListUint8Array | AccessList) => {\n\tlet AccessListJSON;\n\tlet uint8arrayAccessList;\n\tif (isAccessList(accessList)) {\n\t\tAccessListJSON = accessList;\n\t\tconst newAccessList: AccessListUint8Array = [];\n\t\t// eslint-disable-next-line @typescript-eslint/prefer-for-of\n\t\tfor (let i = 0; i < accessList.length; i += 1) {\n\t\t\tconst item: AccessListItem = accessList[i];\n\t\t\tconst addressBytes = toUint8Array(item.address);\n\t\t\tconst storageItems: Uint8Array[] = [];\n\t\t\t// eslint-disable-next-line @typescript-eslint/prefer-for-of\n\t\t\tfor (let index = 0; index < item.storageKeys.length; index += 1) {\n\t\t\t\tstorageItems.push(toUint8Array(item.storageKeys[index]));\n\t\t\t}\n\t\t\tnewAccessList.push([addressBytes, storageItems]);\n\t\t}\n\t\tuint8arrayAccessList = newAccessList;\n\t} else {\n\t\tuint8arrayAccessList = accessList ?? [];\n\t\t// build the JSON\n\t\tconst json: AccessList = [];\n\t\t// eslint-disable-next-line @typescript-eslint/prefer-for-of\n\t\tfor (let i = 0; i < uint8arrayAccessList.length; i += 1) {\n\t\t\tconst data = uint8arrayAccessList[i];\n\t\t\tconst address = bytesToHex(data[0]);\n\t\t\tconst storageKeys: string[] = [];\n\t\t\t// eslint-disable-next-line @typescript-eslint/prefer-for-of\n\t\t\tfor (let item = 0; item < data[1].length; item += 1) {\n\t\t\t\tstorageKeys.push(bytesToHex(data[1][item]));\n\t\t\t}\n\t\t\tconst jsonItem: AccessListItem = {\n\t\t\t\taddress,\n\t\t\t\tstorageKeys,\n\t\t\t};\n\t\t\tjson.push(jsonItem);\n\t\t}\n\t\tAccessListJSON = json;\n\t}\n\n\treturn {\n\t\tAccessListJSON,\n\t\taccessList: uint8arrayAccessList,\n\t};\n};\n\nexport const verifyAccessList = (accessList: AccessListUint8Array) => {\n\t// eslint-disable-next-line @typescript-eslint/prefer-for-of\n\tfor (let key = 0; key < accessList.length; key += 1) {\n\t\tconst accessListItem = accessList[key];\n\t\tconst address = accessListItem[0];\n\t\tconst storageSlots = accessListItem[1];\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/consistent-type-assertions\n\t\tif ((<any>accessListItem)[2] !== undefined) {\n\t\t\tthrow new Error(\n\t\t\t\t'Access list item cannot have 3 elements. It can only have an address, and an array of storage slots.',\n\t\t\t);\n\t\t}\n\t\tif (address.length !== 20) {\n\t\t\tthrow new Error('Invalid EIP-2930 transaction: address length should be 20 bytes');\n\t\t}\n\t\t// eslint-disable-next-line @typescript-eslint/prefer-for-of\n\t\tfor (let storageSlot = 0; storageSlot < storageSlots.length; storageSlot += 1) {\n\t\t\tif (storageSlots[storageSlot].length !== 32) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Invalid EIP-2930 transaction: storage slot length should be 32 bytes',\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n};\n\nexport const getAccessListJSON = (\n\taccessList: AccessListUint8Array,\n): {\n\taddress: HexString;\n\tstorageKeys: HexString[];\n}[] => {\n\tconst accessListJSON: { address: HexString; storageKeys: HexString[] }[] = [];\n\t// eslint-disable-next-line @typescript-eslint/prefer-for-of\n\tfor (let index = 0; index < accessList.length; index += 1) {\n\t\tconst item: any = accessList[index];\n\t\tconst JSONItem: { address: HexString; storageKeys: HexString[] } = {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/consistent-type-assertions\n\t\t\taddress: bytesToHex(setLengthLeft(<Uint8Array>item[0], 20)),\n\t\t\tstorageKeys: [],\n\t\t};\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment, @typescript-eslint/prefer-optional-chain\n\t\tconst storageSlots: Uint8Array[] = item && item[1];\n\t\t// eslint-disable-next-line @typescript-eslint/prefer-for-of\n\t\tfor (let slot = 0; slot < storageSlots.length; slot += 1) {\n\t\t\tconst storageSlot = storageSlots[slot];\n\t\t\tJSONItem.storageKeys.push(bytesToHex(setLengthLeft(storageSlot, 32)));\n\t\t}\n\t\taccessListJSON.push(JSONItem);\n\t}\n\treturn accessListJSON;\n};\n\nexport const getDataFeeEIP2930 = (accessList: AccessListUint8Array, common: Common): number => {\n\tconst accessListStorageKeyCost = common.param('gasPrices', 'accessListStorageKeyCost');\n\tconst accessListAddressCost = common.param('gasPrices', 'accessListAddressCost');\n\n\tlet slots = 0;\n\t// eslint-disable-next-line @typescript-eslint/prefer-for-of\n\tfor (let index = 0; index < accessList.length; index += 1) {\n\t\tconst item = accessList[index];\n\t\tconst storageSlots = item[1];\n\t\tslots += storageSlots.length;\n\t}\n\n\tconst addresses = accessList.length;\n\treturn addresses * Number(accessListAddressCost) + slots * Number(accessListStorageKeyCost);\n};\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/src/types.ts",[],["625","626","627"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/src/wallet.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/test/fixtures/account.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/test/fixtures/system_test_utils.ts",[],["628","629","630","631","632","633","634","635","636","637","638","639","640","641","642","643"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/test/integration/account.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/test/integration/wallet.test.ts",[],["644","645","646","647","648","649"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/test/unit/account.test.ts",["650"],[],"﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { Address } from 'web3-types';\nimport { Web3ValidatorError, isHexStrict } from 'web3-validator';\nimport {\n\tcreate,\n\tdecrypt,\n\tencrypt,\n\thashMessage,\n\tprivateKeyToAccount,\n\tprivateKeyToAddress,\n\trecover,\n\trecoverTransaction,\n\tsign,\n\tsignTransaction,\n\tprivateKeyToPublicKey,\n} from '../../src/account';\nimport {\n\tinvalidDecryptData,\n\tinvalidEncryptData,\n\tinvalidKeyStore,\n\tinvalidPrivateKeytoAccountData,\n\tinvalidPrivateKeyToAddressData,\n\tsignatureRecoverData,\n\ttransactionsTestData,\n\tvalidDecryptData,\n\tvalidEncryptData,\n\tvalidHashMessageData,\n\tvalidPrivateKeytoAccountData,\n\tvalidPrivateKeyToAddressData,\n\tvalidPrivateKeyToPublicKeyData,\n\tvalidRecover,\n} from '../fixtures/account';\nimport { TransactionFactory } from '../../src/tx/transactionFactory';\nimport { TxData } from '../../src/tx/types';\n\njest.setTimeout(25000);\n\ndescribe('accounts', () => {\n\tdescribe('create', () => {\n\t\tdescribe('valid cases', () => {\n\t\t\tit('%s', () => {\n\t\t\t\tconst account = create();\n\t\t\t\texpect(typeof account.privateKey).toBe('string');\n\t\t\t\texpect(typeof account.address).toBe('string');\n\t\t\t\texpect(isHexStrict(account.address)).toBe(true);\n\t\t\t\texpect(typeof account.encrypt).toBe('function');\n\t\t\t\texpect(typeof account.sign).toBe('function');\n\t\t\t\texpect(typeof account.signTransaction).toBe('function');\n\t\t\t});\n\t\t});\n\t});\n\n\tdescribe('privateKeyToAddress', () => {\n\t\tdescribe('valid cases', () => {\n\t\t\tit.each(validPrivateKeyToAddressData)('%s', (input, output) => {\n\t\t\t\texpect(privateKeyToAddress(input)).toEqual(output);\n\t\t\t});\n\t\t});\n\n\t\tdescribe('invalid cases', () => {\n\t\t\tit.each(invalidPrivateKeyToAddressData)('%s', (input, output) => {\n\t\t\t\texpect(() => privateKeyToAddress(input)).toThrow(output);\n\t\t\t});\n\t\t});\n\t});\n\n\tdescribe('privateKeyToAccount', () => {\n\t\tdescribe('valid cases', () => {\n\t\t\tit.each(validPrivateKeytoAccountData)('%s', (input, output) => {\n\t\t\t\texpect(\n\t\t\t\t\tJSON.stringify(privateKeyToAccount(input.address, input.ignoreLength)),\n\t\t\t\t).toEqual(JSON.stringify(output));\n\t\t\t});\n\t\t});\n\n\t\tdescribe('invalid cases', () => {\n\t\t\tit.each(invalidPrivateKeytoAccountData)('%s', (input, output) => {\n\t\t\t\texpect(() => privateKeyToAccount(input)).toThrow(output);\n\t\t\t});\n\t\t});\n\t});\n\tdescribe('privateKeyToPublicKey', () => {\n\t\tdescribe('valid cases', () => {\n\t\t\tit.each(validPrivateKeyToPublicKeyData)('%s', (privateKey, isCompressed, output) => {\n\t\t\t\texpect(privateKeyToPublicKey(privateKey, isCompressed)).toEqual(output);\n\t\t\t});\n\t\t});\n\t});\n\n\tdescribe('Signing and Recovery of Transaction', () => {\n\t\tit.each(transactionsTestData)('sign transaction', async txData => {\n\t\t\tconst account = create();\n\n\t\t\tconst signedResult = await signTransaction(\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-call\n\t\t\t\tTransactionFactory.fromTxData(txData as unknown as TxData),\n\t\t\t\taccount.privateKey,\n\t\t\t);\n\t\t\texpect(signedResult).toBeDefined();\n\t\t\texpect(signedResult.messageHash).toBeDefined();\n\t\t\texpect(signedResult.rawTransaction).toBeDefined();\n\t\t\texpect(signedResult.transactionHash).toBeDefined();\n\t\t\texpect(signedResult.r).toMatch(/0[xX][0-9a-fA-F]{64}/);\n\t\t\texpect(signedResult.s).toMatch(/0[xX][0-9a-fA-F]{64}/);\n\t\t\texpect(signedResult.v).toMatch(/0[xX][0-9a-fA-F]+/);\n\t\t});\n\n\t\tit.each(transactionsTestData)('Recover transaction', async txData => {\n\t\t\tconst account = create();\n\t\t\tconst txObj = { ...txData, from: account.address };\n\t\t\tconst signedResult = await signTransaction(\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-call\n\t\t\t\tTransactionFactory.fromTxData(txObj),\n\t\t\t\taccount.privateKey,\n\t\t\t);\n\t\t\texpect(signedResult).toBeDefined();\n\n\t\t\tconst address: Address = recoverTransaction(signedResult.rawTransaction);\n\t\t\texpect(address).toBeDefined();\n\t\t\texpect(address).toEqual(account.address);\n\t\t});\n\t});\n\n\tdescribe('Hash Message', () => {\n\t\tit.each(validHashMessageData)('%s', (message, hash) => {\n\t\t\texpect(hashMessage(message)).toEqual(hash);\n\t\t});\n\t});\n\n\tdescribe('Sign Message', () => {\n\t\tdescribe('sign', () => {\n\t\t\tit.each(signatureRecoverData)('%s', (data, testObj) => {\n\t\t\t\tconst result = sign(data, testObj.privateKey);\n\t\t\t\texpect(result.signature).toEqual(testObj.signature || testObj.signatureOrV); // makes sure we get signature and not V value\n\t\t\t\texpect(result.r).toEqual(testObj.r);\n\t\t\t\texpect(result.s).toEqual(testObj.s);\n\t\t\t});\n\t\t});\n\n\t\tdescribe('recover', () => {\n\t\t\tit.each(signatureRecoverData)('%s', (data, testObj) => {\n\t\t\t\tconst address = recover(data, testObj.signatureOrV, testObj.prefixedOrR, testObj.s);\n\t\t\t\texpect(address).toEqual(testObj.address);\n\t\t\t});\n\t\t});\n\t});\n\n\tdescribe('encrypt', () => {\n\t\tdescribe('valid cases', () => {\n\t\t\tit.each(validEncryptData)('%s', async (input, output) => {\n\t\t\t\tconst result = await encrypt(input[0], input[1], input[2]).catch(err => {\n\t\t\t\t\tthrow err;\n\t\t\t\t});\n\t\t\t\texpect(result.version).toBe(output.version);\n\t\t\t\texpect(result.address).toBe(output.address);\n\t\t\t\texpect(result.crypto.ciphertext).toBe(output.crypto.ciphertext);\n\t\t\t\texpect(result.crypto.cipherparams).toEqual(output.crypto.cipherparams);\n\t\t\t\texpect(result.crypto.cipher).toEqual(output.crypto.cipher);\n\t\t\t\texpect(result.crypto.kdf).toBe(output.crypto.kdf);\n\t\t\t\texpect(result.crypto.kdfparams).toEqual(output.crypto.kdfparams);\n\t\t\t\texpect(typeof result.version).toBe('number');\n\t\t\t\texpect(typeof result.id).toBe('string');\n\t\t\t\texpect(typeof result.crypto.mac).toBe('string');\n\t\t\t});\n\t\t});\n\n\t\tdescribe('invalid cases', () => {\n\t\t\tit.each(invalidEncryptData)('%s', async (input, output) => {\n\t\t\t\tconst result = encrypt(input[0], input[1], input[2]);\n\t\t\t\tawait expect(result).rejects.toThrow(output);\n\t\t\t});\n\t\t});\n\t});\n\n\tdescribe('decrypt', () => {\n\t\tdescribe('valid cases', () => {\n\t\t\tit.each(validDecryptData)('%s', async input => {\n\t\t\t\tconst keystore = await encrypt(input[0], input[1], input[2]).catch(err => {\n\t\t\t\t\tthrow err;\n\t\t\t\t});\n\n\t\t\t\t// make sure decrypt does not throw invalid password error\n\t\t\t\tconst result = await decrypt(keystore, input[1]);\n\n\t\t\t\texpect(JSON.stringify(result)).toEqual(\n\t\t\t\t\tJSON.stringify(privateKeyToAccount(input[3])),\n\t\t\t\t);\n\n\t\t\t\tconst keystoreString = JSON.stringify(keystore);\n\n\t\t\t\tconst stringResult = await decrypt(keystoreString, input[1], true);\n\n\t\t\t\texpect(JSON.stringify(stringResult)).toEqual(\n\t\t\t\t\tJSON.stringify(privateKeyToAccount(input[3])),\n\t\t\t\t);\n\t\t\t});\n\t\t});\n\n\t\tdescribe('invalid cases', () => {\n\t\t\tit.each(invalidDecryptData)('%s', async (input, output) => {\n\t\t\t\tconst result = decrypt(input[0], input[1]);\n\n\t\t\t\tawait expect(result).rejects.toThrow(output);\n\t\t\t});\n\t\t});\n\n\t\tdescribe('invalid keystore, fails validation', () => {\n\t\t\tit.each(invalidKeyStore)('%s', async input => {\n\t\t\t\tconst result = decrypt(input[0], input[1]);\n\n\t\t\t\tawait expect(result).rejects.toThrow(Web3ValidatorError);\n\t\t\t});\n\t\t});\n\n\t\tdescribe('valid signatures for recover', () => {\n\t\t\tit.each(validRecover)('&s', (data, signature) => {\n\t\t\t\trecover(data, signature);\n\t\t\t});\n\t\t});\n\t});\n});\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/test/unit/account_dom.test.ts",["651","652"],["653","654","655","656","657","658","659"],"﻿/**\n * @jest-environment jsdom\n */\n\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n// this file contains the unit test for the event emitter in the DOM environment\n// it is executed in the jsdom environment (see \"@jest-environment jsdom\" in the top comment of this file)\n\n// ignore the following rule to allow keeping `@jest-environment jsdom` on top:\n// eslint-disable-next-line header/header\nimport { TextEncoder } from 'util';\nimport crypto from 'crypto';\n// polyfill for jsdom\nglobal.TextEncoder = TextEncoder;\n// @ts-expect-error \"Cannot assign to 'subtle' because it is a read-only property.\"\nglobal.crypto.subtle = crypto.webcrypto.subtle;\n\n/* eslint-disable import/first */\nimport { Address } from 'web3-types';\nimport { Web3ValidatorError, isHexStrict } from 'web3-validator';\nimport {\n\tcreate,\n\tdecrypt,\n\tencrypt,\n\thashMessage,\n\tprivateKeyToAccount,\n\tprivateKeyToAddress,\n\trecover,\n\trecoverTransaction,\n\tsign,\n\tsignTransaction,\n\tprivateKeyToPublicKey,\n} from '../../src/account';\nimport {\n\tinvalidDecryptData,\n\tinvalidEncryptData,\n\tinvalidKeyStore,\n\tinvalidPrivateKeytoAccountData,\n\tinvalidPrivateKeyToAddressData,\n\tsignatureRecoverData,\n\ttransactionsTestData,\n\tvalidDecryptData,\n\tvalidEncryptData,\n\tvalidHashMessageData,\n\tvalidPrivateKeytoAccountData,\n\tvalidPrivateKeyToAddressData,\n\tvalidPrivateKeyToPublicKeyData,\n\tvalidRecover,\n} from '../fixtures/account';\nimport { TransactionFactory } from '../../src/tx/transactionFactory';\nimport { TxData } from '../../src/tx/types';\n\ndescribe('accounts', () => {\n\tdescribe('create', () => {\n\t\tdescribe('valid cases', () => {\n\t\t\tit('%s', () => {\n\t\t\t\tconst account = create();\n\t\t\t\texpect(typeof account.privateKey).toBe('string');\n\t\t\t\texpect(typeof account.address).toBe('string');\n\t\t\t\texpect(isHexStrict(account.address)).toBe(true);\n\t\t\t\texpect(typeof account.encrypt).toBe('function');\n\t\t\t\texpect(typeof account.sign).toBe('function');\n\t\t\t\texpect(typeof account.signTransaction).toBe('function');\n\t\t\t});\n\t\t});\n\t});\n\n\tdescribe('privateKeyToAddress', () => {\n\t\tdescribe('valid cases', () => {\n\t\t\tit.each(validPrivateKeyToAddressData)('%s', (input, output) => {\n\t\t\t\texpect(privateKeyToAddress(input)).toEqual(output);\n\t\t\t});\n\t\t});\n\n\t\tdescribe('invalid cases', () => {\n\t\t\tit.each(invalidPrivateKeyToAddressData)('%s', (input, output) => {\n\t\t\t\texpect(() => privateKeyToAddress(input)).toThrow(output);\n\t\t\t});\n\t\t});\n\t});\n\n\tdescribe('privateKeyToAccount', () => {\n\t\tdescribe('valid cases', () => {\n\t\t\tit.each(validPrivateKeytoAccountData)('%s', (input, output) => {\n\t\t\t\texpect(JSON.stringify(privateKeyToAccount(input.address, input.ignoreLength))).toEqual(\n\t\t\t\t\tJSON.stringify(output),\n\t\t\t\t);\n\t\t\t});\n\t\t});\n\n\t\tdescribe('invalid cases', () => {\n\t\t\tit.each(invalidPrivateKeytoAccountData)('%s', (input, output) => {\n\t\t\t\texpect(() => privateKeyToAccount(input)).toThrow(output);\n\t\t\t});\n\t\t});\n\t});\n\tdescribe('privateKeyToPublicKey', () => {\n\t\tdescribe('valid cases', () => {\n\t\t\tit.each(validPrivateKeyToPublicKeyData)('%s', (privateKey, isCompressed, output) => {\n\t\t\t\texpect(privateKeyToPublicKey(privateKey, isCompressed)).toEqual(output);\n\t\t\t});\n\t\t});\n\t});\n\n\tdescribe('Signing and Recovery of Transaction', () => {\n\t\tit.each(transactionsTestData)('sign transaction', async txData => {\n\t\t\tconst account = create();\n\n\t\t\tconst signedResult = await signTransaction(\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-call\n\t\t\t\tTransactionFactory.fromTxData(txData as unknown as TxData),\n\t\t\t\taccount.privateKey,\n\t\t\t);\n\t\t\texpect(signedResult).toBeDefined();\n\t\t\texpect(signedResult.messageHash).toBeDefined();\n\t\t\texpect(signedResult.rawTransaction).toBeDefined();\n\t\t\texpect(signedResult.transactionHash).toBeDefined();\n\t\t\texpect(signedResult.r).toMatch(/0[xX][0-9a-fA-F]{64}/);\n\t\t\texpect(signedResult.s).toMatch(/0[xX][0-9a-fA-F]{64}/);\n\t\t\texpect(signedResult.v).toMatch(/0[xX][0-9a-fA-F]+/);\n\t\t});\n\n\t\tit.each(transactionsTestData)('Recover transaction', async txData => {\n\t\t\tconst account = create();\n\t\t\tconst txObj = { ...txData, from: account.address };\n\t\t\tconst signedResult = await signTransaction(\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-call\n\t\t\t\tTransactionFactory.fromTxData(txObj),\n\t\t\t\taccount.privateKey,\n\t\t\t);\n\t\t\texpect(signedResult).toBeDefined();\n\n\t\t\tconst address: Address = recoverTransaction(signedResult.rawTransaction);\n\t\t\texpect(address).toBeDefined();\n\t\t\texpect(address).toEqual(account.address);\n\t\t});\n\t});\n\n\tdescribe('Hash Message', () => {\n\t\tit.each(validHashMessageData)('%s', (message, hash) => {\n\t\t\texpect(hashMessage(message)).toEqual(hash);\n\t\t});\n\t});\n\n\tdescribe('Sign Message', () => {\n\t\tdescribe('sign', () => {\n\t\t\tit.each(signatureRecoverData)('%s', (data, testObj) => {\n\t\t\t\tconst result = sign(data, testObj.privateKey);\n\t\t\t\texpect(result.signature).toEqual(testObj.signature || testObj.signatureOrV); // makes sure we get signature and not V value\n\t\t\t\texpect(result.r).toEqual(testObj.r);\n\t\t\t\texpect(result.s).toEqual(testObj.s);\n\t\t\t});\n\t\t});\n\n\t\tdescribe('recover', () => {\n\t\t\tit.each(signatureRecoverData)('%s', (data, testObj) => {\n\t\t\t\tconst address = recover(data, testObj.signatureOrV, testObj.prefixedOrR, testObj.s);\n\t\t\t\texpect(address).toEqual(testObj.address);\n\t\t\t});\n\t\t});\n\t});\n\n\tdescribe('encrypt', () => {\n\t\tdescribe('valid cases', () => {\n\t\t\tit.each(validEncryptData)('%s', async (input, output) => {\n\t\t\t\tconst result = await encrypt(input[0], input[1], input[2]).catch(err => {\n\t\t\t\t\tthrow err;\n\t\t\t\t});\n\t\t\t\texpect(result.version).toBe(output.version);\n\t\t\t\texpect(result.address).toBe(output.address);\n\t\t\t\texpect(result.crypto.ciphertext).toBe(output.crypto.ciphertext);\n\t\t\t\texpect(result.crypto.cipherparams).toEqual(output.crypto.cipherparams);\n\t\t\t\texpect(result.crypto.cipher).toEqual(output.crypto.cipher);\n\t\t\t\texpect(result.crypto.kdf).toBe(output.crypto.kdf);\n\t\t\t\texpect(result.crypto.kdfparams).toEqual(output.crypto.kdfparams);\n\t\t\t\texpect(typeof result.version).toBe('number');\n\t\t\t\texpect(typeof result.id).toBe('string');\n\t\t\t\texpect(typeof result.crypto.mac).toBe('string');\n\t\t\t});\n\t\t});\n\n\t\tdescribe('invalid cases', () => {\n\t\t\tit.each(invalidEncryptData)('%s', async (input, output) => {\n\t\t\t\tconst result = encrypt(input[0], input[1], input[2]);\n\t\t\t\tawait expect(result).rejects.toThrow(output);\n\t\t\t});\n\t\t});\n\t});\n\n\tdescribe('decrypt', () => {\n\t\tdescribe('valid cases', () => {\n\t\t\tit.each(validDecryptData)('%s', async input => {\n\t\t\t\tconst keystore = await encrypt(input[0], input[1], input[2]).catch(err => {\n\t\t\t\t\tthrow err;\n\t\t\t\t});\n\n\t\t\t\t// make sure decrypt does not throw invalid password error\n\t\t\t\tconst result = await decrypt(keystore, input[1]);\n\n\t\t\t\texpect(JSON.stringify(result)).toEqual(JSON.stringify(privateKeyToAccount(input[3])));\n\n\t\t\t\tconst keystoreString = JSON.stringify(keystore);\n\n\t\t\t\tconst stringResult = await decrypt(keystoreString, input[1], true);\n\n\t\t\t\texpect(JSON.stringify(stringResult)).toEqual(JSON.stringify(privateKeyToAccount(input[3])));\n\t\t\t});\n\t\t});\n\n\t\tdescribe('invalid cases', () => {\n\t\t\tit.each(invalidDecryptData)('%s', async (input, output) => {\n\t\t\t\tconst result = decrypt(input[0], input[1]);\n\n\t\t\t\tawait expect(result).rejects.toThrow(output);\n\t\t\t});\n\t\t});\n\n\t\tdescribe('invalid keystore, fails validation', () => {\n\t\t\tit.each(invalidKeyStore)('%s', async input => {\n\t\t\t\tconst result = decrypt(input[0], input[1]);\n\n\t\t\t\tawait expect(result).rejects.toThrow(Web3ValidatorError);\n\t\t\t});\n\t\t});\n\n\t\tdescribe('valid signatures for recover', () => {\n\t\t\tit.each(validRecover)('&s', (data, signature) => {\n\t\t\t\trecover(data, signature);\n\t\t\t});\n\t\t});\n\t});\n});\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/test/unit/common/chains.test.ts",["660","661"],["662","663","664","665"],"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { Chain, Common, ConsensusAlgorithm, ConsensusType, Hardfork } from '../../../src/common';\n\ndescribe('[Common/Chains]: Initialization / Chain params', () => {\n\tit('Should initialize with chain provided', () => {\n\t\tlet c = new Common({ chain: 'mainnet' });\n\t\texpect(c.chainName()).toBe('mainnet');\n\t\texpect(c.chainId()).toEqual(BigInt(1));\n\t\texpect(c.networkId()).toEqual(BigInt(1));\n\t\texpect(c.hardfork()).toEqual(Hardfork.Merge);\n\t\texpect(c.hardfork()).toEqual(c.DEFAULT_HARDFORK);\n\n\t\tc = new Common({ chain: 1 });\n\t\texpect(c.chainName()).toBe('mainnet');\n\t});\n\n\tit('Should initialize with chain provided by Chain enum', () => {\n\t\tconst c = new Common({ chain: Chain.Mainnet });\n\t\texpect(c.chainName()).toBe('mainnet');\n\t\texpect(c.chainId()).toEqual(BigInt(1));\n\t\texpect(c.networkId()).toEqual(BigInt(1));\n\t\texpect(c.hardfork()).toEqual(Hardfork.Merge);\n\t\texpect(c.hardfork()).toEqual(c.DEFAULT_HARDFORK);\n\t});\n\n\tit('Should initialize with chain and hardfork provided', () => {\n\t\tconst c = new Common({ chain: 'mainnet', hardfork: 'byzantium' });\n\t\texpect(c.hardfork()).toBe('byzantium');\n\t});\n\n\tit('Should initialize with chain and hardfork provided by Chain and Hardfork enums', () => {\n\t\tconst c = new Common({ chain: Chain.Mainnet, hardfork: Hardfork.Byzantium });\n\t\texpect(c.hardfork()).toBe('byzantium');\n\t});\n\n\tit('Should handle initialization errors', () => {\n\t\tlet f = function () {\n\t\t\t// eslint-disable-next-line no-new\n\t\t\tnew Common({ chain: 'chainnotexisting' });\n\t\t};\n\t\texpect(f).toThrow('not supported'); // eslint-disable-line no-new\n\n\t\tf = function () {\n\t\t\t// eslint-disable-next-line no-new\n\t\t\tnew Common({ chain: 'mainnet', hardfork: 'hardforknotexisting' });\n\t\t};\n\t\texpect(f).toThrow('not supported'); // eslint-disable-line no-new\n\t});\n\n\tit('Should provide correct access to chain parameters', () => {\n\t\tlet c = new Common({ chain: 'mainnet', hardfork: 'chainstart' });\n\t\texpect(c.hardforks()[3]['block']).toBe(2463000);\n\t\texpect(c.consensusType()).toEqual(ConsensusType.ProofOfWork);\n\t\texpect(c.consensusAlgorithm()).toEqual(ConsensusAlgorithm.Ethash);\n\t\texpect(c.consensusConfig()).toEqual({});\n\n\t\tc = new Common({ chain: 'goerli', hardfork: 'chainstart' });\n\t\texpect(c.hardforks()[3]['block']).toBe(0);\n\t\texpect(c.consensusType()).toEqual(ConsensusType.ProofOfAuthority);\n\t\texpect(c.consensusAlgorithm()).toEqual(ConsensusAlgorithm.Clique);\n\t\texpect(c.consensusConfig().epoch).toBe(30000);\n\t});\n\n\tit('Should provide DNS network information in a uniform way', () => {\n\t\tconst configs = ['mainnet', 'goerli'];\n\t\tfor (const network of configs) {\n\t\t\tconst c = new Common({ chain: network });\n\t\t\tconst dnsNetworks = c.dnsNetworks();\n\t\t\texpect(Array.isArray(dnsNetworks)).toBe(true);\n\t\t\texpect(typeof dnsNetworks[0]).toBe('string');\n\t\t}\n\t});\n});\n\ndescribe('[Common]: isSupportedChainId static method', () => {\n\tit('Should return true for supported chainId', () => {\n\t\texpect(Common.isSupportedChainId(BigInt(1))).toBe(true);\n\t});\n\n\tit('Should return false for unsupported chainId', () => {\n\t\texpect(Common.isSupportedChainId(BigInt(0))).toBe(false);\n\t});\n});\n\ndescribe('[Common]: copy()', () => {\n\tit('listener tests', () => {\n\t\tconst common = new Common({ chain: 'mainnet' });\n\t\t// Add two listeners\n\t\t// eslint-disable-next-line @typescript-eslint/no-empty-function\n\t\tcommon.on('hardforkChanged', () => {});\n\t\t// eslint-disable-next-line @typescript-eslint/no-empty-function\n\t\tcommon.on('hardforkChanged', () => {});\n\t\tconst commonCopy = common.copy();\n\t\texpect(common.listenerCount('hardforkChanged')).toBe(2);\n\t\texpect(commonCopy.listenerCount('hardforkChanged')).toBe(0);\n\t});\n});\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/test/unit/common/customChains.test.ts",["666","667","668","669","670"],["671","672","673","674"],"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { Chain, Common, ConsensusType, CustomChain, Hardfork } from '../../../src/common';\n\nimport * as testnet from '../../fixtures/common/testnet.json';\nimport * as testnet2 from '../../fixtures/common/testnet2.json';\nimport * as testnet3 from '../../fixtures/common/testnet3.json';\n\ndescribe('[Common]: Custom chains', () => {\n\tit('chain -> object: should provide correct access to private network chain parameters', () => {\n\t\tconst c = new Common({ chain: testnet, hardfork: Hardfork.Byzantium });\n\t\texpect(c.chainName()).toBe('testnet');\n\t\texpect(c.chainId()).toEqual(BigInt(12345));\n\t\texpect(c.networkId()).toEqual(BigInt(12345));\n\t\texpect(c.hardforks()[3]['block']).toBe(3);\n\t\texpect(c.bootstrapNodes()![1].ip).toBe('10.0.0.2');\n\t});\n\n\tit('chain -> object: should handle custom chain parameters with missing field', () => {\n\t\tconst chainParams = { ...testnet };\n\t\tdelete (chainParams as any)['hardforks'];\n\t\texpect(() => {\n\t\t\t// eslint-disable-next-line no-new\n\t\t\tnew Common({ chain: chainParams });\n\t\t}).toThrow('Missing required'); // eslint-disable-line no-new\n\t});\n\n\tit('custom() -> base functionality', () => {\n\t\tconst mainnetCommon = new Common({ chain: Chain.Mainnet });\n\n\t\tconst customChainParams = { name: 'custom', chainId: 123, networkId: 678 };\n\t\tconst customChainCommon = Common.custom(customChainParams, {\n\t\t\thardfork: Hardfork.Byzantium,\n\t\t});\n\n\t\t// From custom chain params\n\t\texpect(customChainCommon.chainName()).toEqual(customChainParams.name);\n\t\texpect(customChainCommon.chainId()).toEqual(BigInt(customChainParams.chainId));\n\t\texpect(customChainCommon.networkId()).toEqual(BigInt(customChainParams.networkId));\n\n\t\t// Fallback params from mainnet\n\t\texpect(customChainCommon.genesis()).toEqual(mainnetCommon.genesis());\n\t\texpect(customChainCommon.bootstrapNodes()).toEqual(mainnetCommon.bootstrapNodes());\n\t\texpect(customChainCommon.hardforks()).toEqual(mainnetCommon.hardforks());\n\n\t\t// Set only to this Common\n\t\texpect(customChainCommon.hardfork()).toBe('byzantium');\n\t});\n\n\tit('custom() -> behavior', () => {\n\t\tlet common = Common.custom({ chainId: 123 });\n\t\texpect(common.networkId()).toEqual(BigInt(1));\n\t\texpect(common.chainName()).toBe('custom-chain');\n\n\t\tcommon = Common.custom(CustomChain.PolygonMumbai);\n\t\texpect(common.networkId()).toEqual(BigInt(80001));\n\t\tfor (const customChain of Object.values(CustomChain)) {\n\t\t\tcommon = Common.custom(customChain);\n\t\t\texpect(common.chainName()).toEqual(customChain);\n\t\t}\n\n\t\tcommon = Common.custom(CustomChain.PolygonMumbai);\n\t\texpect(common.hardfork()).toEqual(common.DEFAULT_HARDFORK);\n\n\t\tcommon = Common.custom(CustomChain.OptimisticEthereum, { hardfork: Hardfork.Byzantium });\n\t\texpect(common.hardfork()).toEqual(Hardfork.Byzantium);\n\n\t\texpect(() => {\n\t\t\t// @ts-expect-error TypeScript complains, nevertheless do the test for JS behavior\n\t\t\tCommon.custom('this-chain-is-not-supported');\n\t\t}).toThrow('not supported');\n\t});\n\n\tit('customChains parameter: initialization exception', () => {\n\t\texpect(() => {\n\t\t\t// eslint-disable-next-line no-new\n\t\t\tnew Common({ chain: testnet, customChains: [testnet] });\n\t\t}).toThrow(\n\t\t\t'Chain must be a string, number, or bigint when initialized with customChains passed in',\n\t\t);\n\t});\n\n\tit('customChains parameter: initialization', () => {\n\t\tlet c = new Common({\n\t\t\tchain: Chain.Mainnet,\n\t\t\thardfork: Hardfork.Byzantium,\n\t\t\tcustomChains: [testnet],\n\t\t});\n\t\texpect(c.chainName()).toBe('mainnet');\n\t\texpect(c.hardforkBlock()!).toEqual(BigInt(4370000));\n\n\t\tc.setChain('testnet');\n\t\texpect(c.chainName()).toBe('testnet');\n\t\texpect(c.hardforkBlock()!).toEqual(BigInt(4));\n\n\t\tc = new Common({\n\t\t\tchain: 'testnet',\n\t\t\thardfork: Hardfork.Byzantium,\n\t\t\tcustomChains: [testnet],\n\t\t});\n\t\texpect(c.chainName()).toBe('testnet');\n\t\texpect(c.hardforkBlock()!).toEqual(BigInt(4));\n\n\t\tconst customChains = [testnet, testnet2, testnet3];\n\t\tc = new Common({\n\t\t\tchain: 'testnet2',\n\t\t\thardfork: Hardfork.Istanbul,\n\t\t\tcustomChains,\n\t\t});\n\t\texpect(c.chainName()).toBe('testnet2');\n\t\texpect(c.hardforkBlock()!).toEqual(BigInt(10));\n\n\t\tc.setChain('testnet');\n\t\texpect(c.chainName()).toBe('testnet');\n\t\texpect(c.consensusType()).toEqual(ConsensusType.ProofOfWork);\n\t});\n});\n\ndescribe('custom chain setup with hardforks', () => {\n\tconst undefinedHardforks = [\n\t\t{\n\t\t\tname: 'chainstart',\n\t\t\tblock: 0,\n\t\t},\n\t\t{ name: 'homestead' },\n\t\t// eslint-disable-next-line no-null/no-null\n\t\t{ name: 'byzantium', block: null },\n\t\t{ name: 'tangerineWhistle', block: 10 },\n\t];\n\tit('with undefined/null block numbers', () => {\n\t\texpect(\n\t\t\t// @ts-expect-error -- Disabling type check to verify that error is thrown\n\t\t\t() => Common.custom({ hardforks: undefinedHardforks }),\n\t\t).toThrow();\n\n\t\tconst nullHardforks = [\n\t\t\t{\n\t\t\t\tname: 'chainstart',\n\t\t\t\tblock: 0,\n\t\t\t},\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\t{ name: 'homestead', block: null },\n\t\t\t{ name: 'tangerineWhistle', block: 10 },\n\t\t];\n\n\t\tconst common = Common.custom({ hardforks: nullHardforks });\n\t\tcommon.setHardforkByBlockNumber(10);\n\t\texpect('tangerineWhistle').toEqual(common.hardfork());\n\t\tcommon.setHardforkByBlockNumber(3);\n\t\texpect('chainstart').toEqual(common.hardfork());\n\t});\n});\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/test/unit/common/eips.test.ts",["675"],["676","677","678"],"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { toBigInt } from 'web3-utils';\nimport { Chain, Common, Hardfork } from '../../../src/common';\n\ndescribe('[Common/EIPs]: Initialization / Chain params', () => {\n\tit('Correct initialization', () => {\n\t\tlet eips = [2537, 2929];\n\t\tconst c = new Common({ chain: Chain.Mainnet, eips });\n\t\texpect(c.eips()).toEqual(eips);\n\n\t\teips = [2718, 2929, 2930];\n\t\texpect(() => {\n\t\t\t// eslint-disable-next-line no-new\n\t\t\tnew Common({ chain: Chain.Mainnet, eips, hardfork: Hardfork.Istanbul });\n\t\t}).not.toThrow();\n\n\t\teips = [2930];\n\t\texpect(() => {\n\t\t\t// eslint-disable-next-line no-new\n\t\t\tnew Common({ chain: Chain.Mainnet, eips, hardfork: Hardfork.Istanbul });\n\t\t}).toThrow();\n\t});\n\n\tit('Initialization errors', () => {\n\t\tconst UNSUPPORTED_EIP = 1000000;\n\t\tconst eips = [UNSUPPORTED_EIP];\n\t\texpect(() => {\n\t\t\t// eslint-disable-next-line no-new\n\t\t\tnew Common({ chain: Chain.Mainnet, eips });\n\t\t}).toThrow('not supported');\n\n\t\t/*\n    // Manual test since no test triggering EIP config available\n    // TODO: recheck on addition of new EIP configs\n    // To run manually change minimumHardfork in EIP2537 config to petersburg\n    eips = [ 2537, ]\n    msg = 'should throw on not meeting minimum hardfork requirements'\n    f = () => {\n      new Common({ chain: Chain.Mainnet, hardfork: Hardfork.Byzantium, eips })\n    }\n    st.throws(f, /minimumHardfork/, msg)\n    */\n\t});\n\n\tit('isActivatedEIP()', () => {\n\t\tlet c = new Common({ chain: Chain.Goerli, hardfork: Hardfork.Istanbul });\n\t\texpect(c.isActivatedEIP(2315)).toBe(false);\n\t\tc = new Common({ chain: Chain.Goerli, hardfork: Hardfork.Istanbul, eips: [2315] });\n\t\texpect(c.isActivatedEIP(2315)).toBe(true);\n\t\tc = new Common({ chain: Chain.Goerli, hardfork: Hardfork.Berlin });\n\t\texpect(c.isActivatedEIP(2929)).toBe(true);\n\t\texpect(c.isActivatedEIP(2315)).toBe(false);\n\t\texpect(c.isActivatedEIP(2537)).toBe(false);\n\t});\n\n\tit('eipBlock', () => {\n\t\tconst c = new Common({ chain: Chain.Mainnet });\n\n\t\texpect(c.eipBlock(1559)! === toBigInt(12965000)).toBe(true);\n\n\t\texpect(c.eipBlock(0)).toBeNull();\n\t});\n});\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/test/unit/common/hardforks.test.ts",["679","680","681","682","683","684","685","686","687","688"],["689","690","691","692","693","694","695","696","697","698","699","700","701","702","703","704","705","706","707"],"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { hexToBytes } from 'web3-utils';\nimport { Chain, Common, ConsensusAlgorithm, ConsensusType, Hardfork } from '../../../src/common';\nimport gethGenesisKiln from '../../fixtures/common/geth-genesis-kiln.json';\n\ndescribe('[Common]: Hardfork logic', () => {\n\tit('Hardfork access', () => {\n\t\tconst supportedHardforks = [\n\t\t\tHardfork.Chainstart,\n\t\t\tHardfork.Homestead,\n\t\t\tHardfork.Dao,\n\t\t\tHardfork.Chainstart,\n\t\t\tHardfork.SpuriousDragon,\n\t\t\tHardfork.Byzantium,\n\t\t\tHardfork.Constantinople,\n\t\t\tHardfork.Petersburg,\n\t\t\tHardfork.Istanbul,\n\t\t\tHardfork.Berlin,\n\t\t\tHardfork.London,\n\t\t\tHardfork.ArrowGlacier,\n\t\t\tHardfork.GrayGlacier,\n\t\t\tHardfork.Shanghai,\n\t\t\tHardfork.Merge,\n\t\t];\n\t\tlet c;\n\n\t\tfor (const hardfork of supportedHardforks) {\n\t\t\tc = new Common({ chain: Chain.Mainnet, hardfork });\n\t\t\texpect(c.hardfork()).toEqual(hardfork);\n\t\t}\n\t});\n\n\tit('getHardforkByBlockNumber() / setHardforkByBlockNumber()', () => {\n\t\tlet c = new Common({ chain: Chain.Mainnet });\n\n\t\texpect(c.getHardforkByBlockNumber(0)).toEqual(Hardfork.Chainstart);\n\t\texpect(c.getHardforkByBlockNumber(1149999)).toEqual(Hardfork.Chainstart);\n\t\texpect(c.getHardforkByBlockNumber(1150000)).toEqual(Hardfork.Homestead);\n\t\texpect(c.getHardforkByBlockNumber(1400000)).toEqual(Hardfork.Homestead);\n\t\texpect(c.getHardforkByBlockNumber(9200000)).toEqual(Hardfork.MuirGlacier);\n\t\texpect(c.getHardforkByBlockNumber(12244000)).toEqual(Hardfork.Berlin);\n\t\texpect(c.getHardforkByBlockNumber(12965000)).toEqual(Hardfork.London);\n\t\texpect(c.getHardforkByBlockNumber(13773000)).toEqual(Hardfork.ArrowGlacier);\n\t\texpect(c.getHardforkByBlockNumber(15050000)).toEqual(Hardfork.GrayGlacier);\n\t\t// merge is now specified at 15537394 in config\n\t\texpect(c.getHardforkByBlockNumber(999999999999)).toEqual(Hardfork.Merge);\n\n\t\texpect(c.setHardforkByBlockNumber(0)).toEqual(Hardfork.Chainstart);\n\t\texpect(c.setHardforkByBlockNumber(1149999)).toEqual(Hardfork.Chainstart);\n\t\texpect(c.setHardforkByBlockNumber(1150000)).toEqual(Hardfork.Homestead);\n\t\texpect(c.setHardforkByBlockNumber(1400000)).toEqual(Hardfork.Homestead);\n\t\texpect(c.setHardforkByBlockNumber(12244000)).toEqual(Hardfork.Berlin);\n\t\texpect(c.setHardforkByBlockNumber(12965000)).toEqual(Hardfork.London);\n\t\texpect(c.setHardforkByBlockNumber(13773000)).toEqual(Hardfork.ArrowGlacier);\n\t\texpect(c.setHardforkByBlockNumber(15050000)).toEqual(Hardfork.GrayGlacier);\n\t\t// merge is now specified at 15537394 in config\n\t\texpect(c.setHardforkByBlockNumber(999999999999)).toEqual(Hardfork.Merge);\n\n\t\tc = new Common({ chain: Chain.Sepolia });\n\t\texpect(c.setHardforkByBlockNumber(1735371)).toBe('mergeForkIdTransition');\n\t});\n\n\tit('should throw if no hardfork qualifies', () => {\n\t\tconst hardforks = [\n\t\t\t{\n\t\t\t\tname: 'homestead',\n\t\t\t\tblock: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'tangerineWhistle',\n\t\t\t\tblock: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'spuriousDragon',\n\t\t\t\tblock: 3,\n\t\t\t},\n\t\t];\n\t\tconst c = Common.custom({ hardforks }, { baseChain: Chain.Sepolia });\n\n\t\texpect(() => {\n\t\t\tc.getHardforkByBlockNumber(0);\n\t\t}).toThrow();\n\n\t\texpect(c.setHardforkByBlockNumber(3)).toEqual(Hardfork.SpuriousDragon);\n\t});\n\n\tit('setHardfork(): hardforkChanged event', () => {\n\t\tconst c = new Common({ chain: Chain.Mainnet, hardfork: Hardfork.Istanbul });\n\t\tc.on('hardforkChanged', (hardfork: string) => {\n\t\t\texpect(hardfork).toEqual(Hardfork.Byzantium);\n\t\t});\n\t\tc.setHardfork(Hardfork.Byzantium);\n\t});\n\n\tit('hardforkBlock()', () => {\n\t\tlet c = new Common({ chain: Chain.Goerli });\n\t\texpect(c.hardforkBlock(Hardfork.Byzantium)!).toEqual(BigInt(0));\n\n\t\texpect(c.hardforkBlock('thisHardforkDoesNotExist')).toBeNull();\n\n\t\tc = new Common({ chain: Chain.Sepolia, hardfork: Hardfork.MergeForkIdTransition });\n\t\texpect(c.hardforkBlock()!).toEqual(BigInt(1735371));\n\n\t\tc = new Common({ chain: Chain.Mainnet, hardfork: Hardfork.Istanbul });\n\t\texpect(c.hardforkBlock()!).toEqual(BigInt(9069000));\n\n\t\tc = new Common({ chain: Chain.Mainnet });\n\t\texpect(c.hardforkBlock(Hardfork.Berlin)!).toEqual(BigInt(12244000));\n\t\texpect(c.hardforkBlock(Hardfork.Berlin)!).toEqual(BigInt(12244000));\n\n\t\t// developer note: when Shanghai is set,\n\t\t// update this test to next unscheduled hardfork.\n\t\texpect(c.hardforkBlock(Hardfork.Shanghai)).toBeNull();\n\t\texpect(c.hardforkBlock(Hardfork.Shanghai)).toBeNull();\n\t\texpect(c.nextHardforkBlockOrTimestamp(Hardfork.Shanghai)).toBeNull();\n\t});\n\n\tit('isHardforkBlock()', () => {\n\t\tlet c = new Common({ chain: Chain.Sepolia });\n\t\t// eslint-disable-next-line deprecation/deprecation\n\t\texpect(c.isHardforkBlock(1450409)).toBe(true);\n\t\t// eslint-disable-next-line deprecation/deprecation\n\t\texpect(c.isHardforkBlock(1735372)).toBe(false);\n\n\t\tc = new Common({ chain: Chain.Mainnet, hardfork: Hardfork.Byzantium });\n\t\t// eslint-disable-next-line deprecation/deprecation\n\t\texpect(c.isHardforkBlock(4370000)).toBe(true);\n\t\t// eslint-disable-next-line deprecation/deprecation\n\t\texpect(c.isHardforkBlock(2463001)).toBe(false);\n\t});\n\n\tit('nextHardforkBlockOrTimestamp()', () => {\n\t\tlet c = new Common({ chain: Chain.Sepolia, hardfork: Hardfork.MergeForkIdTransition });\n\t\texpect(c.nextHardforkBlockOrTimestamp()!).toEqual(BigInt(1677557088));\n\n\t\texpect(c.nextHardforkBlockOrTimestamp('mergeForkIdTransition')!).toEqual(\n\t\t\tBigInt(1677557088),\n\t\t);\n\t\texpect(c.nextHardforkBlockOrTimestamp(Hardfork.Byzantium)!).toEqual(BigInt(1735371));\n\t\texpect(c.nextHardforkBlockOrTimestamp(Hardfork.London)).toEqual(BigInt(1735371));\n\t\tc = new Common({ chain: Chain.Goerli, hardfork: Hardfork.Chainstart });\n\t\texpect(c.nextHardforkBlockOrTimestamp()!).toEqual(BigInt(1561651));\n\t});\n\n\tit('isNextHardforkBlock()', () => {\n\t\tconst c = new Common({ chain: Chain.Goerli, hardfork: Hardfork.Istanbul });\n\t\t// eslint-disable-next-line deprecation/deprecation\n\t\texpect(c.isNextHardforkBlock(4460644)).toBe(true);\n\t\t// eslint-disable-next-line deprecation/deprecation\n\t\texpect(c.isNextHardforkBlock(5062605, 'berlin')).toBe(true);\n\t\t// eslint-disable-next-line deprecation/deprecation\n\t\texpect(c.isNextHardforkBlock(5062605, Hardfork.Berlin)).toBe(true);\n\t\t// eslint-disable-next-line deprecation/deprecation\n\t\texpect(c.isNextHardforkBlock(13773000, Hardfork.Byzantium)).toBe(false);\n\t\t// eslint-disable-next-line deprecation/deprecation\n\t\texpect(c.isNextHardforkBlock(13773001, Hardfork.London)).toBe(false);\n\t});\n\n\tit('hardforkIsActiveOnBlock() / activeOnBlock()', () => {\n\t\tlet c = new Common({ chain: Chain.Goerli });\n\t\texpect(c.hardforkIsActiveOnBlock(Hardfork.Istanbul, 1561651)).toBe(true);\n\n\t\texpect(c.hardforkIsActiveOnBlock(Hardfork.London, 5062605)).toBe(true);\n\n\t\texpect(c.hardforkIsActiveOnBlock(Hardfork.Byzantium, 1699999)).toBe(false);\n\n\t\tc = new Common({ chain: Chain.Goerli, hardfork: Hardfork.London });\n\t\t// eslint-disable-next-line no-null/no-null\n\t\texpect(c.hardforkIsActiveOnBlock(null, 5062605)).toBe(true);\n\n\t\texpect(c.activeOnBlock(5062605)).toBe(true);\n\t\t// eslint-disable-next-line no-null/no-null\n\t\texpect(c.hardforkIsActiveOnBlock(null, 5062605)).toBe(true);\n\t\t// eslint-disable-next-line no-null/no-null\n\t\texpect(c.hardforkIsActiveOnBlock(null, 1699999)).toBe(false);\n\t});\n\n\tit('hardforkGteHardfork()', () => {\n\t\tlet c = new Common({ chain: Chain.Goerli });\n\t\texpect(c.hardforkGteHardfork(Hardfork.Constantinople, Hardfork.Byzantium)).toBe(true);\n\n\t\texpect(c.hardforkGteHardfork(Hardfork.Dao, Hardfork.Chainstart)).toBe(false);\n\n\t\texpect(c.hardforkGteHardfork(Hardfork.Byzantium, Hardfork.Byzantium)).toBe(true);\n\n\t\texpect(c.hardforkGteHardfork(Hardfork.SpuriousDragon, Hardfork.Byzantium)).toBe(false);\n\n\t\tc = new Common({ chain: Chain.Goerli, hardfork: Hardfork.Byzantium });\n\t\t// eslint-disable-next-line no-null/no-null\n\t\texpect(c.hardforkGteHardfork(null, Hardfork.SpuriousDragon)).toBe(true);\n\n\t\texpect(c.gteHardfork(Hardfork.SpuriousDragon)).toBe(true);\n\t\t// eslint-disable-next-line no-null/no-null\n\t\texpect(c.hardforkGteHardfork(null, Hardfork.Byzantium)).toBe(true);\n\t\t// eslint-disable-next-line no-null/no-null\n\t\texpect(c.hardforkGteHardfork(null, Hardfork.Constantinople)).toBe(false);\n\t});\n\n\tit('hardforkGteHardfork() ropsten', () => {\n\t\tconst c = new Common({ chain: Chain.Goerli });\n\t\texpect(c.hardforkGteHardfork(Hardfork.SpuriousDragon, Hardfork.MuirGlacier)).toBe(false);\n\t});\n\n\tit('_calcForkHash()', () => {\n\t\tconst chains: [Chain, Uint8Array][] = [\n\t\t\t[\n\t\t\t\tChain.Mainnet,\n\t\t\t\thexToBytes('d4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3'),\n\t\t\t],\n\t\t\t[\n\t\t\t\tChain.Goerli,\n\t\t\t\thexToBytes('bf7e331f7f7c1dd2e05159666b3bf8bc7a8a3a9eb1d518969eab529dd9b88c1a'),\n\t\t\t],\n\t\t\t[\n\t\t\t\tChain.Sepolia,\n\t\t\t\thexToBytes('25a5cc106eea7138acab33231d7160d69cb777ee0c2c553fcddf5138993e6dd9'),\n\t\t\t],\n\t\t];\n\n\t\tlet c = new Common({ chain: Chain.Mainnet });\n\t\tconst mainnetGenesisHash = chains[0][1];\n\t\texpect(c._calcForkHash(Hardfork.Chainstart, mainnetGenesisHash)).toBe('0xfc64ec04');\n\n\t\texpect(c._calcForkHash(Hardfork.Homestead, mainnetGenesisHash)).toBe('0x97c2c34c');\n\n\t\texpect(c._calcForkHash(Hardfork.Byzantium, mainnetGenesisHash)).toBe('0xa00bc324');\n\n\t\tfor (const [chain, genesisHash] of chains) {\n\t\t\tc = new Common({ chain });\n\t\t\tfor (const hf of c.hardforks()) {\n\t\t\t\tif (typeof hf.forkHash !== 'string') {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\texpect(c._calcForkHash(hf.name, genesisHash)).toEqual(hf.forkHash);\n\t\t\t}\n\t\t}\n\t});\n\n\tit('forkHash()', () => {\n\t\tlet c = new Common({ chain: Chain.Mainnet, hardfork: Hardfork.Byzantium });\n\t\texpect(c.forkHash()).toBe('0xa00bc324');\n\t\texpect(c.forkHash(Hardfork.SpuriousDragon)).toBe('0x3edd5b10');\n\t\tconst genesisHash = hexToBytes(\n\t\t\t'd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3',\n\t\t);\n\t\texpect(c.forkHash(Hardfork.SpuriousDragon, genesisHash)).toBe('0x3edd5b10');\n\n\t\tc = new Common({ chain: Chain.Mainnet, hardfork: Hardfork.Shanghai });\n\t\t// unschedule shanghai on it to test\n\t\tc.hardforks()\n\t\t\t.filter(hf => hf.name === Hardfork.Shanghai)\n\t\t\t// eslint-disable-next-line array-callback-return\n\t\t\t.map(hf => {\n\t\t\t\t// eslint-disable-next-line no-null/no-null, no-param-reassign\n\t\t\t\thf.block = null;\n\t\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\t\thf.timestamp = undefined;\n\t\t\t});\n\t\texpect(() => {\n\t\t\tc.forkHash(Hardfork.Shanghai);\n\t\t}).toThrow('No fork hash calculation possible');\n\t\texpect(() => {\n\t\t\tc.forkHash('thisHardforkDoesNotExist');\n\t\t}).toThrow('No fork hash calculation possible');\n\t});\n\n\tit('hardforkForForkHash()', () => {\n\t\tconst c = new Common({ chain: Chain.Mainnet });\n\n\t\tconst res = c.hardforkForForkHash('0x3edd5b10')!;\n\t\texpect(res.name).toEqual(Hardfork.SpuriousDragon);\n\n\t\texpect(c.hardforkForForkHash('0x12345')).toBeNull();\n\t});\n\n\tit('HF consensus updates', () => {\n\t\tlet c = new Common({ chain: Chain.Goerli, hardfork: Hardfork.Byzantium });\n\t\texpect(c.consensusType()).toEqual(ConsensusType.ProofOfAuthority);\n\t\texpect(c.consensusAlgorithm()).toEqual(ConsensusAlgorithm.Clique);\n\t\texpect(c.consensusConfig()['period']).toBe(15);\n\n\t\tc = new Common({ chain: Chain.Goerli, hardfork: Hardfork.Merge });\n\t\texpect(c.consensusType()).toEqual(ConsensusType.ProofOfStake);\n\t\texpect(c.consensusAlgorithm()).toEqual(ConsensusAlgorithm.Casper);\n\t\texpect(c.consensusConfig()).toEqual({});\n\t});\n\n\tit('Should correctly apply hardfork changes', () => {\n\t\t// For sepolia MergeForkIdTransition happens AFTER merge\n\t\tlet c = new Common({ chain: Chain.Sepolia, hardfork: Hardfork.London });\n\t\texpect(c['HARDFORK_CHANGES'][11][0]).toEqual(Hardfork.Merge);\n\t\texpect(c['HARDFORK_CHANGES'][12][0]).toEqual(Hardfork.MergeForkIdTransition);\n\n\t\t// Should give correct ConsensusType pre and post merge\n\t\texpect(c.consensusType()).toEqual(ConsensusType.ProofOfWork);\n\t\tc.setHardfork(Hardfork.Merge);\n\t\texpect(c.consensusType()).toEqual(ConsensusType.ProofOfStake);\n\t\tc.setHardfork(Hardfork.MergeForkIdTransition);\n\t\texpect(c.consensusType()).toEqual(ConsensusType.ProofOfStake);\n\n\t\t// For kiln MergeForkIdTransition happens BEFORE Merge\n\n\t\tc = Common.fromGethGenesis(gethGenesisKiln, {\n\t\t\tchain: 'kiln',\n\t\t\tmergeForkIdPostMerge: false,\n\t\t});\n\n\t\t// MergeForkIdTransition change should be before Merge\n\t\texpect(c['HARDFORK_CHANGES'][10][0]).toEqual(Hardfork.MergeForkIdTransition);\n\t\texpect(c['HARDFORK_CHANGES'][11][0]).toEqual(Hardfork.Merge);\n\n\t\t// Should give correct ConsensusType pre and post merge\n\t\tc.setHardfork(Hardfork.London);\n\t\texpect(c.consensusType()).toEqual(ConsensusType.ProofOfWork);\n\t\tc.setHardfork(Hardfork.Merge);\n\t\texpect(c.consensusType()).toEqual(ConsensusType.ProofOfStake);\n\t\tc.setHardfork(Hardfork.MergeForkIdTransition);\n\t\texpect(c.consensusType()).toEqual(ConsensusType.ProofOfWork);\n\t});\n});\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/test/unit/common/mergePOS.test.ts",["708","709"],["710","711","712","713"],"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { toBigInt } from 'web3-utils';\nimport { Chain, Common, Hardfork } from '../../../src/common';\n\nimport * as testnetMerge from '../../fixtures/common/merge/testnetMerge.json';\nimport * as testnetPOS from '../../fixtures/common/merge/testnetPOS.json';\nimport postMerge from '../../fixtures/common/post-merge.json';\n\ndescribe('[Common]: Merge/POS specific logic', () => {\n\tit('hardforkTTD()', () => {\n\t\tconst customChains = [testnetMerge];\n\t\tconst c = new Common({ chain: 'testnetMerge', hardfork: Hardfork.Istanbul, customChains });\n\t\texpect(c.hardforkTTD(Hardfork.Merge)).toEqual(BigInt(5000));\n\t\texpect(c.hardforkTTD('thisHardforkDoesNotExist')).toBeNull();\n\t});\n\n\tit('getHardforkByBlockNumber(), merge block null, with total difficulty', () => {\n\t\tconst customChains = [testnetMerge];\n\t\tconst c = new Common({\n\t\t\tchain: 'testnetMerge',\n\t\t\thardfork: Hardfork.Istanbul,\n\t\t\tcustomChains,\n\t\t});\n\n\t\texpect(c.getHardforkByBlockNumber(0)).toBe('chainstart');\n\t\texpect(c.getHardforkByBlockNumber(14)).toBe('london');\n\t\texpect(c.getHardforkByBlockNumber(15, 5000)).toBe('merge');\n\t\texpect(c.getHardforkByBlockNumber(15, 5001)).toBe('merge');\n\t\texpect(c.getHardforkByBlockNumber(15, 4999)).toBe('london');\n\t\texpect(c.getHardforkByBlockNumber(12, 4999)).toBe('berlin');\n\t});\n\n\tit('getHardforkByBlockNumber(), merge block set, with total difficulty', () => {\n\t\tconst testnetMergeWithBlockNumber = JSON.parse(JSON.stringify(testnetMerge));\n\t\t// Set Merge block to 15\n\t\ttestnetMergeWithBlockNumber['hardforks'][8]['block'] = 16;\n\t\tconst customChains = [testnetMergeWithBlockNumber];\n\t\tconst c = new Common({\n\t\t\tchain: 'testnetMerge',\n\t\t\thardfork: Hardfork.Istanbul,\n\t\t\tcustomChains,\n\t\t});\n\n\t\texpect(c.getHardforkByBlockNumber(0)).toBe('chainstart');\n\t\texpect(c.getHardforkByBlockNumber(16)).toBe('merge');\n\t\texpect(c.getHardforkByBlockNumber(16, 5000)).toBe('merge');\n\t\texpect(c.getHardforkByBlockNumber(16, 5001)).toBe('merge');\n\t\texpect(c.getHardforkByBlockNumber(12, 4999)).toBe('berlin');\n\n\t\texpect(() => {\n\t\t\tc.getHardforkByBlockNumber(16, 4999);\n\t\t}).toThrow('Maximum HF determined by total difficulty is lower than the block number HF');\n\n\t\texpect(() => {\n\t\t\tc.getHardforkByBlockNumber(14, 5000);\n\t\t}).toThrow('HF determined by block number is lower than the minimum total difficulty HF');\n\t});\n\n\tit('getHardforkByBlockNumber(), merge block set + subsequent HF, with total difficulty', () => {\n\t\tconst testnetMergeWithBlockNumber = JSON.parse(JSON.stringify(testnetMerge));\n\t\t// Set Merge block to 15\n\t\ttestnetMergeWithBlockNumber['hardforks'][8]['block'] = 16;\n\t\t// Set Shanghai block to 18\n\t\ttestnetMergeWithBlockNumber['hardforks'][9]['block'] = 18;\n\t\tconst customChains = [testnetMergeWithBlockNumber];\n\t\tconst c = new Common({\n\t\t\tchain: 'testnetMerge',\n\t\t\thardfork: Hardfork.Istanbul,\n\t\t\tcustomChains,\n\t\t});\n\n\t\texpect(c.getHardforkByBlockNumber(18, 5001)).toBe('shanghai');\n\t});\n\n\tit('setHardforkByBlockNumber(), merge block null, with total difficulty', () => {\n\t\tconst customChains = [testnetMerge];\n\t\tconst c = new Common({\n\t\t\tchain: 'testnetMerge',\n\t\t\thardfork: Hardfork.Istanbul,\n\t\t\tcustomChains,\n\t\t});\n\n\t\texpect(c.setHardforkByBlockNumber(0)).toBe('chainstart');\n\t\texpect(c.setHardforkByBlockNumber(14)).toBe('london');\n\t\texpect(c.setHardforkByBlockNumber(15, 5000)).toBe('merge');\n\t\texpect(c.setHardforkByBlockNumber(15, 5001)).toBe('merge');\n\t\texpect(c.setHardforkByBlockNumber(15, 4999)).toBe('london');\n\t\texpect(c.setHardforkByBlockNumber(12, 4999)).toBe('berlin');\n\t});\n\n\tit('setHardforkByBlockNumber(), merge block set, with total difficulty', () => {\n\t\tconst testnetMergeWithBlockNumber = JSON.parse(JSON.stringify(testnetMerge));\n\t\t// Set Merge block to 15\n\t\ttestnetMergeWithBlockNumber['hardforks'][8]['block'] = 16;\n\t\tconst customChains = [testnetMergeWithBlockNumber];\n\t\tconst c = new Common({\n\t\t\tchain: 'testnetMerge',\n\t\t\thardfork: Hardfork.Istanbul,\n\t\t\tcustomChains,\n\t\t});\n\n\t\texpect(c.setHardforkByBlockNumber(0)).toBe('chainstart');\n\t\texpect(c.setHardforkByBlockNumber(16)).toBe('merge');\n\t\texpect(c.setHardforkByBlockNumber(16, 5000)).toBe('merge');\n\t\texpect(c.setHardforkByBlockNumber(16, 5001)).toBe('merge');\n\t\texpect(c.setHardforkByBlockNumber(12, 4999)).toBe('berlin');\n\n\t\texpect(() => {\n\t\t\tc.setHardforkByBlockNumber(16, 4999);\n\t\t}).toThrow('Maximum HF determined by total difficulty is lower than the block number HF');\n\n\t\texpect(() => {\n\t\t\tc.setHardforkByBlockNumber(14, 5000);\n\t\t}).toThrow('HF determined by block number is lower than the minimum total difficulty HF');\n\t});\n\n\tit('setHardforkByBlockNumber(), merge block set + subsequent HF, with total difficulty', () => {\n\t\tconst testnetMergeWithBlockNumber = JSON.parse(JSON.stringify(testnetMerge));\n\t\t// Set Merge block to 15\n\t\ttestnetMergeWithBlockNumber['hardforks'][8]['block'] = 16;\n\t\t// Set Shanghai block to 18\n\t\ttestnetMergeWithBlockNumber['hardforks'][9]['block'] = 18;\n\t\tconst customChains = [testnetMergeWithBlockNumber];\n\t\tconst c = new Common({\n\t\t\tchain: 'testnetMerge',\n\t\t\thardfork: Hardfork.Istanbul,\n\t\t\tcustomChains,\n\t\t});\n\n\t\texpect(c.setHardforkByBlockNumber(18, 5001)).toBe('shanghai');\n\t});\n\n\tit('Pure POS testnet', () => {\n\t\tconst customChains = [testnetPOS];\n\t\tconst c = new Common({ chain: 'testnetPOS', hardfork: Hardfork.Chainstart, customChains });\n\n\t\texpect(c.hardforkTTD(Hardfork.Chainstart)).toEqual(BigInt(0));\n\n\t\texpect(c.getHardforkByBlockNumber(5, 0)).toBe('shanghai');\n\t});\n\n\tit('Should fail setting invalid hardfork', () => {\n\t\tconst customChains = [testnetPOS];\n\t\texpect(() => {\n\t\t\t// eslint-disable-next-line no-new\n\t\t\tnew Common({ chain: 'testnetPOS', hardfork: Hardfork.Istanbul, customChains });\n\t\t}).toThrow(`Hardfork with name istanbul not supported`);\n\t});\n\n\tit('should get the correct merge hardfork at genesis', async () => {\n\t\tconst c = Common.fromGethGenesis(postMerge, { chain: 'post-merge' });\n\t\texpect(c.getHardforkByBlockNumber(0)).toEqual(Hardfork.London);\n\t\texpect(c.getHardforkByBlockNumber(0, BigInt(0))).toEqual(Hardfork.Merge);\n\t});\n\n\tit('test post merge hardforks using Sepolia with block null', () => {\n\t\tconst c = new Common({ chain: Chain.Sepolia });\n\n\t\texpect(c.getHardforkByBlockNumber(0)).toEqual(Hardfork.London);\n\t\t// Make it null manually as config could be updated later\n\t\t// eslint-disable-next-line no-null/no-null\n\t\tconst mergeHf = c.hardforks().filter(hf => hf.ttd !== undefined && hf.ttd !== null)[0];\n\t\tconst prevMergeBlockVal = mergeHf.block;\n\t\t// eslint-disable-next-line no-null/no-null\n\t\tmergeHf.block = null;\n\n\t\t// should get Hardfork.London even though happened with 1450408 as terminal as config doesn't have that info\n\t\texpect(c.getHardforkByBlockNumber(1450409)).toEqual(Hardfork.London);\n\t\t// however with correct td in input it should select merge\n\t\texpect(c.getHardforkByBlockNumber(1450409, BigInt('17000000000000000'))).toEqual(\n\t\t\tHardfork.Merge,\n\t\t);\n\t\t// should select MergeForkIdTransition even without td specified as the block is set for this hardfork\n\t\texpect(c.getHardforkByBlockNumber(1735371)).toEqual(Hardfork.MergeForkIdTransition);\n\t\t// also with td specified\n\t\texpect(c.getHardforkByBlockNumber(1735371, BigInt('17000000000000000'))).toEqual(\n\t\t\tHardfork.MergeForkIdTransition,\n\t\t);\n\n\t\t// Check nextHardforkBlockOrTimestamp should be MergeForkIdTransition's block on london and merge both\n\t\texpect(c.nextHardforkBlockOrTimestamp(Hardfork.Berlin)).toEqual(toBigInt(1735371));\n\t\texpect(c.nextHardforkBlockOrTimestamp(Hardfork.London)).toEqual(toBigInt(1735371));\n\t\texpect(c.nextHardforkBlockOrTimestamp(Hardfork.Merge)).toEqual(toBigInt(1735371));\n\n\t\texpect(() => {\n\t\t\tc.getHardforkByBlockNumber(1735371, BigInt('15000000000000000'));\n\t\t}).toThrow('Maximum HF determined by total difficulty is lower than the block number HF');\n\n\t\texpect(c.setHardforkByBlockNumber(0)).toEqual(Hardfork.London);\n\t\texpect(c.setHardforkByBlockNumber(1450409)).toEqual(Hardfork.London);\n\t\texpect(c.setHardforkByBlockNumber(1450409, BigInt('17000000000000000'))).toEqual(\n\t\t\tHardfork.Merge,\n\t\t);\n\t\texpect(c.setHardforkByBlockNumber(1735371)).toEqual(Hardfork.MergeForkIdTransition);\n\t\texpect(c.setHardforkByBlockNumber(1735371, BigInt('17000000000000000'))).toEqual(\n\t\t\tHardfork.MergeForkIdTransition,\n\t\t);\n\n\t\texpect(() => {\n\t\t\tc.setHardforkByBlockNumber(1735371, BigInt('15000000000000000'));\n\t\t}).toThrow('Maximum HF determined by total difficulty is lower than the block number HF');\n\t\t// restore value\n\t\tmergeHf.block = prevMergeBlockVal;\n\t});\n\n\tit('should get correct merge and post merge hf with merge block specified', () => {\n\t\tconst c = new Common({ chain: Chain.Sepolia });\n\t\t// eslint-disable-next-line no-null/no-null\n\t\tconst mergeHf = c.hardforks().filter(hf => hf.ttd !== undefined && hf.ttd !== null)[0];\n\t\tconst prevMergeBlockVal = mergeHf.block;\n\t\t// the terminal block on sepolia is 1450408\n\t\tmergeHf.block = 1450409;\n\n\t\t// should get merge even without td supplied as the merge hf now has the block specified\n\t\texpect(c.setHardforkByBlockNumber(1450409)).toEqual(Hardfork.Merge);\n\t\texpect(c.setHardforkByBlockNumber(1450409, BigInt('17000000000000000'))).toEqual(\n\t\t\tHardfork.Merge,\n\t\t);\n\t\texpect(c.setHardforkByBlockNumber(1735371)).toEqual(Hardfork.MergeForkIdTransition);\n\t\texpect(c.setHardforkByBlockNumber(1735371, BigInt('17000000000000000'))).toEqual(\n\t\t\tHardfork.MergeForkIdTransition,\n\t\t);\n\n\t\t// Check nextHardforkBlockOrTimestamp should be MergeForkIdTransition's block on london and merge both\n\t\texpect(c.nextHardforkBlockOrTimestamp(Hardfork.London)).toEqual(toBigInt(1735371));\n\t\texpect(c.nextHardforkBlockOrTimestamp(Hardfork.Merge)).toEqual(toBigInt(1735371));\n\n\t\t// restore value\n\t\tmergeHf.block = prevMergeBlockVal;\n\t});\n\n\tit('should throw if encounters a double ttd hardfork specification', () => {\n\t\tconst c = new Common({ chain: Chain.Sepolia });\n\t\t// Add the ttd to mergeForkIdTransition which occurs post merge in sepolia\n\t\tc.hardforks().filter(hf => hf.name === 'mergeForkIdTransition')[0]!['ttd'] =\n\t\t\t'17000000000000000';\n\t\texpect(() => {\n\t\t\tc.setHardforkByBlockNumber(1735371);\n\t\t}).toThrow('More than one merge hardforks found with ttd specified');\n\t});\n});\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/test/unit/common/params.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/test/unit/common/timestamp.test.ts",[],["714","715","716","717"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/test/unit/common/utils.test.ts",["718"],[],"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { hexToBytes } from 'web3-utils';\nimport { Common } from '../../../src/common/common';\nimport { Hardfork } from '../../../src/common';\nimport { parseGethGenesis } from '../../../src/common/utils';\nimport testnet from '../../fixtures/common/testnetValid.json';\nimport invalidSpuriousDragon from '../../fixtures/common/invalid-spurious-dragon.json';\nimport poa from '../../fixtures/common/poa.json';\nimport postMerge from '../../fixtures/common/post-merge.json';\nimport noExtraData from '../../fixtures/common/no-extra-data.json';\nimport gethGenesisKiln from '../../fixtures/common/geth-genesis-kiln.json';\nimport postMergeHardfork from '../../fixtures/common/post-merge-hardfork.json';\n\ndescribe('[Utils/Parse]', () => {\n\tconst kilnForkHashes: any = {\n\t\tchainstart: '0xbcadf543',\n\t\thomestead: '0xbcadf543',\n\t\ttangerineWhistle: '0xbcadf543',\n\t\tspuriousDragon: '0xbcadf543',\n\t\tbyzantium: '0xbcadf543',\n\t\tconstantinople: '0xbcadf543',\n\t\tpetersburg: '0xbcadf543',\n\t\tistanbul: '0xbcadf543',\n\t\tberlin: '0xbcadf543',\n\t\tlondon: '0xbcadf543',\n\t\tmergeForkIdTransition: '0x013fd1b5',\n\t\tmerge: '0x013fd1b5',\n\t};\n\n\tit('should parse geth params file', () => {\n\t\tconst params = parseGethGenesis(testnet, 'rinkeby');\n\t\texpect(params.genesis.nonce).toBe('0x0000000000000042');\n\t});\n\n\tit('should throw with invalid Spurious Dragon blocks', () => {\n\t\texpect(() => {\n\t\t\tparseGethGenesis(invalidSpuriousDragon, 'bad_params');\n\t\t}).toThrow();\n\t});\n\n\tit('should import poa network params correctly', () => {\n\t\tlet params = parseGethGenesis(poa, 'poa');\n\t\texpect(params.genesis.nonce).toBe('0x0000000000000000');\n\t\texpect(params.consensus).toEqual({\n\t\t\ttype: 'poa',\n\t\t\talgorithm: 'clique',\n\t\t\tclique: { period: 15, epoch: 30000 },\n\t\t});\n\t\tpoa.nonce = '00';\n\t\tparams = parseGethGenesis(poa, 'poa');\n\t\texpect(params.genesis.nonce).toBe('0x0000000000000000');\n\t\texpect(params.hardfork).toEqual(Hardfork.London);\n\t});\n\n\tit('should generate expected hash with london block zero and base fee per gas defined', () => {\n\t\tconst params = parseGethGenesis(postMerge, 'post-merge');\n\t\texpect(params.genesis.baseFeePerGas).toEqual(postMerge.baseFeePerGas);\n\t});\n\n\tit('should successfully parse genesis file with no extraData', () => {\n\t\tconst params = parseGethGenesis(noExtraData, 'noExtraData');\n\t\texpect(params.genesis.extraData).toBe('0x');\n\t\texpect(params.genesis.timestamp).toBe('0x10');\n\t});\n\n\tit('should successfully parse kiln genesis and set forkhash', () => {\n\t\tconst common = Common.fromGethGenesis(gethGenesisKiln, {\n\t\t\tchain: 'customChain',\n\t\t\tgenesisHash: hexToBytes(\n\t\t\t\t'51c7fe41be669f69c45c33a56982cbde405313342d9e2b00d7c91a7b284dd4f8',\n\t\t\t),\n\t\t\tmergeForkIdPostMerge: false,\n\t\t});\n\t\texpect(common.hardforks().map(hf => hf.name)).toEqual([\n\t\t\t'chainstart',\n\t\t\t'homestead',\n\t\t\t'tangerineWhistle',\n\t\t\t'spuriousDragon',\n\t\t\t'byzantium',\n\t\t\t'constantinople',\n\t\t\t'petersburg',\n\t\t\t'istanbul',\n\t\t\t'berlin',\n\t\t\t'london',\n\t\t\t'mergeForkIdTransition',\n\t\t\t'merge',\n\t\t]);\n\t\tfor (const hf of common.hardforks()) {\n\t\t\t/* eslint-disable @typescript-eslint/no-use-before-define */\n\t\t\texpect(hf.forkHash).toEqual(kilnForkHashes[hf.name]);\n\t\t}\n\n\t\texpect(common.hardfork()).toEqual(Hardfork.Merge);\n\n\t\t// Ok lets schedule shanghai at block 0, this should force merge to be scheduled at just after\n\t\t// genesis if even mergeForkIdTransition is not confirmed to be post merge\n\t\t// This will also check if the forks are being correctly sorted based on block\n\t\tObject.assign(gethGenesisKiln.config, { shanghaiTime: Math.floor(Date.now() / 1000) });\n\t\tconst common1 = Common.fromGethGenesis(gethGenesisKiln, {\n\t\t\tchain: 'customChain',\n\t\t});\n\t\t// merge hardfork is now scheduled just after shanghai even if mergeForkIdTransition is not confirmed\n\t\t// to be post merge\n\t\texpect(common1.hardforks().map(hf => hf.name)).toEqual([\n\t\t\t'chainstart',\n\t\t\t'homestead',\n\t\t\t'tangerineWhistle',\n\t\t\t'spuriousDragon',\n\t\t\t'byzantium',\n\t\t\t'constantinople',\n\t\t\t'petersburg',\n\t\t\t'istanbul',\n\t\t\t'berlin',\n\t\t\t'london',\n\t\t\t'merge',\n\t\t\t'mergeForkIdTransition',\n\t\t\t'shanghai',\n\t\t]);\n\n\t\texpect(common1.hardfork()).toEqual(Hardfork.Shanghai);\n\t});\n\n\tit('should successfully parse genesis with hardfork scheduled post merge', async () => {\n\t\tconst common = Common.fromGethGenesis(postMergeHardfork, {\n\t\t\tchain: 'customChain',\n\t\t});\n\t\texpect(common.hardforks().map(hf => hf.name)).toEqual([\n\t\t\t'chainstart',\n\t\t\t'homestead',\n\t\t\t'tangerineWhistle',\n\t\t\t'spuriousDragon',\n\t\t\t'byzantium',\n\t\t\t'constantinople',\n\t\t\t'petersburg',\n\t\t\t'istanbul',\n\t\t\t'muirGlacier',\n\t\t\t'berlin',\n\t\t\t'london',\n\t\t\t'merge',\n\t\t\t'shanghai',\n\t\t]);\n\n\t\texpect(common.getHardforkByBlockNumber(0)).toEqual(Hardfork.London);\n\t\texpect(common.getHardforkByBlockNumber(1, BigInt(2))).toEqual(Hardfork.Merge);\n\t\t// shanghai is at timestamp 8\n\t\texpect(common.getHardforkByBlockNumber(8)).toEqual(Hardfork.London);\n\t\texpect(common.getHardforkByBlockNumber(8, BigInt(2))).toEqual(Hardfork.Merge);\n\t\texpect(common.getHardforkByBlockNumber(8, undefined, 8)).toEqual(Hardfork.Shanghai);\n\t\t// should be post merge at shanghai\n\t\texpect(common.getHardforkByBlockNumber(8, BigInt(2), 8)).toEqual(Hardfork.Shanghai);\n\t\t// if not post merge, then should error\n\t\texpect(() => {\n\t\t\tcommon.getHardforkByBlockNumber(8, BigInt(1), 8);\n\t\t}).toThrow();\n\n\t\texpect(common.hardfork()).toEqual(Hardfork.Shanghai);\n\t});\n});\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/test/unit/tx/base.test.ts",["719"],["720","721","722","723","724","725","726"],"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { bytesToUint8Array, hexToBytes, uint8ArrayEquals } from 'web3-utils';\nimport {\n\tAccessListEIP2930Transaction,\n\tCapability,\n\tFeeMarketEIP1559Transaction,\n\tTransaction,\n} from '../../../src';\nimport { Chain, Common, Hardfork, toUint8Array, uint8ArrayToBigInt } from '../../../src/common';\nimport { MAX_INTEGER, MAX_UINT64, SECP256K1_ORDER, secp256k1 } from '../../../src/tx/constants';\n\nimport type { BaseTransaction } from '../../../src/tx/baseTransaction';\nimport eip1559Fixtures from '../../fixtures/json/eip1559txs.json';\nimport eip2930Fixtures from '../../fixtures/json/eip2930txs.json';\n\nimport legacyFixtures from '../../fixtures/json/txs.json';\n\nconst privateToPublic = function (privateKey: Uint8Array): Uint8Array {\n\treturn secp256k1.getPublicKey(privateKey, false).slice(1);\n};\nconst common = new Common({\n\tchain: 5,\n\thardfork: Hardfork.London,\n});\n// @ts-expect-error set private property\ncommon._chainParams.chainId = 4;\ndescribe('[BaseTransaction]', () => {\n\t// EIP-2930 is not enabled in Common by default (2021-03-06)\n\t// eslint-disable-next-line @typescript-eslint/no-shadow\n\tconst common = new Common({ chain: Chain.Mainnet, hardfork: Hardfork.London });\n\n\tconst legacyTxs: BaseTransaction<Transaction>[] = [];\n\tfor (const tx of legacyFixtures.slice(0, 4)) {\n\t\tlegacyTxs.push(Transaction.fromTxData(tx.data, { common }));\n\t}\n\n\tconst eip2930Txs: BaseTransaction<AccessListEIP2930Transaction>[] = [];\n\tfor (const tx of eip2930Fixtures) {\n\t\teip2930Txs.push(AccessListEIP2930Transaction.fromTxData(tx.data, { common }));\n\t}\n\n\tconst eip1559Txs: BaseTransaction<FeeMarketEIP1559Transaction>[] = [];\n\tfor (const tx of eip1559Fixtures) {\n\t\teip1559Txs.push(FeeMarketEIP1559Transaction.fromTxData(tx.data, { common }));\n\t}\n\n\tconst zero = new Uint8Array(0);\n\tconst txTypes = [\n\t\t{\n\t\t\tclass: Transaction,\n\t\t\tname: 'Transaction',\n\t\t\ttype: 0,\n\t\t\tvalues: Array(6).fill(zero),\n\t\t\ttxs: legacyTxs,\n\t\t\tfixtures: legacyFixtures,\n\t\t\tactiveCapabilities: [],\n\t\t\tnotActiveCapabilities: [\n\t\t\t\tCapability.EIP1559FeeMarket,\n\t\t\t\tCapability.EIP2718TypedTransaction,\n\t\t\t\tCapability.EIP2930AccessLists,\n\t\t\t\t9999,\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tclass: AccessListEIP2930Transaction,\n\t\t\tname: 'AccessListEIP2930Transaction',\n\t\t\ttype: 1,\n\t\t\tvalues: [new Uint8Array([1])].concat(Array(7).fill(zero)),\n\t\t\ttxs: eip2930Txs,\n\t\t\tfixtures: eip2930Fixtures,\n\t\t\tactiveCapabilities: [Capability.EIP2718TypedTransaction, Capability.EIP2930AccessLists],\n\t\t\tnotActiveCapabilities: [Capability.EIP1559FeeMarket, 9999],\n\t\t},\n\t\t{\n\t\t\tclass: FeeMarketEIP1559Transaction,\n\t\t\tname: 'FeeMarketEIP1559Transaction',\n\t\t\ttype: 2,\n\t\t\tvalues: [new Uint8Array([1])].concat(Array(8).fill(zero)),\n\t\t\ttxs: eip1559Txs,\n\t\t\tfixtures: eip1559Fixtures,\n\t\t\tactiveCapabilities: [\n\t\t\t\tCapability.EIP1559FeeMarket,\n\t\t\t\tCapability.EIP2718TypedTransaction,\n\t\t\t\tCapability.EIP2930AccessLists,\n\t\t\t],\n\t\t\tnotActiveCapabilities: [9999],\n\t\t},\n\t];\n\n\tit('Initialization', () => {\n\t\tfor (const txType of txTypes) {\n\t\t\tlet tx = txType.class.fromTxData({}, { common });\n\t\t\texpect(tx.common.hardfork()).toBe('london');\n\t\t\texpect(Object.isFrozen(tx)).toBe(true);\n\n\t\t\tconst initCommon = new Common({\n\t\t\t\tchain: Chain.Mainnet,\n\t\t\t\thardfork: Hardfork.London,\n\t\t\t});\n\t\t\ttx = txType.class.fromTxData({}, { common: initCommon });\n\t\t\texpect(tx.common.hardfork()).toBe('london');\n\n\t\t\tinitCommon.setHardfork(Hardfork.Byzantium);\n\t\t\texpect(tx.common.hardfork()).toBe('london');\n\n\t\t\ttx = txType.class.fromTxData({}, { common, freeze: false });\n\t\t\texpect(!Object.isFrozen(tx)).toBe(true);\n\n\t\t\t// Perform the same test as above, but now using a different construction method. This also implies that passing on the\n\t\t\t// options object works as expected.\n\t\t\ttx = txType.class.fromTxData({}, { common, freeze: false });\n\t\t\tconst rlpData = tx.serialize();\n\n\t\t\ttx = txType.class.fromSerializedTx(rlpData, { common });\n\t\t\texpect(tx.type).toEqual(txType.type);\n\n\t\t\texpect(Object.isFrozen(tx)).toBe(true);\n\n\t\t\ttx = txType.class.fromSerializedTx(rlpData, { common, freeze: false });\n\t\t\texpect(!Object.isFrozen(tx)).toBe(true);\n\n\t\t\ttx = txType.class.fromValuesArray(txType.values as any, { common });\n\t\t\texpect(Object.isFrozen(tx)).toBe(true);\n\n\t\t\ttx = txType.class.fromValuesArray(txType.values as any, { common, freeze: false });\n\t\t\texpect(!Object.isFrozen(tx)).toBe(true);\n\t\t}\n\t});\n\n\tit('fromValuesArray()', () => {\n\t\tlet rlpData: any = legacyTxs[0].raw();\n\t\trlpData[0] = toUint8Array('0x00');\n\t\texpect(() => {\n\t\t\tTransaction.fromValuesArray(rlpData);\n\t\t}).toThrow('nonce cannot have leading zeroes');\n\t\trlpData[0] = toUint8Array('0x');\n\t\trlpData[6] = toUint8Array('0x00');\n\t\texpect(() => {\n\t\t\tTransaction.fromValuesArray(rlpData);\n\t\t}).toThrow('v cannot have leading zeroes');\n\t\trlpData = eip2930Txs[0].raw();\n\t\trlpData[3] = toUint8Array('0x0');\n\t\texpect(() => {\n\t\t\tAccessListEIP2930Transaction.fromValuesArray(rlpData);\n\t\t}).toThrow('gasLimit cannot have leading zeroes');\n\t\trlpData = eip1559Txs[0].raw();\n\t\trlpData[2] = toUint8Array('0x0');\n\t\texpect(() => {\n\t\t\tFeeMarketEIP1559Transaction.fromValuesArray(rlpData);\n\t\t}).toThrow('maxPriorityFeePerGas cannot have leading zeroes');\n\t});\n\n\tit('serialize()', () => {\n\t\tfor (const txType of txTypes) {\n\t\t\tfor (const tx of txType.txs) {\n\t\t\t\texpect(txType.class.fromSerializedTx(tx.serialize(), { common })).toBeTruthy();\n\t\t\t\texpect(txType.class.fromSerializedTx(tx.serialize(), { common })).toBeTruthy();\n\t\t\t}\n\t\t}\n\t});\n\n\tit('supports()', () => {\n\t\tfor (const txType of txTypes) {\n\t\t\tfor (const tx of txType.txs) {\n\t\t\t\tfor (const activeCapability of txType.activeCapabilities) {\n\t\t\t\t\texpect(tx.supports(activeCapability)).toBe(true);\n\t\t\t\t}\n\t\t\t\tfor (const notActiveCapability of txType.notActiveCapabilities) {\n\t\t\t\t\texpect(tx.supports(notActiveCapability)).toBe(false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tit('raw()', () => {\n\t\tfor (const txType of txTypes) {\n\t\t\tfor (const tx of txType.txs) {\n\t\t\t\texpect(txType.class.fromValuesArray(tx.raw() as any, { common })).toBeTruthy();\n\t\t\t}\n\t\t}\n\t});\n\n\tit('verifySignature()', () => {\n\t\tfor (const txType of txTypes) {\n\t\t\tfor (const tx of txType.txs) {\n\t\t\t\texpect(tx.verifySignature()).toBe(true);\n\t\t\t}\n\t\t}\n\t});\n\n\tit('verifySignature() -> invalid', () => {\n\t\tfor (const txType of txTypes) {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-call\n\t\t\tfor (const txFixture of txType.fixtures.slice(0, 4)) {\n\t\t\t\t// set `s` to a single zero\n\t\t\t\ttxFixture.data.s = '0x0';\n\t\t\t\t// @ts-expect-error set data\n\t\t\t\tconst tx = txType.class.fromTxData(txFixture.data, { common });\n\t\t\t\texpect(tx.verifySignature()).toBe(false);\n\t\t\t\texpect(tx.validate(true)).toContain('Invalid Signature');\n\t\t\t\texpect(tx.validate()).toBe(false);\n\t\t\t}\n\t\t}\n\t});\n\n\tit('sign()', () => {\n\t\tfor (const txType of txTypes) {\n\t\t\tfor (const [i, tx] of txType.txs.entries()) {\n\t\t\t\tconst { privateKey } = txType.fixtures[i];\n\t\t\t\tif (privateKey !== undefined) {\n\t\t\t\t\t// eslint-disable-next-line jest/no-conditional-expect\n\t\t\t\t\texpect(tx.sign(hexToBytes(privateKey))).toBeTruthy();\n\t\t\t\t}\n\n\t\t\t\texpect(() => tx.sign(new Uint8Array(bytesToUint8Array('invalid')))).toThrow();\n\t\t\t}\n\t\t}\n\t});\n\n\tit('isSigned() -> returns correct values', () => {\n\t\tfor (const txType of txTypes) {\n\t\t\tconst txs = [\n\t\t\t\t...txType.txs,\n\t\t\t\t// add unsigned variants\n\t\t\t\t...txType.txs.map(tx =>\n\t\t\t\t\ttxType.class.fromTxData({\n\t\t\t\t\t\t...tx,\n\t\t\t\t\t\tv: undefined,\n\t\t\t\t\t\tr: undefined,\n\t\t\t\t\t\ts: undefined,\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t];\n\t\t\tfor (const tx of txs) {\n\t\t\t\texpect(tx.isSigned()).toEqual(\n\t\t\t\t\ttx.v !== undefined && tx.r !== undefined && tx.s !== undefined,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t});\n\n\tit('getSenderAddress()', () => {\n\t\tfor (const txType of txTypes) {\n\t\t\tfor (const [i, tx] of txType.txs.entries()) {\n\t\t\t\tconst { privateKey, sendersAddress } = txType.fixtures[i];\n\t\t\t\tif (privateKey === undefined) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst signedTx = tx.sign(hexToBytes(privateKey));\n\t\t\t\texpect(signedTx.getSenderAddress().toString()).toBe(`0x${sendersAddress}`);\n\t\t\t}\n\t\t}\n\t});\n\n\tit('getSenderPublicKey()', () => {\n\t\tfor (const txType of txTypes) {\n\t\t\tfor (const [i, tx] of txType.txs.entries()) {\n\t\t\t\tconst { privateKey } = txType.fixtures[i];\n\t\t\t\tif (privateKey === undefined) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst signedTx = tx.sign(hexToBytes(privateKey));\n\t\t\t\tconst txPubKey = signedTx.getSenderPublicKey();\n\t\t\t\tconst pubKeyFromPriv = privateToPublic(hexToBytes(privateKey));\n\t\t\t\texpect(uint8ArrayEquals(txPubKey, pubKeyFromPriv)).toBe(true);\n\t\t\t}\n\t\t}\n\t});\n\n\tit('getSenderPublicKey() -> should throw if s-value is greater than secp256k1n/2', () => {\n\t\t// EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n\t\t// Reasoning: https://ethereum.stackexchange.com/a/55728\n\t\tfor (const txType of txTypes) {\n\t\t\tfor (const [i, tx] of txType.txs.entries()) {\n\t\t\t\tconst { privateKey } = txType.fixtures[i];\n\t\t\t\tif (privateKey === undefined) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tlet signedTx = tx.sign(hexToBytes(privateKey));\n\t\t\t\tsignedTx = JSON.parse(JSON.stringify(signedTx)); // deep clone\n\t\t\t\t(signedTx as any).s = SECP256K1_ORDER + BigInt(1);\n\t\t\t\texpect(() => {\n\t\t\t\t\tsignedTx.getSenderPublicKey();\n\t\t\t\t}).toThrow();\n\t\t\t}\n\t\t}\n\t});\n\n\tit('verifySignature()->valid', () => {\n\t\tfor (const txType of txTypes) {\n\t\t\tfor (const [i, tx] of txType.txs.entries()) {\n\t\t\t\tconst { privateKey } = txType.fixtures[i];\n\t\t\t\tif (privateKey === undefined) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst signedTx = tx.sign(hexToBytes(privateKey));\n\t\t\t\texpect(signedTx.verifySignature()).toBeTruthy();\n\t\t\t}\n\t\t}\n\t});\n\n\tit('initialization with defaults', () => {\n\t\tconst uInt8ArrayZero = toUint8Array('0x');\n\t\tconst tx = Transaction.fromTxData({\n\t\t\tnonce: '',\n\t\t\tgasLimit: '',\n\t\t\tgasPrice: '',\n\t\t\tto: '',\n\t\t\tvalue: '',\n\t\t\tdata: '',\n\t\t\tv: '',\n\t\t\tr: '',\n\t\t\ts: '',\n\t\t});\n\t\texpect(tx.v).toBeUndefined();\n\t\texpect(tx.r).toBeUndefined();\n\t\texpect(tx.s).toBeUndefined();\n\t\texpect(tx.to).toBeUndefined();\n\t\texpect(tx.value).toBe(uint8ArrayToBigInt(uInt8ArrayZero));\n\t\texpect(tx.data).toEqual(uInt8ArrayZero);\n\t\texpect(tx.gasPrice).toBe(uint8ArrayToBigInt(uInt8ArrayZero));\n\t\texpect(tx.gasLimit).toBe(uint8ArrayToBigInt(uInt8ArrayZero));\n\t\texpect(tx.nonce).toBe(uint8ArrayToBigInt(uInt8ArrayZero));\n\t});\n\n\tit('_validateCannotExceedMaxInteger()', () => {\n\t\tconst tx = FeeMarketEIP1559Transaction.fromTxData(eip1559Txs[0]);\n\t\texpect(() => {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-call\n\t\t\t(tx as any)._validateCannotExceedMaxInteger({ a: MAX_INTEGER }, 256, true);\n\t\t}).toThrow('equal or exceed MAX_INTEGER');\n\n\t\texpect(() => {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-call\n\t\t\t(tx as any)._validateCannotExceedMaxInteger({ a: MAX_INTEGER + BigInt(1) }, 256, false);\n\t\t}).toThrow('exceed MAX_INTEGER');\n\n\t\texpect(() => {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-call\n\t\t\t(tx as any)._validateCannotExceedMaxInteger({ a: BigInt(0) }, 100, false);\n\t\t}).toThrow('unimplemented bits value');\n\n\t\texpect(() => {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-call\n\t\t\t(tx as any)._validateCannotExceedMaxInteger({ a: MAX_UINT64 + BigInt(1) }, 64, false);\n\t\t}).toThrow('2^64');\n\n\t\texpect(() => {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-call\n\t\t\t(tx as any)._validateCannotExceedMaxInteger({ a: MAX_UINT64 }, 64, true);\n\t\t}).toThrow('2^64');\n\t});\n});\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/test/unit/tx/eip1559.test.ts",[],["727","728"],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/test/unit/tx/eip3860.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/test/unit/tx/inputValue.test.ts",["729"],["730","731","732","733","734","735","736","737","738","739","740","741","742","743","744","745","746","747","748","749","750","751","752","753","754","755"],"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { Bytes } from 'web3-types';\nimport { hexToBytes } from 'web3-utils';\nimport { Chain, Common, Hardfork, toUint8Array } from '../../../src/common';\nimport { Address } from '../../../src/tx/address';\n\nimport {\n\tAccessListEIP2930Transaction,\n\tFeeMarketEIP1559Transaction,\n\tTransaction,\n\tTransactionFactory,\n} from '../../../src';\n\nimport type {\n\tAccessListEIP2930ValuesArray,\n\tFeeMarketEIP1559ValuesArray,\n\tTxValuesArray,\n} from '../../../src';\nimport type { BigIntLike, PrefixedHexString } from '../../../src/common/types';\n\ntype AddressLike = Address | Uint8Array | PrefixedHexString;\n// @returns: Array with subtypes of the AddressLike type for a given address\nfunction generateAddressLikeValues(address: string): AddressLike[] {\n\treturn [address, toUint8Array(address), new Address(toUint8Array(address))];\n}\n\n// @returns: Array with subtypes of the BigIntLike type for a given number\nfunction generateBigIntLikeValues(value: number): BigIntLike[] {\n\treturn [value, BigInt(value), `0x${value.toString(16)}`, toUint8Array(value)];\n}\n\n// @returns: Array with subtypes of the BufferLike type for a given string\nfunction generateBufferLikeValues(value: string): Bytes[] {\n\treturn [value, toUint8Array(value)];\n}\n\ninterface GenerateCombinationsArgs {\n\toptions: { [x: string]: any };\n\toptionIndex?: number;\n\tresults?: { [x: string]: any }[];\n\tcurrent?: { [x: string]: any };\n}\n\nfunction generateCombinations({\n\toptions,\n\toptionIndex = 0,\n\tresults = [],\n\tcurrent = {},\n}: GenerateCombinationsArgs) {\n\tconst allKeys = Object.keys(options);\n\tconst optionKey = allKeys[optionIndex];\n\tconst values = options[optionKey];\n\t// eslint-disable-next-line @typescript-eslint/prefer-for-of\n\tfor (let i = 0; i < values.length; i += 1) {\n\t\t// eslint-disable-next-line no-param-reassign\n\t\tcurrent[optionKey] = values[i];\n\n\t\tif (optionIndex + 1 < allKeys.length) {\n\t\t\tgenerateCombinations({ options, optionIndex: optionIndex + 1, results, current });\n\t\t} else {\n\t\t\t// Clone the object\n\t\t\tconst res = { ...current };\n\t\t\tresults.push(res);\n\t\t}\n\t}\n\n\treturn results;\n}\n\n// Deterministic pseudorandom number generator\nfunction mulberry32(seed: number) {\n\t// eslint-disable-next-line no-param-reassign, no-multi-assign\n\tlet t = (seed += 0x6d2b79f5);\n\t// eslint-disable-next-line no-bitwise\n\tt = Math.imul(t ^ (t >>> 15), t | 1);\n\t// eslint-disable-next-line no-bitwise\n\tt ^= t + Math.imul(t ^ (t >>> 7), t | 61);\n\t// eslint-disable-next-line no-bitwise\n\treturn ((t ^ (t >>> 14)) >>> 0) / 4294967296;\n}\n\nfunction getRandomSubarray<TArrayItem>(array: TArrayItem[], size: number) {\n\tconst shuffled = array.slice(0);\n\tlet seed = 1559;\n\tlet index: number;\n\tlet { length } = array;\n\tlet temp: TArrayItem;\n\twhile (length > 0) {\n\t\tindex = Math.floor((length + 1) * mulberry32(seed));\n\t\ttemp = shuffled[index];\n\t\tshuffled[index] = shuffled[length];\n\t\tshuffled[length] = temp;\n\t\tseed += 1;\n\t\tlength -= 1;\n\t}\n\treturn shuffled.slice(0, size);\n}\n\nconst baseTxValues = {\n\tdata: generateBufferLikeValues('0x65'),\n\tgasLimit: generateBigIntLikeValues(100000),\n\tnonce: generateBigIntLikeValues(0),\n\tto: generateAddressLikeValues('0x0000000000000000000000000000000000000000'),\n\tr: generateBigIntLikeValues(100),\n\ts: generateBigIntLikeValues(100),\n\tvalue: generateBigIntLikeValues(10),\n};\n\nconst legacyTxValues = {\n\tgasPrice: generateBigIntLikeValues(100),\n};\n\nconst accessListEip2930TxValues = {\n\tchainId: generateBigIntLikeValues(4),\n};\n\nconst eip1559TxValues = {\n\tmaxFeePerGas: generateBigIntLikeValues(100),\n\tmaxPriorityFeePerGas: generateBigIntLikeValues(50),\n};\n\ndescribe('[Transaction Input Values]', () => {\n\tit('Legacy Transaction Values', () => {\n\t\tconst common = new Common({ chain: Chain.Mainnet, hardfork: Hardfork.Homestead });\n\t\tconst options = { ...baseTxValues, ...legacyTxValues, type: '0' };\n\t\tconst legacyTxData = generateCombinations({\n\t\t\toptions,\n\t\t});\n\t\tconst randomSample = getRandomSubarray(legacyTxData, 100);\n\t\tfor (const txData of randomSample) {\n\t\t\tconst tx = Transaction.fromTxData(txData, { common });\n\t\t\texpect(() => tx.hash()).toThrow();\n\t\t}\n\t});\n\n\tit('EIP-1559 Transaction Values', () => {\n\t\tconst common = new Common({ chain: Chain.Mainnet, hardfork: Hardfork.London });\n\t\tconst options = {\n\t\t\t...baseTxValues,\n\t\t\t...accessListEip2930TxValues,\n\t\t\t...eip1559TxValues,\n\t\t\ttype: '2',\n\t\t};\n\t\tconst eip1559TxData = generateCombinations({\n\t\t\toptions,\n\t\t});\n\t\tconst randomSample = getRandomSubarray(eip1559TxData, 100);\n\n\t\tfor (const txData of randomSample) {\n\t\t\tconst tx = Transaction.fromTxData(txData, { common });\n\t\t\texpect(() => tx.hash()).toThrow();\n\t\t}\n\t});\n});\n\ntest('[Invalid Array Input values]', () => {\n\tconst txTypes = [0x0, 0x1, 0x2];\n\tfor (const signed of [false, true]) {\n\t\tfor (const txType of txTypes) {\n\t\t\tlet tx = TransactionFactory.fromTxData({ type: txType });\n\t\t\tif (signed) {\n\t\t\t\ttx = tx.sign(hexToBytes('42'.repeat(32)));\n\t\t\t}\n\t\t\tconst rawValues = tx.raw();\n\t\t\tfor (let x = 0; x < rawValues.length; x += 1) {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n\t\t\t\trawValues[x] = <any>[1, 2, 3];\n\t\t\t\t// eslint-disable-next-line default-case\n\t\t\t\tswitch (txType) {\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\t// eslint-disable-next-line jest/no-conditional-expect\n\t\t\t\t\t\texpect(() =>\n\t\t\t\t\t\t\tTransaction.fromValuesArray(rawValues as TxValuesArray),\n\t\t\t\t\t\t).toThrow();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\t// eslint-disable-next-line jest/no-conditional-expect\n\t\t\t\t\t\texpect(() =>\n\t\t\t\t\t\t\tAccessListEIP2930Transaction.fromValuesArray(\n\t\t\t\t\t\t\t\trawValues as AccessListEIP2930ValuesArray,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t).toThrow();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\t// eslint-disable-next-line jest/no-conditional-expect\n\t\t\t\t\t\texpect(() =>\n\t\t\t\t\t\t\tFeeMarketEIP1559Transaction.fromValuesArray(\n\t\t\t\t\t\t\t\trawValues as FeeMarketEIP1559ValuesArray,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t).toThrow();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n});\n\ntest('[Invalid Access Lists]', () => {\n\tconst txTypes = [0x1, 0x2];\n\tconst invalidAccessLists = [\n\t\t[[]], // does not have an address and does not have slots\n\t\t[[[], []]], // the address is an array\n\t\t[['0xde0b295669a9fd93d5f28d9ec85e40f4cb697bae']], // there is no storage slot array\n\t\t[\n\t\t\t[\n\t\t\t\t'0xde0b295669a9fd93d5f28d9ec85e40f4cb697bae',\n\t\t\t\t['0x0000000000000000000000000000000000000000000000000000000000000003', []],\n\t\t\t],\n\t\t], // one of the slots is an array\n\t\t[\n\t\t\t[\n\t\t\t\t'0xde0b295669a9fd93d5f28d9ec85e40f4cb697bae',\n\t\t\t\t['0x0000000000000000000000000000000000000000000000000000000000000003'],\n\t\t\t\t'0xab',\n\t\t\t],\n\t\t], // extra field\n\t\t[\n\t\t\t'0xde0b295669a9fd93d5f28d9ec85e40f4cb697bae',\n\t\t\t['0x0000000000000000000000000000000000000000000000000000000000000003'],\n\t\t], // account/slot needs to be encoded in a deeper array layer\n\t];\n\tfor (const signed of [false, true]) {\n\t\tfor (const txType of txTypes) {\n\t\t\tfor (const invalidAccessListItem of invalidAccessLists) {\n\t\t\t\tlet tx: any;\n\t\t\t\ttry {\n\t\t\t\t\ttx = TransactionFactory.fromTxData({\n\t\t\t\t\t\ttype: txType,\n\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n\t\t\t\t\t\taccessList: <any>invalidAccessListItem,\n\t\t\t\t\t});\n\t\t\t\t\tif (signed) {\n\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-call\n\t\t\t\t\t\ttx = tx.sign(hexToBytes('42'.repeat(32)));\n\t\t\t\t\t}\n\t\t\t\t} catch (e: any) {\n\t\t\t\t\ttx = TransactionFactory.fromTxData({ type: txType });\n\t\t\t\t\tif (signed) {\n\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-call\n\t\t\t\t\t\ttx = tx.sign(hexToBytes('42'.repeat(32)));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-call\n\t\t\t\tconst rawValues = tx!.raw();\n\n\t\t\t\tif (txType === 1 && rawValues[7].length === 0) {\n\t\t\t\t\trawValues[7] = invalidAccessListItem;\n\t\t\t\t} else if (txType === 2 && rawValues[8].length === 0) {\n\t\t\t\t\trawValues[8] = invalidAccessListItem;\n\t\t\t\t}\n\n\t\t\t\t// eslint-disable-next-line default-case\n\t\t\t\tswitch (txType) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\t// eslint-disable-next-line jest/no-conditional-expect\n\t\t\t\t\t\texpect(() =>\n\t\t\t\t\t\t\tAccessListEIP2930Transaction.fromValuesArray(\n\t\t\t\t\t\t\t\trawValues as AccessListEIP2930ValuesArray,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t).toThrow();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\t// eslint-disable-next-line jest/no-conditional-expect\n\t\t\t\t\t\texpect(() =>\n\t\t\t\t\t\t\tFeeMarketEIP1559Transaction.fromValuesArray(\n\t\t\t\t\t\t\t\trawValues as FeeMarketEIP1559ValuesArray,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t).toThrow();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n});\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/test/unit/tx/legacy.test.ts",["756"],["757","758","759","760","761"],"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { RLP } from '@ethereumjs/rlp';\nimport { bytesToHex, hexToBytes, uint8ArrayEquals } from 'web3-utils';\nimport {\n\tChain,\n\tCommon,\n\tHardfork,\n\tintToUint8Array,\n\ttoUint8Array,\n\tuint8ArrayToBigInt,\n\tunpadUint8Array,\n} from '../../../src/common';\n\nimport { Transaction } from '../../../src';\nimport type { TxData } from '../../../src';\nimport txFixturesEip155 from '../../fixtures/json/ttTransactionTestEip155VitaliksTests.json';\nimport txFixtures from '../../fixtures/json/txs.json';\n\ndescribe('[Transaction]', () => {\n\tconst transactions: Transaction[] = [];\n\n\tit('cannot input decimal or negative values', () => {\n\t\tconst values = ['gasPrice', 'gasLimit', 'nonce', 'value', 'v', 'r', 's'];\n\t\tconst cases = [\n\t\t\t10.1,\n\t\t\t'10.1',\n\t\t\t'0xaa.1',\n\t\t\t-10.1,\n\t\t\t-1,\n\t\t\tBigInt(-10),\n\t\t\t'-100',\n\t\t\t'-10.1',\n\t\t\t'-0xaa',\n\t\t\tInfinity,\n\t\t\t-Infinity,\n\t\t\tNaN,\n\t\t\t{},\n\t\t\ttrue,\n\t\t\tfalse,\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-empty-function\n\t\t\t() => {},\n\t\t\tNumber.MAX_SAFE_INTEGER + 1,\n\t\t];\n\t\tfor (const value of values) {\n\t\t\tconst txData: any = {};\n\t\t\tfor (const testCase of cases) {\n\t\t\t\ttxData[value] = testCase;\n\t\t\t\texpect(() => {\n\t\t\t\t\tTransaction.fromTxData(txData);\n\t\t\t\t}).toThrow();\n\t\t\t}\n\t\t}\n\t});\n\n\tit('Initialization', () => {\n\t\tconst nonEIP2930Common = new Common({ chain: Chain.Mainnet, hardfork: Hardfork.Istanbul });\n\t\texpect(Transaction.fromTxData({}, { common: nonEIP2930Common })).toBeTruthy();\n\n\t\tconst txData = txFixtures[3].raw.map(toUint8Array);\n\t\ttxData[6] = intToUint8Array(45); // v with 0-parity and chain ID 5\n\t\tlet tx = Transaction.fromValuesArray(txData);\n\t\texpect(tx.common.chainId() === BigInt(5)).toBe(true);\n\n\t\ttxData[6] = intToUint8Array(46); // v with 1-parity and chain ID 5\n\t\ttx = Transaction.fromValuesArray(txData);\n\t\texpect(tx.common.chainId() === BigInt(5)).toBe(true);\n\n\t\ttxData[6] = intToUint8Array(2033); // v with 0-parity and chain ID 999\n\t\ttx = Transaction.fromValuesArray(txData);\n\t\texpect(tx.common.chainId()).toEqual(BigInt(999));\n\n\t\ttxData[6] = intToUint8Array(2034); // v with 1-parity and chain ID 999\n\t\ttx = Transaction.fromValuesArray(txData);\n\t\texpect(tx.common.chainId()).toEqual(BigInt(999));\n\t});\n\n\tit('Initialization -> decode with fromValuesArray()', () => {\n\t\tfor (const tx of txFixtures.slice(0, 4)) {\n\t\t\tconst txData = tx.raw.map(toUint8Array);\n\t\t\tconst pt = Transaction.fromValuesArray(txData);\n\n\t\t\texpect(bytesToHex(unpadUint8Array(toUint8Array(pt.nonce)))).toEqual(tx.raw[0]);\n\t\t\texpect(bytesToHex(toUint8Array(pt.gasPrice))).toEqual(tx.raw[1]);\n\t\t\texpect(bytesToHex(toUint8Array(pt.gasLimit))).toEqual(tx.raw[2]);\n\t\t\texpect(pt.to?.toString()).toEqual(tx.raw[3]);\n\t\t\texpect(bytesToHex(unpadUint8Array(toUint8Array(pt.value)))).toEqual(tx.raw[4]);\n\t\t\texpect(bytesToHex(pt.data)).toEqual(tx.raw[5]);\n\t\t\texpect(bytesToHex(toUint8Array(pt.v))).toEqual(tx.raw[6]);\n\t\t\texpect(bytesToHex(toUint8Array(pt.r))).toEqual(tx.raw[7]);\n\t\t\texpect(bytesToHex(toUint8Array(pt.s))).toEqual(tx.raw[8]);\n\n\t\t\ttransactions.push(pt);\n\t\t}\n\t});\n\n\tit('Initialization -> should accept lesser r values', () => {\n\t\tconst tx = Transaction.fromTxData({ r: uint8ArrayToBigInt(toUint8Array('0x0005')) });\n\t\texpect(tx.r!.toString(16)).toBe('5');\n\t});\n\n\tit('Initialization -> throws when creating a transaction with incompatible chainid and v value', () => {\n\t\tlet common = new Common({ chain: Chain.Goerli, hardfork: Hardfork.Petersburg });\n\t\tlet tx = Transaction.fromTxData({}, { common });\n\t\texpect(tx.common.chainId()).toEqual(BigInt(5));\n\t\tconst privKey = hexToBytes(txFixtures[0].privateKey);\n\t\ttx = tx.sign(privKey);\n\t\tconst serialized = tx.serialize();\n\t\tcommon = new Common({ chain: Chain.Mainnet, hardfork: Hardfork.Petersburg });\n\t\texpect(() => Transaction.fromSerializedTx(serialized, { common })).toThrow();\n\t});\n\n\tit('Initialization -> throws if v is set to an EIP155-encoded value incompatible with the chain id', () => {\n\t\texpect(() => {\n\t\t\tconst common = new Common({ chain: 42, hardfork: Hardfork.Petersburg });\n\t\t\tTransaction.fromTxData({ v: BigInt(1) }, { common });\n\t\t}).toThrow();\n\t});\n\n\tit('validate() -> should validate with string option', () => {\n\t\tfor (const tx of transactions) {\n\t\t\texpect(typeof tx.validate(true)[0]).toBe('string');\n\t\t}\n\t});\n\n\tit('getBaseFee() -> should return base fee', () => {\n\t\tconst tx = Transaction.fromTxData({});\n\t\texpect(tx.getBaseFee()).toEqual(BigInt(53000));\n\t});\n\n\tit('getDataFee() -> should return data fee', () => {\n\t\tlet tx = Transaction.fromTxData({});\n\t\texpect(tx.getDataFee()).toEqual(BigInt(0));\n\n\t\ttx = Transaction.fromValuesArray(txFixtures[3].raw.map(toUint8Array));\n\t\texpect(tx.getDataFee()).toEqual(BigInt(1716));\n\n\t\ttx = Transaction.fromValuesArray(txFixtures[3].raw.map(toUint8Array), { freeze: false });\n\t\texpect(tx.getDataFee()).toEqual(BigInt(1716));\n\t});\n\n\tit('getDataFee() -> should return correct data fee for istanbul', () => {\n\t\tconst common = new Common({ chain: Chain.Mainnet, hardfork: Hardfork.Istanbul });\n\t\tlet tx = Transaction.fromTxData({}, { common });\n\t\texpect(tx.getDataFee()).toEqual(BigInt(0));\n\n\t\ttx = Transaction.fromValuesArray(txFixtures[3].raw.map(toUint8Array), {\n\t\t\tcommon,\n\t\t});\n\t\texpect(tx.getDataFee()).toEqual(BigInt(1716));\n\t});\n\n\tit('getDataFee() -> should invalidate cached value on hardfork change', () => {\n\t\tconst common = new Common({ chain: Chain.Mainnet, hardfork: Hardfork.Byzantium });\n\t\tconst tx = Transaction.fromValuesArray(txFixtures[0].raw.map(toUint8Array), {\n\t\t\tcommon,\n\t\t});\n\t\texpect(tx.getDataFee()).toEqual(BigInt(656));\n\t\ttx.common.setHardfork(Hardfork.Istanbul);\n\t\texpect(tx.getDataFee()).toEqual(BigInt(240));\n\t});\n\n\tit('getUpfrontCost() -> should return upfront cost', () => {\n\t\tconst tx = Transaction.fromTxData({\n\t\t\tgasPrice: 1000,\n\t\t\tgasLimit: 10000000,\n\t\t\tvalue: 42,\n\t\t});\n\t\texpect(tx.getUpfrontCost()).toEqual(BigInt(10000000042));\n\t});\n\n\tit('serialize()', () => {\n\t\tfor (const [i, tx] of transactions.entries()) {\n\t\t\tconst s1 = tx.serialize();\n\t\t\tconst s2 = RLP.encode(txFixtures[i].raw);\n\t\t\texpect(uint8ArrayEquals(s1, s2)).toBe(true);\n\t\t}\n\t});\n\n\tit('serialize() -> should round trip decode a tx', () => {\n\t\tconst tx = Transaction.fromTxData({ value: 5000 });\n\t\tconst s1 = tx.serialize();\n\n\t\tconst s1Rlp = toUint8Array(bytesToHex(s1));\n\t\tconst tx2 = Transaction.fromSerializedTx(s1Rlp);\n\t\tconst s2 = tx2.serialize();\n\n\t\texpect(uint8ArrayEquals(s1, s2)).toBe(true);\n\t});\n\n\tit('hash() / getMessageToSign(true) / getMessageToSign(false)', () => {\n\t\tconst common = new Common({\n\t\t\tchain: Chain.Mainnet,\n\t\t\thardfork: Hardfork.TangerineWhistle,\n\t\t});\n\n\t\tlet tx = Transaction.fromValuesArray(txFixtures[3].raw.slice(0, 6).map(toUint8Array), {\n\t\t\tcommon,\n\t\t});\n\t\texpect(() => {\n\t\t\ttx.hash();\n\t\t}).toThrow();\n\t\ttx = Transaction.fromValuesArray(txFixtures[3].raw.map(toUint8Array), {\n\t\t\tcommon,\n\t\t});\n\t\texpect(tx.hash()).toEqual(\n\t\t\thexToBytes('0x375a8983c9fc56d7cfd118254a80a8d7403d590a6c9e105532b67aca1efb97aa'),\n\t\t);\n\t\texpect(tx.getMessageToSign()).toEqual(\n\t\t\thexToBytes('0x61e1ec33764304dddb55348e7883d4437426f44ab3ef65e6da1e025734c03ff0'),\n\t\t);\n\t\texpect(tx.getMessageToSign(false)).toHaveLength(6);\n\t\texpect(tx.hash()).toEqual(\n\t\t\thexToBytes('0x375a8983c9fc56d7cfd118254a80a8d7403d590a6c9e105532b67aca1efb97aa'),\n\t\t);\n\t});\n\n\tit('hash() -> with defined chainId', () => {\n\t\tconst tx = Transaction.fromValuesArray(txFixtures[4].raw.map(toUint8Array));\n\t\texpect(bytesToHex(tx.hash())).toBe(\n\t\t\t'0x0f09dc98ea85b7872f4409131a790b91e7540953992886fc268b7ba5c96820e4',\n\t\t);\n\t\texpect(bytesToHex(tx.getMessageToSign())).toBe(\n\t\t\t'0xf97c73fdca079da7652dbc61a46cd5aeef804008e057be3e712c43eac389aaf0',\n\t\t);\n\t});\n\n\tit(\"getMessageToSign(), getSenderPublicKey() (implicit call) -> verify EIP155 signature based on Vitalik's tests\", () => {\n\t\tfor (const tx of txFixturesEip155) {\n\t\t\tconst pt = Transaction.fromSerializedTx(toUint8Array(tx.rlp));\n\t\t\texpect(bytesToHex(pt.getMessageToSign())).toEqual(tx.hash);\n\t\t\texpect(bytesToHex(pt.serialize())).toEqual(tx.rlp);\n\t\t\texpect(pt.getSenderAddress().toString()).toBe(`0x${tx.sender}`);\n\t\t}\n\t});\n\n\tit('getMessageToSign(), sign(), getSenderPublicKey() (implicit call) -> verify EIP155 signature before and after signing', () => {\n\t\t// Inputs and expected results for this test are taken directly from the example in https://eips.ethereum.org/EIPS/eip-155\n\t\tconst txRaw = [\n\t\t\t'0x09',\n\t\t\t'0x4a817c800',\n\t\t\t'0x5208',\n\t\t\t'0x3535353535353535353535353535353535353535',\n\t\t\t'0x0de0b6b3a7640000',\n\t\t\t'0x',\n\t\t];\n\t\tconst privateKey = hexToBytes(\n\t\t\t'4646464646464646464646464646464646464646464646464646464646464646',\n\t\t);\n\t\tconst pt = Transaction.fromValuesArray(txRaw.map(toUint8Array));\n\n\t\t// Note that Vitalik's example has a very similar value denoted \"signing data\".\n\t\t// It's not the output of `serialize()`, but the pre-image of the hash returned by `tx.hash(false)`.\n\t\t// We don't have a getter for such a value in Transaction.\n\t\texpect(bytesToHex(pt.serialize())).toBe(\n\t\t\t'0xec098504a817c800825208943535353535353535353535353535353535353535880de0b6b3a764000080808080',\n\t\t);\n\t\tconst signedTx = pt.sign(privateKey);\n\t\texpect(bytesToHex(signedTx.getMessageToSign())).toBe(\n\t\t\t'0xdaf5a779ae972f972197303d7b574746c7ef83eadac0f2791ad23db92e4c8e53',\n\t\t);\n\t\texpect(bytesToHex(signedTx.serialize())).toBe(\n\t\t\t'0xf86c098504a817c800825208943535353535353535353535353535353535353535880de0b6b3a76400008025a028ef61340bd939bc2195fe537567866003e1a15d3c71ff63e1590620aa636276a067cbe9d8997f761aecb703304b3800ccf555c9f3dc64214b297fb1966a3b6d83',\n\t\t);\n\t});\n\n\tit('sign(), getSenderPublicKey() (implicit call) -> EIP155 hashing when singing', () => {\n\t\tconst common = new Common({ chain: 1, hardfork: Hardfork.Petersburg });\n\t\tfor (const txData of txFixtures.slice(0, 3)) {\n\t\t\tconst tx = Transaction.fromValuesArray(txData.raw.slice(0, 6).map(toUint8Array), {\n\t\t\t\tcommon,\n\t\t\t});\n\n\t\t\tconst privKey = hexToBytes(txData.privateKey);\n\t\t\tconst txSigned = tx.sign(privKey);\n\n\t\t\texpect(txSigned.getSenderAddress().toString()).toBe(`0x${txData.sendersAddress}`);\n\t\t}\n\t});\n\n\tit('sign(), serialize(): serialize correctly after being signed with EIP155 Signature for tx created on ropsten', () => {\n\t\tconst txRaw = [\n\t\t\t'0x1',\n\t\t\t'0x02540be400',\n\t\t\t'0x5208',\n\t\t\t'0xd7250824390ec5c8b71d856b5de895e271170d9d',\n\t\t\t'0x0de0b6b3a7640000',\n\t\t\t'0x',\n\t\t];\n\t\tconst privateKey = hexToBytes(\n\t\t\t'DE3128752F183E8930D7F00A2AAA302DCB5E700B2CBA2D8CA5795660F07DEFD5',\n\t\t);\n\t\tconst common = new Common({ chain: 1 });\n\t\tconst tx = Transaction.fromValuesArray(txRaw.map(toUint8Array), { common });\n\t\tconst signedTx = tx.sign(privateKey);\n\t\texpect(bytesToHex(signedTx.serialize())).toBe(\n\t\t\t'0xf86c018502540be40082520894d7250824390ec5c8b71d856b5de895e271170d9d880de0b6b3a76400008026a05e5c85a426b11e1ba5d9b567e904818a33975962942f538d247cd7391f5fb27aa00c8ec23ca4a3cdc2515916e4adc89676ce124fd7d0ddbb3ddd37c441dd584c21',\n\t\t);\n\t});\n\n\tit('sign(), verifySignature(): should ignore any previous signature when decided if EIP155 should be used in a new one', () => {\n\t\tconst txData: TxData = {\n\t\t\tdata: '0x7cf5dab00000000000000000000000000000000000000000000000000000000000000005',\n\t\t\tgasLimit: '0x15f90',\n\t\t\tgasPrice: '0x1',\n\t\t\tnonce: '0x01',\n\t\t\tto: '0xd9024df085d09398ec76fbed18cac0e1149f50dc',\n\t\t\tvalue: '0x0',\n\t\t};\n\n\t\tconst privateKey = hexToBytes(\n\t\t\t'4646464646464646464646464646464646464646464646464646464646464646',\n\t\t);\n\n\t\tconst common = new Common({\n\t\t\tchain: Chain.Mainnet,\n\t\t\thardfork: Hardfork.TangerineWhistle,\n\t\t});\n\n\t\tconst fixtureTxSignedWithoutEIP155 = Transaction.fromTxData(txData, {\n\t\t\tcommon,\n\t\t}).sign(privateKey);\n\t\t// eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n\t\tlet signedWithEIP155 = Transaction.fromTxData(<any>txData).sign(privateKey);\n\n\t\texpect(signedWithEIP155.verifySignature()).toBe(true);\n\t\texpect(signedWithEIP155.v?.toString(16)).not.toBe('1c');\n\t\texpect(signedWithEIP155.v?.toString(16)).not.toBe('1b');\n\t\t// eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n\t\tsignedWithEIP155 = Transaction.fromTxData(<any>fixtureTxSignedWithoutEIP155.toJSON()).sign(\n\t\t\tprivateKey,\n\t\t);\n\n\t\texpect(signedWithEIP155.verifySignature()).toBe(true);\n\t\texpect(signedWithEIP155.v?.toString(16)).not.toBe('1c');\n\t\texpect(signedWithEIP155.v?.toString(16)).not.toBe('1b');\n\t\t// eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n\t\tlet signedWithoutEIP155 = Transaction.fromTxData(<any>txData, {\n\t\t\tcommon,\n\t\t}).sign(privateKey);\n\n\t\texpect(signedWithoutEIP155.verifySignature()).toBe(true);\n\t\texpect(\n\t\t\tsignedWithoutEIP155.v?.toString(16) === '1c' ||\n\t\t\t\tsignedWithoutEIP155.v?.toString(16) === '1b',\n\t\t).toBe(true);\n\t\t// eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n\t\tsignedWithoutEIP155 = Transaction.fromTxData(<any>txData, {\n\t\t\tcommon,\n\t\t}).sign(privateKey);\n\n\t\texpect(signedWithoutEIP155.verifySignature()).toBe(true);\n\t\texpect(\n\t\t\tsignedWithoutEIP155.v?.toString(16) === '1c' ||\n\t\t\t\tsignedWithoutEIP155.v?.toString(16) === '1b',\n\t\t).toBe(true);\n\t});\n\n\tit('constructor: throw on legacy transactions which have v !== 27 and v !== 28 and v < 37', () => {\n\t\tfunction getTxData(v: number) {\n\t\t\treturn {\n\t\t\t\tv,\n\t\t\t};\n\t\t}\n\t\tfor (let n = 0; n < 27; n += 1) {\n\t\t\texpect(() => Transaction.fromTxData(getTxData(n))).toThrow();\n\t\t}\n\t\texpect(() => Transaction.fromTxData(getTxData(29))).toThrow();\n\t\texpect(() => Transaction.fromTxData(getTxData(36))).toThrow();\n\n\t\texpect(() => Transaction.fromTxData(getTxData(27))).not.toThrow();\n\t\texpect(() => Transaction.fromTxData(getTxData(28))).not.toThrow();\n\t\texpect(() => Transaction.fromTxData(getTxData(37))).not.toThrow();\n\t});\n\n\tit('sign(), verifySignature(): sign tx with chainId specified in params', () => {\n\t\tconst common = new Common({ chain: Chain.Goerli, hardfork: Hardfork.Petersburg });\n\t\tlet tx = Transaction.fromTxData({}, { common });\n\t\texpect(tx.common.chainId()).toEqual(BigInt(5));\n\n\t\tconst privKey = hexToBytes(txFixtures[0].privateKey);\n\t\ttx = tx.sign(privKey);\n\n\t\tconst serialized = tx.serialize();\n\n\t\tconst reTx = Transaction.fromSerializedTx(serialized, { common });\n\t\texpect(reTx.verifySignature()).toBe(true);\n\t\texpect(reTx.common.chainId()).toEqual(BigInt(5));\n\t});\n\n\tit('freeze property propagates from unsigned tx to signed tx', () => {\n\t\tconst tx = Transaction.fromTxData({}, { freeze: false });\n\t\texpect(Object.isFrozen(tx)).toBe(false);\n\t\tconst privKey = hexToBytes(txFixtures[0].privateKey);\n\t\tconst signedTxn = tx.sign(privKey);\n\t\texpect(Object.isFrozen(signedTxn)).toBe(false);\n\t});\n\n\tit('common propagates from the common of tx, not the common in TxOptions', () => {\n\t\tconst common = new Common({ chain: Chain.Goerli, hardfork: Hardfork.London });\n\t\tconst pkey = hexToBytes(txFixtures[0].privateKey);\n\t\tconst txn = Transaction.fromTxData({}, { common, freeze: false });\n\t\tconst newCommon = new Common({\n\t\t\tchain: Chain.Goerli,\n\t\t\thardfork: Hardfork.London,\n\t\t\teips: [2537],\n\t\t});\n\t\texpect(newCommon).not.toEqual(common);\n\t\tObject.defineProperty(txn, 'common', {\n\t\t\tget() {\n\t\t\t\treturn newCommon;\n\t\t\t},\n\t\t});\n\t\tconst signedTxn = txn.sign(pkey);\n\t\texpect(signedTxn.common.eips()).toContain(2537);\n\t});\n\n\tit('isSigned() -> returns correct values', () => {\n\t\tlet tx = Transaction.fromTxData({});\n\t\texpect(tx.isSigned()).toBe(false);\n\n\t\tconst txData: TxData = {\n\t\t\tdata: '0x7cf5dab00000000000000000000000000000000000000000000000000000000000000005',\n\t\t\tgasLimit: '0x15f90',\n\t\t\tgasPrice: '0x1',\n\t\t\tnonce: '0x01',\n\t\t\tto: '0xd9024df085d09398ec76fbed18cac0e1149f50dc',\n\t\t\tvalue: '0x0',\n\t\t};\n\t\tconst privateKey = hexToBytes(\n\t\t\t'4646464646464646464646464646464646464646464646464646464646464646',\n\t\t);\n\t\ttx = Transaction.fromTxData(txData);\n\t\texpect(tx.isSigned()).toBe(false);\n\t\ttx = tx.sign(privateKey);\n\t\texpect(tx.isSigned()).toBe(true);\n\n\t\ttx = Transaction.fromTxData(txData);\n\t\texpect(tx.isSigned()).toBe(false);\n\t\tconst rawUnsigned = tx.serialize();\n\t\ttx = tx.sign(privateKey);\n\t\tconst rawSigned = tx.serialize();\n\t\texpect(tx.isSigned()).toBe(true);\n\n\t\ttx = Transaction.fromSerializedTx(rawUnsigned);\n\t\texpect(tx.isSigned()).toBe(false);\n\t\ttx = tx.sign(privateKey);\n\t\texpect(tx.isSigned()).toBe(true);\n\t\ttx = Transaction.fromSerializedTx(rawSigned);\n\t\texpect(tx.isSigned()).toBe(true);\n\n\t\tconst signedValues = RLP.decode(Uint8Array.from(rawSigned));\n\t\ttx = Transaction.fromValuesArray(signedValues as Uint8Array[]);\n\t\texpect(tx.isSigned()).toBe(true);\n\t\ttx = Transaction.fromValuesArray(signedValues.slice(0, 6) as Uint8Array[]);\n\t\texpect(tx.isSigned()).toBe(false);\n\t});\n});\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/test/unit/tx/registerNewTx.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/test/unit/tx/staticMethods.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/test/unit/tx/transactionFactory.test.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/test/unit/tx/typedTxsAndEIP2930.test.ts",["762","763","764"],["765","766"],"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { bytesToHex, hexToBytes, uint8ArrayEquals, uint8ArrayConcat } from 'web3-utils';\nimport {\n\tAccessListEIP2930Transaction,\n\tAccessListUint8ArrayItem,\n\tFeeMarketEIP1559Transaction,\n} from '../../../src';\nimport { Chain, Common, Hardfork, uint8ArrayToBigInt } from '../../../src/common';\nimport { Address } from '../../../src/tx/address';\nimport {\n\tMAX_INTEGER,\n\tMAX_UINT64,\n\tSECP256K1_ORDER_DIV_2,\n\tsecp256k1,\n} from '../../../src/tx/constants';\n\nimport type { AccessList } from '../../../src';\n\nconst privateToPublic = (privateKey: Uint8Array): Uint8Array => {\n\treturn secp256k1.getPublicKey(privateKey, false).slice(1);\n};\nconst pKey = hexToBytes('4646464646464646464646464646464646464646464646464646464646464646');\nconst address = Address.publicToAddress(privateToPublic(pKey));\n\nconst common = new Common({\n\tchain: Chain.Mainnet,\n\thardfork: Hardfork.London,\n});\n\nconst txTypes = [\n\t{\n\t\tclass: AccessListEIP2930Transaction,\n\t\tname: 'AccessListEIP2930Transaction',\n\t\ttype: 1,\n\t},\n\t{\n\t\tclass: FeeMarketEIP1559Transaction,\n\t\tname: 'FeeMarketEIP1559Transaction',\n\t\ttype: 2,\n\t},\n];\n\nconst validAddress = hexToBytes('01'.repeat(20));\nconst validSlot = hexToBytes('01'.repeat(32));\nconst chainId = BigInt(1);\n\ndescribe('[AccessListEIP2930Transaction / FeeMarketEIP1559Transaction] -> EIP-2930 Compatibility', () => {\n\tit('Initialization / Getter -> fromTxData()', () => {\n\t\tfor (const txType of txTypes) {\n\t\t\tlet tx = txType.class.fromTxData({}, { common });\n\t\t\texpect(tx).toBeTruthy();\n\n\t\t\ttx = txType.class.fromTxData({\n\t\t\t\tchainId: 5,\n\t\t\t});\n\t\t\texpect(tx.common.chainId() === BigInt(5)).toBeTruthy();\n\n\t\t\ttx = txType.class.fromTxData({\n\t\t\t\tchainId: 99999,\n\t\t\t});\n\t\t\texpect(tx.common.chainId() === BigInt(99999)).toBeTruthy();\n\n\t\t\tconst nonEIP2930Common = new Common({\n\t\t\t\tchain: Chain.Mainnet,\n\t\t\t\thardfork: Hardfork.Istanbul,\n\t\t\t});\n\t\t\texpect(() => {\n\t\t\t\ttxType.class.fromTxData({}, { common: nonEIP2930Common });\n\t\t\t}).toThrow();\n\n\t\t\texpect(() => {\n\t\t\t\ttxType.class.fromTxData(\n\t\t\t\t\t{\n\t\t\t\t\t\tchainId: chainId + BigInt(1),\n\t\t\t\t\t},\n\t\t\t\t\t{ common },\n\t\t\t\t);\n\t\t\t}).toThrow();\n\n\t\t\texpect(() => {\n\t\t\t\ttxType.class.fromTxData(\n\t\t\t\t\t{\n\t\t\t\t\t\tv: 2,\n\t\t\t\t\t},\n\t\t\t\t\t{ common },\n\t\t\t\t);\n\t\t\t}).toThrow();\n\t\t}\n\t});\n\n\tit('cannot input decimal values', () => {\n\t\tconst values = ['chainId', 'nonce', 'gasPrice', 'gasLimit', 'value', 'v', 'r', 's'];\n\t\tconst cases = [\n\t\t\t10.1,\n\t\t\t'10.1',\n\t\t\t'0xaa.1',\n\t\t\t-10.1,\n\t\t\t-1,\n\t\t\tBigInt(-10),\n\t\t\t'-100',\n\t\t\t'-10.1',\n\t\t\t'-0xaa',\n\t\t\tInfinity,\n\t\t\t-Infinity,\n\t\t\tNaN,\n\t\t\t{},\n\t\t\ttrue,\n\t\t\tfalse,\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-empty-function\n\t\t\t() => {},\n\t\t\tNumber.MAX_SAFE_INTEGER + 1,\n\t\t];\n\t\tfor (const value of values) {\n\t\t\tconst txData: any = {};\n\t\t\tfor (const testCase of cases) {\n\t\t\t\tif (\n\t\t\t\t\tvalue === 'chainId' &&\n\t\t\t\t\t((typeof testCase === 'number' && Number.isNaN(testCase)) || testCase === false)\n\t\t\t\t) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\ttxData[value] = testCase;\n\t\t\t\texpect(() => {\n\t\t\t\t\tAccessListEIP2930Transaction.fromTxData(txData);\n\t\t\t\t}).toThrow();\n\t\t\t}\n\t\t}\n\t});\n\n\tit('Initialization / Getter -> fromSerializedTx()', () => {\n\t\tfor (const txType of txTypes) {\n\t\t\texpect(() => {\n\t\t\t\ttxType.class.fromSerializedTx(new Uint8Array([99]), {});\n\t\t\t}).toThrow('wrong tx type');\n\n\t\t\texpect(() => {\n\t\t\t\t// Correct tx type + RLP-encoded 5\n\t\t\t\tconst serialized = uint8ArrayConcat(\n\t\t\t\t\tnew Uint8Array([txType.type]),\n\t\t\t\t\tnew Uint8Array([5]),\n\t\t\t\t);\n\t\t\t\ttxType.class.fromSerializedTx(serialized, {});\n\t\t\t}).toThrow('must be array');\n\n\t\t\texpect(() => {\n\t\t\t\tconst serialized = uint8ArrayConcat(\n\t\t\t\t\tnew Uint8Array([txType.type]),\n\t\t\t\t\thexToBytes('c0'),\n\t\t\t\t);\n\t\t\t\ttxType.class.fromSerializedTx(serialized, {});\n\t\t\t}).toThrow('values (for unsigned tx)');\n\t\t}\n\t});\n\n\tit('Access Lists -> success cases', () => {\n\t\tfor (const txType of txTypes) {\n\t\t\tconst access: AccessList = [\n\t\t\t\t{\n\t\t\t\t\taddress: bytesToHex(validAddress),\n\t\t\t\t\tstorageKeys: [bytesToHex(validSlot)],\n\t\t\t\t},\n\t\t\t];\n\t\t\tconst txn = txType.class.fromTxData(\n\t\t\t\t{\n\t\t\t\t\taccessList: access,\n\t\t\t\t\tchainId: 1,\n\t\t\t\t},\n\t\t\t\t{ common },\n\t\t\t);\n\n\t\t\t// Check if everything is converted\n\n\t\t\tconst Uint8Array = txn.accessList;\n\t\t\tconst JSON = txn.AccessListJSON;\n\n\t\t\texpect(uint8ArrayEquals(Uint8Array[0][0], validAddress)).toBeTruthy();\n\t\t\texpect(uint8ArrayEquals(Uint8Array[0][1][0], validSlot)).toBeTruthy();\n\n\t\t\texpect(JSON).toEqual(access);\n\n\t\t\t// also verify that we can always get the json access list, even if we don't provide one.\n\n\t\t\tconst txnRaw = txType.class.fromTxData(\n\t\t\t\t{\n\t\t\t\t\taccessList: Uint8Array,\n\t\t\t\t\tchainId: 1,\n\t\t\t\t},\n\t\t\t\t{ common },\n\t\t\t);\n\n\t\t\tconst JSONRaw = txnRaw.AccessListJSON;\n\n\t\t\texpect(JSONRaw).toEqual(access);\n\t\t}\n\t});\n\n\tit('Access Lists -> error cases', () => {\n\t\tfor (const txType of txTypes) {\n\t\t\tlet accessList: any[] = [\n\t\t\t\t[\n\t\t\t\t\thexToBytes('01'.repeat(21)), // Address of 21 bytes instead of 20\n\t\t\t\t\t[],\n\t\t\t\t],\n\t\t\t];\n\n\t\t\texpect(() => {\n\t\t\t\ttxType.class.fromTxData({ chainId, accessList }, { common });\n\t\t\t}).toThrow();\n\n\t\t\taccessList = [\n\t\t\t\t[\n\t\t\t\t\tvalidAddress,\n\t\t\t\t\t[\n\t\t\t\t\t\thexToBytes('01'.repeat(31)), // Slot of 31 bytes instead of 32\n\t\t\t\t\t],\n\t\t\t\t],\n\t\t\t];\n\n\t\t\texpect(() => {\n\t\t\t\ttxType.class.fromTxData({ chainId, accessList }, { common });\n\t\t\t}).toThrow();\n\n\t\t\taccessList = [[]]; // Address does not exist\n\n\t\t\texpect(() => {\n\t\t\t\ttxType.class.fromTxData({ chainId, accessList }, { common });\n\t\t\t}).toThrow();\n\n\t\t\taccessList = [[validAddress]]; // Slots does not exist\n\n\t\t\texpect(() => {\n\t\t\t\ttxType.class.fromTxData({ chainId, accessList }, { common });\n\t\t\t}).toThrow();\n\n\t\t\taccessList = [[validAddress, validSlot]]; // Slots is not an array\n\n\t\t\texpect(() => {\n\t\t\t\ttxType.class.fromTxData({ chainId, accessList }, { common });\n\t\t\t}).toThrow();\n\n\t\t\taccessList = [[validAddress, [], []]]; // 3 items where 2 are expected\n\n\t\t\texpect(() => {\n\t\t\t\ttxType.class.fromTxData({ chainId, accessList }, { common });\n\t\t\t}).toThrow();\n\t\t}\n\t});\n\n\tit('sign()', () => {\n\t\tfor (const txType of txTypes) {\n\t\t\tlet tx = txType.class.fromTxData(\n\t\t\t\t{\n\t\t\t\t\tdata: hexToBytes('010200'),\n\t\t\t\t\tto: validAddress,\n\t\t\t\t\taccessList: [[validAddress, [validSlot]]],\n\t\t\t\t\tchainId,\n\t\t\t\t},\n\t\t\t\t{ common },\n\t\t\t);\n\t\t\tlet signed = tx.sign(pKey);\n\t\t\tconst signedAddress = signed.getSenderAddress();\n\t\t\texpect(uint8ArrayEquals(signedAddress.buf, address)).toBeTruthy();\n\t\t\t// expect(signedAddress).toEqual(Address.publicToAddress(Buffer.from(address)));\n\t\t\tsigned.verifySignature(); // If this throws, test will not end.\n\n\t\t\ttx = txType.class.fromTxData({}, { common });\n\t\t\tsigned = tx.sign(pKey);\n\n\t\t\texpect(tx.accessList).toEqual([]);\n\t\t\texpect(signed.accessList).toEqual([]);\n\n\t\t\ttx = txType.class.fromTxData({}, { common });\n\n\t\t\texpect(() => {\n\t\t\t\ttx.hash();\n\t\t\t}).toThrow();\n\n\t\t\texpect(() => {\n\t\t\t\ttx.getSenderPublicKey();\n\t\t\t}).toThrow();\n\n\t\t\texpect(() => {\n\t\t\t\tconst high = SECP256K1_ORDER_DIV_2 + BigInt(1);\n\t\t\t\tconst _tx = txType.class.fromTxData({ s: high, r: 1, v: 1 }, { common });\n\t\t\t\tconst _signed = _tx.sign(pKey);\n\t\t\t\t_signed.getSenderPublicKey();\n\t\t\t}).toThrow();\n\t\t}\n\t});\n\n\tit('getDataFee()', () => {\n\t\tfor (const txType of txTypes) {\n\t\t\tlet tx = txType.class.fromTxData({}, { common });\n\t\t\texpect(tx.getDataFee()).toEqual(BigInt(0));\n\n\t\t\ttx = txType.class.fromTxData({}, { common, freeze: false });\n\t\t\texpect(tx.getDataFee()).toEqual(BigInt(0));\n\n\t\t\tconst mutableCommon = new Common({ chain: Chain.Mainnet, hardfork: Hardfork.London });\n\t\t\ttx = txType.class.fromTxData({}, { common: mutableCommon });\n\t\t\ttx.common.setHardfork(Hardfork.Istanbul);\n\t\t\texpect(tx.getDataFee()).toEqual(BigInt(0));\n\t\t}\n\t});\n});\n\ndescribe('[AccessListEIP2930Transaction] -> Class Specific Tests', () => {\n\tit('Initialization', () => {\n\t\tconst tx = AccessListEIP2930Transaction.fromTxData({}, { common });\n\t\texpect(AccessListEIP2930Transaction.fromTxData(tx, { common })).toBeTruthy();\n\n\t\tconst _validAddress = hexToBytes('01'.repeat(20));\n\t\tconst _validSlot = hexToBytes('01'.repeat(32));\n\t\tconst _chainId = BigInt(1);\n\t\texpect(() => {\n\t\t\tAccessListEIP2930Transaction.fromTxData(\n\t\t\t\t{\n\t\t\t\t\tdata: hexToBytes('010200'),\n\t\t\t\t\tto: _validAddress,\n\t\t\t\t\taccessList: [[_validAddress, [_validSlot]]],\n\t\t\t\t\tchainId: _chainId,\n\t\t\t\t\tgasLimit: MAX_UINT64,\n\t\t\t\t\tgasPrice: MAX_INTEGER,\n\t\t\t\t},\n\t\t\t\t{ common },\n\t\t\t);\n\t\t}).toThrow('gasLimit * gasPrice cannot exceed MAX_INTEGER');\n\n\t\tconst uint8Array = new Uint8Array([]);\n\t\tconst _address = new Uint8Array([]);\n\t\tconst storageKeys = [new Uint8Array([]), new Uint8Array([])];\n\t\tconst aclBuf: AccessListUint8ArrayItem = [_address, storageKeys];\n\t\texpect(() => {\n\t\t\tAccessListEIP2930Transaction.fromValuesArray(\n\t\t\t\t[\n\t\t\t\t\tuint8Array,\n\t\t\t\t\tuint8Array,\n\t\t\t\t\tuint8Array,\n\t\t\t\t\tuint8Array,\n\t\t\t\t\tuint8Array,\n\t\t\t\t\tuint8Array,\n\t\t\t\t\tuint8Array,\n\t\t\t\t\t[aclBuf],\n\t\t\t\t\tuint8Array,\n\t\t\t\t],\n\t\t\t\t{},\n\t\t\t);\n\t\t}).toThrow();\n\t});\n\n\tit('should return right upfront cost', () => {\n\t\tlet tx = AccessListEIP2930Transaction.fromTxData(\n\t\t\t{\n\t\t\t\tdata: hexToBytes('010200'),\n\t\t\t\tto: validAddress,\n\t\t\t\taccessList: [[validAddress, [validSlot]]],\n\t\t\t\tchainId,\n\t\t\t},\n\t\t\t{ common },\n\t\t);\n\t\t// Cost should be:\n\t\t// Base fee + 2*TxDataNonZero + TxDataZero + AccessListAddressCost + AccessListSlotCost\n\t\tconst txDataZero = Number(common.param('gasPrices', 'txDataZero'));\n\t\tconst txDataNonZero = Number(common.param('gasPrices', 'txDataNonZero'));\n\t\tconst accessListStorageKeyCost = Number(\n\t\t\tcommon.param('gasPrices', 'accessListStorageKeyCost'),\n\t\t);\n\t\tconst accessListAddressCost = Number(common.param('gasPrices', 'accessListAddressCost'));\n\t\tconst baseFee = Number(common.param('gasPrices', 'tx'));\n\t\tconst creationFee = Number(common.param('gasPrices', 'txCreation'));\n\n\t\texpect(\n\t\t\ttx.getBaseFee() ===\n\t\t\t\tBigInt(\n\t\t\t\t\ttxDataNonZero * 2 +\n\t\t\t\t\t\ttxDataZero +\n\t\t\t\t\t\tbaseFee +\n\t\t\t\t\t\taccessListAddressCost +\n\t\t\t\t\t\taccessListStorageKeyCost,\n\t\t\t\t),\n\t\t).toBeTruthy();\n\n\t\t// In this Tx, `to` is `undefined`, so we should charge homestead creation gas.\n\t\ttx = AccessListEIP2930Transaction.fromTxData(\n\t\t\t{\n\t\t\t\tdata: hexToBytes('010200'),\n\t\t\t\taccessList: [[validAddress, [validSlot]]],\n\t\t\t\tchainId,\n\t\t\t},\n\t\t\t{ common },\n\t\t);\n\n\t\texpect(\n\t\t\ttx.getBaseFee() ===\n\t\t\t\tBigInt(\n\t\t\t\t\ttxDataNonZero * 2 +\n\t\t\t\t\t\ttxDataZero +\n\t\t\t\t\t\tcreationFee +\n\t\t\t\t\t\tbaseFee +\n\t\t\t\t\t\taccessListAddressCost +\n\t\t\t\t\t\taccessListStorageKeyCost,\n\t\t\t\t),\n\t\t).toBeTruthy();\n\n\t\t// Explicitly check that even if we have duplicates in our list, we still charge for those\n\t\ttx = AccessListEIP2930Transaction.fromTxData(\n\t\t\t{\n\t\t\t\tto: validAddress,\n\t\t\t\taccessList: [\n\t\t\t\t\t[validAddress, [validSlot]],\n\t\t\t\t\t[validAddress, [validSlot, validSlot]],\n\t\t\t\t],\n\t\t\t\tchainId,\n\t\t\t},\n\t\t\t{ common },\n\t\t);\n\n\t\texpect(\n\t\t\ttx.getBaseFee() ===\n\t\t\t\tBigInt(baseFee + accessListAddressCost * 2 + accessListStorageKeyCost * 3),\n\t\t).toBeTruthy();\n\t});\n\n\tit('getUpfrontCost() -> should return upfront cost', () => {\n\t\tconst tx = AccessListEIP2930Transaction.fromTxData(\n\t\t\t{\n\t\t\t\tgasPrice: 1000,\n\t\t\t\tgasLimit: 10000000,\n\t\t\t\tvalue: 42,\n\t\t\t},\n\t\t\t{ common },\n\t\t);\n\t\texpect(tx.getUpfrontCost()).toEqual(BigInt(10000000042));\n\t});\n\n\tit('unsigned tx -> getMessageToSign()', () => {\n\t\tconst unsignedTx = AccessListEIP2930Transaction.fromTxData(\n\t\t\t{\n\t\t\t\tdata: hexToBytes('010200'),\n\t\t\t\tto: validAddress,\n\t\t\t\taccessList: [[validAddress, [validSlot]]],\n\t\t\t\tchainId,\n\t\t\t},\n\t\t\t{ common },\n\t\t);\n\t\tconst expectedHash = hexToBytes(\n\t\t\t'0x78528e2724aa359c58c13e43a7c467eb721ce8d410c2a12ee62943a3aaefb60b',\n\t\t);\n\t\texpect(unsignedTx.getMessageToSign(true)).toEqual(expectedHash);\n\n\t\tconst expectedSerialization = hexToBytes(\n\t\t\t'0x01f858018080809401010101010101010101010101010101010101018083010200f838f7940101010101010101010101010101010101010101e1a00101010101010101010101010101010101010101010101010101010101010101',\n\t\t);\n\t\texpect(unsignedTx.getMessageToSign(false)).toEqual(expectedSerialization);\n\t});\n\n\t// Data from\n\t// https://github.com/INFURA/go-ethlibs/blob/75b2a52a39d353ed8206cffaf68d09bd1b154aae/eth/transaction_signing_test.go#L87\n\n\tit('should sign transaction correctly and return expected JSON', () => {\n\t\tconst _address = hexToBytes('0000000000000000000000000000000000001337');\n\t\tconst slot1 = hexToBytes(\n\t\t\t'0000000000000000000000000000000000000000000000000000000000000000',\n\t\t);\n\t\tconst txData = {\n\t\t\tdata: hexToBytes(''),\n\t\t\tgasLimit: 0x62d4,\n\t\t\tgasPrice: 0x3b9aca00,\n\t\t\tnonce: 0x00,\n\t\t\tto: new Address(hexToBytes('df0a88b2b68c673713a8ec826003676f272e3573')),\n\t\t\tvalue: 0x01,\n\t\t\tchainId: uint8ArrayToBigInt(hexToBytes('796f6c6f763378')),\n\t\t\t// eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n\t\t\taccessList: <any>[[_address, [slot1]]],\n\t\t};\n\n\t\tconst customChainParams = {\n\t\t\tname: 'custom',\n\t\t\tchainId: txData.chainId,\n\t\t\teips: [2718, 2929, 2930],\n\t\t};\n\t\tconst usedCommon = Common.custom(customChainParams, {\n\t\t\tbaseChain: Chain.Mainnet,\n\t\t\thardfork: Hardfork.Berlin,\n\t\t});\n\t\tusedCommon.setEIPs([2718, 2929, 2930]);\n\n\t\tconst expectedUnsignedRaw = hexToBytes(\n\t\t\t'01f86587796f6c6f76337880843b9aca008262d494df0a88b2b68c673713a8ec826003676f272e35730180f838f7940000000000000000000000000000000000001337e1a00000000000000000000000000000000000000000000000000000000000000000808080',\n\t\t);\n\t\tconst pkey = hexToBytes('fad9c8855b740a0b7ed4c221dbad0f33a83a49cad6b3fe8d5817ac83d38b6a19');\n\t\tconst expectedSigned = hexToBytes(\n\t\t\t'01f8a587796f6c6f76337880843b9aca008262d494df0a88b2b68c673713a8ec826003676f272e35730180f838f7940000000000000000000000000000000000001337e1a0000000000000000000000000000000000000000000000000000000000000000080a0294ac94077b35057971e6b4b06dfdf55a6fbed819133a6c1d31e187f1bca938da00be950468ba1c25a5cb50e9f6d8aa13c8cd21f24ba909402775b262ac76d374d',\n\t\t);\n\t\tconst expectedHash = hexToBytes(\n\t\t\t'bbd570a3c6acc9bb7da0d5c0322fe4ea2a300db80226f7df4fef39b2d6649eec',\n\t\t);\n\t\tconst v = BigInt(0);\n\t\tconst r = uint8ArrayToBigInt(\n\t\t\thexToBytes('294ac94077b35057971e6b4b06dfdf55a6fbed819133a6c1d31e187f1bca938d'),\n\t\t);\n\t\tconst s = uint8ArrayToBigInt(\n\t\t\thexToBytes('0be950468ba1c25a5cb50e9f6d8aa13c8cd21f24ba909402775b262ac76d374d'),\n\t\t);\n\n\t\tconst unsignedTx = AccessListEIP2930Transaction.fromTxData(txData, { common: usedCommon });\n\n\t\tconst serializedMessageRaw = unsignedTx.serialize();\n\n\t\texpect(uint8ArrayEquals(expectedUnsignedRaw, serializedMessageRaw)).toBeTruthy();\n\n\t\tconst signed = unsignedTx.sign(pkey);\n\n\t\texpect(v === signed.v!).toBeTruthy();\n\t\texpect(r === signed.r!).toBeTruthy();\n\t\texpect(s === signed.s!).toBeTruthy();\n\t\texpect(uint8ArrayEquals(expectedSigned, signed.serialize())).toBeTruthy();\n\t\texpect(uint8ArrayEquals(expectedHash, signed.hash())).toBeTruthy();\n\n\t\tconst expectedJSON = {\n\t\t\tchainId: '0x796f6c6f763378',\n\t\t\tnonce: '0x0',\n\t\t\tgasPrice: '0x3b9aca00',\n\t\t\tgasLimit: '0x62d4',\n\t\t\tto: '0xdf0a88b2b68c673713a8ec826003676f272e3573',\n\t\t\tvalue: '0x1',\n\t\t\tdata: '0x',\n\t\t\taccessList: [\n\t\t\t\t{\n\t\t\t\t\taddress: '0x0000000000000000000000000000000000001337',\n\t\t\t\t\tstorageKeys: [\n\t\t\t\t\t\t'0x0000000000000000000000000000000000000000000000000000000000000000',\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t\tv: '0x0',\n\t\t\tr: '0x294ac94077b35057971e6b4b06dfdf55a6fbed819133a6c1d31e187f1bca938d',\n\t\t\ts: '0xbe950468ba1c25a5cb50e9f6d8aa13c8cd21f24ba909402775b262ac76d374d',\n\t\t};\n\n\t\texpect(signed.toJSON()).toEqual(expectedJSON);\n\t});\n\n\tit('freeze property propagates from unsigned tx to signed tx', () => {\n\t\tconst tx = AccessListEIP2930Transaction.fromTxData({}, { freeze: false });\n\t\texpect(Object.isFrozen(tx)).toBe(false);\n\t\tconst signedTxn = tx.sign(pKey);\n\t\texpect(Object.isFrozen(signedTxn)).toBe(false);\n\t});\n\n\tit('common propagates from the common of tx, not the common in TxOptions', () => {\n\t\tconst txn = AccessListEIP2930Transaction.fromTxData({}, { common, freeze: false });\n\t\tconst newCommon = new Common({\n\t\t\tchain: Chain.Mainnet,\n\t\t\thardfork: Hardfork.London,\n\t\t\teips: [2537],\n\t\t});\n\t\texpect(newCommon).not.toEqual(common);\n\t\tObject.defineProperty(txn, 'common', {\n\t\t\tget() {\n\t\t\t\treturn newCommon;\n\t\t\t},\n\t\t});\n\t\tconst signedTxn = txn.sign(pKey);\n\t\texpect(signedTxn.common.eips().includes(2537)).toBeTruthy();\n\t});\n});\n","/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/test/unit/tx/types.ts",[],[],"/Users/alexeykosinski/work/chainsafe/web3.js/packages/web3-eth-accounts/test/unit/wallet.test.ts",[],[],{"ruleId":"767","severity":1,"message":"768","line":205,"column":12,"nodeType":"769","messageId":"770","endLine":205,"endColumn":31},{"ruleId":"771","severity":2,"message":"772","line":313,"column":35,"nodeType":"773","messageId":"774","endLine":313,"endColumn":37,"suppressions":"775"},{"ruleId":"776","severity":1,"message":"777","line":679,"column":21,"nodeType":"778","messageId":"779","endLine":679,"endColumn":37,"suppressions":"780"},{"ruleId":"781","severity":1,"message":"782","line":88,"column":5,"nodeType":null,"messageId":"783","endLine":88,"endColumn":11},{"ruleId":"781","severity":1,"message":"782","line":89,"column":5,"nodeType":null,"messageId":"783","endLine":89,"endColumn":11},{"ruleId":"781","severity":1,"message":"782","line":188,"column":5,"nodeType":null,"messageId":"783","endLine":188,"endColumn":11},{"ruleId":"781","severity":1,"message":"782","line":189,"column":5,"nodeType":null,"messageId":"783","endLine":189,"endColumn":11},{"ruleId":"781","severity":1,"message":"784","line":189,"column":12,"nodeType":null,"messageId":"785","endLine":189,"endColumn":72},{"ruleId":"786","severity":1,"message":"787","line":193,"column":16,"nodeType":"788","messageId":"789","endLine":193,"endColumn":19,"suggestions":"790"},{"ruleId":"781","severity":1,"message":"782","line":211,"column":5,"nodeType":null,"messageId":"783","endLine":211,"endColumn":11},{"ruleId":"781","severity":1,"message":"782","line":264,"column":5,"nodeType":null,"messageId":"783","endLine":264,"endColumn":11},{"ruleId":"781","severity":1,"message":"782","line":297,"column":5,"nodeType":null,"messageId":"783","endLine":297,"endColumn":11},{"ruleId":"781","severity":1,"message":"782","line":323,"column":5,"nodeType":null,"messageId":"783","endLine":323,"endColumn":11},{"ruleId":"781","severity":1,"message":"782","line":324,"column":5,"nodeType":null,"messageId":"783","endLine":324,"endColumn":11},{"ruleId":"781","severity":1,"message":"782","line":325,"column":5,"nodeType":null,"messageId":"783","endLine":325,"endColumn":11},{"ruleId":"767","severity":1,"message":"768","line":394,"column":50,"nodeType":"769","messageId":"770","endLine":394,"endColumn":67},{"ruleId":"767","severity":1,"message":"768","line":400,"column":40,"nodeType":"769","messageId":"770","endLine":400,"endColumn":60},{"ruleId":"767","severity":1,"message":"768","line":404,"column":46,"nodeType":"769","messageId":"770","endLine":404,"endColumn":66},{"ruleId":"781","severity":1,"message":"782","line":460,"column":5,"nodeType":null,"messageId":"783","endLine":460,"endColumn":11},{"ruleId":"781","severity":1,"message":"782","line":461,"column":5,"nodeType":null,"messageId":"783","endLine":461,"endColumn":11},{"ruleId":"781","severity":1,"message":"782","line":462,"column":5,"nodeType":null,"messageId":"783","endLine":462,"endColumn":11},{"ruleId":"781","severity":1,"message":"782","line":477,"column":5,"nodeType":null,"messageId":"783","endLine":477,"endColumn":11},{"ruleId":"781","severity":1,"message":"782","line":492,"column":5,"nodeType":null,"messageId":"783","endLine":492,"endColumn":11},{"ruleId":"781","severity":1,"message":"782","line":531,"column":5,"nodeType":null,"messageId":"783","endLine":531,"endColumn":11},{"ruleId":"781","severity":1,"message":"782","line":532,"column":5,"nodeType":null,"messageId":"783","endLine":532,"endColumn":11},{"ruleId":"781","severity":1,"message":"782","line":548,"column":5,"nodeType":null,"messageId":"783","endLine":548,"endColumn":11},{"ruleId":"781","severity":1,"message":"782","line":549,"column":5,"nodeType":null,"messageId":"783","endLine":549,"endColumn":11},{"ruleId":"781","severity":1,"message":"782","line":550,"column":5,"nodeType":null,"messageId":"783","endLine":550,"endColumn":11},{"ruleId":"781","severity":1,"message":"782","line":587,"column":5,"nodeType":null,"messageId":"783","endLine":587,"endColumn":11},{"ruleId":"781","severity":1,"message":"782","line":588,"column":5,"nodeType":null,"messageId":"783","endLine":588,"endColumn":11},{"ruleId":"781","severity":1,"message":"782","line":589,"column":5,"nodeType":null,"messageId":"783","endLine":589,"endColumn":11},{"ruleId":"781","severity":1,"message":"782","line":615,"column":5,"nodeType":null,"messageId":"783","endLine":615,"endColumn":11},{"ruleId":"781","severity":1,"message":"782","line":616,"column":5,"nodeType":null,"messageId":"783","endLine":616,"endColumn":11},{"ruleId":"781","severity":1,"message":"782","line":617,"column":5,"nodeType":null,"messageId":"783","endLine":617,"endColumn":11},{"ruleId":"781","severity":1,"message":"782","line":618,"column":5,"nodeType":null,"messageId":"783","endLine":618,"endColumn":11},{"ruleId":"781","severity":1,"message":"782","line":639,"column":5,"nodeType":null,"messageId":"783","endLine":639,"endColumn":11},{"ruleId":"781","severity":1,"message":"782","line":661,"column":5,"nodeType":null,"messageId":"783","endLine":661,"endColumn":11},{"ruleId":"781","severity":1,"message":"782","line":662,"column":5,"nodeType":null,"messageId":"783","endLine":662,"endColumn":11},{"ruleId":"781","severity":1,"message":"782","line":681,"column":5,"nodeType":null,"messageId":"783","endLine":681,"endColumn":11},{"ruleId":"781","severity":1,"message":"782","line":691,"column":5,"nodeType":null,"messageId":"783","endLine":691,"endColumn":11},{"ruleId":"781","severity":1,"message":"782","line":692,"column":5,"nodeType":null,"messageId":"783","endLine":692,"endColumn":11},{"ruleId":"781","severity":1,"message":"782","line":693,"column":5,"nodeType":null,"messageId":"783","endLine":693,"endColumn":11},{"ruleId":"781","severity":1,"message":"782","line":717,"column":5,"nodeType":null,"messageId":"783","endLine":717,"endColumn":11},{"ruleId":"781","severity":1,"message":"782","line":727,"column":5,"nodeType":null,"messageId":"783","endLine":727,"endColumn":11},{"ruleId":"781","severity":1,"message":"782","line":755,"column":5,"nodeType":null,"messageId":"783","endLine":755,"endColumn":11},{"ruleId":"781","severity":1,"message":"782","line":778,"column":5,"nodeType":null,"messageId":"783","endLine":778,"endColumn":11},{"ruleId":"781","severity":1,"message":"782","line":795,"column":5,"nodeType":null,"messageId":"783","endLine":795,"endColumn":11},{"ruleId":"781","severity":1,"message":"782","line":796,"column":5,"nodeType":null,"messageId":"783","endLine":796,"endColumn":11},{"ruleId":"781","severity":1,"message":"791","line":798,"column":5,"nodeType":null,"messageId":"792","endLine":798,"endColumn":16},{"ruleId":"781","severity":1,"message":"782","line":809,"column":5,"nodeType":null,"messageId":"783","endLine":809,"endColumn":11},{"ruleId":"781","severity":1,"message":"782","line":870,"column":5,"nodeType":null,"messageId":"783","endLine":870,"endColumn":11},{"ruleId":"781","severity":1,"message":"791","line":872,"column":5,"nodeType":null,"messageId":"792","endLine":872,"endColumn":16},{"ruleId":"767","severity":1,"message":"768","line":908,"column":19,"nodeType":"769","messageId":"770","endLine":908,"endColumn":27},{"ruleId":"781","severity":1,"message":"782","line":916,"column":5,"nodeType":null,"messageId":"783","endLine":916,"endColumn":11},{"ruleId":"781","severity":1,"message":"782","line":917,"column":5,"nodeType":null,"messageId":"783","endLine":917,"endColumn":11},{"ruleId":"781","severity":1,"message":"791","line":919,"column":5,"nodeType":null,"messageId":"792","endLine":919,"endColumn":16},{"ruleId":"781","severity":1,"message":"782","line":932,"column":5,"nodeType":null,"messageId":"783","endLine":932,"endColumn":11},{"ruleId":"781","severity":1,"message":"782","line":933,"column":5,"nodeType":null,"messageId":"783","endLine":933,"endColumn":11},{"ruleId":"781","severity":1,"message":"782","line":974,"column":5,"nodeType":null,"messageId":"783","endLine":974,"endColumn":11},{"ruleId":"781","severity":1,"message":"782","line":975,"column":5,"nodeType":null,"messageId":"783","endLine":975,"endColumn":11},{"ruleId":"781","severity":1,"message":"782","line":999,"column":5,"nodeType":null,"messageId":"783","endLine":999,"endColumn":11},{"ruleId":"781","severity":1,"message":"782","line":1011,"column":5,"nodeType":null,"messageId":"783","endLine":1011,"endColumn":11},{"ruleId":"781","severity":1,"message":"782","line":1012,"column":5,"nodeType":null,"messageId":"783","endLine":1012,"endColumn":11},{"ruleId":"781","severity":1,"message":"793","line":1039,"column":14,"nodeType":null,"messageId":"794","endLine":1039,"endColumn":15},{"ruleId":"781","severity":1,"message":"795","line":1039,"column":20,"nodeType":null,"messageId":"796","endLine":1039,"endColumn":21},{"ruleId":"781","severity":1,"message":"793","line":1047,"column":14,"nodeType":null,"messageId":"794","endLine":1047,"endColumn":15},{"ruleId":"781","severity":1,"message":"795","line":1047,"column":25,"nodeType":null,"messageId":"796","endLine":1047,"endColumn":26},{"ruleId":"781","severity":1,"message":"793","line":1055,"column":14,"nodeType":null,"messageId":"794","endLine":1055,"endColumn":15},{"ruleId":"781","severity":1,"message":"795","line":1055,"column":23,"nodeType":null,"messageId":"796","endLine":1055,"endColumn":24},{"ruleId":"767","severity":1,"message":"768","line":1058,"column":10,"nodeType":"769","messageId":"770","endLine":1058,"endColumn":40},{"ruleId":"797","severity":2,"message":"798","line":183,"column":35,"nodeType":"778","messageId":"799","endLine":183,"endColumn":52,"suppressions":"800"},{"ruleId":"801","severity":2,"message":"802","line":341,"column":18,"nodeType":"803","endLine":341,"endColumn":22,"suppressions":"804"},{"ruleId":"801","severity":2,"message":"802","line":343,"column":17,"nodeType":"803","endLine":343,"endColumn":21,"suppressions":"805"},{"ruleId":"801","severity":2,"message":"802","line":347,"column":53,"nodeType":"803","endLine":347,"endColumn":57,"suppressions":"806"},{"ruleId":"801","severity":2,"message":"802","line":351,"column":32,"nodeType":"803","endLine":351,"endColumn":36,"suppressions":"807"},{"ruleId":"801","severity":2,"message":"802","line":363,"column":19,"nodeType":"803","endLine":363,"endColumn":23,"suppressions":"808"},{"ruleId":"801","severity":2,"message":"802","line":382,"column":35,"nodeType":"803","endLine":382,"endColumn":39,"suppressions":"809"},{"ruleId":"801","severity":2,"message":"802","line":391,"column":30,"nodeType":"803","endLine":391,"endColumn":34,"suppressions":"810"},{"ruleId":"801","severity":2,"message":"802","line":394,"column":35,"nodeType":"803","endLine":394,"endColumn":39,"suppressions":"811"},{"ruleId":"801","severity":2,"message":"802","line":399,"column":60,"nodeType":"803","endLine":399,"endColumn":64,"suppressions":"812"},{"ruleId":"813","severity":2,"message":"814","line":481,"column":69,"nodeType":"815","messageId":"816","endLine":481,"endColumn":73,"suppressions":"817"},{"ruleId":"801","severity":2,"message":"802","line":487,"column":10,"nodeType":"803","endLine":487,"endColumn":14,"suppressions":"818"},{"ruleId":"819","severity":2,"message":"820","line":500,"column":35,"nodeType":"821","messageId":"822","endLine":500,"endColumn":60,"suppressions":"823"},{"ruleId":"824","severity":2,"message":"825","line":500,"column":35,"nodeType":"821","messageId":"826","endLine":500,"endColumn":60,"suppressions":"827"},{"ruleId":"797","severity":2,"message":"828","line":504,"column":85,"nodeType":"778","messageId":"799","endLine":504,"endColumn":90,"suppressions":"829"},{"ruleId":"824","severity":2,"message":"830","line":508,"column":8,"nodeType":"821","messageId":"826","endLine":508,"endColumn":30,"suppressions":"831"},{"ruleId":"824","severity":2,"message":"830","line":510,"column":24,"nodeType":"821","messageId":"826","endLine":510,"endColumn":46,"suppressions":"832"},{"ruleId":"819","severity":2,"message":"833","line":512,"column":26,"nodeType":"778","messageId":"822","endLine":512,"endColumn":30,"suppressions":"834"},{"ruleId":"819","severity":2,"message":"833","line":512,"column":55,"nodeType":"778","messageId":"822","endLine":512,"endColumn":59,"suppressions":"835"},{"ruleId":"797","severity":2,"message":"836","line":515,"column":31,"nodeType":"778","messageId":"799","endLine":515,"endColumn":35,"suppressions":"837"},{"ruleId":"801","severity":2,"message":"802","line":555,"column":15,"nodeType":"803","endLine":555,"endColumn":19,"suppressions":"838"},{"ruleId":"839","severity":2,"message":"840","line":560,"column":11,"nodeType":"841","messageId":"842","endLine":560,"endColumn":37,"suppressions":"843"},{"ruleId":"824","severity":2,"message":"844","line":560,"column":20,"nodeType":"821","messageId":"826","endLine":560,"endColumn":37,"suppressions":"845"},{"ruleId":"819","severity":2,"message":"833","line":563,"column":52,"nodeType":"778","messageId":"822","endLine":563,"endColumn":55,"suppressions":"846"},{"ruleId":"839","severity":2,"message":"840","line":565,"column":6,"nodeType":"847","messageId":"842","endLine":565,"endColumn":61,"suppressions":"848"},{"ruleId":"824","severity":2,"message":"849","line":570,"column":9,"nodeType":"821","messageId":"826","endLine":570,"endColumn":28,"suppressions":"850"},{"ruleId":"824","severity":2,"message":"849","line":574,"column":9,"nodeType":"821","messageId":"826","endLine":574,"endColumn":28,"suppressions":"851"},{"ruleId":"839","severity":2,"message":"840","line":576,"column":6,"nodeType":"847","messageId":"842","endLine":576,"endColumn":41,"suppressions":"852"},{"ruleId":"824","severity":2,"message":"849","line":576,"column":14,"nodeType":"821","messageId":"826","endLine":576,"endColumn":33,"suppressions":"853"},{"ruleId":"819","severity":2,"message":"854","line":582,"column":17,"nodeType":"855","messageId":"822","endLine":582,"endColumn":27,"suppressions":"856"},{"ruleId":"857","severity":2,"message":"858","line":593,"column":2,"nodeType":"859","messageId":"860","endLine":593,"endColumn":19,"suppressions":"861"},{"ruleId":"839","severity":2,"message":"840","line":598,"column":9,"nodeType":"841","messageId":"842","endLine":598,"endColumn":30,"suppressions":"862"},{"ruleId":"824","severity":2,"message":"849","line":603,"column":7,"nodeType":"821","messageId":"826","endLine":603,"endColumn":23,"suppressions":"863"},{"ruleId":"839","severity":2,"message":"840","line":607,"column":9,"nodeType":"841","messageId":"842","endLine":607,"endColumn":41,"suppressions":"864"},{"ruleId":"824","severity":2,"message":"849","line":607,"column":17,"nodeType":"821","messageId":"826","endLine":607,"endColumn":33,"suppressions":"865"},{"ruleId":"819","severity":2,"message":"854","line":609,"column":17,"nodeType":"778","messageId":"822","endLine":609,"endColumn":22,"suppressions":"866"},{"ruleId":"839","severity":2,"message":"840","line":647,"column":10,"nodeType":"841","messageId":"842","endLine":647,"endColumn":27,"suppressions":"867"},{"ruleId":"819","severity":2,"message":"820","line":649,"column":25,"nodeType":"821","messageId":"822","endLine":649,"endColumn":32,"suppressions":"868"},{"ruleId":"824","severity":2,"message":"869","line":649,"column":25,"nodeType":"821","messageId":"826","endLine":649,"endColumn":32,"suppressions":"870"},{"ruleId":"824","severity":2,"message":"844","line":651,"column":10,"nodeType":"821","messageId":"826","endLine":651,"endColumn":17,"suppressions":"871"},{"ruleId":"813","severity":2,"message":"814","line":667,"column":34,"nodeType":"815","messageId":"816","endLine":667,"endColumn":38,"suppressions":"872"},{"ruleId":"801","severity":2,"message":"802","line":686,"column":39,"nodeType":"803","endLine":686,"endColumn":43,"suppressions":"873"},{"ruleId":"813","severity":2,"message":"814","line":698,"column":35,"nodeType":"815","messageId":"816","endLine":698,"endColumn":39,"suppressions":"874"},{"ruleId":"801","severity":2,"message":"802","line":722,"column":35,"nodeType":"803","endLine":722,"endColumn":39,"suppressions":"875"},{"ruleId":"813","severity":2,"message":"814","line":731,"column":64,"nodeType":"815","messageId":"816","endLine":731,"endColumn":68,"suppressions":"876"},{"ruleId":"801","severity":2,"message":"802","line":735,"column":40,"nodeType":"803","endLine":735,"endColumn":44,"suppressions":"877"},{"ruleId":"801","severity":2,"message":"802","line":737,"column":11,"nodeType":"803","endLine":737,"endColumn":15,"suppressions":"878"},{"ruleId":"813","severity":2,"message":"814","line":742,"column":68,"nodeType":"815","messageId":"816","endLine":742,"endColumn":72,"suppressions":"879"},{"ruleId":"801","severity":2,"message":"802","line":746,"column":48,"nodeType":"803","endLine":746,"endColumn":52,"suppressions":"880"},{"ruleId":"801","severity":2,"message":"802","line":748,"column":11,"nodeType":"803","endLine":748,"endColumn":15,"suppressions":"881"},{"ruleId":"813","severity":2,"message":"814","line":759,"column":41,"nodeType":"815","messageId":"816","endLine":759,"endColumn":45,"suppressions":"882"},{"ruleId":"839","severity":2,"message":"840","line":762,"column":10,"nodeType":"841","messageId":"842","endLine":762,"endColumn":27,"suppressions":"883"},{"ruleId":"824","severity":2,"message":"844","line":765,"column":9,"nodeType":"821","messageId":"826","endLine":765,"endColumn":16,"suppressions":"884"},{"ruleId":"885","severity":2,"message":"886","line":765,"column":9,"nodeType":"821","messageId":"887","endLine":765,"endColumn":25,"suppressions":"888"},{"ruleId":"801","severity":2,"message":"802","line":773,"column":10,"nodeType":"803","endLine":773,"endColumn":14,"suppressions":"889"},{"ruleId":"813","severity":2,"message":"814","line":782,"column":62,"nodeType":"815","messageId":"816","endLine":782,"endColumn":66,"suppressions":"890"},{"ruleId":"801","severity":2,"message":"802","line":786,"column":36,"nodeType":"803","endLine":786,"endColumn":40,"suppressions":"891"},{"ruleId":"801","severity":2,"message":"802","line":788,"column":11,"nodeType":"803","endLine":788,"endColumn":15,"suppressions":"892"},{"ruleId":"813","severity":2,"message":"814","line":813,"column":79,"nodeType":"815","messageId":"816","endLine":813,"endColumn":83,"suppressions":"893"},{"ruleId":"801","severity":2,"message":"802","line":825,"column":11,"nodeType":"803","endLine":825,"endColumn":15,"suppressions":"894"},{"ruleId":"801","severity":2,"message":"802","line":831,"column":26,"nodeType":"803","endLine":831,"endColumn":30,"suppressions":"895"},{"ruleId":"801","severity":2,"message":"802","line":834,"column":7,"nodeType":"803","endLine":834,"endColumn":11,"suppressions":"896"},{"ruleId":"801","severity":2,"message":"802","line":840,"column":23,"nodeType":"803","endLine":840,"endColumn":27,"suppressions":"897"},{"ruleId":"801","severity":2,"message":"802","line":843,"column":8,"nodeType":"803","endLine":843,"endColumn":12,"suppressions":"898"},{"ruleId":"801","severity":2,"message":"802","line":847,"column":23,"nodeType":"803","endLine":847,"endColumn":27,"suppressions":"899"},{"ruleId":"801","severity":2,"message":"802","line":855,"column":11,"nodeType":"803","endLine":855,"endColumn":15,"suppressions":"900"},{"ruleId":"801","severity":2,"message":"802","line":860,"column":23,"nodeType":"803","endLine":860,"endColumn":27,"suppressions":"901"},{"ruleId":"801","severity":2,"message":"802","line":862,"column":11,"nodeType":"803","endLine":862,"endColumn":15,"suppressions":"902"},{"ruleId":"813","severity":2,"message":"814","line":875,"column":68,"nodeType":"815","messageId":"816","endLine":875,"endColumn":72,"suppressions":"903"},{"ruleId":"801","severity":2,"message":"802","line":881,"column":19,"nodeType":"803","endLine":881,"endColumn":23,"suppressions":"904"},{"ruleId":"801","severity":2,"message":"802","line":884,"column":54,"nodeType":"803","endLine":884,"endColumn":58,"suppressions":"905"},{"ruleId":"801","severity":2,"message":"802","line":891,"column":19,"nodeType":"803","endLine":891,"endColumn":23,"suppressions":"906"},{"ruleId":"801","severity":2,"message":"802","line":893,"column":11,"nodeType":"803","endLine":893,"endColumn":15,"suppressions":"907"},{"ruleId":"813","severity":2,"message":"814","line":900,"column":62,"nodeType":"815","messageId":"816","endLine":900,"endColumn":66,"suppressions":"908"},{"ruleId":"801","severity":2,"message":"802","line":904,"column":18,"nodeType":"803","endLine":904,"endColumn":22,"suppressions":"909"},{"ruleId":"801","severity":2,"message":"802","line":904,"column":62,"nodeType":"803","endLine":904,"endColumn":66,"suppressions":"910"},{"ruleId":"801","severity":2,"message":"802","line":908,"column":39,"nodeType":"803","endLine":908,"endColumn":43,"suppressions":"911"},{"ruleId":"801","severity":2,"message":"802","line":910,"column":6,"nodeType":"803","endLine":910,"endColumn":10,"suppressions":"912"},{"ruleId":"913","severity":2,"message":"914","line":925,"column":34,"nodeType":"778","messageId":"915","endLine":925,"endColumn":51,"suppressions":"916"},{"ruleId":"801","severity":2,"message":"802","line":927,"column":32,"nodeType":"803","endLine":927,"endColumn":36,"suppressions":"917"},{"ruleId":"801","severity":2,"message":"802","line":945,"column":34,"nodeType":"803","endLine":945,"endColumn":38,"suppressions":"918"},{"ruleId":"801","severity":2,"message":"802","line":945,"column":63,"nodeType":"803","endLine":945,"endColumn":67,"suppressions":"919"},{"ruleId":"920","severity":2,"message":"921","line":968,"column":47,"nodeType":"922","messageId":"923","endLine":968,"endColumn":85,"suppressions":"924"},{"ruleId":"801","severity":2,"message":"802","line":982,"column":13,"nodeType":"803","endLine":982,"endColumn":17,"suppressions":"925"},{"ruleId":"801","severity":2,"message":"802","line":984,"column":21,"nodeType":"803","endLine":984,"endColumn":25,"suppressions":"926"},{"ruleId":"801","severity":2,"message":"802","line":990,"column":26,"nodeType":"803","endLine":990,"endColumn":30,"suppressions":"927"},{"ruleId":"813","severity":2,"message":"814","line":1003,"column":65,"nodeType":"815","messageId":"816","endLine":1003,"endColumn":69,"suppressions":"928"},{"ruleId":"801","severity":2,"message":"802","line":1006,"column":65,"nodeType":"803","endLine":1006,"endColumn":69,"suppressions":"929"},{"ruleId":"801","severity":2,"message":"802","line":1019,"column":22,"nodeType":"803","endLine":1019,"endColumn":26,"suppressions":"930"},{"ruleId":"801","severity":2,"message":"802","line":1021,"column":23,"nodeType":"803","endLine":1021,"endColumn":27,"suppressions":"931"},{"ruleId":"839","severity":2,"message":"840","line":1114,"column":5,"nodeType":"847","messageId":"842","endLine":1114,"endColumn":40,"suppressions":"932"},{"ruleId":"824","severity":2,"message":"933","line":1114,"column":13,"nodeType":"821","messageId":"826","endLine":1114,"endColumn":35,"suppressions":"934"},{"ruleId":"935","severity":2,"message":"936","line":1119,"column":3,"nodeType":"937","messageId":"938","endLine":1119,"endColumn":52,"suppressions":"939"},{"ruleId":"839","severity":2,"message":"840","line":1138,"column":5,"nodeType":"847","messageId":"842","endLine":1138,"endColumn":45,"suppressions":"940"},{"ruleId":"824","severity":2,"message":"933","line":1138,"column":13,"nodeType":"821","messageId":"826","endLine":1138,"endColumn":35,"suppressions":"941"},{"ruleId":"935","severity":2,"message":"936","line":1143,"column":3,"nodeType":"937","messageId":"938","endLine":1143,"endColumn":81,"suppressions":"942"},{"ruleId":"839","severity":2,"message":"840","line":1167,"column":5,"nodeType":"847","messageId":"842","endLine":1167,"endColumn":69,"suppressions":"943"},{"ruleId":"824","severity":2,"message":"933","line":1167,"column":13,"nodeType":"821","messageId":"826","endLine":1167,"endColumn":35,"suppressions":"944"},{"ruleId":"824","severity":2,"message":"933","line":1167,"column":36,"nodeType":"821","messageId":"826","endLine":1167,"endColumn":58,"suppressions":"945"},{"ruleId":"824","severity":2,"message":"946","line":1167,"column":36,"nodeType":"821","messageId":"947","endLine":1167,"endColumn":68,"suppressions":"948"},{"ruleId":"935","severity":2,"message":"936","line":1172,"column":3,"nodeType":"937","messageId":"938","endLine":1176,"endColumn":5,"suppressions":"949"},{"ruleId":"839","severity":2,"message":"840","line":1184,"column":9,"nodeType":"841","messageId":"842","endLine":1184,"endColumn":79,"suppressions":"950"},{"ruleId":"819","severity":2,"message":"951","line":1184,"column":44,"nodeType":"952","messageId":"822","endLine":1184,"endColumn":71,"suppressions":"953"},{"ruleId":"824","severity":2,"message":"954","line":1186,"column":3,"nodeType":"821","messageId":"826","endLine":1186,"endColumn":26,"suppressions":"955"},{"ruleId":"885","severity":2,"message":"886","line":1186,"column":3,"nodeType":"821","messageId":"887","endLine":1186,"endColumn":26,"suppressions":"956"},{"ruleId":"935","severity":2,"message":"936","line":1188,"column":3,"nodeType":"937","messageId":"938","endLine":1188,"endColumn":15,"suppressions":"957"},{"ruleId":"813","severity":2,"message":"814","line":44,"column":18,"nodeType":"815","messageId":"816","endLine":44,"endColumn":22,"suppressions":"958"},{"ruleId":"813","severity":2,"message":"814","line":48,"column":22,"nodeType":"815","messageId":"816","endLine":48,"endColumn":26,"suppressions":"959"},{"ruleId":"813","severity":2,"message":"814","line":190,"column":4,"nodeType":"815","messageId":"816","endLine":190,"endColumn":8,"suppressions":"960"},{"ruleId":"781","severity":1,"message":"782","line":30,"column":4,"nodeType":null,"messageId":"783","endLine":30,"endColumn":10},{"ruleId":"781","severity":1,"message":"782","line":41,"column":4,"nodeType":null,"messageId":"783","endLine":41,"endColumn":10},{"ruleId":"781","severity":1,"message":"782","line":56,"column":4,"nodeType":null,"messageId":"783","endLine":56,"endColumn":10},{"ruleId":"781","severity":1,"message":"784","line":56,"column":11,"nodeType":null,"messageId":"785","endLine":56,"endColumn":19},{"ruleId":"781","severity":1,"message":"961","line":57,"column":4,"nodeType":null,"messageId":"962","endLine":57,"endColumn":11},{"ruleId":"781","severity":1,"message":"793","line":57,"column":12,"nodeType":null,"messageId":"794","endLine":57,"endColumn":13},{"ruleId":"781","severity":1,"message":"795","line":57,"column":19,"nodeType":null,"messageId":"796","endLine":57,"endColumn":20},{"ruleId":"963","severity":1,"message":"964","line":59,"column":18,"nodeType":"859","messageId":"965","endLine":59,"endColumn":27},{"ruleId":"781","severity":1,"message":"782","line":68,"column":4,"nodeType":null,"messageId":"783","endLine":68,"endColumn":10},{"ruleId":"781","severity":1,"message":"782","line":69,"column":4,"nodeType":null,"messageId":"783","endLine":69,"endColumn":10},{"ruleId":"786","severity":1,"message":"787","line":74,"column":32,"nodeType":"788","messageId":"789","endLine":74,"endColumn":35,"suggestions":"966"},{"ruleId":"786","severity":1,"message":"787","line":86,"column":11,"nodeType":"788","messageId":"789","endLine":86,"endColumn":14,"suggestions":"967"},{"ruleId":"786","severity":1,"message":"787","line":253,"column":9,"nodeType":"788","messageId":"789","endLine":253,"endColumn":12,"suggestions":"968"},{"ruleId":"781","severity":1,"message":"782","line":271,"column":4,"nodeType":null,"messageId":"783","endLine":271,"endColumn":10},{"ruleId":"781","severity":1,"message":"782","line":272,"column":4,"nodeType":null,"messageId":"783","endLine":272,"endColumn":10},{"ruleId":"786","severity":1,"message":"787","line":275,"column":40,"nodeType":"788","messageId":"789","endLine":275,"endColumn":43,"suggestions":"969"},{"ruleId":"786","severity":1,"message":"787","line":285,"column":14,"nodeType":"788","messageId":"789","endLine":285,"endColumn":17,"suggestions":"970"},{"ruleId":"781","severity":1,"message":"782","line":293,"column":4,"nodeType":null,"messageId":"783","endLine":293,"endColumn":10},{"ruleId":"781","severity":1,"message":"961","line":294,"column":4,"nodeType":null,"messageId":"962","endLine":294,"endColumn":11},{"ruleId":"781","severity":1,"message":"782","line":310,"column":4,"nodeType":null,"messageId":"783","endLine":310,"endColumn":10},{"ruleId":"781","severity":1,"message":"784","line":310,"column":11,"nodeType":null,"messageId":"785","endLine":310,"endColumn":19},{"ruleId":"781","severity":1,"message":"961","line":311,"column":4,"nodeType":null,"messageId":"962","endLine":311,"endColumn":11},{"ruleId":"781","severity":1,"message":"793","line":311,"column":12,"nodeType":null,"messageId":"794","endLine":311,"endColumn":13},{"ruleId":"781","severity":1,"message":"795","line":311,"column":23,"nodeType":null,"messageId":"796","endLine":311,"endColumn":24},{"ruleId":"963","severity":1,"message":"964","line":313,"column":32,"nodeType":"859","messageId":"965","endLine":313,"endColumn":41},{"ruleId":"781","severity":1,"message":"782","line":322,"column":4,"nodeType":null,"messageId":"783","endLine":322,"endColumn":10},{"ruleId":"963","severity":1,"message":"964","line":324,"column":29,"nodeType":"859","messageId":"965","endLine":324,"endColumn":38},{"ruleId":"781","severity":1,"message":"782","line":392,"column":4,"nodeType":null,"messageId":"783","endLine":392,"endColumn":10},{"ruleId":"963","severity":1,"message":"964","line":394,"column":22,"nodeType":"859","messageId":"965","endLine":394,"endColumn":31},{"ruleId":"781","severity":1,"message":"782","line":401,"column":4,"nodeType":null,"messageId":"783","endLine":401,"endColumn":10},{"ruleId":"781","severity":1,"message":"782","line":402,"column":4,"nodeType":null,"messageId":"783","endLine":402,"endColumn":10},{"ruleId":"781","severity":1,"message":"782","line":403,"column":4,"nodeType":null,"messageId":"783","endLine":403,"endColumn":10},{"ruleId":"781","severity":1,"message":"961","line":404,"column":4,"nodeType":null,"messageId":"962","endLine":404,"endColumn":11},{"ruleId":"963","severity":1,"message":"964","line":406,"column":19,"nodeType":"859","messageId":"965","endLine":406,"endColumn":28},{"ruleId":"781","severity":1,"message":"782","line":424,"column":4,"nodeType":null,"messageId":"783","endLine":424,"endColumn":10},{"ruleId":"781","severity":1,"message":"784","line":424,"column":11,"nodeType":null,"messageId":"785","endLine":424,"endColumn":23},{"ruleId":"781","severity":1,"message":"782","line":436,"column":4,"nodeType":null,"messageId":"783","endLine":436,"endColumn":10},{"ruleId":"781","severity":1,"message":"782","line":437,"column":4,"nodeType":null,"messageId":"783","endLine":437,"endColumn":10},{"ruleId":"781","severity":1,"message":"961","line":438,"column":4,"nodeType":null,"messageId":"962","endLine":438,"endColumn":11},{"ruleId":"963","severity":1,"message":"964","line":440,"column":30,"nodeType":"859","messageId":"965","endLine":440,"endColumn":39},{"ruleId":"781","severity":1,"message":"782","line":447,"column":4,"nodeType":null,"messageId":"783","endLine":447,"endColumn":10},{"ruleId":"781","severity":1,"message":"961","line":448,"column":4,"nodeType":null,"messageId":"962","endLine":448,"endColumn":11},{"ruleId":"781","severity":1,"message":"782","line":466,"column":4,"nodeType":null,"messageId":"783","endLine":466,"endColumn":10},{"ruleId":"781","severity":1,"message":"961","line":467,"column":4,"nodeType":null,"messageId":"962","endLine":467,"endColumn":11},{"ruleId":"963","severity":1,"message":"964","line":469,"column":32,"nodeType":"859","messageId":"965","endLine":469,"endColumn":41},{"ruleId":"781","severity":1,"message":"782","line":482,"column":4,"nodeType":null,"messageId":"783","endLine":482,"endColumn":10},{"ruleId":"963","severity":1,"message":"964","line":506,"column":26,"nodeType":"859","messageId":"965","endLine":506,"endColumn":35},{"ruleId":"781","severity":1,"message":"782","line":528,"column":4,"nodeType":null,"messageId":"783","endLine":528,"endColumn":10},{"ruleId":"781","severity":1,"message":"782","line":529,"column":4,"nodeType":null,"messageId":"783","endLine":529,"endColumn":10},{"ruleId":"813","severity":2,"message":"814","line":25,"column":27,"nodeType":"815","messageId":"816","endLine":25,"endColumn":31,"suppressions":"971"},{"ruleId":"839","severity":2,"message":"840","line":76,"column":8,"nodeType":"841","messageId":"842","endLine":92,"endColumn":10,"suppressions":"972"},{"ruleId":"839","severity":2,"message":"840","line":94,"column":6,"nodeType":"841","messageId":"842","endLine":95,"endColumn":7,"suppressions":"973"},{"ruleId":"839","severity":2,"message":"840","line":98,"column":8,"nodeType":"841","messageId":"842","endLine":98,"endColumn":49,"suppressions":"974"},{"ruleId":"975","severity":2,"message":"976","line":107,"column":24,"nodeType":"952","messageId":"977","endLine":107,"endColumn":43,"suggestions":"978","suppressions":"979"},{"ruleId":"824","severity":2,"message":"980","line":117,"column":6,"nodeType":"821","messageId":"826","endLine":117,"endColumn":24,"suppressions":"981"},{"ruleId":"824","severity":2,"message":"982","line":117,"column":29,"nodeType":"821","messageId":"826","endLine":117,"endColumn":47,"suppressions":"983"},{"ruleId":"975","severity":2,"message":"976","line":130,"column":14,"nodeType":"952","messageId":"977","endLine":130,"endColumn":32,"suggestions":"984","suppressions":"985"},{"ruleId":"975","severity":2,"message":"976","line":132,"column":16,"nodeType":"952","messageId":"977","endLine":132,"endColumn":36,"suggestions":"986","suppressions":"987"},{"ruleId":"824","severity":2,"message":"988","line":144,"column":4,"nodeType":"821","messageId":"826","endLine":144,"endColumn":17,"suppressions":"989"},{"ruleId":"839","severity":2,"message":"840","line":153,"column":8,"nodeType":"990","messageId":"842","endLine":153,"endColumn":72,"suppressions":"991"},{"ruleId":"824","severity":2,"message":"988","line":153,"column":16,"nodeType":"821","messageId":"826","endLine":153,"endColumn":29,"suppressions":"992"},{"ruleId":"824","severity":2,"message":"988","line":153,"column":40,"nodeType":"821","messageId":"826","endLine":153,"endColumn":53,"suppressions":"993"},{"ruleId":"839","severity":2,"message":"840","line":155,"column":8,"nodeType":"990","messageId":"842","endLine":155,"endColumn":63,"suppressions":"994"},{"ruleId":"824","severity":2,"message":"988","line":155,"column":15,"nodeType":"821","messageId":"826","endLine":155,"endColumn":28,"suppressions":"995"},{"ruleId":"824","severity":2,"message":"988","line":155,"column":38,"nodeType":"821","messageId":"826","endLine":155,"endColumn":51,"suppressions":"996"},{"ruleId":"819","severity":2,"message":"997","line":196,"column":42,"nodeType":"778","messageId":"822","endLine":196,"endColumn":48,"suppressions":"998"},{"ruleId":"824","severity":2,"message":"999","line":198,"column":43,"nodeType":"821","messageId":"826","endLine":198,"endColumn":54,"suppressions":"1000"},{"ruleId":"824","severity":2,"message":"999","line":198,"column":72,"nodeType":"821","messageId":"826","endLine":198,"endColumn":83,"suppressions":"1001"},{"ruleId":"801","severity":2,"message":"802","line":198,"column":88,"nodeType":"803","endLine":198,"endColumn":92,"suppressions":"1002"},{"ruleId":"839","severity":2,"message":"840","line":205,"column":4,"nodeType":"990","messageId":"842","endLine":213,"endColumn":25,"suppressions":"1003"},{"ruleId":"824","severity":2,"message":"1004","line":209,"column":12,"nodeType":"821","messageId":"826","endLine":209,"endColumn":29,"suppressions":"1005"},{"ruleId":"801","severity":2,"message":"802","line":211,"column":8,"nodeType":"803","endLine":211,"endColumn":12,"suppressions":"1006"},{"ruleId":"824","severity":2,"message":"1004","line":213,"column":8,"nodeType":"821","messageId":"826","endLine":213,"endColumn":25,"suppressions":"1007"},{"ruleId":"839","severity":2,"message":"840","line":215,"column":4,"nodeType":"990","messageId":"842","endLine":222,"endColumn":17,"suppressions":"1008"},{"ruleId":"824","severity":2,"message":"1004","line":219,"column":12,"nodeType":"821","messageId":"826","endLine":219,"endColumn":29,"suppressions":"1009"},{"ruleId":"824","severity":2,"message":"1004","line":221,"column":8,"nodeType":"821","messageId":"826","endLine":221,"endColumn":25,"suppressions":"1010"},{"ruleId":"801","severity":2,"message":"802","line":225,"column":34,"nodeType":"803","endLine":225,"endColumn":38,"suppressions":"1011"},{"ruleId":"824","severity":2,"message":"1012","line":236,"column":6,"nodeType":"821","messageId":"826","endLine":236,"endColumn":36,"suppressions":"1013"},{"ruleId":"839","severity":2,"message":"840","line":245,"column":4,"nodeType":"990","messageId":"842","endLine":245,"endColumn":39,"suppressions":"1014"},{"ruleId":"824","severity":2,"message":"1012","line":245,"column":9,"nodeType":"821","messageId":"826","endLine":245,"endColumn":39,"suppressions":"1015"},{"ruleId":"801","severity":2,"message":"802","line":247,"column":11,"nodeType":"803","endLine":247,"endColumn":15,"suppressions":"1016"},{"ruleId":"824","severity":2,"message":"869","line":253,"column":25,"nodeType":"821","messageId":"826","endLine":253,"endColumn":32,"suppressions":"1017"},{"ruleId":"824","severity":2,"message":"1018","line":253,"column":25,"nodeType":"821","messageId":"947","endLine":253,"endColumn":32,"suppressions":"1019"},{"ruleId":"824","severity":2,"message":"869","line":282,"column":4,"nodeType":"821","messageId":"826","endLine":282,"endColumn":13,"suppressions":"1020"},{"ruleId":"1021","severity":2,"message":"1022","line":282,"column":4,"nodeType":"778","messageId":"1023","endLine":282,"endColumn":8,"suppressions":"1024"},{"ruleId":"797","severity":2,"message":"836","line":287,"column":53,"nodeType":"821","messageId":"799","endLine":287,"endColumn":62,"suppressions":"1025"},{"ruleId":"824","severity":2,"message":"1026","line":287,"column":53,"nodeType":"821","messageId":"826","endLine":287,"endColumn":62,"suppressions":"1027"},{"ruleId":"801","severity":2,"message":"802","line":326,"column":12,"nodeType":"803","endLine":326,"endColumn":16,"suppressions":"1028"},{"ruleId":"797","severity":2,"message":"1029","line":429,"column":70,"nodeType":"778","messageId":"799","endLine":429,"endColumn":75,"suppressions":"1030"},{"ruleId":"1021","severity":2,"message":"1031","line":456,"column":3,"nodeType":"778","messageId":"1032","endLine":456,"endColumn":4,"suppressions":"1033"},{"ruleId":"1034","severity":2,"message":"1035","line":458,"column":3,"nodeType":"847","messageId":"1036","endLine":458,"endColumn":15,"suppressions":"1037"},{"ruleId":"813","severity":2,"message":"814","line":532,"column":53,"nodeType":"815","messageId":"816","endLine":532,"endColumn":57,"suppressions":"1038"},{"ruleId":"813","severity":2,"message":"814","line":532,"column":75,"nodeType":"815","messageId":"816","endLine":532,"endColumn":79,"suppressions":"1039"},{"ruleId":"813","severity":2,"message":"814","line":542,"column":42,"nodeType":"815","messageId":"816","endLine":542,"endColumn":46,"suppressions":"1040"},{"ruleId":"801","severity":2,"message":"802","line":544,"column":16,"nodeType":"803","endLine":544,"endColumn":20,"suppressions":"1041"},{"ruleId":"801","severity":2,"message":"802","line":546,"column":10,"nodeType":"803","endLine":546,"endColumn":14,"suppressions":"1042"},{"ruleId":"781","severity":1,"message":"782","line":70,"column":5,"nodeType":null,"messageId":"783","endLine":70,"endColumn":11},{"ruleId":"781","severity":1,"message":"782","line":71,"column":5,"nodeType":null,"messageId":"783","endLine":71,"endColumn":11},{"ruleId":"786","severity":1,"message":"787","line":310,"column":15,"nodeType":"788","messageId":"789","endLine":310,"endColumn":18,"suggestions":"1043"},{"ruleId":"781","severity":1,"message":"782","line":464,"column":5,"nodeType":null,"messageId":"783","endLine":464,"endColumn":11},{"ruleId":"781","severity":1,"message":"782","line":465,"column":5,"nodeType":null,"messageId":"783","endLine":465,"endColumn":11},{"ruleId":"781","severity":1,"message":"782","line":466,"column":5,"nodeType":null,"messageId":"783","endLine":466,"endColumn":11},{"ruleId":"786","severity":1,"message":"787","line":513,"column":62,"nodeType":"788","messageId":"789","endLine":513,"endColumn":65,"suggestions":"1044"},{"ruleId":"781","severity":1,"message":"782","line":546,"column":5,"nodeType":null,"messageId":"783","endLine":546,"endColumn":11},{"ruleId":"786","severity":1,"message":"787","line":559,"column":15,"nodeType":"788","messageId":"789","endLine":559,"endColumn":18,"suggestions":"1045"},{"ruleId":"786","severity":1,"message":"787","line":565,"column":15,"nodeType":"788","messageId":"789","endLine":565,"endColumn":18,"suggestions":"1046"},{"ruleId":"786","severity":1,"message":"787","line":571,"column":15,"nodeType":"788","messageId":"789","endLine":571,"endColumn":18,"suggestions":"1047"},{"ruleId":"767","severity":1,"message":"768","line":590,"column":14,"nodeType":"769","messageId":"770","endLine":590,"endColumn":33},{"ruleId":"767","severity":1,"message":"768","line":591,"column":14,"nodeType":"769","messageId":"770","endLine":591,"endColumn":33},{"ruleId":"776","severity":1,"message":"1048","line":601,"column":3,"nodeType":"778","messageId":"779","endLine":601,"endColumn":18},{"ruleId":"786","severity":1,"message":"787","line":603,"column":5,"nodeType":"788","messageId":"789","endLine":603,"endColumn":8,"suggestions":"1049"},{"ruleId":"786","severity":1,"message":"787","line":608,"column":11,"nodeType":"788","messageId":"789","endLine":608,"endColumn":14,"suggestions":"1050"},{"ruleId":"776","severity":1,"message":"1048","line":610,"column":3,"nodeType":"778","messageId":"779","endLine":610,"endColumn":18},{"ruleId":"786","severity":1,"message":"787","line":612,"column":5,"nodeType":"788","messageId":"789","endLine":612,"endColumn":8,"suggestions":"1051"},{"ruleId":"801","severity":2,"message":"802","line":132,"column":63,"nodeType":"803","endLine":132,"endColumn":67,"suppressions":"1052"},{"ruleId":"1053","severity":2,"message":"1054","line":237,"column":3,"nodeType":"1055","messageId":"1056","endLine":240,"endColumn":4,"suppressions":"1057"},{"ruleId":"1058","severity":2,"message":"1059","line":239,"column":4,"nodeType":"1060","messageId":"1061","endLine":239,"endColumn":72,"suppressions":"1062"},{"ruleId":"1063","severity":2,"message":"1059","line":239,"column":4,"nodeType":"1060","messageId":"1061","endLine":239,"endColumn":72,"suppressions":"1064"},{"ruleId":"801","severity":2,"message":"802","line":242,"column":45,"nodeType":"803","endLine":242,"endColumn":49,"suppressions":"1065"},{"ruleId":"1066","severity":2,"message":"1067","line":438,"column":9,"nodeType":"821","messageId":"1068","endLine":438,"endColumn":24,"suppressions":"1069"},{"ruleId":"857","severity":2,"message":"1070","line":581,"column":2,"nodeType":"859","messageId":"860","endLine":581,"endColumn":17,"suppressions":"1071"},{"ruleId":"1072","severity":2,"message":"1073","line":603,"column":9,"nodeType":"859","messageId":"923","endLine":603,"endColumn":11,"suppressions":"1074"},{"ruleId":"1072","severity":2,"message":"1075","line":612,"column":9,"nodeType":"859","messageId":"923","endLine":612,"endColumn":11,"suppressions":"1076"},{"ruleId":"781","severity":1,"message":"793","line":76,"column":13,"nodeType":null,"messageId":"794","endLine":76,"endColumn":14},{"ruleId":"781","severity":1,"message":"795","line":77,"column":25,"nodeType":null,"messageId":"796","endLine":77,"endColumn":26},{"ruleId":"781","severity":1,"message":"1077","line":90,"column":13,"nodeType":null,"messageId":"1078","endLine":90,"endColumn":14},{"ruleId":"781","severity":1,"message":"1077","line":91,"column":59,"nodeType":null,"messageId":"1078","endLine":91,"endColumn":60},{"ruleId":"786","severity":1,"message":"787","line":107,"column":64,"nodeType":"788","messageId":"789","endLine":107,"endColumn":67,"suggestions":"1079"},{"ruleId":"781","severity":1,"message":"1077","line":113,"column":13,"nodeType":null,"messageId":"1078","endLine":113,"endColumn":14},{"ruleId":"781","severity":1,"message":"1077","line":114,"column":58,"nodeType":null,"messageId":"1078","endLine":114,"endColumn":59},{"ruleId":"781","severity":1,"message":"782","line":255,"column":5,"nodeType":null,"messageId":"783","endLine":255,"endColumn":11},{"ruleId":"781","severity":1,"message":"1077","line":268,"column":13,"nodeType":null,"messageId":"1078","endLine":268,"endColumn":14},{"ruleId":"781","severity":1,"message":"1077","line":269,"column":58,"nodeType":null,"messageId":"1078","endLine":269,"endColumn":59},{"ruleId":"781","severity":1,"message":"1077","line":298,"column":13,"nodeType":null,"messageId":"1078","endLine":298,"endColumn":14},{"ruleId":"781","severity":1,"message":"1077","line":299,"column":59,"nodeType":null,"messageId":"1078","endLine":299,"endColumn":60},{"ruleId":"767","severity":1,"message":"768","line":378,"column":5,"nodeType":"769","messageId":"770","endLine":378,"endColumn":7},{"ruleId":"767","severity":1,"message":"768","line":379,"column":32,"nodeType":"769","messageId":"770","endLine":379,"endColumn":34},{"ruleId":"767","severity":1,"message":"768","line":380,"column":32,"nodeType":"769","messageId":"770","endLine":380,"endColumn":34},{"ruleId":"786","severity":1,"message":"787","line":382,"column":15,"nodeType":"788","messageId":"789","endLine":382,"endColumn":18,"suggestions":"1080"},{"ruleId":"781","severity":1,"message":"782","line":444,"column":5,"nodeType":null,"messageId":"783","endLine":444,"endColumn":11},{"ruleId":"1081","severity":2,"message":"1082","line":56,"column":66,"nodeType":"778","messageId":"1083","endLine":56,"endColumn":93,"suppressions":"1084"},{"ruleId":"819","severity":2,"message":"1085","line":107,"column":54,"nodeType":"1086","messageId":"822","endLine":107,"endColumn":67,"suppressions":"1087"},{"ruleId":"781","severity":1,"message":"793","line":75,"column":13,"nodeType":null,"messageId":"794","endLine":75,"endColumn":14},{"ruleId":"781","severity":1,"message":"795","line":76,"column":13,"nodeType":null,"messageId":"796","endLine":76,"endColumn":14},{"ruleId":"781","severity":1,"message":"1077","line":89,"column":13,"nodeType":null,"messageId":"1078","endLine":89,"endColumn":14},{"ruleId":"781","severity":1,"message":"1077","line":90,"column":59,"nodeType":null,"messageId":"1078","endLine":90,"endColumn":60},{"ruleId":"786","severity":1,"message":"787","line":106,"column":65,"nodeType":"788","messageId":"789","endLine":106,"endColumn":68,"suggestions":"1088"},{"ruleId":"781","severity":1,"message":"1077","line":112,"column":13,"nodeType":null,"messageId":"1078","endLine":112,"endColumn":14},{"ruleId":"781","severity":1,"message":"1077","line":113,"column":58,"nodeType":null,"messageId":"1078","endLine":113,"endColumn":59},{"ruleId":"781","severity":1,"message":"1077","line":227,"column":13,"nodeType":null,"messageId":"1078","endLine":227,"endColumn":14},{"ruleId":"781","severity":1,"message":"1077","line":228,"column":58,"nodeType":null,"messageId":"1078","endLine":228,"endColumn":59},{"ruleId":"781","severity":1,"message":"1077","line":256,"column":13,"nodeType":null,"messageId":"1078","endLine":256,"endColumn":14},{"ruleId":"781","severity":1,"message":"1077","line":257,"column":59,"nodeType":null,"messageId":"1078","endLine":257,"endColumn":60},{"ruleId":"767","severity":1,"message":"768","line":336,"column":5,"nodeType":"769","messageId":"770","endLine":336,"endColumn":7},{"ruleId":"767","severity":1,"message":"768","line":337,"column":32,"nodeType":"769","messageId":"770","endLine":337,"endColumn":34},{"ruleId":"767","severity":1,"message":"768","line":338,"column":32,"nodeType":"769","messageId":"770","endLine":338,"endColumn":34},{"ruleId":"786","severity":1,"message":"787","line":340,"column":15,"nodeType":"788","messageId":"789","endLine":340,"endColumn":18,"suggestions":"1089"},{"ruleId":"781","severity":1,"message":"782","line":401,"column":5,"nodeType":null,"messageId":"783","endLine":401,"endColumn":11},{"ruleId":"1081","severity":2,"message":"1090","line":56,"column":67,"nodeType":"778","messageId":"1083","endLine":56,"endColumn":95,"suppressions":"1091"},{"ruleId":"819","severity":2,"message":"1092","line":106,"column":55,"nodeType":"1086","messageId":"822","endLine":106,"endColumn":68,"suppressions":"1093"},{"ruleId":"781","severity":1,"message":"793","line":57,"column":13,"nodeType":null,"messageId":"794","endLine":57,"endColumn":14},{"ruleId":"781","severity":1,"message":"795","line":57,"column":67,"nodeType":null,"messageId":"796","endLine":57,"endColumn":68},{"ruleId":"767","severity":1,"message":"768","line":149,"column":21,"nodeType":"769","messageId":"770","endLine":149,"endColumn":28},{"ruleId":"767","severity":1,"message":"768","line":318,"column":5,"nodeType":"769","messageId":"770","endLine":318,"endColumn":7},{"ruleId":"767","severity":1,"message":"768","line":319,"column":32,"nodeType":"769","messageId":"770","endLine":319,"endColumn":34},{"ruleId":"767","severity":1,"message":"768","line":320,"column":32,"nodeType":"769","messageId":"770","endLine":320,"endColumn":34},{"ruleId":"786","severity":1,"message":"787","line":325,"column":15,"nodeType":"788","messageId":"789","endLine":325,"endColumn":18,"suggestions":"1094"},{"ruleId":"781","severity":1,"message":"782","line":433,"column":5,"nodeType":null,"messageId":"783","endLine":433,"endColumn":11},{"ruleId":"1081","severity":2,"message":"1095","line":49,"column":50,"nodeType":"778","messageId":"1083","endLine":49,"endColumn":61,"suppressions":"1096"},{"ruleId":"1097","severity":2,"message":"1098","line":149,"column":5,"nodeType":"1099","messageId":"1100","endLine":151,"endColumn":6,"suppressions":"1101"},{"ruleId":"1102","severity":2,"message":"1103","line":37,"column":14,"nodeType":"778","messageId":"1104","endLine":37,"endColumn":32,"suppressions":"1105"},{"ruleId":"1106","severity":2,"message":"1107","line":40,"column":2,"nodeType":"1108","messageId":"1109","endLine":40,"endColumn":26,"suppressions":"1110"},{"ruleId":"1072","severity":2,"message":"1111","line":40,"column":24,"nodeType":"859","messageId":"923","endLine":40,"endColumn":26,"suppressions":"1112"},{"ruleId":"1113","severity":2,"message":"1114","line":76,"column":5,"nodeType":"1115","messageId":"1116","endLine":76,"endColumn":36,"suppressions":"1117"},{"ruleId":"1113","severity":2,"message":"1118","line":83,"column":5,"nodeType":"1115","messageId":"1116","endLine":83,"endColumn":35,"suppressions":"1119"},{"ruleId":"1120","severity":2,"message":"1121","line":21,"column":1,"nodeType":"1122","endLine":21,"endColumn":74,"fix":"1123","suppressions":"1124"},{"ruleId":"813","severity":2,"message":"814","line":141,"column":36,"nodeType":"815","messageId":"816","endLine":141,"endColumn":40,"suppressions":"1125"},{"ruleId":"813","severity":2,"message":"814","line":198,"column":51,"nodeType":"815","messageId":"816","endLine":198,"endColumn":55,"suppressions":"1126"},{"ruleId":"813","severity":2,"message":"814","line":210,"column":21,"nodeType":"815","messageId":"816","endLine":210,"endColumn":25,"suppressions":"1127"},{"ruleId":"786","severity":1,"message":"787","line":90,"column":9,"nodeType":"788","messageId":"789","endLine":90,"endColumn":12,"suggestions":"1128"},{"ruleId":"786","severity":1,"message":"787","line":118,"column":15,"nodeType":"788","messageId":"789","endLine":118,"endColumn":18,"suggestions":"1129"},{"ruleId":"1053","severity":2,"message":"1054","line":44,"column":3,"nodeType":"1055","messageId":"1056","endLine":53,"endColumn":4,"suppressions":"1130"},{"ruleId":"1053","severity":2,"message":"1054","line":49,"column":4,"nodeType":"1055","messageId":"1056","endLine":51,"endColumn":5,"suppressions":"1131"},{"ruleId":"1053","severity":2,"message":"1054","line":60,"column":3,"nodeType":"1055","messageId":"1056","endLine":73,"endColumn":4,"suppressions":"1132"},{"ruleId":"1053","severity":2,"message":"1054","line":65,"column":4,"nodeType":"1055","messageId":"1056","endLine":67,"endColumn":5,"suppressions":"1133"},{"ruleId":"1053","severity":2,"message":"1054","line":85,"column":2,"nodeType":"1055","messageId":"1056","endLine":106,"endColumn":3,"suppressions":"1134"},{"ruleId":"824","severity":2,"message":"1135","line":90,"column":7,"nodeType":"821","messageId":"826","endLine":90,"endColumn":31,"suppressions":"1136"},{"ruleId":"1113","severity":2,"message":"1137","line":90,"column":8,"nodeType":"1115","messageId":"1116","endLine":90,"endColumn":27,"suppressions":"1138"},{"ruleId":"1053","severity":2,"message":"1054","line":99,"column":3,"nodeType":"1055","messageId":"1056","endLine":105,"endColumn":4,"suppressions":"1139"},{"ruleId":"1053","severity":2,"message":"1054","line":117,"column":2,"nodeType":"1055","messageId":"1056","endLine":132,"endColumn":3,"suppressions":"1140"},{"ruleId":"1113","severity":2,"message":"1141","line":121,"column":38,"nodeType":"1115","messageId":"1116","endLine":121,"endColumn":57,"suppressions":"1142"},{"ruleId":"824","severity":2,"message":"1143","line":121,"column":50,"nodeType":"821","messageId":"826","endLine":121,"endColumn":57,"suppressions":"1144"},{"ruleId":"839","severity":2,"message":"840","line":125,"column":9,"nodeType":"841","messageId":"842","endLine":125,"endColumn":53,"suppressions":"1145"},{"ruleId":"1146","severity":2,"message":"1147","line":125,"column":38,"nodeType":"855","messageId":"1148","endLine":125,"endColumn":53,"suggestions":"1149","suppressions":"1150"},{"ruleId":"824","severity":2,"message":"1151","line":125,"column":46,"nodeType":"821","messageId":"826","endLine":125,"endColumn":53,"suppressions":"1152"},{"ruleId":"1053","severity":2,"message":"1054","line":127,"column":3,"nodeType":"1055","messageId":"1056","endLine":130,"endColumn":4,"suppressions":"1153"},{"ruleId":"1053","severity":2,"message":"1054","line":142,"column":2,"nodeType":"1055","messageId":"1056","endLine":146,"endColumn":3,"suppressions":"1154"},{"ruleId":"813","severity":2,"message":"814","line":69,"column":33,"nodeType":"815","messageId":"816","endLine":69,"endColumn":37,"suppressions":"1155"},{"ruleId":"813","severity":2,"message":"814","line":72,"column":31,"nodeType":"815","messageId":"816","endLine":72,"endColumn":35,"suppressions":"1156"},{"ruleId":"786","severity":1,"message":"787","line":88,"column":18,"nodeType":"788","messageId":"789","endLine":88,"endColumn":21,"suggestions":"1157","suppressions":"1158"},{"ruleId":"1159","severity":2,"message":"1160","line":21,"column":1,"nodeType":"1122","endLine":26,"endColumn":28,"suppressions":"1161"},{"ruleId":"1159","severity":2,"message":"1162","line":29,"column":1,"nodeType":"1122","endLine":29,"endColumn":49,"suppressions":"1163"},{"ruleId":"1159","severity":2,"message":"1164","line":31,"column":1,"nodeType":"1122","endLine":31,"endColumn":66,"suppressions":"1165"},{"ruleId":"1159","severity":2,"message":"1166","line":33,"column":1,"nodeType":"1122","endLine":33,"endColumn":41,"suppressions":"1167"},{"ruleId":"1159","severity":2,"message":"1168","line":55,"column":1,"nodeType":"1122","endLine":55,"endColumn":46,"suppressions":"1169"},{"ruleId":"1159","severity":2,"message":"1170","line":57,"column":1,"nodeType":"1122","endLine":57,"endColumn":25,"suppressions":"1171"},{"ruleId":"1159","severity":2,"message":"1172","line":60,"column":1,"nodeType":"1122","endLine":60,"endColumn":60,"suppressions":"1173"},{"ruleId":"1159","severity":2,"message":"1174","line":62,"column":1,"nodeType":"1122","endLine":62,"endColumn":48,"suppressions":"1175"},{"ruleId":"1176","severity":2,"message":"1177","line":72,"column":2,"nodeType":"1178","messageId":"1179","endLine":72,"endColumn":21,"suppressions":"1180"},{"ruleId":"935","severity":2,"message":"936","line":74,"column":2,"nodeType":"1181","messageId":"938","endLine":74,"endColumn":56,"suppressions":"1182"},{"ruleId":"885","severity":2,"message":"886","line":74,"column":19,"nodeType":"821","messageId":"887","endLine":74,"endColumn":30,"suppressions":"1183"},{"ruleId":"1184","severity":2,"message":"1185","line":152,"column":4,"nodeType":"1186","messageId":"1187","endLine":152,"endColumn":20,"suppressions":"1188"},{"ruleId":"1021","severity":2,"message":"1189","line":152,"column":4,"nodeType":"778","messageId":"1032","endLine":152,"endColumn":18,"suppressions":"1190"},{"ruleId":"1191","severity":2,"message":"1192","line":491,"column":4,"nodeType":"1193","messageId":"1194","endLine":496,"endColumn":6,"suppressions":"1195"},{"ruleId":"935","severity":2,"message":"936","line":505,"column":2,"nodeType":"952","messageId":"938","endLine":508,"endColumn":3,"suppressions":"1196"},{"ruleId":"935","severity":2,"message":"936","line":507,"column":38,"nodeType":"1181","messageId":"938","endLine":507,"endColumn":90,"suppressions":"1197"},{"ruleId":"1198","severity":2,"message":"1199","line":254,"column":12,"nodeType":"952","messageId":"1200","endLine":256,"endColumn":6,"suppressions":"1201"},{"ruleId":"1198","severity":2,"message":"1199","line":266,"column":5,"nodeType":"952","messageId":"1200","endLine":266,"endColumn":62,"suppressions":"1202"},{"ruleId":"1198","severity":2,"message":"1199","line":268,"column":5,"nodeType":"952","messageId":"1200","endLine":270,"endColumn":6,"suppressions":"1203"},{"ruleId":"1198","severity":2,"message":"1199","line":280,"column":5,"nodeType":"952","messageId":"1200","endLine":280,"endColumn":53,"suppressions":"1204"},{"ruleId":"1198","severity":2,"message":"1199","line":282,"column":5,"nodeType":"952","messageId":"1200","endLine":282,"endColumn":82,"suppressions":"1205"},{"ruleId":"1198","severity":2,"message":"1199","line":292,"column":12,"nodeType":"952","messageId":"1200","endLine":294,"endColumn":6,"suppressions":"1206"},{"ruleId":"1207","severity":1,"message":"1208","line":232,"column":4,"nodeType":"952","messageId":"1209","endLine":234,"endColumn":6},{"ruleId":"781","severity":1,"message":"1210","line":2,"column":4,"nodeType":null,"messageId":"1211","endLine":2,"endColumn":5},{"ruleId":"1207","severity":1,"message":"1208","line":243,"column":4,"nodeType":"952","messageId":"1209","endLine":245,"endColumn":6},{"ruleId":"1212","severity":2,"message":"1213","line":27,"column":1,"nodeType":null,"endLine":249,"endColumn":1,"fix":"1214","suppressions":"1215"},{"ruleId":"1216","severity":2,"message":"1217","line":35,"column":1,"nodeType":"1122","endLine":35,"endColumn":38,"fix":"1218","suppressions":"1219"},{"ruleId":"1216","severity":2,"message":"1217","line":36,"column":1,"nodeType":"1122","endLine":36,"endColumn":66,"fix":"1220","suppressions":"1221"},{"ruleId":"1216","severity":2,"message":"1217","line":37,"column":1,"nodeType":"1122","endLine":49,"endColumn":28,"fix":"1222","suppressions":"1223"},{"ruleId":"1216","severity":2,"message":"1217","line":50,"column":1,"nodeType":"1122","endLine":65,"endColumn":30,"fix":"1224","suppressions":"1225"},{"ruleId":"1216","severity":2,"message":"1217","line":66,"column":1,"nodeType":"1122","endLine":66,"endColumn":70,"fix":"1226","suppressions":"1227"},{"ruleId":"1216","severity":2,"message":"1217","line":67,"column":1,"nodeType":"1122","endLine":67,"endColumn":45,"fix":"1228","suppressions":"1229"},{"ruleId":"963","severity":1,"message":"964","line":52,"column":11,"nodeType":"859","messageId":"965","endLine":52,"endColumn":20},{"ruleId":"963","severity":1,"message":"964","line":58,"column":7,"nodeType":"859","messageId":"965","endLine":58,"endColumn":16},{"ruleId":"1230","severity":2,"message":"1231","line":54,"column":4,"nodeType":"1060","messageId":"1232","endLine":54,"endColumn":46,"suppressions":"1233"},{"ruleId":"1230","severity":2,"message":"1231","line":60,"column":4,"nodeType":"1060","messageId":"1232","endLine":60,"endColumn":70,"suppressions":"1234"},{"ruleId":"1072","severity":2,"message":"1235","line":105,"column":38,"nodeType":"773","messageId":"923","endLine":105,"endColumn":40,"suppressions":"1236"},{"ruleId":"1072","severity":2,"message":"1235","line":107,"column":38,"nodeType":"773","messageId":"923","endLine":107,"endColumn":40,"suppressions":"1237"},{"ruleId":"767","severity":1,"message":"768","line":30,"column":10,"nodeType":"769","messageId":"770","endLine":30,"endColumn":29,"suggestions":"1238"},{"ruleId":"767","severity":1,"message":"768","line":104,"column":10,"nodeType":"769","messageId":"770","endLine":104,"endColumn":28},{"ruleId":"767","severity":1,"message":"768","line":108,"column":10,"nodeType":"769","messageId":"770","endLine":108,"endColumn":28},{"ruleId":"767","severity":1,"message":"768","line":116,"column":10,"nodeType":"769","messageId":"770","endLine":116,"endColumn":28},{"ruleId":"767","severity":1,"message":"768","line":125,"column":10,"nodeType":"769","messageId":"770","endLine":125,"endColumn":28},{"ruleId":"1230","severity":2,"message":"1231","line":38,"column":4,"nodeType":"1060","messageId":"1232","endLine":38,"endColumn":39,"suppressions":"1239"},{"ruleId":"1230","severity":2,"message":"1231","line":91,"column":4,"nodeType":"1060","messageId":"1232","endLine":91,"endColumn":60,"suppressions":"1240"},{"ruleId":"801","severity":2,"message":"802","line":141,"column":31,"nodeType":"803","endLine":141,"endColumn":35,"suppressions":"1241"},{"ruleId":"801","severity":2,"message":"802","line":156,"column":32,"nodeType":"803","endLine":156,"endColumn":36,"suppressions":"1242"},{"ruleId":"767","severity":1,"message":"768","line":74,"column":10,"nodeType":"769","messageId":"770","endLine":74,"endColumn":27},{"ruleId":"1230","severity":2,"message":"1231","line":29,"column":4,"nodeType":"1060","messageId":"1232","endLine":29,"endColumn":76,"suppressions":"1243"},{"ruleId":"1230","severity":2,"message":"1231","line":35,"column":4,"nodeType":"1060","messageId":"1232","endLine":35,"endColumn":76,"suppressions":"1244"},{"ruleId":"1230","severity":2,"message":"1231","line":44,"column":4,"nodeType":"1060","messageId":"1232","endLine":44,"endColumn":47,"suppressions":"1245"},{"ruleId":"767","severity":1,"message":"768","line":112,"column":10,"nodeType":"769","messageId":"770","endLine":112,"endColumn":46},{"ruleId":"767","severity":1,"message":"768","line":117,"column":10,"nodeType":"769","messageId":"770","endLine":117,"endColumn":28},{"ruleId":"767","severity":1,"message":"768","line":120,"column":10,"nodeType":"769","messageId":"770","endLine":120,"endColumn":28},{"ruleId":"767","severity":1,"message":"768","line":123,"column":10,"nodeType":"769","messageId":"770","endLine":123,"endColumn":43},{"ruleId":"767","severity":1,"message":"768","line":124,"column":10,"nodeType":"769","messageId":"770","endLine":124,"endColumn":43},{"ruleId":"767","severity":1,"message":"768","line":149,"column":10,"nodeType":"769","messageId":"770","endLine":149,"endColumn":43},{"ruleId":"767","severity":1,"message":"768","line":151,"column":10,"nodeType":"769","messageId":"770","endLine":151,"endColumn":66},{"ruleId":"767","severity":1,"message":"768","line":154,"column":10,"nodeType":"769","messageId":"770","endLine":154,"endColumn":61},{"ruleId":"767","severity":1,"message":"768","line":157,"column":10,"nodeType":"769","messageId":"770","endLine":157,"endColumn":43},{"ruleId":"767","severity":1,"message":"768","line":285,"column":15,"nodeType":"769","messageId":"770","endLine":285,"endColumn":51},{"ruleId":"913","severity":2,"message":"1246","line":136,"column":12,"nodeType":"778","messageId":"915","endLine":136,"endColumn":27,"suppressions":"1247"},{"ruleId":"913","severity":2,"message":"1246","line":138,"column":12,"nodeType":"778","messageId":"915","endLine":138,"endColumn":27,"suppressions":"1248"},{"ruleId":"913","severity":2,"message":"1246","line":142,"column":12,"nodeType":"778","messageId":"915","endLine":142,"endColumn":27,"suppressions":"1249"},{"ruleId":"913","severity":2,"message":"1246","line":144,"column":12,"nodeType":"778","messageId":"915","endLine":144,"endColumn":27,"suppressions":"1250"},{"ruleId":"913","severity":2,"message":"1251","line":163,"column":12,"nodeType":"778","messageId":"915","endLine":163,"endColumn":31,"suppressions":"1252"},{"ruleId":"913","severity":2,"message":"1251","line":165,"column":12,"nodeType":"778","messageId":"915","endLine":165,"endColumn":31,"suppressions":"1253"},{"ruleId":"913","severity":2,"message":"1251","line":167,"column":12,"nodeType":"778","messageId":"915","endLine":167,"endColumn":31,"suppressions":"1254"},{"ruleId":"913","severity":2,"message":"1251","line":169,"column":12,"nodeType":"778","messageId":"915","endLine":169,"endColumn":31,"suppressions":"1255"},{"ruleId":"913","severity":2,"message":"1251","line":171,"column":12,"nodeType":"778","messageId":"915","endLine":171,"endColumn":31,"suppressions":"1256"},{"ruleId":"801","severity":2,"message":"802","line":184,"column":36,"nodeType":"803","endLine":184,"endColumn":40,"suppressions":"1257"},{"ruleId":"801","severity":2,"message":"802","line":188,"column":36,"nodeType":"803","endLine":188,"endColumn":40,"suppressions":"1258"},{"ruleId":"801","severity":2,"message":"802","line":190,"column":36,"nodeType":"803","endLine":190,"endColumn":40,"suppressions":"1259"},{"ruleId":"801","severity":2,"message":"802","line":205,"column":32,"nodeType":"803","endLine":205,"endColumn":36,"suppressions":"1260"},{"ruleId":"801","severity":2,"message":"802","line":209,"column":32,"nodeType":"803","endLine":209,"endColumn":36,"suppressions":"1261"},{"ruleId":"801","severity":2,"message":"802","line":211,"column":32,"nodeType":"803","endLine":211,"endColumn":36,"suppressions":"1262"},{"ruleId":"1263","severity":2,"message":"1264","line":268,"column":12,"nodeType":"773","messageId":"1265","endLine":268,"endColumn":14,"suppressions":"1266"},{"ruleId":"1021","severity":2,"message":"1267","line":270,"column":5,"nodeType":"778","messageId":"1023","endLine":270,"endColumn":7,"suppressions":"1268"},{"ruleId":"801","severity":2,"message":"802","line":270,"column":16,"nodeType":"803","endLine":270,"endColumn":20,"suppressions":"1269"},{"ruleId":"1021","severity":2,"message":"1267","line":272,"column":5,"nodeType":"778","messageId":"1023","endLine":272,"endColumn":7,"suppressions":"1270"},{"ruleId":"771","severity":1,"message":"1271","line":165,"column":66,"nodeType":"773","messageId":"774","endLine":165,"endColumn":68},{"ruleId":"767","severity":1,"message":"768","line":250,"column":3,"nodeType":"769","messageId":"770","endLine":250,"endColumn":70,"suggestions":"1272"},{"ruleId":"1230","severity":2,"message":"1231","line":161,"column":4,"nodeType":"1060","messageId":"1232","endLine":161,"endColumn":83,"suppressions":"1273"},{"ruleId":"801","severity":2,"message":"802","line":177,"column":81,"nodeType":"803","endLine":177,"endColumn":85,"suppressions":"1274"},{"ruleId":"801","severity":2,"message":"802","line":180,"column":19,"nodeType":"803","endLine":180,"endColumn":23,"suppressions":"1275"},{"ruleId":"801","severity":2,"message":"802","line":224,"column":81,"nodeType":"803","endLine":224,"endColumn":85,"suppressions":"1276"},{"ruleId":"801","severity":2,"message":"802","line":75,"column":12,"nodeType":"803","endLine":75,"endColumn":16,"suppressions":"1277"},{"ruleId":"801","severity":2,"message":"802","line":114,"column":12,"nodeType":"803","endLine":114,"endColumn":16,"suppressions":"1278"},{"ruleId":"1021","severity":2,"message":"1279","line":127,"column":5,"nodeType":"778","messageId":"1032","endLine":127,"endColumn":8,"suppressions":"1280"},{"ruleId":"1021","severity":2,"message":"1279","line":137,"column":5,"nodeType":"778","messageId":"1032","endLine":137,"endColumn":8,"suppressions":"1281"},{"ruleId":"771","severity":1,"message":"1271","line":138,"column":86,"nodeType":"773","messageId":"774","endLine":138,"endColumn":88},{"ruleId":"963","severity":1,"message":"964","line":33,"column":25,"nodeType":"859","messageId":"965","endLine":33,"endColumn":34},{"ruleId":"1282","severity":2,"message":"1283","line":45,"column":8,"nodeType":"778","messageId":"1284","endLine":45,"endColumn":14,"suppressions":"1285"},{"ruleId":"1286","severity":2,"message":"1287","line":227,"column":6,"nodeType":"952","messageId":"1288","endLine":227,"endColumn":58,"suppressions":"1289"},{"ruleId":"885","severity":2,"message":"886","line":345,"column":4,"nodeType":"821","messageId":"887","endLine":345,"endColumn":47,"suppressions":"1290"},{"ruleId":"885","severity":2,"message":"886","line":350,"column":4,"nodeType":"821","messageId":"887","endLine":350,"endColumn":47,"suppressions":"1291"},{"ruleId":"885","severity":2,"message":"886","line":355,"column":4,"nodeType":"821","messageId":"887","endLine":355,"endColumn":47,"suppressions":"1292"},{"ruleId":"885","severity":2,"message":"886","line":360,"column":4,"nodeType":"821","messageId":"887","endLine":360,"endColumn":47,"suppressions":"1293"},{"ruleId":"885","severity":2,"message":"886","line":365,"column":4,"nodeType":"821","messageId":"887","endLine":365,"endColumn":47,"suppressions":"1294"},{"ruleId":"1072","severity":2,"message":"1235","line":67,"column":10,"nodeType":"773","messageId":"923","endLine":67,"endColumn":12,"suppressions":"1295"},{"ruleId":"1053","severity":2,"message":"1054","line":106,"column":3,"nodeType":"1055","messageId":"1056","endLine":115,"endColumn":4,"suppressions":"1296"},{"ruleId":"767","severity":1,"message":"768","line":259,"column":23,"nodeType":"769","messageId":"770","endLine":259,"endColumn":26,"suggestions":"1297"},{"ruleId":"1053","severity":2,"message":"1054","line":69,"column":2,"nodeType":"1055","messageId":"1056","endLine":80,"endColumn":3,"suppressions":"1298"},{"ruleId":"1021","severity":2,"message":"1299","line":71,"column":3,"nodeType":"778","messageId":"1023","endLine":71,"endColumn":10,"suppressions":"1300"},{"ruleId":"1301","severity":2,"message":"1302","line":88,"column":11,"nodeType":"847","messageId":"1303","endLine":88,"endColumn":29,"suppressions":"1304"},{"ruleId":"1021","severity":2,"message":"1305","line":88,"column":11,"nodeType":"778","messageId":"1032","endLine":88,"endColumn":15,"suppressions":"1306"},{"ruleId":"920","severity":2,"message":"1307","line":90,"column":16,"nodeType":"922","messageId":"923","endLine":90,"endColumn":30,"suppressions":"1308"},{"ruleId":"920","severity":2,"message":"921","line":90,"column":21,"nodeType":"922","messageId":"923","endLine":90,"endColumn":29,"suppressions":"1309"},{"ruleId":"920","severity":2,"message":"1310","line":90,"column":32,"nodeType":"922","messageId":"923","endLine":90,"endColumn":37,"suppressions":"1311"},{"ruleId":"920","severity":2,"message":"1312","line":92,"column":2,"nodeType":"847","messageId":"923","endLine":92,"endColumn":43,"suppressions":"1313"},{"ruleId":"920","severity":2,"message":"1307","line":92,"column":21,"nodeType":"922","messageId":"923","endLine":92,"endColumn":34,"suppressions":"1314"},{"ruleId":"920","severity":2,"message":"921","line":92,"column":26,"nodeType":"922","messageId":"923","endLine":92,"endColumn":33,"suppressions":"1315"},{"ruleId":"920","severity":2,"message":"1310","line":92,"column":36,"nodeType":"922","messageId":"923","endLine":92,"endColumn":42,"suppressions":"1316"},{"ruleId":"920","severity":2,"message":"921","line":94,"column":10,"nodeType":"922","messageId":"923","endLine":94,"endColumn":32,"suppressions":"1317"},{"ruleId":"920","severity":2,"message":"1307","line":94,"column":11,"nodeType":"922","messageId":"923","endLine":94,"endColumn":25,"suppressions":"1318"},{"ruleId":"920","severity":2,"message":"921","line":94,"column":16,"nodeType":"922","messageId":"923","endLine":94,"endColumn":24,"suppressions":"1319"},{"ruleId":"1113","severity":2,"message":"1137","line":182,"column":20,"nodeType":"1115","messageId":"1116","endLine":182,"endColumn":34,"suppressions":"1320"},{"ruleId":"1321","severity":2,"message":"1322","line":184,"column":5,"nodeType":"1323","messageId":"1324","endLine":207,"endColumn":6,"suppressions":"1325"},{"ruleId":"1286","severity":2,"message":"1287","line":187,"column":7,"nodeType":"952","messageId":"1288","endLine":189,"endColumn":18,"suppressions":"1326"},{"ruleId":"1286","severity":2,"message":"1287","line":193,"column":7,"nodeType":"952","messageId":"1288","endLine":197,"endColumn":18,"suppressions":"1327"},{"ruleId":"1286","severity":2,"message":"1287","line":201,"column":7,"nodeType":"952","messageId":"1288","endLine":205,"endColumn":18,"suppressions":"1328"},{"ruleId":"1113","severity":2,"message":"1137","line":245,"column":19,"nodeType":"1115","messageId":"1116","endLine":245,"endColumn":45,"suppressions":"1329"},{"ruleId":"885","severity":2,"message":"886","line":249,"column":12,"nodeType":"821","messageId":"887","endLine":249,"endColumn":19,"suppressions":"1330"},{"ruleId":"885","severity":2,"message":"886","line":255,"column":12,"nodeType":"821","messageId":"887","endLine":255,"endColumn":19,"suppressions":"1331"},{"ruleId":"885","severity":2,"message":"886","line":259,"column":23,"nodeType":"821","messageId":"887","endLine":259,"endColumn":30,"suppressions":"1332"},{"ruleId":"1321","severity":2,"message":"1322","line":268,"column":5,"nodeType":"1323","messageId":"1324","endLine":285,"endColumn":6,"suppressions":"1333"},{"ruleId":"1286","severity":2,"message":"1287","line":271,"column":7,"nodeType":"952","messageId":"1288","endLine":275,"endColumn":18,"suppressions":"1334"},{"ruleId":"1286","severity":2,"message":"1287","line":279,"column":7,"nodeType":"952","messageId":"1288","endLine":283,"endColumn":18,"suppressions":"1335"},{"ruleId":"767","severity":1,"message":"768","line":113,"column":10,"nodeType":"769","messageId":"770","endLine":113,"endColumn":15,"suggestions":"1336"},{"ruleId":"1072","severity":2,"message":"1235","line":56,"column":10,"nodeType":"773","messageId":"923","endLine":56,"endColumn":12,"suppressions":"1337"},{"ruleId":"1113","severity":2,"message":"1137","line":338,"column":49,"nodeType":"1115","messageId":"1116","endLine":338,"endColumn":60,"suppressions":"1338"},{"ruleId":"1113","severity":2,"message":"1137","line":344,"column":45,"nodeType":"1115","messageId":"1116","endLine":344,"endColumn":87,"suppressions":"1339"},{"ruleId":"1113","severity":2,"message":"1137","line":352,"column":52,"nodeType":"1115","messageId":"1116","endLine":352,"endColumn":63,"suppressions":"1340"},{"ruleId":"1113","severity":2,"message":"1137","line":362,"column":48,"nodeType":"1115","messageId":"1116","endLine":362,"endColumn":59,"suppressions":"1341"},{"ruleId":"767","severity":1,"message":"768","line":529,"column":16,"nodeType":"769","messageId":"770","endLine":529,"endColumn":25},{"ruleId":"767","severity":1,"message":"768","line":530,"column":16,"nodeType":"769","messageId":"770","endLine":530,"endColumn":25},{"ruleId":"767","severity":1,"message":"768","line":531,"column":16,"nodeType":"769","messageId":"770","endLine":531,"endColumn":25},{"ruleId":"1072","severity":2,"message":"1235","line":125,"column":10,"nodeType":"773","messageId":"923","endLine":125,"endColumn":12,"suppressions":"1342"},{"ruleId":"1113","severity":2,"message":"1137","line":489,"column":16,"nodeType":"1115","messageId":"1116","endLine":489,"endColumn":42,"suppressions":"1343"},"@typescript-eslint/no-non-null-assertion","Forbidden non-null assertion.","TSNonNullExpression","noNonNull","@typescript-eslint/require-await","Async arrow function 'signTransaction' has no 'await' expression.","ArrowFunctionExpression","missingAwait",["1344"],"@typescript-eslint/no-unused-vars","'_tx' is defined but never used.","Identifier","unusedVar",["1345"],"tsdoc/syntax","tsdoc-param-tag-missing-hyphen: The @param block should be followed by a parameter name and then a hyphen","tsdoc-param-tag-missing-hyphen","tsdoc-param-tag-with-invalid-type: The @param block should not include a JSDoc-style '{type}'","tsdoc-param-tag-with-invalid-type","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["1346","1347"],"tsdoc-missing-deprecation-message: The @deprecated block must include a deprecation message, e.g. describing the recommended alternative","tsdoc-missing-deprecation-message","tsdoc-malformed-inline-tag: Expecting a TSDoc tag starting with \"{@\"","tsdoc-malformed-inline-tag","tsdoc-escape-right-brace: The \"}\" character should be escaped using a backslash to avoid confusion with a TSDoc inline tag","tsdoc-escape-right-brace","@typescript-eslint/restrict-template-expressions","Invalid type \"never\" of template literal expression.","invalidType",["1348"],"no-null/no-null","Use undefined instead of null","Literal",["1349"],["1350"],["1351"],["1352"],["1353"],["1354"],["1355"],["1356"],["1357"],"@typescript-eslint/ban-types","Don't use `null` as a type. Use 'undefined' instead of 'null'","TSNullKeyword","bannedTypeMessage",["1358"],["1359"],"@typescript-eslint/no-unsafe-argument","Unsafe argument of type `any` assigned to a parameter of type `string`.","MemberExpression","unsafeArgument",["1360"],"@typescript-eslint/no-unsafe-member-access","Unsafe member access .minimumHardfork on an `any` value.","unsafeMemberExpression",["1361"],"Invalid type \"false\" of template literal expression.",["1362"],"Unsafe member access .requiredEIPs on an `any` value.",["1363"],["1364"],"Unsafe argument of type `any` assigned to a parameter of type `number`.",["1365"],["1366"],"Invalid type \"any\" of template literal expression.",["1367"],["1368"],"@typescript-eslint/no-unsafe-assignment","Unsafe assignment of an `any` value.","VariableDeclarator","anyAssignment",["1369"],"Unsafe member access .eips on an `any` value.",["1370"],["1371"],"AssignmentExpression",["1372"],"Unsafe member access [topic] on an `any` value.",["1373"],["1374"],["1375"],["1376"],"Unsafe argument of type `any` assigned to a parameter of type `string | number | bigint | boolean`.","LogicalExpression",["1377"],"class-methods-use-this","Expected 'this' to be used by class method 'paramByEIP'.","FunctionExpression","missingThis",["1378"],["1379"],["1380"],["1381"],["1382"],["1383"],["1384"],["1385"],"Unsafe member access .name on an `any` value.",["1386"],["1387"],["1388"],["1389"],["1390"],["1391"],["1392"],["1393"],["1394"],["1395"],["1396"],["1397"],["1398"],["1399"],["1400"],"@typescript-eslint/no-unsafe-call","Unsafe call of an `any` typed value.","unsafeCall",["1401"],["1402"],["1403"],["1404"],["1405"],["1406"],["1407"],["1408"],["1409"],["1410"],["1411"],["1412"],["1413"],["1414"],["1415"],["1416"],["1417"],["1418"],["1419"],["1420"],["1421"],["1422"],["1423"],["1424"],["1425"],"deprecation/deprecation","'nextHardforkBlock' is deprecated. ","deprecated",["1426"],["1427"],["1428"],["1429"],"no-bitwise","Unexpected use of '>>>'.","BinaryExpression","unexpected",["1430"],["1431"],["1432"],["1433"],["1434"],["1435"],["1436"],["1437"],["1438"],"Unsafe member access .consensus on an `any` value.",["1439"],"@typescript-eslint/no-unsafe-return","Unsafe return of an `any` typed value.","ReturnStatement","unsafeReturn",["1440"],["1441"],["1442"],["1443"],["1444"],["1445"],["1446"],"Computed name [hfChanges[1].consensus.algorithm] resolves to an any value.","unsafeComputedMemberAccess",["1447"],["1448"],["1449"],"Unsafe argument of type `any` assigned to a parameter of type `object | null`.","CallExpression",["1450"],"Unsafe member access .removeAllListeners on an `any` value.",["1451"],["1452"],["1453"],["1454"],["1455"],["1456"],"tsdoc-undefined-tag: The TSDoc tag \"@return\" is not defined in this configuration","tsdoc-undefined-tag","func-names","Unexpected unnamed function.","unnamed",["1457","1458"],["1459","1460"],["1461","1462"],["1463","1464"],["1465","1466"],["1467"],["1468"],["1469"],["1470"],"radix","Missing radix parameter.","missingRadix",["1471"],["1472"],"Unsafe member access .eip155Block on an `any` value.",["1473"],"Unsafe member access .eip158Block on an `any` value.",["1474"],["1475"],["1476"],["1477"],["1478"],"Unsafe member access .clique on an `any` value.",["1479"],"Property",["1480"],["1481"],["1482"],["1483"],["1484"],["1485"],"Unsafe argument of type `any` assigned to a parameter of type `{}`.",["1486"],"Unsafe member access [key] on an `any` value.",["1487"],["1488"],["1489"],["1490"],"Unsafe member access [nameBlock] on an `any` value.",["1491"],["1492"],["1493"],["1494"],["1495"],["1496"],["1497"],"Unsafe member access .terminalTotalDifficulty on an `any` value.",["1498"],["1499"],["1500"],["1501"],["1502"],"Computed name [hf.name] resolves to an any value.",["1503"],["1504"],"no-param-reassign","Assignment to property of function parameter 'json'.","assignmentToFunctionParamProp",["1505"],["1506"],"Unsafe member access .message on an `any` value.",["1507"],["1508"],"Invalid type \"unknown\" of template literal expression.",["1509"],"Assignment to function parameter 'a'.","assignmentToFunctionParam",["1510"],"prefer-destructuring","Use array destructuring.","preferDestructuring",["1511"],["1512"],["1513"],["1514"],["1515"],["1516"],["1517","1518"],["1519","1520"],["1521","1522"],["1523","1524"],["1525","1526"],"'opts' is assigned a value but never used.",["1527","1528"],["1529","1530"],["1531","1532"],["1533"],"@typescript-eslint/prefer-for-of","Expected a `for-of` loop instead of a `for` loop with this simple iteration.","ForStatement","preferForOf",["1534"],"no-unused-expressions","Expected an assignment or function call and instead saw an expression.","ExpressionStatement","unusedExpression",["1535"],"@typescript-eslint/no-unused-expressions",["1536"],["1537"],"@typescript-eslint/unbound-method","Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.","unboundWithoutThisAnnotation",["1538"],"Expected 'this' to be used by class method '_ecsign'.",["1539"],"@typescript-eslint/no-empty-function","Unexpected empty static method 'fromSerializedTx'.",["1540"],"Unexpected empty static method 'fromTxData'.",["1541"],"tsdoc-code-span-missing-delimiter: The code span is missing its closing backtick","tsdoc-code-span-missing-delimiter",["1542","1543"],["1544","1545"],"no-use-before-define","'FeeMarketEIP1559Transaction' was used before it was defined.","usedBeforeDefined",["1546"],"Unsafe argument of type `any` assigned to a parameter of type `FeeMarketEIP1559ValuesArray`.","TSAsExpression",["1547"],["1548","1549"],["1550","1551"],"'AccessListEIP2930Transaction' was used before it was defined.",["1552"],"Unsafe argument of type `any` assigned to a parameter of type `AccessListEIP2930ValuesArray`.",["1553"],["1554","1555"],"'Transaction' was used before it was defined.",["1556"],"no-lonely-if","Unexpected if as the only statement in an else block.","IfStatement","unexpectedLonelyIf",["1557"],"@typescript-eslint/no-extraneous-class","Unexpected class with only static properties.","onlyStatic",["1558"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor",["1559"],"Unexpected empty constructor.",["1560"],"@typescript-eslint/consistent-type-assertions","Use 'as AccessListEIP2930TxData' instead of '<AccessListEIP2930TxData>'.","TSTypeAssertion","as",["1561"],"Use 'as FeeMarketEIP1559TxData' instead of '<FeeMarketEIP1559TxData>'.",["1562"],"require-extensions/require-extensions","Relative imports and exports must end with .js","ImportDeclaration",{"range":"1563","text":"1564"},["1565"],["1566"],["1567"],["1568"],["1569","1570"],["1571","1572"],["1573"],["1574"],["1575"],["1576"],["1577"],"Unsafe member access [2] on an `any` value.",["1578"],"Use 'as any' instead of '<any>'.",["1579"],["1580"],["1581"],"Use 'as Uint8Array' instead of '<Uint8Array>'.",["1582"],"Unsafe member access [0] on an `any` value.",["1583"],["1584"],"@typescript-eslint/prefer-optional-chain","Prefer using an optional chain expression instead, as it's more concise and easier to read.","preferOptionalChain",["1585"],["1586"],"Unsafe member access [1] on an `any` value.",["1587"],["1588"],["1589"],["1590"],["1591"],["1592","1593"],["1594"],"import/no-extraneous-dependencies","'web3-eth-accounts' should be listed in the project's dependencies. Run 'npm i -S web3-eth-accounts' to add it",["1595"],"'web3-hardhat-plugin' should be listed in the project's dependencies. Run 'npm i -S web3-hardhat-plugin' to add it",["1596"],"'web3-eth' should be listed in the project's dependencies. Run 'npm i -S web3-eth' to add it",["1597"],"'web3-core' should be listed in the project's dependencies. Run 'npm i -S web3-core' to add it",["1598"],"'web3-eth-personal' should be listed in the project's dependencies. Run 'npm i -S web3-eth-personal' to add it",["1599"],"'web3' should be listed in the project's dependencies. Run 'npm i -S web3' to add it",["1600"],"'web3-eth-contract' should be listed in the project's dependencies. Run 'npm i -S web3-eth-contract' to add it",["1601"],"'web3-providers-http' should be listed in the project's dependencies. Run 'npm i -S web3-providers-http' to add it",["1602"],"@typescript-eslint/ban-ts-comment","Include a description after the \"@ts-expect-error\" directive to explain why the @ts-expect-error is necessary. The description must be 3 characters or longer.","Line","tsDirectiveCommentRequiresDescription",["1603"],"ConditionalExpression",["1604"],["1605"],"no-plusplus","Unary operator '++' used.","UpdateExpression","unexpectedUnaryOp",["1606"],"Assignment to function parameter 'currentAttempt'.",["1607"],"no-await-in-loop","Unexpected `await` inside a loop.","AwaitExpression","unexpectedAwait",["1608"],["1609"],["1610"],"jest/no-standalone-expect","Expect must be inside of a test block.","unexpectedExpect",["1611"],["1612"],["1613"],["1614"],["1615"],["1616"],"jest/expect-expect","Test has no assertions","noAssertions","tsdoc-characters-after-block-tag: The token \"@jest\" looks like a TSDoc tag but contains an invalid character \"-\"; if it is not a tag, use a backslash to escape the \"@\"","tsdoc-characters-after-block-tag","header/header","incorrect header",{"range":"1617","text":"1618"},["1619"],"import/first","Import in body of module; reorder to top.",{"range":"1620","text":"1621"},["1622"],{"range":"1623","text":"1621"},["1624"],{"range":"1625","text":"1621"},["1626"],{"range":"1627","text":"1621"},["1628"],{"range":"1629","text":"1621"},["1630"],{"range":"1631","text":"1632"},["1633"],"no-new","Do not use 'new' for side effects.","noNewStatement",["1634"],["1635"],"Unexpected empty arrow function.",["1636"],["1637"],["1638"],["1639"],["1640"],["1641"],["1642"],["1643"],["1644"],["1645"],"'isHardforkBlock' is deprecated. ",["1646"],["1647"],["1648"],["1649"],"'isNextHardforkBlock' is deprecated. ",["1650"],["1651"],["1652"],["1653"],["1654"],["1655"],["1656"],["1657"],["1658"],["1659"],["1660"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside",["1661"],"Assignment to property of function parameter 'hf'.",["1662"],["1663"],["1664"],"Async arrow function has no 'await' expression.",["1665"],["1666"],["1667"],["1668"],["1669"],["1670"],["1671"],"Assignment to function parameter 'acc'.",["1672"],["1673"],"@typescript-eslint/no-shadow","'common' is already declared in the upper scope on line 36 column 7.","noShadow",["1674"],"jest/no-conditional-expect","Avoid calling `expect` conditionally`","conditionalExpect",["1675"],["1676"],["1677"],["1678"],["1679"],["1680"],["1681"],["1682"],["1683"],["1684"],"Assignment to property of function parameter 'current'.",["1685"],"no-multi-assign","Unexpected chained assignment.","unexpectedChain",["1686"],"Assignment to function parameter 'seed'.",["1687"],"Unexpected use of '^'.",["1688"],["1689"],"Unexpected use of '|'.",["1690"],"Unexpected use of '^='.",["1691"],["1692"],["1693"],["1694"],["1695"],["1696"],["1697"],["1698"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase",["1699"],["1700"],["1701"],["1702"],["1703"],["1704"],["1705"],["1706"],["1707"],["1708"],["1709"],["1710"],["1711"],["1712"],["1713"],["1714"],["1715"],["1716"],["1717"],{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"messageId":"1719","fix":"1720","desc":"1721"},{"messageId":"1722","fix":"1723","desc":"1724"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"messageId":"1719","fix":"1725","desc":"1721"},{"messageId":"1722","fix":"1726","desc":"1724"},{"messageId":"1719","fix":"1727","desc":"1721"},{"messageId":"1722","fix":"1728","desc":"1724"},{"messageId":"1719","fix":"1729","desc":"1721"},{"messageId":"1722","fix":"1730","desc":"1724"},{"messageId":"1719","fix":"1731","desc":"1721"},{"messageId":"1722","fix":"1732","desc":"1724"},{"messageId":"1719","fix":"1733","desc":"1721"},{"messageId":"1722","fix":"1734","desc":"1724"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"messageId":"1735","fix":"1736","desc":"1737"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"messageId":"1735","fix":"1738","desc":"1737"},{"kind":"1718","justification":"1621"},{"messageId":"1735","fix":"1739","desc":"1737"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"messageId":"1719","fix":"1740","desc":"1721"},{"messageId":"1722","fix":"1741","desc":"1724"},{"messageId":"1719","fix":"1742","desc":"1721"},{"messageId":"1722","fix":"1743","desc":"1724"},{"messageId":"1719","fix":"1744","desc":"1721"},{"messageId":"1722","fix":"1745","desc":"1724"},{"messageId":"1719","fix":"1746","desc":"1721"},{"messageId":"1722","fix":"1747","desc":"1724"},{"messageId":"1719","fix":"1748","desc":"1721"},{"messageId":"1722","fix":"1749","desc":"1724"},{"messageId":"1719","fix":"1750","desc":"1721"},{"messageId":"1722","fix":"1751","desc":"1724"},{"messageId":"1719","fix":"1752","desc":"1721"},{"messageId":"1722","fix":"1753","desc":"1724"},{"messageId":"1719","fix":"1754","desc":"1721"},{"messageId":"1722","fix":"1755","desc":"1724"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"messageId":"1719","fix":"1756","desc":"1721"},{"messageId":"1722","fix":"1757","desc":"1724"},{"messageId":"1719","fix":"1758","desc":"1721"},{"messageId":"1722","fix":"1759","desc":"1724"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"messageId":"1719","fix":"1760","desc":"1721"},{"messageId":"1722","fix":"1761","desc":"1724"},{"messageId":"1719","fix":"1762","desc":"1721"},{"messageId":"1722","fix":"1763","desc":"1724"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"messageId":"1719","fix":"1764","desc":"1721"},{"messageId":"1722","fix":"1765","desc":"1724"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},[882,899],"'../common/types.js'",{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"messageId":"1719","fix":"1766","desc":"1721"},{"messageId":"1722","fix":"1767","desc":"1724"},{"messageId":"1719","fix":"1768","desc":"1721"},{"messageId":"1722","fix":"1769","desc":"1724"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"messageId":"1770","fix":"1771","desc":"1772"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"messageId":"1719","fix":"1773","desc":"1721"},{"messageId":"1722","fix":"1774","desc":"1724"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},[0,35],"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n",{"kind":"1718","justification":"1621"},[1328,1328],"",{"kind":"1718","justification":"1621"},[1394,1394],{"kind":"1718","justification":"1621"},[1598,1598],{"kind":"1718","justification":"1621"},[1980,1980],{"kind":"1718","justification":"1621"},[2050,2050],{"kind":"1718","justification":"1621"},[0,2095],"/**\n * @jest-environment jsdom\n */\n\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n// this file contains the unit test for the event emitter in the DOM environment\n// it is executed in the jsdom environment (see \"@jest-environment jsdom\" in the top comment of this file)\n\n// ignore the following rule to allow keeping `@jest-environment jsdom` on top:\n// eslint-disable-next-line header/header\nimport { TextEncoder } from 'util';\nimport crypto from 'crypto';\n\n/* eslint-disable import/first */\nimport { Address } from 'web3-types';\nimport { Web3ValidatorError, isHexStrict } from 'web3-validator';\nimport {\n\tcreate,\n\tdecrypt,\n\tencrypt,\n\thashMessage,\n\tprivateKeyToAccount,\n\tprivateKeyToAddress,\n\trecover,\n\trecoverTransaction,\n\tsign,\n\tsignTransaction,\n\tprivateKeyToPublicKey,\n} from '../../src/account';\nimport {\n\tinvalidDecryptData,\n\tinvalidEncryptData,\n\tinvalidKeyStore,\n\tinvalidPrivateKeytoAccountData,\n\tinvalidPrivateKeyToAddressData,\n\tsignatureRecoverData,\n\ttransactionsTestData,\n\tvalidDecryptData,\n\tvalidEncryptData,\n\tvalidHashMessageData,\n\tvalidPrivateKeytoAccountData,\n\tvalidPrivateKeyToAddressData,\n\tvalidPrivateKeyToPublicKeyData,\n\tvalidRecover,\n} from '../fixtures/account';\nimport { TransactionFactory } from '../../src/tx/transactionFactory';\nimport { TxData } from '../../src/tx/types';\n// polyfill for jsdom\nglobal.TextEncoder = TextEncoder;\n// @ts-expect-error \"Cannot assign to 'subtle' because it is a read-only property.\"\nglobal.crypto.subtle = crypto.webcrypto.subtle;",{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"messageId":"1775","fix":"1776","desc":"1777"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"messageId":"1775","fix":"1778","desc":"1777"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"messageId":"1775","fix":"1779","desc":"1777"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"messageId":"1775","fix":"1780","desc":"1777"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},{"kind":"1718","justification":"1621"},"directive","suggestUnknown",{"range":"1781","text":"1782"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"1781","text":"1783"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"1784","text":"1782"},{"range":"1784","text":"1783"},{"range":"1785","text":"1782"},{"range":"1785","text":"1783"},{"range":"1786","text":"1782"},{"range":"1786","text":"1783"},{"range":"1787","text":"1782"},{"range":"1787","text":"1783"},{"range":"1788","text":"1782"},{"range":"1788","text":"1783"},"addRadixParameter10",{"range":"1789","text":"1790"},"Add radix parameter `10` for parsing decimal numbers.",{"range":"1791","text":"1790"},{"range":"1792","text":"1790"},{"range":"1793","text":"1782"},{"range":"1793","text":"1783"},{"range":"1794","text":"1782"},{"range":"1794","text":"1783"},{"range":"1795","text":"1782"},{"range":"1795","text":"1783"},{"range":"1796","text":"1782"},{"range":"1796","text":"1783"},{"range":"1797","text":"1782"},{"range":"1797","text":"1783"},{"range":"1798","text":"1782"},{"range":"1798","text":"1783"},{"range":"1799","text":"1782"},{"range":"1799","text":"1783"},{"range":"1800","text":"1782"},{"range":"1800","text":"1783"},{"range":"1801","text":"1782"},{"range":"1801","text":"1783"},{"range":"1802","text":"1782"},{"range":"1802","text":"1783"},{"range":"1803","text":"1782"},{"range":"1803","text":"1783"},{"range":"1804","text":"1782"},{"range":"1804","text":"1783"},{"range":"1805","text":"1782"},{"range":"1805","text":"1783"},{"range":"1806","text":"1782"},{"range":"1806","text":"1783"},{"range":"1807","text":"1782"},{"range":"1807","text":"1783"},"optionalChainSuggest",{"range":"1808","text":"1809"},"Change to an optional chain.",{"range":"1810","text":"1782"},{"range":"1810","text":"1783"},"suggestOptionalChain",{"range":"1811","text":"1812"},"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.",{"range":"1813","text":"1812"},{"range":"1814","text":"1815"},{"range":"1816","text":"1815"},[6036,6039],"unknown","never",[2720,2723],[2950,2953],[9575,9578],[10297,10300],[10738,10741],[3670,3670],", 10",[4452,4452],[4599,4599],[9926,9929],[16211,16214],[17146,17149],[17261,17264],[17360,17363],[18370,18373],[18517,18520],[18655,18658],[3648,3651],[11825,11828],[3572,3575],[10806,10809],[10009,10012],[3322,3325],[4289,4292],[4788,4803],"item?.[1]",[3379,3382],[1364,1365],"?.",[10554,10555],[8103,8104],"?",[3805,3806]]